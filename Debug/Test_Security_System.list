
Test_Security_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017c14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007dbc  08017da4  08017da4  00027da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801fb60  0801fb60  000300a4  2**0
                  CONTENTS
  4 .ARM          00000008  0801fb60  0801fb60  0002fb60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801fb68  0801fb68  000300a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801fb68  0801fb68  0002fb68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801fb6c  0801fb6c  0002fb6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0801fb70  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00010e20  200000a4  0801fc14  000300a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20010ec4  0801fc14  00030ec4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00040a8f  00000000  00000000  000300d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000078bd  00000000  00000000  00070b63  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002048  00000000  00000000  00078420  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ea0  00000000  00000000  0007a468  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00031c9f  00000000  00000000  0007c308  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002a298  00000000  00000000  000adfa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ed927  00000000  00000000  000d823f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c5b66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000088d0  00000000  00000000  001c5be4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a4 	.word	0x200000a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017d8c 	.word	0x08017d8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	08017d8c 	.word	0x08017d8c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <AesInitialise>:
    (
        AesContext*         Context,                // [out]
        void const*         Key,                    // [in]
        uint32_t            KeySize                 // [in]
    )
{
 8000580:	b480      	push	{r7}
 8000582:	b08b      	sub	sp, #44	; 0x2c
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
    uint8_t const*  key = Key;
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	61bb      	str	r3, [r7, #24]
    uint32_t*       rrk;

    #define SETUP_MIX( Value ) \
        ( (Te4_3[BYTE(Value, 2)]) ^ (Te4_2[BYTE(Value, 1)]) ^ (Te4_1[BYTE(Value, 0)]) ^ (Te4_0[BYTE(Value, 3)]) )

    Context->Nr = 10 + ((KeySize/8)-2)*2;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	08db      	lsrs	r3, r3, #3
 8000594:	3303      	adds	r3, #3
 8000596:	005a      	lsls	r2, r3, #1
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0

    // Setup the forward key
    i  = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	627b      	str	r3, [r7, #36]	; 0x24
    rk = Context->eK;
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	623b      	str	r3, [r7, #32]

    LOAD32H( rk[0], key );
 80005a6:	69bb      	ldr	r3, [r7, #24]
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	061a      	lsls	r2, r3, #24
 80005ac:	69bb      	ldr	r3, [r7, #24]
 80005ae:	3301      	adds	r3, #1
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	041b      	lsls	r3, r3, #16
 80005b4:	431a      	orrs	r2, r3
 80005b6:	69bb      	ldr	r3, [r7, #24]
 80005b8:	3302      	adds	r3, #2
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	021b      	lsls	r3, r3, #8
 80005be:	4313      	orrs	r3, r2
 80005c0:	69ba      	ldr	r2, [r7, #24]
 80005c2:	3203      	adds	r2, #3
 80005c4:	7812      	ldrb	r2, [r2, #0]
 80005c6:	431a      	orrs	r2, r3
 80005c8:	6a3b      	ldr	r3, [r7, #32]
 80005ca:	601a      	str	r2, [r3, #0]
    LOAD32H( rk[1], key + 4 );
 80005cc:	69bb      	ldr	r3, [r7, #24]
 80005ce:	3304      	adds	r3, #4
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	061a      	lsls	r2, r3, #24
 80005d4:	69bb      	ldr	r3, [r7, #24]
 80005d6:	3305      	adds	r3, #5
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	041b      	lsls	r3, r3, #16
 80005dc:	431a      	orrs	r2, r3
 80005de:	69bb      	ldr	r3, [r7, #24]
 80005e0:	3306      	adds	r3, #6
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	021b      	lsls	r3, r3, #8
 80005e6:	431a      	orrs	r2, r3
 80005e8:	69bb      	ldr	r3, [r7, #24]
 80005ea:	3307      	adds	r3, #7
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	4619      	mov	r1, r3
 80005f0:	6a3b      	ldr	r3, [r7, #32]
 80005f2:	3304      	adds	r3, #4
 80005f4:	430a      	orrs	r2, r1
 80005f6:	601a      	str	r2, [r3, #0]
    LOAD32H( rk[2], key + 8 );
 80005f8:	69bb      	ldr	r3, [r7, #24]
 80005fa:	3308      	adds	r3, #8
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	061a      	lsls	r2, r3, #24
 8000600:	69bb      	ldr	r3, [r7, #24]
 8000602:	3309      	adds	r3, #9
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	041b      	lsls	r3, r3, #16
 8000608:	431a      	orrs	r2, r3
 800060a:	69bb      	ldr	r3, [r7, #24]
 800060c:	330a      	adds	r3, #10
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	021b      	lsls	r3, r3, #8
 8000612:	431a      	orrs	r2, r3
 8000614:	69bb      	ldr	r3, [r7, #24]
 8000616:	330b      	adds	r3, #11
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	4619      	mov	r1, r3
 800061c:	6a3b      	ldr	r3, [r7, #32]
 800061e:	3308      	adds	r3, #8
 8000620:	430a      	orrs	r2, r1
 8000622:	601a      	str	r2, [r3, #0]
    LOAD32H( rk[3], key + 12 );
 8000624:	69bb      	ldr	r3, [r7, #24]
 8000626:	330c      	adds	r3, #12
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	061a      	lsls	r2, r3, #24
 800062c:	69bb      	ldr	r3, [r7, #24]
 800062e:	330d      	adds	r3, #13
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	041b      	lsls	r3, r3, #16
 8000634:	431a      	orrs	r2, r3
 8000636:	69bb      	ldr	r3, [r7, #24]
 8000638:	330e      	adds	r3, #14
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	021b      	lsls	r3, r3, #8
 800063e:	431a      	orrs	r2, r3
 8000640:	69bb      	ldr	r3, [r7, #24]
 8000642:	330f      	adds	r3, #15
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	4619      	mov	r1, r3
 8000648:	6a3b      	ldr	r3, [r7, #32]
 800064a:	330c      	adds	r3, #12
 800064c:	430a      	orrs	r2, r1
 800064e:	601a      	str	r2, [r3, #0]

    if( AES_KEY_SIZE_128 == KeySize )
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2b10      	cmp	r3, #16
 8000654:	d150      	bne.n	80006f8 <AesInitialise+0x178>
    {
        for( ;; )
        {
            temp  = rk[3];
 8000656:	6a3b      	ldr	r3, [r7, #32]
 8000658:	68db      	ldr	r3, [r3, #12]
 800065a:	617b      	str	r3, [r7, #20]
            rk[4] = rk[0] ^ SETUP_MIX( temp ) ^ rcon[i];
 800065c:	6a3b      	ldr	r3, [r7, #32]
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	0c1b      	lsrs	r3, r3, #16
 8000664:	b2db      	uxtb	r3, r3
 8000666:	496f      	ldr	r1, [pc, #444]	; (8000824 <AesInitialise+0x2a4>)
 8000668:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	0a1b      	lsrs	r3, r3, #8
 8000670:	b2db      	uxtb	r3, r3
 8000672:	486d      	ldr	r0, [pc, #436]	; (8000828 <AesInitialise+0x2a8>)
 8000674:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000678:	4059      	eors	r1, r3
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	486b      	ldr	r0, [pc, #428]	; (800082c <AesInitialise+0x2ac>)
 8000680:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000684:	4059      	eors	r1, r3
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	0e1b      	lsrs	r3, r3, #24
 800068a:	4869      	ldr	r0, [pc, #420]	; (8000830 <AesInitialise+0x2b0>)
 800068c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000690:	404b      	eors	r3, r1
 8000692:	ea82 0103 	eor.w	r1, r2, r3
 8000696:	4a67      	ldr	r2, [pc, #412]	; (8000834 <AesInitialise+0x2b4>)
 8000698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800069e:	6a3b      	ldr	r3, [r7, #32]
 80006a0:	3310      	adds	r3, #16
 80006a2:	404a      	eors	r2, r1
 80006a4:	601a      	str	r2, [r3, #0]
            rk[5] = rk[1] ^ rk[4];
 80006a6:	6a3b      	ldr	r3, [r7, #32]
 80006a8:	3304      	adds	r3, #4
 80006aa:	6819      	ldr	r1, [r3, #0]
 80006ac:	6a3b      	ldr	r3, [r7, #32]
 80006ae:	3310      	adds	r3, #16
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	6a3b      	ldr	r3, [r7, #32]
 80006b4:	3314      	adds	r3, #20
 80006b6:	404a      	eors	r2, r1
 80006b8:	601a      	str	r2, [r3, #0]
            rk[6] = rk[2] ^ rk[5];
 80006ba:	6a3b      	ldr	r3, [r7, #32]
 80006bc:	3308      	adds	r3, #8
 80006be:	6819      	ldr	r1, [r3, #0]
 80006c0:	6a3b      	ldr	r3, [r7, #32]
 80006c2:	3314      	adds	r3, #20
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	6a3b      	ldr	r3, [r7, #32]
 80006c8:	3318      	adds	r3, #24
 80006ca:	404a      	eors	r2, r1
 80006cc:	601a      	str	r2, [r3, #0]
            rk[7] = rk[3] ^ rk[6];
 80006ce:	6a3b      	ldr	r3, [r7, #32]
 80006d0:	330c      	adds	r3, #12
 80006d2:	6819      	ldr	r1, [r3, #0]
 80006d4:	6a3b      	ldr	r3, [r7, #32]
 80006d6:	3318      	adds	r3, #24
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	6a3b      	ldr	r3, [r7, #32]
 80006dc:	331c      	adds	r3, #28
 80006de:	404a      	eors	r2, r1
 80006e0:	601a      	str	r2, [r3, #0]
            i += 1;
 80006e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e4:	3301      	adds	r3, #1
 80006e6:	627b      	str	r3, [r7, #36]	; 0x24
            if( 10 == i )
 80006e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ea:	2b0a      	cmp	r3, #10
 80006ec:	f000 819c 	beq.w	8000a28 <AesInitialise+0x4a8>
            {
               break;
            }
            rk += 4;
 80006f0:	6a3b      	ldr	r3, [r7, #32]
 80006f2:	3310      	adds	r3, #16
 80006f4:	623b      	str	r3, [r7, #32]
            temp  = rk[3];
 80006f6:	e7ae      	b.n	8000656 <AesInitialise+0xd6>
        }
    }
    else if( AES_KEY_SIZE_192 == KeySize )
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2b18      	cmp	r3, #24
 80006fc:	f040 809c 	bne.w	8000838 <AesInitialise+0x2b8>
    {
        LOAD32H( rk[4], key + 16 );
 8000700:	69bb      	ldr	r3, [r7, #24]
 8000702:	3310      	adds	r3, #16
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	061a      	lsls	r2, r3, #24
 8000708:	69bb      	ldr	r3, [r7, #24]
 800070a:	3311      	adds	r3, #17
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	041b      	lsls	r3, r3, #16
 8000710:	431a      	orrs	r2, r3
 8000712:	69bb      	ldr	r3, [r7, #24]
 8000714:	3312      	adds	r3, #18
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	021b      	lsls	r3, r3, #8
 800071a:	431a      	orrs	r2, r3
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	3313      	adds	r3, #19
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	4619      	mov	r1, r3
 8000724:	6a3b      	ldr	r3, [r7, #32]
 8000726:	3310      	adds	r3, #16
 8000728:	430a      	orrs	r2, r1
 800072a:	601a      	str	r2, [r3, #0]
        LOAD32H( rk[5], key + 20 );
 800072c:	69bb      	ldr	r3, [r7, #24]
 800072e:	3314      	adds	r3, #20
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	061a      	lsls	r2, r3, #24
 8000734:	69bb      	ldr	r3, [r7, #24]
 8000736:	3315      	adds	r3, #21
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	041b      	lsls	r3, r3, #16
 800073c:	431a      	orrs	r2, r3
 800073e:	69bb      	ldr	r3, [r7, #24]
 8000740:	3316      	adds	r3, #22
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	021b      	lsls	r3, r3, #8
 8000746:	431a      	orrs	r2, r3
 8000748:	69bb      	ldr	r3, [r7, #24]
 800074a:	3317      	adds	r3, #23
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	4619      	mov	r1, r3
 8000750:	6a3b      	ldr	r3, [r7, #32]
 8000752:	3314      	adds	r3, #20
 8000754:	430a      	orrs	r2, r1
 8000756:	601a      	str	r2, [r3, #0]
        for( ;; )
        {
            temp = rk[5];
 8000758:	6a3b      	ldr	r3, [r7, #32]
 800075a:	695b      	ldr	r3, [r3, #20]
 800075c:	617b      	str	r3, [r7, #20]
            rk[6] = rk[0] ^ SETUP_MIX( temp ) ^ rcon[i];
 800075e:	6a3b      	ldr	r3, [r7, #32]
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	0c1b      	lsrs	r3, r3, #16
 8000766:	b2db      	uxtb	r3, r3
 8000768:	492e      	ldr	r1, [pc, #184]	; (8000824 <AesInitialise+0x2a4>)
 800076a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800076e:	697b      	ldr	r3, [r7, #20]
 8000770:	0a1b      	lsrs	r3, r3, #8
 8000772:	b2db      	uxtb	r3, r3
 8000774:	482c      	ldr	r0, [pc, #176]	; (8000828 <AesInitialise+0x2a8>)
 8000776:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800077a:	4059      	eors	r1, r3
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	482a      	ldr	r0, [pc, #168]	; (800082c <AesInitialise+0x2ac>)
 8000782:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000786:	4059      	eors	r1, r3
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	0e1b      	lsrs	r3, r3, #24
 800078c:	4828      	ldr	r0, [pc, #160]	; (8000830 <AesInitialise+0x2b0>)
 800078e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000792:	404b      	eors	r3, r1
 8000794:	ea82 0103 	eor.w	r1, r2, r3
 8000798:	4a26      	ldr	r2, [pc, #152]	; (8000834 <AesInitialise+0x2b4>)
 800079a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800079c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007a0:	6a3b      	ldr	r3, [r7, #32]
 80007a2:	3318      	adds	r3, #24
 80007a4:	404a      	eors	r2, r1
 80007a6:	601a      	str	r2, [r3, #0]
            rk[7] = rk[1] ^ rk[6];
 80007a8:	6a3b      	ldr	r3, [r7, #32]
 80007aa:	3304      	adds	r3, #4
 80007ac:	6819      	ldr	r1, [r3, #0]
 80007ae:	6a3b      	ldr	r3, [r7, #32]
 80007b0:	3318      	adds	r3, #24
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	6a3b      	ldr	r3, [r7, #32]
 80007b6:	331c      	adds	r3, #28
 80007b8:	404a      	eors	r2, r1
 80007ba:	601a      	str	r2, [r3, #0]
            rk[8] = rk[2] ^ rk[7];
 80007bc:	6a3b      	ldr	r3, [r7, #32]
 80007be:	3308      	adds	r3, #8
 80007c0:	6819      	ldr	r1, [r3, #0]
 80007c2:	6a3b      	ldr	r3, [r7, #32]
 80007c4:	331c      	adds	r3, #28
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	6a3b      	ldr	r3, [r7, #32]
 80007ca:	3320      	adds	r3, #32
 80007cc:	404a      	eors	r2, r1
 80007ce:	601a      	str	r2, [r3, #0]
            rk[9] = rk[3] ^ rk[8];
 80007d0:	6a3b      	ldr	r3, [r7, #32]
 80007d2:	330c      	adds	r3, #12
 80007d4:	6819      	ldr	r1, [r3, #0]
 80007d6:	6a3b      	ldr	r3, [r7, #32]
 80007d8:	3320      	adds	r3, #32
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	6a3b      	ldr	r3, [r7, #32]
 80007de:	3324      	adds	r3, #36	; 0x24
 80007e0:	404a      	eors	r2, r1
 80007e2:	601a      	str	r2, [r3, #0]
            i += 1;
 80007e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e6:	3301      	adds	r3, #1
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
            if( 8 == i )
 80007ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ec:	2b08      	cmp	r3, #8
 80007ee:	f000 811d 	beq.w	8000a2c <AesInitialise+0x4ac>
            {
                break;
            }
            rk[10] = rk[4] ^ rk[9];
 80007f2:	6a3b      	ldr	r3, [r7, #32]
 80007f4:	3310      	adds	r3, #16
 80007f6:	6819      	ldr	r1, [r3, #0]
 80007f8:	6a3b      	ldr	r3, [r7, #32]
 80007fa:	3324      	adds	r3, #36	; 0x24
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	6a3b      	ldr	r3, [r7, #32]
 8000800:	3328      	adds	r3, #40	; 0x28
 8000802:	404a      	eors	r2, r1
 8000804:	601a      	str	r2, [r3, #0]
            rk[11] = rk[5] ^ rk[10];
 8000806:	6a3b      	ldr	r3, [r7, #32]
 8000808:	3314      	adds	r3, #20
 800080a:	6819      	ldr	r1, [r3, #0]
 800080c:	6a3b      	ldr	r3, [r7, #32]
 800080e:	3328      	adds	r3, #40	; 0x28
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	6a3b      	ldr	r3, [r7, #32]
 8000814:	332c      	adds	r3, #44	; 0x2c
 8000816:	404a      	eors	r2, r1
 8000818:	601a      	str	r2, [r3, #0]
            rk += 6;
 800081a:	6a3b      	ldr	r3, [r7, #32]
 800081c:	3318      	adds	r3, #24
 800081e:	623b      	str	r3, [r7, #32]
            temp = rk[5];
 8000820:	e79a      	b.n	8000758 <AesInitialise+0x1d8>
 8000822:	bf00      	nop
 8000824:	0801d944 	.word	0x0801d944
 8000828:	0801d544 	.word	0x0801d544
 800082c:	0801d144 	.word	0x0801d144
 8000830:	0801cd44 	.word	0x0801cd44
 8000834:	0801f944 	.word	0x0801f944
        }
    }
    else if( AES_KEY_SIZE_256 == KeySize )
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2b20      	cmp	r3, #32
 800083c:	f040 80f1 	bne.w	8000a22 <AesInitialise+0x4a2>
    {
        LOAD32H( rk[4], key + 16 );
 8000840:	69bb      	ldr	r3, [r7, #24]
 8000842:	3310      	adds	r3, #16
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	061a      	lsls	r2, r3, #24
 8000848:	69bb      	ldr	r3, [r7, #24]
 800084a:	3311      	adds	r3, #17
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	041b      	lsls	r3, r3, #16
 8000850:	431a      	orrs	r2, r3
 8000852:	69bb      	ldr	r3, [r7, #24]
 8000854:	3312      	adds	r3, #18
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	021b      	lsls	r3, r3, #8
 800085a:	431a      	orrs	r2, r3
 800085c:	69bb      	ldr	r3, [r7, #24]
 800085e:	3313      	adds	r3, #19
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	4619      	mov	r1, r3
 8000864:	6a3b      	ldr	r3, [r7, #32]
 8000866:	3310      	adds	r3, #16
 8000868:	430a      	orrs	r2, r1
 800086a:	601a      	str	r2, [r3, #0]
        LOAD32H( rk[5], key + 20 );
 800086c:	69bb      	ldr	r3, [r7, #24]
 800086e:	3314      	adds	r3, #20
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	061a      	lsls	r2, r3, #24
 8000874:	69bb      	ldr	r3, [r7, #24]
 8000876:	3315      	adds	r3, #21
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	041b      	lsls	r3, r3, #16
 800087c:	431a      	orrs	r2, r3
 800087e:	69bb      	ldr	r3, [r7, #24]
 8000880:	3316      	adds	r3, #22
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	021b      	lsls	r3, r3, #8
 8000886:	431a      	orrs	r2, r3
 8000888:	69bb      	ldr	r3, [r7, #24]
 800088a:	3317      	adds	r3, #23
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	4619      	mov	r1, r3
 8000890:	6a3b      	ldr	r3, [r7, #32]
 8000892:	3314      	adds	r3, #20
 8000894:	430a      	orrs	r2, r1
 8000896:	601a      	str	r2, [r3, #0]
        LOAD32H( rk[6], key + 24 );
 8000898:	69bb      	ldr	r3, [r7, #24]
 800089a:	3318      	adds	r3, #24
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	061a      	lsls	r2, r3, #24
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	3319      	adds	r3, #25
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	041b      	lsls	r3, r3, #16
 80008a8:	431a      	orrs	r2, r3
 80008aa:	69bb      	ldr	r3, [r7, #24]
 80008ac:	331a      	adds	r3, #26
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	021b      	lsls	r3, r3, #8
 80008b2:	431a      	orrs	r2, r3
 80008b4:	69bb      	ldr	r3, [r7, #24]
 80008b6:	331b      	adds	r3, #27
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	4619      	mov	r1, r3
 80008bc:	6a3b      	ldr	r3, [r7, #32]
 80008be:	3318      	adds	r3, #24
 80008c0:	430a      	orrs	r2, r1
 80008c2:	601a      	str	r2, [r3, #0]
        LOAD32H( rk[7], key + 28 );
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	331c      	adds	r3, #28
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	061a      	lsls	r2, r3, #24
 80008cc:	69bb      	ldr	r3, [r7, #24]
 80008ce:	331d      	adds	r3, #29
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	041b      	lsls	r3, r3, #16
 80008d4:	431a      	orrs	r2, r3
 80008d6:	69bb      	ldr	r3, [r7, #24]
 80008d8:	331e      	adds	r3, #30
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	021b      	lsls	r3, r3, #8
 80008de:	431a      	orrs	r2, r3
 80008e0:	69bb      	ldr	r3, [r7, #24]
 80008e2:	331f      	adds	r3, #31
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	4619      	mov	r1, r3
 80008e8:	6a3b      	ldr	r3, [r7, #32]
 80008ea:	331c      	adds	r3, #28
 80008ec:	430a      	orrs	r2, r1
 80008ee:	601a      	str	r2, [r3, #0]
        for( ;; )
        {
            temp = rk[7];
 80008f0:	6a3b      	ldr	r3, [r7, #32]
 80008f2:	69db      	ldr	r3, [r3, #28]
 80008f4:	617b      	str	r3, [r7, #20]
            rk[8]  = rk[0] ^ SETUP_MIX( temp ) ^ rcon[i];
 80008f6:	6a3b      	ldr	r3, [r7, #32]
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	0c1b      	lsrs	r3, r3, #16
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	4963      	ldr	r1, [pc, #396]	; (8000a90 <AesInitialise+0x510>)
 8000902:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	0a1b      	lsrs	r3, r3, #8
 800090a:	b2db      	uxtb	r3, r3
 800090c:	4861      	ldr	r0, [pc, #388]	; (8000a94 <AesInitialise+0x514>)
 800090e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000912:	4059      	eors	r1, r3
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	b2db      	uxtb	r3, r3
 8000918:	485f      	ldr	r0, [pc, #380]	; (8000a98 <AesInitialise+0x518>)
 800091a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800091e:	4059      	eors	r1, r3
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	0e1b      	lsrs	r3, r3, #24
 8000924:	485d      	ldr	r0, [pc, #372]	; (8000a9c <AesInitialise+0x51c>)
 8000926:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800092a:	404b      	eors	r3, r1
 800092c:	ea82 0103 	eor.w	r1, r2, r3
 8000930:	4a5b      	ldr	r2, [pc, #364]	; (8000aa0 <AesInitialise+0x520>)
 8000932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000934:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000938:	6a3b      	ldr	r3, [r7, #32]
 800093a:	3320      	adds	r3, #32
 800093c:	404a      	eors	r2, r1
 800093e:	601a      	str	r2, [r3, #0]
            rk[9]  = rk[1] ^ rk[8];
 8000940:	6a3b      	ldr	r3, [r7, #32]
 8000942:	3304      	adds	r3, #4
 8000944:	6819      	ldr	r1, [r3, #0]
 8000946:	6a3b      	ldr	r3, [r7, #32]
 8000948:	3320      	adds	r3, #32
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	6a3b      	ldr	r3, [r7, #32]
 800094e:	3324      	adds	r3, #36	; 0x24
 8000950:	404a      	eors	r2, r1
 8000952:	601a      	str	r2, [r3, #0]
            rk[10] = rk[2] ^ rk[9];
 8000954:	6a3b      	ldr	r3, [r7, #32]
 8000956:	3308      	adds	r3, #8
 8000958:	6819      	ldr	r1, [r3, #0]
 800095a:	6a3b      	ldr	r3, [r7, #32]
 800095c:	3324      	adds	r3, #36	; 0x24
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	6a3b      	ldr	r3, [r7, #32]
 8000962:	3328      	adds	r3, #40	; 0x28
 8000964:	404a      	eors	r2, r1
 8000966:	601a      	str	r2, [r3, #0]
            rk[11] = rk[3] ^ rk[10];
 8000968:	6a3b      	ldr	r3, [r7, #32]
 800096a:	330c      	adds	r3, #12
 800096c:	6819      	ldr	r1, [r3, #0]
 800096e:	6a3b      	ldr	r3, [r7, #32]
 8000970:	3328      	adds	r3, #40	; 0x28
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	6a3b      	ldr	r3, [r7, #32]
 8000976:	332c      	adds	r3, #44	; 0x2c
 8000978:	404a      	eors	r2, r1
 800097a:	601a      	str	r2, [r3, #0]
            i += 1;
 800097c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097e:	3301      	adds	r3, #1
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
            if( 7 == i )
 8000982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000984:	2b07      	cmp	r3, #7
 8000986:	d053      	beq.n	8000a30 <AesInitialise+0x4b0>
            {
                break;
            }
            temp = rk[11];
 8000988:	6a3b      	ldr	r3, [r7, #32]
 800098a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800098c:	617b      	str	r3, [r7, #20]
            rk[12] = rk[4] ^ SETUP_MIX( RORc( temp, 8 ) );
 800098e:	6a3b      	ldr	r3, [r7, #32]
 8000990:	3310      	adds	r3, #16
 8000992:	6819      	ldr	r1, [r3, #0]
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	ea4f 2333 	mov.w	r3, r3, ror #8
 800099a:	0c1b      	lsrs	r3, r3, #16
 800099c:	b2db      	uxtb	r3, r3
 800099e:	4a3c      	ldr	r2, [pc, #240]	; (8000a90 <AesInitialise+0x510>)
 80009a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	ea4f 2333 	mov.w	r3, r3, ror #8
 80009aa:	0a1b      	lsrs	r3, r3, #8
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	4839      	ldr	r0, [pc, #228]	; (8000a94 <AesInitialise+0x514>)
 80009b0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80009b4:	405a      	eors	r2, r3
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	ea4f 2333 	mov.w	r3, r3, ror #8
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	4836      	ldr	r0, [pc, #216]	; (8000a98 <AesInitialise+0x518>)
 80009c0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80009c4:	405a      	eors	r2, r3
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	ea4f 2333 	mov.w	r3, r3, ror #8
 80009cc:	0e1b      	lsrs	r3, r3, #24
 80009ce:	4833      	ldr	r0, [pc, #204]	; (8000a9c <AesInitialise+0x51c>)
 80009d0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80009d4:	405a      	eors	r2, r3
 80009d6:	6a3b      	ldr	r3, [r7, #32]
 80009d8:	3330      	adds	r3, #48	; 0x30
 80009da:	404a      	eors	r2, r1
 80009dc:	601a      	str	r2, [r3, #0]
            rk[13] = rk[5] ^ rk[12];
 80009de:	6a3b      	ldr	r3, [r7, #32]
 80009e0:	3314      	adds	r3, #20
 80009e2:	6819      	ldr	r1, [r3, #0]
 80009e4:	6a3b      	ldr	r3, [r7, #32]
 80009e6:	3330      	adds	r3, #48	; 0x30
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	6a3b      	ldr	r3, [r7, #32]
 80009ec:	3334      	adds	r3, #52	; 0x34
 80009ee:	404a      	eors	r2, r1
 80009f0:	601a      	str	r2, [r3, #0]
            rk[14] = rk[6] ^ rk[13];
 80009f2:	6a3b      	ldr	r3, [r7, #32]
 80009f4:	3318      	adds	r3, #24
 80009f6:	6819      	ldr	r1, [r3, #0]
 80009f8:	6a3b      	ldr	r3, [r7, #32]
 80009fa:	3334      	adds	r3, #52	; 0x34
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	6a3b      	ldr	r3, [r7, #32]
 8000a00:	3338      	adds	r3, #56	; 0x38
 8000a02:	404a      	eors	r2, r1
 8000a04:	601a      	str	r2, [r3, #0]
            rk[15] = rk[7] ^ rk[14];
 8000a06:	6a3b      	ldr	r3, [r7, #32]
 8000a08:	331c      	adds	r3, #28
 8000a0a:	6819      	ldr	r1, [r3, #0]
 8000a0c:	6a3b      	ldr	r3, [r7, #32]
 8000a0e:	3338      	adds	r3, #56	; 0x38
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	6a3b      	ldr	r3, [r7, #32]
 8000a14:	333c      	adds	r3, #60	; 0x3c
 8000a16:	404a      	eors	r2, r1
 8000a18:	601a      	str	r2, [r3, #0]
            rk += 8;
 8000a1a:	6a3b      	ldr	r3, [r7, #32]
 8000a1c:	3320      	adds	r3, #32
 8000a1e:	623b      	str	r3, [r7, #32]
            temp = rk[7];
 8000a20:	e766      	b.n	80008f0 <AesInitialise+0x370>
        }
    }
    else
    {
        return -1;
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295
 8000a26:	e0ee      	b.n	8000c06 <AesInitialise+0x686>
               break;
 8000a28:	bf00      	nop
 8000a2a:	e002      	b.n	8000a32 <AesInitialise+0x4b2>
                break;
 8000a2c:	bf00      	nop
 8000a2e:	e000      	b.n	8000a32 <AesInitialise+0x4b2>
                break;
 8000a30:	bf00      	nop
    }

    // Setup the inverse key now
    rk  = Context->dK;
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	33f0      	adds	r3, #240	; 0xf0
 8000a36:	623b      	str	r3, [r7, #32]
    rrk = Context->eK + (28 + KeySize) - 4;
 8000a38:	68fa      	ldr	r2, [r7, #12]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	3318      	adds	r3, #24
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	4413      	add	r3, r2
 8000a42:	61fb      	str	r3, [r7, #28]

    // Apply the inverse MixColumn transform to all round keys but the first and the last
    // Copy first
    *rk++ = *rrk++;
 8000a44:	69fa      	ldr	r2, [r7, #28]
 8000a46:	1d13      	adds	r3, r2, #4
 8000a48:	61fb      	str	r3, [r7, #28]
 8000a4a:	6a3b      	ldr	r3, [r7, #32]
 8000a4c:	1d19      	adds	r1, r3, #4
 8000a4e:	6239      	str	r1, [r7, #32]
 8000a50:	6812      	ldr	r2, [r2, #0]
 8000a52:	601a      	str	r2, [r3, #0]
    *rk++ = *rrk++;
 8000a54:	69fa      	ldr	r2, [r7, #28]
 8000a56:	1d13      	adds	r3, r2, #4
 8000a58:	61fb      	str	r3, [r7, #28]
 8000a5a:	6a3b      	ldr	r3, [r7, #32]
 8000a5c:	1d19      	adds	r1, r3, #4
 8000a5e:	6239      	str	r1, [r7, #32]
 8000a60:	6812      	ldr	r2, [r2, #0]
 8000a62:	601a      	str	r2, [r3, #0]
    *rk++ = *rrk++;
 8000a64:	69fa      	ldr	r2, [r7, #28]
 8000a66:	1d13      	adds	r3, r2, #4
 8000a68:	61fb      	str	r3, [r7, #28]
 8000a6a:	6a3b      	ldr	r3, [r7, #32]
 8000a6c:	1d19      	adds	r1, r3, #4
 8000a6e:	6239      	str	r1, [r7, #32]
 8000a70:	6812      	ldr	r2, [r2, #0]
 8000a72:	601a      	str	r2, [r3, #0]
    *rk   = *rrk;
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	6a3b      	ldr	r3, [r7, #32]
 8000a7a:	601a      	str	r2, [r3, #0]
    rk -= 3; rrk -= 3;
 8000a7c:	6a3b      	ldr	r3, [r7, #32]
 8000a7e:	3b0c      	subs	r3, #12
 8000a80:	623b      	str	r3, [r7, #32]
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	3b0c      	subs	r3, #12
 8000a86:	61fb      	str	r3, [r7, #28]

    for( i=1; i<Context->Nr; i++ )
 8000a88:	2301      	movs	r3, #1
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a8c:	e091      	b.n	8000bb2 <AesInitialise+0x632>
 8000a8e:	bf00      	nop
 8000a90:	0801d944 	.word	0x0801d944
 8000a94:	0801d544 	.word	0x0801d544
 8000a98:	0801d144 	.word	0x0801d144
 8000a9c:	0801cd44 	.word	0x0801cd44
 8000aa0:	0801f944 	.word	0x0801f944
    {
        rrk -= 4;
 8000aa4:	69fb      	ldr	r3, [r7, #28]
 8000aa6:	3b10      	subs	r3, #16
 8000aa8:	61fb      	str	r3, [r7, #28]
        rk += 4;
 8000aaa:	6a3b      	ldr	r3, [r7, #32]
 8000aac:	3310      	adds	r3, #16
 8000aae:	623b      	str	r3, [r7, #32]
        temp = rrk[0]; rk[0] = Tks0[BYTE(temp, 3)] ^ Tks1[BYTE(temp, 2)] ^ Tks2[BYTE(temp, 1)] ^ Tks3[BYTE(temp, 0)];
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	617b      	str	r3, [r7, #20]
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	0e1b      	lsrs	r3, r3, #24
 8000aba:	4a56      	ldr	r2, [pc, #344]	; (8000c14 <AesInitialise+0x694>)
 8000abc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	0c1b      	lsrs	r3, r3, #16
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	4954      	ldr	r1, [pc, #336]	; (8000c18 <AesInitialise+0x698>)
 8000ac8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000acc:	405a      	eors	r2, r3
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	0a1b      	lsrs	r3, r3, #8
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	4951      	ldr	r1, [pc, #324]	; (8000c1c <AesInitialise+0x69c>)
 8000ad6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ada:	405a      	eors	r2, r3
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	494f      	ldr	r1, [pc, #316]	; (8000c20 <AesInitialise+0x6a0>)
 8000ae2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ae6:	405a      	eors	r2, r3
 8000ae8:	6a3b      	ldr	r3, [r7, #32]
 8000aea:	601a      	str	r2, [r3, #0]
        temp = rrk[1]; rk[1] = Tks0[BYTE(temp, 3)] ^ Tks1[BYTE(temp, 2)] ^ Tks2[BYTE(temp, 1)] ^ Tks3[BYTE(temp, 0)];
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	617b      	str	r3, [r7, #20]
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	0e1b      	lsrs	r3, r3, #24
 8000af6:	4a47      	ldr	r2, [pc, #284]	; (8000c14 <AesInitialise+0x694>)
 8000af8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	0c1b      	lsrs	r3, r3, #16
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	4945      	ldr	r1, [pc, #276]	; (8000c18 <AesInitialise+0x698>)
 8000b04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b08:	405a      	eors	r2, r3
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	0a1b      	lsrs	r3, r3, #8
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	4942      	ldr	r1, [pc, #264]	; (8000c1c <AesInitialise+0x69c>)
 8000b12:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b16:	ea82 0103 	eor.w	r1, r2, r3
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	4a40      	ldr	r2, [pc, #256]	; (8000c20 <AesInitialise+0x6a0>)
 8000b20:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b24:	6a3b      	ldr	r3, [r7, #32]
 8000b26:	3304      	adds	r3, #4
 8000b28:	404a      	eors	r2, r1
 8000b2a:	601a      	str	r2, [r3, #0]
        temp = rrk[2]; rk[2] = Tks0[BYTE(temp, 3)] ^ Tks1[BYTE(temp, 2)] ^ Tks2[BYTE(temp, 1)] ^ Tks3[BYTE(temp, 0)];
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	0e1b      	lsrs	r3, r3, #24
 8000b36:	4a37      	ldr	r2, [pc, #220]	; (8000c14 <AesInitialise+0x694>)
 8000b38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	0c1b      	lsrs	r3, r3, #16
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	4935      	ldr	r1, [pc, #212]	; (8000c18 <AesInitialise+0x698>)
 8000b44:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b48:	405a      	eors	r2, r3
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	4932      	ldr	r1, [pc, #200]	; (8000c1c <AesInitialise+0x69c>)
 8000b52:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b56:	ea82 0103 	eor.w	r1, r2, r3
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	4a30      	ldr	r2, [pc, #192]	; (8000c20 <AesInitialise+0x6a0>)
 8000b60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b64:	6a3b      	ldr	r3, [r7, #32]
 8000b66:	3308      	adds	r3, #8
 8000b68:	404a      	eors	r2, r1
 8000b6a:	601a      	str	r2, [r3, #0]
        temp = rrk[3]; rk[3] = Tks0[BYTE(temp, 3)] ^ Tks1[BYTE(temp, 2)] ^ Tks2[BYTE(temp, 1)] ^ Tks3[BYTE(temp, 0)];
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	617b      	str	r3, [r7, #20]
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	0e1b      	lsrs	r3, r3, #24
 8000b76:	4a27      	ldr	r2, [pc, #156]	; (8000c14 <AesInitialise+0x694>)
 8000b78:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	0c1b      	lsrs	r3, r3, #16
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	4925      	ldr	r1, [pc, #148]	; (8000c18 <AesInitialise+0x698>)
 8000b84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b88:	405a      	eors	r2, r3
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	0a1b      	lsrs	r3, r3, #8
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	4922      	ldr	r1, [pc, #136]	; (8000c1c <AesInitialise+0x69c>)
 8000b92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b96:	ea82 0103 	eor.w	r1, r2, r3
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	4a20      	ldr	r2, [pc, #128]	; (8000c20 <AesInitialise+0x6a0>)
 8000ba0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ba4:	6a3b      	ldr	r3, [r7, #32]
 8000ba6:	330c      	adds	r3, #12
 8000ba8:	404a      	eors	r2, r1
 8000baa:	601a      	str	r2, [r3, #0]
    for( i=1; i<Context->Nr; i++ )
 8000bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bae:	3301      	adds	r3, #1
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8000bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	f4ff af72 	bcc.w	8000aa4 <AesInitialise+0x524>
    }

    // Copy last
    rrk -= 4;
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	3b10      	subs	r3, #16
 8000bc4:	61fb      	str	r3, [r7, #28]
    rk  += 4;
 8000bc6:	6a3b      	ldr	r3, [r7, #32]
 8000bc8:	3310      	adds	r3, #16
 8000bca:	623b      	str	r3, [r7, #32]
    *rk++ = *rrk++;
 8000bcc:	69fa      	ldr	r2, [r7, #28]
 8000bce:	1d13      	adds	r3, r2, #4
 8000bd0:	61fb      	str	r3, [r7, #28]
 8000bd2:	6a3b      	ldr	r3, [r7, #32]
 8000bd4:	1d19      	adds	r1, r3, #4
 8000bd6:	6239      	str	r1, [r7, #32]
 8000bd8:	6812      	ldr	r2, [r2, #0]
 8000bda:	601a      	str	r2, [r3, #0]
    *rk++ = *rrk++;
 8000bdc:	69fa      	ldr	r2, [r7, #28]
 8000bde:	1d13      	adds	r3, r2, #4
 8000be0:	61fb      	str	r3, [r7, #28]
 8000be2:	6a3b      	ldr	r3, [r7, #32]
 8000be4:	1d19      	adds	r1, r3, #4
 8000be6:	6239      	str	r1, [r7, #32]
 8000be8:	6812      	ldr	r2, [r2, #0]
 8000bea:	601a      	str	r2, [r3, #0]
    *rk++ = *rrk++;
 8000bec:	69fa      	ldr	r2, [r7, #28]
 8000bee:	1d13      	adds	r3, r2, #4
 8000bf0:	61fb      	str	r3, [r7, #28]
 8000bf2:	6a3b      	ldr	r3, [r7, #32]
 8000bf4:	1d19      	adds	r1, r3, #4
 8000bf6:	6239      	str	r1, [r7, #32]
 8000bf8:	6812      	ldr	r2, [r2, #0]
 8000bfa:	601a      	str	r2, [r3, #0]
    *rk   = *rrk;
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	6a3b      	ldr	r3, [r7, #32]
 8000c02:	601a      	str	r2, [r3, #0]

    #undef SETUP_MIX
    return 0;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	372c      	adds	r7, #44	; 0x2c
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	0801e944 	.word	0x0801e944
 8000c18:	0801ed44 	.word	0x0801ed44
 8000c1c:	0801f144 	.word	0x0801f144
 8000c20:	0801f544 	.word	0x0801f544

08000c24 <AesEncrypt>:
    (
        AesContext const*   Context,                    // [in]
        uint8_t const       Input [AES_BLOCK_SIZE],     // [in]
        uint8_t             Output [AES_BLOCK_SIZE]     // [out]
    )
{
 8000c24:	b480      	push	{r7}
 8000c26:	b08f      	sub	sp, #60	; 0x3c
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
    uint32_t        t2;
    uint32_t        t3;
    uint32_t const* rk;
    uint_fast32_t   r;

    rk = Context->eK;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24

    // Map BYTE array block to cipher state and add initial round key:
    LOAD32H( s0, Input );
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	061a      	lsls	r2, r3, #24
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	041b      	lsls	r3, r3, #16
 8000c42:	431a      	orrs	r2, r3
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	3302      	adds	r3, #2
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	021b      	lsls	r3, r3, #8
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	3203      	adds	r2, #3
 8000c52:	7812      	ldrb	r2, [r2, #0]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	637b      	str	r3, [r7, #52]	; 0x34
    LOAD32H( s1, Input + 4);
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	3304      	adds	r3, #4
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	061a      	lsls	r2, r3, #24
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	3305      	adds	r3, #5
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	041b      	lsls	r3, r3, #16
 8000c68:	431a      	orrs	r2, r3
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	3306      	adds	r3, #6
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	021b      	lsls	r3, r3, #8
 8000c72:	4313      	orrs	r3, r2
 8000c74:	68ba      	ldr	r2, [r7, #8]
 8000c76:	3207      	adds	r2, #7
 8000c78:	7812      	ldrb	r2, [r2, #0]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	633b      	str	r3, [r7, #48]	; 0x30
    LOAD32H( s2, Input + 8);
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	3308      	adds	r3, #8
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	061a      	lsls	r2, r3, #24
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	3309      	adds	r3, #9
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	041b      	lsls	r3, r3, #16
 8000c8e:	431a      	orrs	r2, r3
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	330a      	adds	r3, #10
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	021b      	lsls	r3, r3, #8
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	320b      	adds	r2, #11
 8000c9e:	7812      	ldrb	r2, [r2, #0]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    LOAD32H( s3, Input + 12);
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	330c      	adds	r3, #12
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	061a      	lsls	r2, r3, #24
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	330d      	adds	r3, #13
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	041b      	lsls	r3, r3, #16
 8000cb4:	431a      	orrs	r2, r3
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	330e      	adds	r3, #14
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	021b      	lsls	r3, r3, #8
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	68ba      	ldr	r2, [r7, #8]
 8000cc2:	320f      	adds	r2, #15
 8000cc4:	7812      	ldrb	r2, [r2, #0]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	62bb      	str	r3, [r7, #40]	; 0x28

    s0 ^= rk[0];
 8000cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000cd0:	4053      	eors	r3, r2
 8000cd2:	637b      	str	r3, [r7, #52]	; 0x34
    s1 ^= rk[1];
 8000cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd6:	3304      	adds	r3, #4
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000cdc:	4053      	eors	r3, r2
 8000cde:	633b      	str	r3, [r7, #48]	; 0x30
    s2 ^= rk[2];
 8000ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce2:	3308      	adds	r3, #8
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ce8:	4053      	eors	r3, r2
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
    s3 ^= rk[3];
 8000cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cee:	330c      	adds	r3, #12
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cf4:	4053      	eors	r3, r2
 8000cf6:	62bb      	str	r3, [r7, #40]	; 0x28

    // Nr - 1 full rounds:
    r =  Context->Nr >> 1;
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8000cfe:	085b      	lsrs	r3, r3, #1
 8000d00:	623b      	str	r3, [r7, #32]
    for( ;; )
    {
        t0 = Te0( BYTE( s0, 3 ) ) ^ Te1( BYTE( s1, 2 ) ) ^ Te2( BYTE( s2, 1 ) ) ^ Te3( BYTE( s3, 0 ) ) ^ rk[4];
 8000d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d04:	0e1b      	lsrs	r3, r3, #24
 8000d06:	4a7b      	ldr	r2, [pc, #492]	; (8000ef4 <AesEncrypt+0x2d0>)
 8000d08:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d0e:	0c1b      	lsrs	r3, r3, #16
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	4979      	ldr	r1, [pc, #484]	; (8000ef8 <AesEncrypt+0x2d4>)
 8000d14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d18:	405a      	eors	r2, r3
 8000d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d1c:	0a1b      	lsrs	r3, r3, #8
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	4976      	ldr	r1, [pc, #472]	; (8000efc <AesEncrypt+0x2d8>)
 8000d22:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d26:	405a      	eors	r2, r3
 8000d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	4974      	ldr	r1, [pc, #464]	; (8000f00 <AesEncrypt+0x2dc>)
 8000d2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d32:	405a      	eors	r2, r3
 8000d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d36:	3310      	adds	r3, #16
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4053      	eors	r3, r2
 8000d3c:	61fb      	str	r3, [r7, #28]
        t1 = Te0( BYTE( s1, 3 ) ) ^ Te1( BYTE( s2, 2 ) ) ^ Te2( BYTE( s3, 1 ) ) ^ Te3( BYTE( s0, 0 ) ) ^ rk[5];
 8000d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d40:	0e1b      	lsrs	r3, r3, #24
 8000d42:	4a6c      	ldr	r2, [pc, #432]	; (8000ef4 <AesEncrypt+0x2d0>)
 8000d44:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d4a:	0c1b      	lsrs	r3, r3, #16
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	496a      	ldr	r1, [pc, #424]	; (8000ef8 <AesEncrypt+0x2d4>)
 8000d50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d54:	405a      	eors	r2, r3
 8000d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d58:	0a1b      	lsrs	r3, r3, #8
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	4967      	ldr	r1, [pc, #412]	; (8000efc <AesEncrypt+0x2d8>)
 8000d5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d62:	405a      	eors	r2, r3
 8000d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	4965      	ldr	r1, [pc, #404]	; (8000f00 <AesEncrypt+0x2dc>)
 8000d6a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d6e:	405a      	eors	r2, r3
 8000d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d72:	3314      	adds	r3, #20
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4053      	eors	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
        t2 = Te0( BYTE( s2, 3 ) ) ^ Te1( BYTE( s3, 2 ) ) ^ Te2( BYTE( s0, 1 ) ) ^ Te3( BYTE( s1, 0 ) ) ^ rk[6];
 8000d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d7c:	0e1b      	lsrs	r3, r3, #24
 8000d7e:	4a5d      	ldr	r2, [pc, #372]	; (8000ef4 <AesEncrypt+0x2d0>)
 8000d80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d86:	0c1b      	lsrs	r3, r3, #16
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	495b      	ldr	r1, [pc, #364]	; (8000ef8 <AesEncrypt+0x2d4>)
 8000d8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d90:	405a      	eors	r2, r3
 8000d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d94:	0a1b      	lsrs	r3, r3, #8
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	4958      	ldr	r1, [pc, #352]	; (8000efc <AesEncrypt+0x2d8>)
 8000d9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d9e:	405a      	eors	r2, r3
 8000da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	4956      	ldr	r1, [pc, #344]	; (8000f00 <AesEncrypt+0x2dc>)
 8000da6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000daa:	405a      	eors	r2, r3
 8000dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dae:	3318      	adds	r3, #24
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4053      	eors	r3, r2
 8000db4:	617b      	str	r3, [r7, #20]
        t3 = Te0( BYTE( s3, 3 ) ) ^ Te1( BYTE( s0, 2 ) ) ^ Te2( BYTE( s1, 1 ) ) ^ Te3( BYTE( s2, 0 ) ) ^ rk[7];
 8000db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000db8:	0e1b      	lsrs	r3, r3, #24
 8000dba:	4a4e      	ldr	r2, [pc, #312]	; (8000ef4 <AesEncrypt+0x2d0>)
 8000dbc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dc2:	0c1b      	lsrs	r3, r3, #16
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	494c      	ldr	r1, [pc, #304]	; (8000ef8 <AesEncrypt+0x2d4>)
 8000dc8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000dcc:	405a      	eors	r2, r3
 8000dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dd0:	0a1b      	lsrs	r3, r3, #8
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	4949      	ldr	r1, [pc, #292]	; (8000efc <AesEncrypt+0x2d8>)
 8000dd6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000dda:	405a      	eors	r2, r3
 8000ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	4947      	ldr	r1, [pc, #284]	; (8000f00 <AesEncrypt+0x2dc>)
 8000de2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000de6:	405a      	eors	r2, r3
 8000de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dea:	331c      	adds	r3, #28
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4053      	eors	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]

        rk += 8;
 8000df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df4:	3320      	adds	r3, #32
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
        r -= 1;
 8000df8:	6a3b      	ldr	r3, [r7, #32]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	623b      	str	r3, [r7, #32]
        if ( 0 == r )
 8000dfe:	6a3b      	ldr	r3, [r7, #32]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d07f      	beq.n	8000f04 <AesEncrypt+0x2e0>
        {
            break;
        }

        s0 = Te0( BYTE( t0, 3 ) ) ^ Te1( BYTE( t1, 2 ) ) ^ Te2( BYTE( t2, 1 ) ) ^ Te3( BYTE( t3, 0 ) ) ^ rk[0];
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	0e1b      	lsrs	r3, r3, #24
 8000e08:	4a3a      	ldr	r2, [pc, #232]	; (8000ef4 <AesEncrypt+0x2d0>)
 8000e0a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	0c1b      	lsrs	r3, r3, #16
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	4938      	ldr	r1, [pc, #224]	; (8000ef8 <AesEncrypt+0x2d4>)
 8000e16:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e1a:	405a      	eors	r2, r3
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	0a1b      	lsrs	r3, r3, #8
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	4936      	ldr	r1, [pc, #216]	; (8000efc <AesEncrypt+0x2d8>)
 8000e24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e28:	405a      	eors	r2, r3
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	4934      	ldr	r1, [pc, #208]	; (8000f00 <AesEncrypt+0x2dc>)
 8000e30:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e34:	405a      	eors	r2, r3
 8000e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4053      	eors	r3, r2
 8000e3c:	637b      	str	r3, [r7, #52]	; 0x34
        s1 = Te0( BYTE( t1, 3 ) ) ^ Te1( BYTE( t2, 2 ) ) ^ Te2( BYTE( t3, 1 ) ) ^ Te3( BYTE( t0, 0 ) ) ^ rk[1];
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	0e1b      	lsrs	r3, r3, #24
 8000e42:	4a2c      	ldr	r2, [pc, #176]	; (8000ef4 <AesEncrypt+0x2d0>)
 8000e44:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	0c1b      	lsrs	r3, r3, #16
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	492a      	ldr	r1, [pc, #168]	; (8000ef8 <AesEncrypt+0x2d4>)
 8000e50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e54:	405a      	eors	r2, r3
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	0a1b      	lsrs	r3, r3, #8
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	4927      	ldr	r1, [pc, #156]	; (8000efc <AesEncrypt+0x2d8>)
 8000e5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e62:	405a      	eors	r2, r3
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	4925      	ldr	r1, [pc, #148]	; (8000f00 <AesEncrypt+0x2dc>)
 8000e6a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e6e:	405a      	eors	r2, r3
 8000e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e72:	3304      	adds	r3, #4
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4053      	eors	r3, r2
 8000e78:	633b      	str	r3, [r7, #48]	; 0x30
        s2 = Te0( BYTE( t2, 3 ) ) ^ Te1( BYTE( t3, 2 ) ) ^ Te2( BYTE( t0, 1 ) ) ^ Te3( BYTE( t1, 0 ) ) ^ rk[2];
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	0e1b      	lsrs	r3, r3, #24
 8000e7e:	4a1d      	ldr	r2, [pc, #116]	; (8000ef4 <AesEncrypt+0x2d0>)
 8000e80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	0c1b      	lsrs	r3, r3, #16
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	491b      	ldr	r1, [pc, #108]	; (8000ef8 <AesEncrypt+0x2d4>)
 8000e8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e90:	405a      	eors	r2, r3
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	0a1b      	lsrs	r3, r3, #8
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	4918      	ldr	r1, [pc, #96]	; (8000efc <AesEncrypt+0x2d8>)
 8000e9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e9e:	405a      	eors	r2, r3
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	4916      	ldr	r1, [pc, #88]	; (8000f00 <AesEncrypt+0x2dc>)
 8000ea6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000eaa:	405a      	eors	r2, r3
 8000eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eae:	3308      	adds	r3, #8
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4053      	eors	r3, r2
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        s3 = Te0( BYTE( t3, 3 ) ) ^ Te1( BYTE( t0, 2 ) ) ^ Te2( BYTE( t1, 1 ) ) ^ Te3( BYTE( t2, 0 ) ) ^ rk[3];
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	0e1b      	lsrs	r3, r3, #24
 8000eba:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <AesEncrypt+0x2d0>)
 8000ebc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	0c1b      	lsrs	r3, r3, #16
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	490c      	ldr	r1, [pc, #48]	; (8000ef8 <AesEncrypt+0x2d4>)
 8000ec8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ecc:	405a      	eors	r2, r3
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	0a1b      	lsrs	r3, r3, #8
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	4909      	ldr	r1, [pc, #36]	; (8000efc <AesEncrypt+0x2d8>)
 8000ed6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000eda:	405a      	eors	r2, r3
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	4907      	ldr	r1, [pc, #28]	; (8000f00 <AesEncrypt+0x2dc>)
 8000ee2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ee6:	405a      	eors	r2, r3
 8000ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eea:	330c      	adds	r3, #12
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4053      	eors	r3, r2
 8000ef0:	62bb      	str	r3, [r7, #40]	; 0x28
        t0 = Te0( BYTE( s0, 3 ) ) ^ Te1( BYTE( s1, 2 ) ) ^ Te2( BYTE( s2, 1 ) ) ^ Te3( BYTE( s3, 0 ) ) ^ rk[4];
 8000ef2:	e706      	b.n	8000d02 <AesEncrypt+0xde>
 8000ef4:	0801b544 	.word	0x0801b544
 8000ef8:	0801c144 	.word	0x0801c144
 8000efc:	0801c544 	.word	0x0801c544
 8000f00:	0801c944 	.word	0x0801c944
            break;
 8000f04:	bf00      	nop
    }

     // Apply last round and map cipher state to BYTE array block:
    s0 = (Te4_3[BYTE( t0, 3 )]) ^ (Te4_2[BYTE( t1, 2 )]) ^ (Te4_1[BYTE( t2, 1 )]) ^ (Te4_0[BYTE( t3, 0 )]) ^ rk[0];
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	0e1b      	lsrs	r3, r3, #24
 8000f0a:	4a6b      	ldr	r2, [pc, #428]	; (80010b8 <AesEncrypt+0x494>)
 8000f0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	0c1b      	lsrs	r3, r3, #16
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	4969      	ldr	r1, [pc, #420]	; (80010bc <AesEncrypt+0x498>)
 8000f18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f1c:	405a      	eors	r2, r3
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	0a1b      	lsrs	r3, r3, #8
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	4966      	ldr	r1, [pc, #408]	; (80010c0 <AesEncrypt+0x49c>)
 8000f26:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f2a:	405a      	eors	r2, r3
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	4964      	ldr	r1, [pc, #400]	; (80010c4 <AesEncrypt+0x4a0>)
 8000f32:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f36:	405a      	eors	r2, r3
 8000f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4053      	eors	r3, r2
 8000f3e:	637b      	str	r3, [r7, #52]	; 0x34
    s1 = (Te4_3[BYTE( t1, 3 )]) ^ (Te4_2[BYTE( t2, 2 )]) ^ (Te4_1[BYTE( t3, 1 )]) ^ (Te4_0[BYTE( t0, 0 )]) ^ rk[1];
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	0e1b      	lsrs	r3, r3, #24
 8000f44:	4a5c      	ldr	r2, [pc, #368]	; (80010b8 <AesEncrypt+0x494>)
 8000f46:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	0c1b      	lsrs	r3, r3, #16
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	495a      	ldr	r1, [pc, #360]	; (80010bc <AesEncrypt+0x498>)
 8000f52:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f56:	405a      	eors	r2, r3
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	0a1b      	lsrs	r3, r3, #8
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	4958      	ldr	r1, [pc, #352]	; (80010c0 <AesEncrypt+0x49c>)
 8000f60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f64:	405a      	eors	r2, r3
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	4956      	ldr	r1, [pc, #344]	; (80010c4 <AesEncrypt+0x4a0>)
 8000f6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f70:	405a      	eors	r2, r3
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	3304      	adds	r3, #4
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4053      	eors	r3, r2
 8000f7a:	633b      	str	r3, [r7, #48]	; 0x30
    s2 = (Te4_3[BYTE( t2, 3 )]) ^ (Te4_2[BYTE( t3, 2 )]) ^ (Te4_1[BYTE( t0, 1 )]) ^ (Te4_0[BYTE( t1, 0 )]) ^ rk[2];
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	0e1b      	lsrs	r3, r3, #24
 8000f80:	4a4d      	ldr	r2, [pc, #308]	; (80010b8 <AesEncrypt+0x494>)
 8000f82:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	0c1b      	lsrs	r3, r3, #16
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	494b      	ldr	r1, [pc, #300]	; (80010bc <AesEncrypt+0x498>)
 8000f8e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f92:	405a      	eors	r2, r3
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	0a1b      	lsrs	r3, r3, #8
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	4949      	ldr	r1, [pc, #292]	; (80010c0 <AesEncrypt+0x49c>)
 8000f9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fa0:	405a      	eors	r2, r3
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	4947      	ldr	r1, [pc, #284]	; (80010c4 <AesEncrypt+0x4a0>)
 8000fa8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fac:	405a      	eors	r2, r3
 8000fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb0:	3308      	adds	r3, #8
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4053      	eors	r3, r2
 8000fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    s3 = (Te4_3[BYTE( t3, 3 )]) ^ (Te4_2[BYTE( t0, 2 )]) ^ (Te4_1[BYTE( t1, 1 )]) ^ (Te4_0[BYTE( t2, 0 )]) ^ rk[3];
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	0e1b      	lsrs	r3, r3, #24
 8000fbc:	4a3e      	ldr	r2, [pc, #248]	; (80010b8 <AesEncrypt+0x494>)
 8000fbe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	0c1b      	lsrs	r3, r3, #16
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	493c      	ldr	r1, [pc, #240]	; (80010bc <AesEncrypt+0x498>)
 8000fca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fce:	405a      	eors	r2, r3
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	0a1b      	lsrs	r3, r3, #8
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	493a      	ldr	r1, [pc, #232]	; (80010c0 <AesEncrypt+0x49c>)
 8000fd8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fdc:	405a      	eors	r2, r3
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	4938      	ldr	r1, [pc, #224]	; (80010c4 <AesEncrypt+0x4a0>)
 8000fe4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fe8:	405a      	eors	r2, r3
 8000fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fec:	330c      	adds	r3, #12
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4053      	eors	r3, r2
 8000ff2:	62bb      	str	r3, [r7, #40]	; 0x28

    STORE32H( s0, Output );
 8000ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff6:	0e1b      	lsrs	r3, r3, #24
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	701a      	strb	r2, [r3, #0]
 8000ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001000:	0c1a      	lsrs	r2, r3, #16
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3301      	adds	r3, #1
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	701a      	strb	r2, [r3, #0]
 800100a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800100c:	0a1a      	lsrs	r2, r3, #8
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3302      	adds	r3, #2
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	701a      	strb	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	3303      	adds	r3, #3
 800101a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	701a      	strb	r2, [r3, #0]
    STORE32H( s1, Output + 4 );
 8001020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001022:	0e1a      	lsrs	r2, r3, #24
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3304      	adds	r3, #4
 8001028:	b2d2      	uxtb	r2, r2
 800102a:	701a      	strb	r2, [r3, #0]
 800102c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800102e:	0c1a      	lsrs	r2, r3, #16
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3305      	adds	r3, #5
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	701a      	strb	r2, [r3, #0]
 8001038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800103a:	0a1a      	lsrs	r2, r3, #8
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3306      	adds	r3, #6
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	701a      	strb	r2, [r3, #0]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3307      	adds	r3, #7
 8001048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	701a      	strb	r2, [r3, #0]
    STORE32H( s2, Output + 8 );
 800104e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001050:	0e1a      	lsrs	r2, r3, #24
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3308      	adds	r3, #8
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	701a      	strb	r2, [r3, #0]
 800105a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800105c:	0c1a      	lsrs	r2, r3, #16
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3309      	adds	r3, #9
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	701a      	strb	r2, [r3, #0]
 8001066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001068:	0a1a      	lsrs	r2, r3, #8
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	330a      	adds	r3, #10
 800106e:	b2d2      	uxtb	r2, r2
 8001070:	701a      	strb	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	330b      	adds	r3, #11
 8001076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	701a      	strb	r2, [r3, #0]
    STORE32H( s3, Output + 12);
 800107c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800107e:	0e1a      	lsrs	r2, r3, #24
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	330c      	adds	r3, #12
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	701a      	strb	r2, [r3, #0]
 8001088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800108a:	0c1a      	lsrs	r2, r3, #16
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	330d      	adds	r3, #13
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	701a      	strb	r2, [r3, #0]
 8001094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001096:	0a1a      	lsrs	r2, r3, #8
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	330e      	adds	r3, #14
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	701a      	strb	r2, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	330f      	adds	r3, #15
 80010a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	701a      	strb	r2, [r3, #0]
}
 80010aa:	bf00      	nop
 80010ac:	373c      	adds	r7, #60	; 0x3c
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	0801d944 	.word	0x0801d944
 80010bc:	0801d544 	.word	0x0801d544
 80010c0:	0801d144 	.word	0x0801d144
 80010c4:	0801cd44 	.word	0x0801cd44

080010c8 <AesDecrypt>:
    (
        AesContext const*   Context,                    // [in]
        uint8_t const       Input [AES_BLOCK_SIZE],     // [in]
        uint8_t             Output [AES_BLOCK_SIZE]     // [out]
    )
{
 80010c8:	b480      	push	{r7}
 80010ca:	b08f      	sub	sp, #60	; 0x3c
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
    uint32_t        t2;
    uint32_t        t3;
    uint32_t const* rk;
    uint_fast32_t   r;

    rk = Context->dK;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	33f0      	adds	r3, #240	; 0xf0
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24

    // Map BYTE array block to cipher state and add initial round key:
    LOAD32H( s0, Input );
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	061a      	lsls	r2, r3, #24
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	3301      	adds	r3, #1
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	041b      	lsls	r3, r3, #16
 80010e8:	431a      	orrs	r2, r3
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	3302      	adds	r3, #2
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	021b      	lsls	r3, r3, #8
 80010f2:	4313      	orrs	r3, r2
 80010f4:	68ba      	ldr	r2, [r7, #8]
 80010f6:	3203      	adds	r2, #3
 80010f8:	7812      	ldrb	r2, [r2, #0]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	637b      	str	r3, [r7, #52]	; 0x34
    LOAD32H( s1, Input + 4 );
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	3304      	adds	r3, #4
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	061a      	lsls	r2, r3, #24
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	3305      	adds	r3, #5
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	041b      	lsls	r3, r3, #16
 800110e:	431a      	orrs	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	3306      	adds	r3, #6
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	4313      	orrs	r3, r2
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	3207      	adds	r2, #7
 800111e:	7812      	ldrb	r2, [r2, #0]
 8001120:	4313      	orrs	r3, r2
 8001122:	633b      	str	r3, [r7, #48]	; 0x30
    LOAD32H( s2, Input + 8 );
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	3308      	adds	r3, #8
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	061a      	lsls	r2, r3, #24
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	3309      	adds	r3, #9
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	041b      	lsls	r3, r3, #16
 8001134:	431a      	orrs	r2, r3
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	330a      	adds	r3, #10
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	021b      	lsls	r3, r3, #8
 800113e:	4313      	orrs	r3, r2
 8001140:	68ba      	ldr	r2, [r7, #8]
 8001142:	320b      	adds	r2, #11
 8001144:	7812      	ldrb	r2, [r2, #0]
 8001146:	4313      	orrs	r3, r2
 8001148:	62fb      	str	r3, [r7, #44]	; 0x2c
    LOAD32H( s3, Input + 12 );
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	330c      	adds	r3, #12
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	061a      	lsls	r2, r3, #24
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	330d      	adds	r3, #13
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	041b      	lsls	r3, r3, #16
 800115a:	431a      	orrs	r2, r3
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	330e      	adds	r3, #14
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	021b      	lsls	r3, r3, #8
 8001164:	4313      	orrs	r3, r2
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	320f      	adds	r2, #15
 800116a:	7812      	ldrb	r2, [r2, #0]
 800116c:	4313      	orrs	r3, r2
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28

    s0 ^= rk[0];
 8001170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001176:	4053      	eors	r3, r2
 8001178:	637b      	str	r3, [r7, #52]	; 0x34
    s1 ^= rk[1];
 800117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117c:	3304      	adds	r3, #4
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001182:	4053      	eors	r3, r2
 8001184:	633b      	str	r3, [r7, #48]	; 0x30
    s2 ^= rk[2];
 8001186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001188:	3308      	adds	r3, #8
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800118e:	4053      	eors	r3, r2
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
    s3 ^= rk[3];
 8001192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001194:	330c      	adds	r3, #12
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800119a:	4053      	eors	r3, r2
 800119c:	62bb      	str	r3, [r7, #40]	; 0x28

    // Nr - 1 full rounds
    r = Context->Nr >> 1;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 80011a4:	085b      	lsrs	r3, r3, #1
 80011a6:	623b      	str	r3, [r7, #32]
    for( ;; )
    {
        t0 = Td0( BYTE( s0, 3 ) ) ^ Td1( BYTE( s3, 2 ) ) ^ Td2( BYTE( s2, 1 ) ) ^ Td3( BYTE( s1, 0 ) ) ^ rk[4];
 80011a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011aa:	0e1b      	lsrs	r3, r3, #24
 80011ac:	4a7b      	ldr	r2, [pc, #492]	; (800139c <AesDecrypt+0x2d4>)
 80011ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b4:	0c1b      	lsrs	r3, r3, #16
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	4979      	ldr	r1, [pc, #484]	; (80013a0 <AesDecrypt+0x2d8>)
 80011ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011be:	405a      	eors	r2, r3
 80011c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011c2:	0a1b      	lsrs	r3, r3, #8
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	4977      	ldr	r1, [pc, #476]	; (80013a4 <AesDecrypt+0x2dc>)
 80011c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011cc:	405a      	eors	r2, r3
 80011ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	4975      	ldr	r1, [pc, #468]	; (80013a8 <AesDecrypt+0x2e0>)
 80011d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011d8:	405a      	eors	r2, r3
 80011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011dc:	3310      	adds	r3, #16
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4053      	eors	r3, r2
 80011e2:	61fb      	str	r3, [r7, #28]
        t1 = Td0( BYTE( s1, 3 ) ) ^ Td1( BYTE( s0, 2 ) ) ^ Td2( BYTE( s3, 1 ) ) ^ Td3( BYTE( s2, 0 ) ) ^ rk[5];
 80011e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011e6:	0e1b      	lsrs	r3, r3, #24
 80011e8:	4a6c      	ldr	r2, [pc, #432]	; (800139c <AesDecrypt+0x2d4>)
 80011ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011f0:	0c1b      	lsrs	r3, r3, #16
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	496a      	ldr	r1, [pc, #424]	; (80013a0 <AesDecrypt+0x2d8>)
 80011f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011fa:	405a      	eors	r2, r3
 80011fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011fe:	0a1b      	lsrs	r3, r3, #8
 8001200:	b2db      	uxtb	r3, r3
 8001202:	4968      	ldr	r1, [pc, #416]	; (80013a4 <AesDecrypt+0x2dc>)
 8001204:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001208:	405a      	eors	r2, r3
 800120a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120c:	b2db      	uxtb	r3, r3
 800120e:	4966      	ldr	r1, [pc, #408]	; (80013a8 <AesDecrypt+0x2e0>)
 8001210:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001214:	405a      	eors	r2, r3
 8001216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001218:	3314      	adds	r3, #20
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4053      	eors	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        t2 = Td0( BYTE( s2, 3 ) ) ^ Td1( BYTE( s1, 2 ) ) ^ Td2( BYTE( s0, 1 ) ) ^ Td3( BYTE( s3, 0 ) ) ^ rk[6];
 8001220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001222:	0e1b      	lsrs	r3, r3, #24
 8001224:	4a5d      	ldr	r2, [pc, #372]	; (800139c <AesDecrypt+0x2d4>)
 8001226:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800122a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800122c:	0c1b      	lsrs	r3, r3, #16
 800122e:	b2db      	uxtb	r3, r3
 8001230:	495b      	ldr	r1, [pc, #364]	; (80013a0 <AesDecrypt+0x2d8>)
 8001232:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001236:	405a      	eors	r2, r3
 8001238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800123a:	0a1b      	lsrs	r3, r3, #8
 800123c:	b2db      	uxtb	r3, r3
 800123e:	4959      	ldr	r1, [pc, #356]	; (80013a4 <AesDecrypt+0x2dc>)
 8001240:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001244:	405a      	eors	r2, r3
 8001246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001248:	b2db      	uxtb	r3, r3
 800124a:	4957      	ldr	r1, [pc, #348]	; (80013a8 <AesDecrypt+0x2e0>)
 800124c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001250:	405a      	eors	r2, r3
 8001252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001254:	3318      	adds	r3, #24
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4053      	eors	r3, r2
 800125a:	617b      	str	r3, [r7, #20]
        t3 = Td0( BYTE( s3, 3 ) ) ^ Td1( BYTE( s2, 2 ) ) ^ Td2( BYTE( s1, 1 ) ) ^ Td3( BYTE( s0, 0 ) ) ^ rk[7];
 800125c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800125e:	0e1b      	lsrs	r3, r3, #24
 8001260:	4a4e      	ldr	r2, [pc, #312]	; (800139c <AesDecrypt+0x2d4>)
 8001262:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001268:	0c1b      	lsrs	r3, r3, #16
 800126a:	b2db      	uxtb	r3, r3
 800126c:	494c      	ldr	r1, [pc, #304]	; (80013a0 <AesDecrypt+0x2d8>)
 800126e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001272:	405a      	eors	r2, r3
 8001274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001276:	0a1b      	lsrs	r3, r3, #8
 8001278:	b2db      	uxtb	r3, r3
 800127a:	494a      	ldr	r1, [pc, #296]	; (80013a4 <AesDecrypt+0x2dc>)
 800127c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001280:	405a      	eors	r2, r3
 8001282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001284:	b2db      	uxtb	r3, r3
 8001286:	4948      	ldr	r1, [pc, #288]	; (80013a8 <AesDecrypt+0x2e0>)
 8001288:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800128c:	405a      	eors	r2, r3
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	331c      	adds	r3, #28
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4053      	eors	r3, r2
 8001296:	613b      	str	r3, [r7, #16]

        rk += 8;
 8001298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129a:	3320      	adds	r3, #32
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
        r -= 1;
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	3b01      	subs	r3, #1
 80012a2:	623b      	str	r3, [r7, #32]
        if( 0 == r )
 80012a4:	6a3b      	ldr	r3, [r7, #32]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f000 8080 	beq.w	80013ac <AesDecrypt+0x2e4>
        {
            break;
        }

        s0 = Td0( BYTE( t0, 3 ) ) ^ Td1( BYTE( t3, 2 ) ) ^ Td2( BYTE( t2, 1 ) ) ^ Td3( BYTE( t1, 0  )) ^ rk[0];
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	0e1b      	lsrs	r3, r3, #24
 80012b0:	4a3a      	ldr	r2, [pc, #232]	; (800139c <AesDecrypt+0x2d4>)
 80012b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	0c1b      	lsrs	r3, r3, #16
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	4938      	ldr	r1, [pc, #224]	; (80013a0 <AesDecrypt+0x2d8>)
 80012be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012c2:	405a      	eors	r2, r3
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	0a1b      	lsrs	r3, r3, #8
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	4936      	ldr	r1, [pc, #216]	; (80013a4 <AesDecrypt+0x2dc>)
 80012cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012d0:	405a      	eors	r2, r3
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	4934      	ldr	r1, [pc, #208]	; (80013a8 <AesDecrypt+0x2e0>)
 80012d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012dc:	405a      	eors	r2, r3
 80012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4053      	eors	r3, r2
 80012e4:	637b      	str	r3, [r7, #52]	; 0x34
        s1 = Td0( BYTE( t1, 3 ) ) ^ Td1( BYTE( t0, 2 ) ) ^ Td2( BYTE( t3, 1 ) ) ^ Td3( BYTE( t2, 0  )) ^ rk[1];
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	0e1b      	lsrs	r3, r3, #24
 80012ea:	4a2c      	ldr	r2, [pc, #176]	; (800139c <AesDecrypt+0x2d4>)
 80012ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	0c1b      	lsrs	r3, r3, #16
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	492a      	ldr	r1, [pc, #168]	; (80013a0 <AesDecrypt+0x2d8>)
 80012f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012fc:	405a      	eors	r2, r3
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	0a1b      	lsrs	r3, r3, #8
 8001302:	b2db      	uxtb	r3, r3
 8001304:	4927      	ldr	r1, [pc, #156]	; (80013a4 <AesDecrypt+0x2dc>)
 8001306:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800130a:	405a      	eors	r2, r3
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	4925      	ldr	r1, [pc, #148]	; (80013a8 <AesDecrypt+0x2e0>)
 8001312:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001316:	405a      	eors	r2, r3
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	3304      	adds	r3, #4
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4053      	eors	r3, r2
 8001320:	633b      	str	r3, [r7, #48]	; 0x30
        s2 = Td0( BYTE( t2, 3 ) ) ^ Td1( BYTE( t1, 2 ) ) ^ Td2( BYTE( t0, 1 ) ) ^ Td3( BYTE( t3, 0  )) ^ rk[2];
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	0e1b      	lsrs	r3, r3, #24
 8001326:	4a1d      	ldr	r2, [pc, #116]	; (800139c <AesDecrypt+0x2d4>)
 8001328:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	0c1b      	lsrs	r3, r3, #16
 8001330:	b2db      	uxtb	r3, r3
 8001332:	491b      	ldr	r1, [pc, #108]	; (80013a0 <AesDecrypt+0x2d8>)
 8001334:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001338:	405a      	eors	r2, r3
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	0a1b      	lsrs	r3, r3, #8
 800133e:	b2db      	uxtb	r3, r3
 8001340:	4918      	ldr	r1, [pc, #96]	; (80013a4 <AesDecrypt+0x2dc>)
 8001342:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001346:	405a      	eors	r2, r3
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	4916      	ldr	r1, [pc, #88]	; (80013a8 <AesDecrypt+0x2e0>)
 800134e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001352:	405a      	eors	r2, r3
 8001354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001356:	3308      	adds	r3, #8
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4053      	eors	r3, r2
 800135c:	62fb      	str	r3, [r7, #44]	; 0x2c
        s3 = Td0( BYTE( t3, 3 ) ) ^ Td1( BYTE( t2, 2 ) ) ^ Td2( BYTE( t1, 1 ) ) ^ Td3( BYTE( t0, 0  )) ^ rk[3];
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	0e1b      	lsrs	r3, r3, #24
 8001362:	4a0e      	ldr	r2, [pc, #56]	; (800139c <AesDecrypt+0x2d4>)
 8001364:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	0c1b      	lsrs	r3, r3, #16
 800136c:	b2db      	uxtb	r3, r3
 800136e:	490c      	ldr	r1, [pc, #48]	; (80013a0 <AesDecrypt+0x2d8>)
 8001370:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001374:	405a      	eors	r2, r3
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	0a1b      	lsrs	r3, r3, #8
 800137a:	b2db      	uxtb	r3, r3
 800137c:	4909      	ldr	r1, [pc, #36]	; (80013a4 <AesDecrypt+0x2dc>)
 800137e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001382:	405a      	eors	r2, r3
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	b2db      	uxtb	r3, r3
 8001388:	4907      	ldr	r1, [pc, #28]	; (80013a8 <AesDecrypt+0x2e0>)
 800138a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800138e:	405a      	eors	r2, r3
 8001390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001392:	330c      	adds	r3, #12
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4053      	eors	r3, r2
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
        t0 = Td0( BYTE( s0, 3 ) ) ^ Td1( BYTE( s3, 2 ) ) ^ Td2( BYTE( s2, 1 ) ) ^ Td3( BYTE( s1, 0 ) ) ^ rk[4];
 800139a:	e705      	b.n	80011a8 <AesDecrypt+0xe0>
 800139c:	0801b944 	.word	0x0801b944
 80013a0:	0801dd44 	.word	0x0801dd44
 80013a4:	0801e144 	.word	0x0801e144
 80013a8:	0801e544 	.word	0x0801e544
            break;
 80013ac:	bf00      	nop
    }

    // Apply last round and map cipher state to BYTE array block:
    s0 = ( Td4[BYTE( t0, 3 )] & 0xff000000) ^ (Td4[BYTE( t3, 2 )] & 0x00ff0000)
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	0e1b      	lsrs	r3, r3, #24
 80013b2:	4a79      	ldr	r2, [pc, #484]	; (8001598 <AesDecrypt+0x4d0>)
 80013b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b8:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	0c1b      	lsrs	r3, r3, #16
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	4975      	ldr	r1, [pc, #468]	; (8001598 <AesDecrypt+0x4d0>)
 80013c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80013cc:	431a      	orrs	r2, r3
       ^ ( Td4[BYTE( t2, 1 )] & 0x0000ff00) ^ (Td4[BYTE( t1, 0 )] & 0x000000ff) ^ rk[0];
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	0a1b      	lsrs	r3, r3, #8
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	4970      	ldr	r1, [pc, #448]	; (8001598 <AesDecrypt+0x4d0>)
 80013d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80013de:	405a      	eors	r2, r3
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	496c      	ldr	r1, [pc, #432]	; (8001598 <AesDecrypt+0x4d0>)
 80013e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	405a      	eors	r2, r3
 80013ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f0:	681b      	ldr	r3, [r3, #0]
    s0 = ( Td4[BYTE( t0, 3 )] & 0xff000000) ^ (Td4[BYTE( t3, 2 )] & 0x00ff0000)
 80013f2:	4053      	eors	r3, r2
 80013f4:	637b      	str	r3, [r7, #52]	; 0x34
    s1 = ( Td4[BYTE( t1, 3 )] & 0xff000000) ^ (Td4[BYTE( t0, 2 )] & 0x00ff0000)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	0e1b      	lsrs	r3, r3, #24
 80013fa:	4a67      	ldr	r2, [pc, #412]	; (8001598 <AesDecrypt+0x4d0>)
 80013fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001400:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	0c1b      	lsrs	r3, r3, #16
 8001408:	b2db      	uxtb	r3, r3
 800140a:	4963      	ldr	r1, [pc, #396]	; (8001598 <AesDecrypt+0x4d0>)
 800140c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001410:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001414:	431a      	orrs	r2, r3
       ^ ( Td4[BYTE( t3, 1 )] & 0x0000ff00) ^ (Td4[BYTE( t2, 0 )] & 0x000000ff) ^ rk[1];
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	0a1b      	lsrs	r3, r3, #8
 800141a:	b2db      	uxtb	r3, r3
 800141c:	495e      	ldr	r1, [pc, #376]	; (8001598 <AesDecrypt+0x4d0>)
 800141e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001422:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001426:	405a      	eors	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	b2db      	uxtb	r3, r3
 800142c:	495a      	ldr	r1, [pc, #360]	; (8001598 <AesDecrypt+0x4d0>)
 800142e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	405a      	eors	r2, r3
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	3304      	adds	r3, #4
 800143a:	681b      	ldr	r3, [r3, #0]
    s1 = ( Td4[BYTE( t1, 3 )] & 0xff000000) ^ (Td4[BYTE( t0, 2 )] & 0x00ff0000)
 800143c:	4053      	eors	r3, r2
 800143e:	633b      	str	r3, [r7, #48]	; 0x30
    s2 = ( Td4[BYTE( t2, 3 )] & 0xff000000) ^ (Td4[BYTE( t1, 2 )] & 0x00ff0000)
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	0e1b      	lsrs	r3, r3, #24
 8001444:	4a54      	ldr	r2, [pc, #336]	; (8001598 <AesDecrypt+0x4d0>)
 8001446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144a:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	0c1b      	lsrs	r3, r3, #16
 8001452:	b2db      	uxtb	r3, r3
 8001454:	4950      	ldr	r1, [pc, #320]	; (8001598 <AesDecrypt+0x4d0>)
 8001456:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800145a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800145e:	431a      	orrs	r2, r3
       ^ ( Td4[BYTE( t0, 1 )] & 0x0000ff00) ^ (Td4[BYTE( t3, 0 )] & 0x000000ff) ^ rk[2];
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	0a1b      	lsrs	r3, r3, #8
 8001464:	b2db      	uxtb	r3, r3
 8001466:	494c      	ldr	r1, [pc, #304]	; (8001598 <AesDecrypt+0x4d0>)
 8001468:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800146c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001470:	405a      	eors	r2, r3
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	4948      	ldr	r1, [pc, #288]	; (8001598 <AesDecrypt+0x4d0>)
 8001478:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800147c:	b2db      	uxtb	r3, r3
 800147e:	405a      	eors	r2, r3
 8001480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001482:	3308      	adds	r3, #8
 8001484:	681b      	ldr	r3, [r3, #0]
    s2 = ( Td4[BYTE( t2, 3 )] & 0xff000000) ^ (Td4[BYTE( t1, 2 )] & 0x00ff0000)
 8001486:	4053      	eors	r3, r2
 8001488:	62fb      	str	r3, [r7, #44]	; 0x2c
    s3 = ( Td4[BYTE( t3, 3 )] & 0xff000000) ^ (Td4[BYTE( t2, 2 )] & 0x00ff0000)
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	0e1b      	lsrs	r3, r3, #24
 800148e:	4a42      	ldr	r2, [pc, #264]	; (8001598 <AesDecrypt+0x4d0>)
 8001490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001494:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	0c1b      	lsrs	r3, r3, #16
 800149c:	b2db      	uxtb	r3, r3
 800149e:	493e      	ldr	r1, [pc, #248]	; (8001598 <AesDecrypt+0x4d0>)
 80014a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80014a8:	431a      	orrs	r2, r3
       ^ ( Td4[BYTE( t1, 1 )] & 0x0000ff00) ^ (Td4[BYTE( t0, 0 )] & 0x000000ff) ^ rk[3];
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	4939      	ldr	r1, [pc, #228]	; (8001598 <AesDecrypt+0x4d0>)
 80014b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80014ba:	405a      	eors	r2, r3
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	4935      	ldr	r1, [pc, #212]	; (8001598 <AesDecrypt+0x4d0>)
 80014c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	405a      	eors	r2, r3
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	330c      	adds	r3, #12
 80014ce:	681b      	ldr	r3, [r3, #0]
    s3 = ( Td4[BYTE( t3, 3 )] & 0xff000000) ^ (Td4[BYTE( t2, 2 )] & 0x00ff0000)
 80014d0:	4053      	eors	r3, r2
 80014d2:	62bb      	str	r3, [r7, #40]	; 0x28

    STORE32H( s0, Output );
 80014d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014d6:	0e1b      	lsrs	r3, r3, #24
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	701a      	strb	r2, [r3, #0]
 80014de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014e0:	0c1a      	lsrs	r2, r3, #16
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	3301      	adds	r3, #1
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	701a      	strb	r2, [r3, #0]
 80014ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ec:	0a1a      	lsrs	r2, r3, #8
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	3302      	adds	r3, #2
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	701a      	strb	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3303      	adds	r3, #3
 80014fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014fc:	b2d2      	uxtb	r2, r2
 80014fe:	701a      	strb	r2, [r3, #0]
    STORE32H( s1, Output + 4 );
 8001500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001502:	0e1a      	lsrs	r2, r3, #24
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3304      	adds	r3, #4
 8001508:	b2d2      	uxtb	r2, r2
 800150a:	701a      	strb	r2, [r3, #0]
 800150c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800150e:	0c1a      	lsrs	r2, r3, #16
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3305      	adds	r3, #5
 8001514:	b2d2      	uxtb	r2, r2
 8001516:	701a      	strb	r2, [r3, #0]
 8001518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800151a:	0a1a      	lsrs	r2, r3, #8
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3306      	adds	r3, #6
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	701a      	strb	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3307      	adds	r3, #7
 8001528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	701a      	strb	r2, [r3, #0]
    STORE32H( s2, Output + 8 );
 800152e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001530:	0e1a      	lsrs	r2, r3, #24
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3308      	adds	r3, #8
 8001536:	b2d2      	uxtb	r2, r2
 8001538:	701a      	strb	r2, [r3, #0]
 800153a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800153c:	0c1a      	lsrs	r2, r3, #16
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3309      	adds	r3, #9
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	701a      	strb	r2, [r3, #0]
 8001546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001548:	0a1a      	lsrs	r2, r3, #8
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	330a      	adds	r3, #10
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	701a      	strb	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	330b      	adds	r3, #11
 8001556:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	701a      	strb	r2, [r3, #0]
    STORE32H( s3, Output + 12 );
 800155c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800155e:	0e1a      	lsrs	r2, r3, #24
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	330c      	adds	r3, #12
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	701a      	strb	r2, [r3, #0]
 8001568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800156a:	0c1a      	lsrs	r2, r3, #16
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	330d      	adds	r3, #13
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	701a      	strb	r2, [r3, #0]
 8001574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001576:	0a1a      	lsrs	r2, r3, #8
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	330e      	adds	r3, #14
 800157c:	b2d2      	uxtb	r2, r2
 800157e:	701a      	strb	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	330f      	adds	r3, #15
 8001584:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	701a      	strb	r2, [r3, #0]
}
 800158a:	bf00      	nop
 800158c:	373c      	adds	r7, #60	; 0x3c
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	0801bd44 	.word	0x0801bd44

0800159c <AesEncryptInPlace>:
    AesEncryptInPlace
    (
        AesContext const*   Context,                    // [in]
        uint8_t             Block [AES_BLOCK_SIZE]      // [in out]
    )
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
    AesEncrypt( Context, Block, Block );
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	6839      	ldr	r1, [r7, #0]
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff fb3a 	bl	8000c24 <AesEncrypt>
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <XorAesBlock>:
    XorAesBlock
    (
        uint8_t*            Block1,          // [in out]
        uint8_t const*      Block2           // [in]
    )
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
    uint32_t    i;

    for( i=0; i<AES_BLOCK_SIZE; i++ )
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	e010      	b.n	80015ea <XorAesBlock+0x32>
    {
        Block1[i] ^= Block2[i];
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4413      	add	r3, r2
 80015ce:	7819      	ldrb	r1, [r3, #0]
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4413      	add	r3, r2
 80015d6:	781a      	ldrb	r2, [r3, #0]
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	4403      	add	r3, r0
 80015de:	404a      	eors	r2, r1
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	701a      	strb	r2, [r3, #0]
    for( i=0; i<AES_BLOCK_SIZE; i++ )
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	3301      	adds	r3, #1
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2b0f      	cmp	r3, #15
 80015ee:	d9eb      	bls.n	80015c8 <XorAesBlock+0x10>
    }
}
 80015f0:	bf00      	nop
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <AesCbcInitialise>:
    (
        AesCbcContext*      Context,                // [out]
        AesContext const*   InitialisedAesContext,  // [in]
        uint8_t const       IV [AES_CBC_IV_SIZE]    // [in]
    )
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
    // Setup context values
    Context->Aes = *InitialisedAesContext;
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	4610      	mov	r0, r2
 800160e:	4619      	mov	r1, r3
 8001610:	f44f 73f2 	mov.w	r3, #484	; 0x1e4
 8001614:	461a      	mov	r2, r3
 8001616:	f015 fc86 	bl	8016f26 <memcpy>
    memcpy( Context->PreviousCipherBlock, IV, sizeof(Context->PreviousCipherBlock) );
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8001620:	2210      	movs	r2, #16
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	4618      	mov	r0, r3
 8001626:	f015 fc7e 	bl	8016f26 <memcpy>
}
 800162a:	bf00      	nop
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <AesCbcInitialiseWithKey>:
        AesCbcContext*      Context,                // [out]
        uint8_t const*      Key,                    // [in]
        uint32_t            KeySize,                // [in]
        uint8_t const       IV [AES_CBC_IV_SIZE]    // [in]
    )
{
 8001632:	b590      	push	{r4, r7, lr}
 8001634:	b0ff      	sub	sp, #508	; 0x1fc
 8001636:	af00      	add	r7, sp, #0
 8001638:	f107 040c 	add.w	r4, r7, #12
 800163c:	6020      	str	r0, [r4, #0]
 800163e:	f107 0008 	add.w	r0, r7, #8
 8001642:	6001      	str	r1, [r0, #0]
 8001644:	1d39      	adds	r1, r7, #4
 8001646:	600a      	str	r2, [r1, #0]
 8001648:	463a      	mov	r2, r7
 800164a:	6013      	str	r3, [r2, #0]
    AesContext aes;

    // Initialise AES Context
    if( 0 != AesInitialise( &aes, Key, KeySize ) )
 800164c:	1d3a      	adds	r2, r7, #4
 800164e:	f107 0308 	add.w	r3, r7, #8
 8001652:	f107 0014 	add.w	r0, r7, #20
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	6819      	ldr	r1, [r3, #0]
 800165a:	f7fe ff91 	bl	8000580 <AesInitialise>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d002      	beq.n	800166a <AesCbcInitialiseWithKey+0x38>
    {
        return -1;
 8001664:	f04f 33ff 	mov.w	r3, #4294967295
 8001668:	e009      	b.n	800167e <AesCbcInitialiseWithKey+0x4c>
    }

    // Now set-up AesCbcContext
    AesCbcInitialise( Context, &aes, IV );
 800166a:	463a      	mov	r2, r7
 800166c:	f107 0114 	add.w	r1, r7, #20
 8001670:	f107 030c 	add.w	r3, r7, #12
 8001674:	6812      	ldr	r2, [r2, #0]
 8001676:	6818      	ldr	r0, [r3, #0]
 8001678:	f7ff ffc0 	bl	80015fc <AesCbcInitialise>
    return 0;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	f507 77fe 	add.w	r7, r7, #508	; 0x1fc
 8001684:	46bd      	mov	sp, r7
 8001686:	bd90      	pop	{r4, r7, pc}

08001688 <AesCbcEncrypt>:
        AesCbcContext*      Context,                // [in out]
        void const*         InBuffer,               // [in]
        void*               OutBuffer,              // [out]
        uint32_t            Size                    // [in]
    )
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
 8001694:	603b      	str	r3, [r7, #0]
    uint32_t    numBlocks = Size / AES_BLOCK_SIZE;
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	091b      	lsrs	r3, r3, #4
 800169a:	617b      	str	r3, [r7, #20]
    uint32_t    offset = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	61fb      	str	r3, [r7, #28]
    uint32_t    i;

    if( 0 != Size % AES_BLOCK_SIZE )
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d002      	beq.n	80016b0 <AesCbcEncrypt+0x28>
    {
        // Size not a multiple of AES block size (16 bytes).
        return -1;
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
 80016ae:	e028      	b.n	8001702 <AesCbcEncrypt+0x7a>
    }

    for( i=0; i<numBlocks; i++ )
 80016b0:	2300      	movs	r3, #0
 80016b2:	61bb      	str	r3, [r7, #24]
 80016b4:	e020      	b.n	80016f8 <AesCbcEncrypt+0x70>
    {
        // XOR on the next block of data onto the previous cipher block
        XorAesBlock( Context->PreviousCipherBlock, (uint8_t*)InBuffer + offset );
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f503 70f2 	add.w	r0, r3, #484	; 0x1e4
 80016bc:	68ba      	ldr	r2, [r7, #8]
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	4413      	add	r3, r2
 80016c2:	4619      	mov	r1, r3
 80016c4:	f7ff ff78 	bl	80015b8 <XorAesBlock>

        // Encrypt to make new cipher block
        AesEncryptInPlace( &Context->Aes, Context->PreviousCipherBlock );
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80016d0:	4619      	mov	r1, r3
 80016d2:	4610      	mov	r0, r2
 80016d4:	f7ff ff62 	bl	800159c <AesEncryptInPlace>

        // Output cipher block
        memcpy( (uint8_t*)OutBuffer + offset, Context->PreviousCipherBlock, AES_BLOCK_SIZE );
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	18d0      	adds	r0, r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80016e4:	2210      	movs	r2, #16
 80016e6:	4619      	mov	r1, r3
 80016e8:	f015 fc1d 	bl	8016f26 <memcpy>

        offset += AES_BLOCK_SIZE;
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	3310      	adds	r3, #16
 80016f0:	61fb      	str	r3, [r7, #28]
    for( i=0; i<numBlocks; i++ )
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	3301      	adds	r3, #1
 80016f6:	61bb      	str	r3, [r7, #24]
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d3da      	bcc.n	80016b6 <AesCbcEncrypt+0x2e>
    }

    return 0;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3720      	adds	r7, #32
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <AesCbcDecrypt>:
        AesCbcContext*      Context,                // [in out]
        void const*         InBuffer,               // [in]
        void*               OutBuffer,              // [out]
        uint32_t            Size                    // [in]
    )
{
 800170a:	b590      	push	{r4, r7, lr}
 800170c:	b08d      	sub	sp, #52	; 0x34
 800170e:	af00      	add	r7, sp, #0
 8001710:	60f8      	str	r0, [r7, #12]
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	607a      	str	r2, [r7, #4]
 8001716:	603b      	str	r3, [r7, #0]
    uint32_t    numBlocks = Size / AES_BLOCK_SIZE;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	091b      	lsrs	r3, r3, #4
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t    offset = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t    i;
    uint8_t     previousCipherBlock [AES_BLOCK_SIZE];

    if( 0 != Size % AES_BLOCK_SIZE )
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	f003 030f 	and.w	r3, r3, #15
 8001728:	2b00      	cmp	r3, #0
 800172a:	d002      	beq.n	8001732 <AesCbcDecrypt+0x28>
    {
        // Size not a multiple of AES block size (16 bytes).
        return -1;
 800172c:	f04f 33ff 	mov.w	r3, #4294967295
 8001730:	e034      	b.n	800179c <AesCbcDecrypt+0x92>
    }

    for( i=0; i<numBlocks; i++ )
 8001732:	2300      	movs	r3, #0
 8001734:	62bb      	str	r3, [r7, #40]	; 0x28
 8001736:	e02c      	b.n	8001792 <AesCbcDecrypt+0x88>
    {
        // Copy previous cipher block and place current one in context
        memcpy( previousCipherBlock, Context->PreviousCipherBlock, AES_BLOCK_SIZE );
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800173e:	f107 0414 	add.w	r4, r7, #20
 8001742:	6818      	ldr	r0, [r3, #0]
 8001744:	6859      	ldr	r1, [r3, #4]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        memcpy( Context->PreviousCipherBlock, (uint8_t*)InBuffer + offset, AES_BLOCK_SIZE );
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f503 70f2 	add.w	r0, r3, #484	; 0x1e4
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001756:	4413      	add	r3, r2
 8001758:	2210      	movs	r2, #16
 800175a:	4619      	mov	r1, r3
 800175c:	f015 fbe3 	bl	8016f26 <memcpy>

        // Decrypt cipher block
        AesDecrypt( &Context->Aes, Context->PreviousCipherBlock, (uint8_t*)OutBuffer + offset );
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f503 71f2 	add.w	r1, r3, #484	; 0x1e4
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800176c:	4413      	add	r3, r2
 800176e:	461a      	mov	r2, r3
 8001770:	f7ff fcaa 	bl	80010c8 <AesDecrypt>

        // XOR on previous cipher block
        XorAesBlock( (uint8_t*)OutBuffer + offset, previousCipherBlock );
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001778:	4413      	add	r3, r2
 800177a:	f107 0214 	add.w	r2, r7, #20
 800177e:	4611      	mov	r1, r2
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff19 	bl	80015b8 <XorAesBlock>

        offset += AES_BLOCK_SIZE;
 8001786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001788:	3310      	adds	r3, #16
 800178a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for( i=0; i<numBlocks; i++ )
 800178c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800178e:	3301      	adds	r3, #1
 8001790:	62bb      	str	r3, [r7, #40]	; 0x28
 8001792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001796:	429a      	cmp	r2, r3
 8001798:	d3ce      	bcc.n	8001738 <AesCbcDecrypt+0x2e>
    }

    return 0;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3734      	adds	r7, #52	; 0x34
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd90      	pop	{r4, r7, pc}

080017a4 <AesCbcEncryptWithKey>:
        uint8_t const       IV [AES_CBC_IV_SIZE],   // [in]
        void const*         InBuffer,               // [in]
        void*               OutBuffer,              // [out]
        uint32_t            BufferSize              // [in]
    )
{
 80017a4:	b590      	push	{r4, r7, lr}
 80017a6:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	f107 040c 	add.w	r4, r7, #12
 80017b0:	6020      	str	r0, [r4, #0]
 80017b2:	f107 0008 	add.w	r0, r7, #8
 80017b6:	6001      	str	r1, [r0, #0]
 80017b8:	1d39      	adds	r1, r7, #4
 80017ba:	600a      	str	r2, [r1, #0]
 80017bc:	463a      	mov	r2, r7
 80017be:	6013      	str	r3, [r2, #0]
    int             error;
    AesCbcContext   context;

    error = AesCbcInitialiseWithKey( &context, Key, KeySize, IV );
 80017c0:	1d3b      	adds	r3, r7, #4
 80017c2:	f107 0208 	add.w	r2, r7, #8
 80017c6:	f107 010c 	add.w	r1, r7, #12
 80017ca:	f107 0010 	add.w	r0, r7, #16
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6812      	ldr	r2, [r2, #0]
 80017d2:	6809      	ldr	r1, [r1, #0]
 80017d4:	f7ff ff2d 	bl	8001632 <AesCbcInitialiseWithKey>
 80017d8:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
    if( 0 == error )
 80017dc:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d10b      	bne.n	80017fc <AesCbcEncryptWithKey+0x58>
    {
        error = AesCbcEncrypt( &context, InBuffer, OutBuffer, BufferSize );
 80017e4:	4639      	mov	r1, r7
 80017e6:	f107 0010 	add.w	r0, r7, #16
 80017ea:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80017ee:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80017f2:	6809      	ldr	r1, [r1, #0]
 80017f4:	f7ff ff48 	bl	8001688 <AesCbcEncrypt>
 80017f8:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
    }

    return error;
 80017fc:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
}
 8001800:	4618      	mov	r0, r3
 8001802:	f507 7703 	add.w	r7, r7, #524	; 0x20c
 8001806:	46bd      	mov	sp, r7
 8001808:	bd90      	pop	{r4, r7, pc}

0800180a <AesCbcDecryptWithKey>:
        uint8_t const       IV [AES_CBC_IV_SIZE],   // [in]
        void const*         InBuffer,               // [in]
        void*               OutBuffer,              // [out]
        uint32_t            BufferSize              // [in]
    )
{
 800180a:	b590      	push	{r4, r7, lr}
 800180c:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 8001810:	af00      	add	r7, sp, #0
 8001812:	f107 040c 	add.w	r4, r7, #12
 8001816:	6020      	str	r0, [r4, #0]
 8001818:	f107 0008 	add.w	r0, r7, #8
 800181c:	6001      	str	r1, [r0, #0]
 800181e:	1d39      	adds	r1, r7, #4
 8001820:	600a      	str	r2, [r1, #0]
 8001822:	463a      	mov	r2, r7
 8001824:	6013      	str	r3, [r2, #0]
    int             error;
    AesCbcContext   context;

    error = AesCbcInitialiseWithKey( &context, Key, KeySize, IV );
 8001826:	1d3b      	adds	r3, r7, #4
 8001828:	f107 0208 	add.w	r2, r7, #8
 800182c:	f107 010c 	add.w	r1, r7, #12
 8001830:	f107 0010 	add.w	r0, r7, #16
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6812      	ldr	r2, [r2, #0]
 8001838:	6809      	ldr	r1, [r1, #0]
 800183a:	f7ff fefa 	bl	8001632 <AesCbcInitialiseWithKey>
 800183e:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
    if( 0 == error )
 8001842:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10b      	bne.n	8001862 <AesCbcDecryptWithKey+0x58>
    {
        error = AesCbcDecrypt( &context, InBuffer, OutBuffer, BufferSize );
 800184a:	4639      	mov	r1, r7
 800184c:	f107 0010 	add.w	r0, r7, #16
 8001850:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001854:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8001858:	6809      	ldr	r1, [r1, #0]
 800185a:	f7ff ff56 	bl	800170a <AesCbcDecrypt>
 800185e:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
    }

    return error;
 8001862:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
}
 8001866:	4618      	mov	r0, r3
 8001868:	f507 7703 	add.w	r7, r7, #524	; 0x20c
 800186c:	46bd      	mov	sp, r7
 800186e:	bd90      	pop	{r4, r7, pc}

08001870 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4a07      	ldr	r2, [pc, #28]	; (800189c <vApplicationGetIdleTaskMemory+0x2c>)
 8001880:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	4a06      	ldr	r2, [pc, #24]	; (80018a0 <vApplicationGetIdleTaskMemory+0x30>)
 8001886:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2280      	movs	r2, #128	; 0x80
 800188c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800188e:	bf00      	nop
 8001890:	3714      	adds	r7, #20
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	200000c0 	.word	0x200000c0
 80018a0:	20000114 	.word	0x20000114

080018a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018a4:	b5b0      	push	{r4, r5, r7, lr}
 80018a6:	b088      	sub	sp, #32
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018aa:	f000 fbc1 	bl	8002030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018ae:	f000 f81b 	bl	80018e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018b2:	f000 f883 	bl	80019bc <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 80018b6:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <main+0x3c>)
 80018b8:	1d3c      	adds	r4, r7, #4
 80018ba:	461d      	mov	r5, r3
 80018bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	2100      	movs	r1, #0
 80018cc:	4618      	mov	r0, r3
 80018ce:	f003 f927 	bl	8004b20 <osThreadCreate>
 80018d2:	4602      	mov	r2, r0
 80018d4:	4b03      	ldr	r3, [pc, #12]	; (80018e4 <main+0x40>)
 80018d6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80018d8:	f003 f90b 	bl	8004af2 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018dc:	e7fe      	b.n	80018dc <main+0x38>
 80018de:	bf00      	nop
 80018e0:	08017db0 	.word	0x08017db0
 80018e4:	2000830c 	.word	0x2000830c

080018e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b094      	sub	sp, #80	; 0x50
 80018ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ee:	f107 0320 	add.w	r3, r7, #32
 80018f2:	2230      	movs	r2, #48	; 0x30
 80018f4:	2100      	movs	r1, #0
 80018f6:	4618      	mov	r0, r3
 80018f8:	f015 fb20 	bl	8016f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018fc:	f107 030c 	add.w	r3, r7, #12
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800190c:	2300      	movs	r3, #0
 800190e:	60bb      	str	r3, [r7, #8]
 8001910:	4b28      	ldr	r3, [pc, #160]	; (80019b4 <SystemClock_Config+0xcc>)
 8001912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001914:	4a27      	ldr	r2, [pc, #156]	; (80019b4 <SystemClock_Config+0xcc>)
 8001916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800191a:	6413      	str	r3, [r2, #64]	; 0x40
 800191c:	4b25      	ldr	r3, [pc, #148]	; (80019b4 <SystemClock_Config+0xcc>)
 800191e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001928:	2300      	movs	r3, #0
 800192a:	607b      	str	r3, [r7, #4]
 800192c:	4b22      	ldr	r3, [pc, #136]	; (80019b8 <SystemClock_Config+0xd0>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a21      	ldr	r2, [pc, #132]	; (80019b8 <SystemClock_Config+0xd0>)
 8001932:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001936:	6013      	str	r3, [r2, #0]
 8001938:	4b1f      	ldr	r3, [pc, #124]	; (80019b8 <SystemClock_Config+0xd0>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001944:	2301      	movs	r3, #1
 8001946:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001948:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800194e:	2302      	movs	r3, #2
 8001950:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001952:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001956:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001958:	2304      	movs	r3, #4
 800195a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800195c:	23a8      	movs	r3, #168	; 0xa8
 800195e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001960:	2302      	movs	r3, #2
 8001962:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001964:	2304      	movs	r3, #4
 8001966:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001968:	f107 0320 	add.w	r3, r7, #32
 800196c:	4618      	mov	r0, r3
 800196e:	f001 fe51 	bl	8003614 <HAL_RCC_OscConfig>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001978:	f000 f9c2 	bl	8001d00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800197c:	230f      	movs	r3, #15
 800197e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001980:	2302      	movs	r3, #2
 8001982:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001988:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800198c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800198e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001992:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001994:	f107 030c 	add.w	r3, r7, #12
 8001998:	2105      	movs	r1, #5
 800199a:	4618      	mov	r0, r3
 800199c:	f002 f8aa 	bl	8003af4 <HAL_RCC_ClockConfig>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80019a6:	f000 f9ab 	bl	8001d00 <Error_Handler>
  }
}
 80019aa:	bf00      	nop
 80019ac:	3750      	adds	r7, #80	; 0x50
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40007000 	.word	0x40007000

080019bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	4b1e      	ldr	r3, [pc, #120]	; (8001a40 <MX_GPIO_Init+0x84>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a1d      	ldr	r2, [pc, #116]	; (8001a40 <MX_GPIO_Init+0x84>)
 80019cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <MX_GPIO_Init+0x84>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <MX_GPIO_Init+0x84>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a16      	ldr	r2, [pc, #88]	; (8001a40 <MX_GPIO_Init+0x84>)
 80019e8:	f043 0304 	orr.w	r3, r3, #4
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <MX_GPIO_Init+0x84>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	607b      	str	r3, [r7, #4]
 80019fe:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <MX_GPIO_Init+0x84>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a0f      	ldr	r2, [pc, #60]	; (8001a40 <MX_GPIO_Init+0x84>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b0d      	ldr	r3, [pc, #52]	; (8001a40 <MX_GPIO_Init+0x84>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	603b      	str	r3, [r7, #0]
 8001a1a:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <MX_GPIO_Init+0x84>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a08      	ldr	r2, [pc, #32]	; (8001a40 <MX_GPIO_Init+0x84>)
 8001a20:	f043 0302 	orr.w	r3, r3, #2
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <MX_GPIO_Init+0x84>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	603b      	str	r3, [r7, #0]
 8001a30:	683b      	ldr	r3, [r7, #0]

}
 8001a32:	bf00      	nop
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	40023800 	.word	0x40023800

08001a44 <RunSession>:

/* USER CODE BEGIN 4 */

static void RunSession(struct netconn *received_conn, uint16_t message_size, bool is_encrypted)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	f6ad 4d18 	subw	sp, sp, #3096	; 0xc18
 8001a4a:	af02      	add	r7, sp, #8
 8001a4c:	1d3b      	adds	r3, r7, #4
 8001a4e:	6018      	str	r0, [r3, #0]
 8001a50:	4608      	mov	r0, r1
 8001a52:	4611      	mov	r1, r2
 8001a54:	1cbb      	adds	r3, r7, #2
 8001a56:	4602      	mov	r2, r0
 8001a58:	801a      	strh	r2, [r3, #0]
 8001a5a:	1c7b      	adds	r3, r7, #1
 8001a5c:	460a      	mov	r2, r1
 8001a5e:	701a      	strb	r2, [r3, #0]
	uint16_t real_message_size;
	uint8_t sending_ciphertext[1024];
	uint8_t receive_buff[1024];
	uint8_t decrypted_buff[1024];
	struct netbuf *receive_netbuf;
	switch (message_size)
 8001a60:	1cbb      	adds	r3, r7, #2
 8001a62:	881b      	ldrh	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d002      	beq.n	8001a6e <RunSession+0x2a>
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d004      	beq.n	8001a76 <RunSession+0x32>
 8001a6c:	e008      	b.n	8001a80 <RunSession+0x3c>
	{
	case 0:
		real_message_size = 64;
 8001a6e:	2340      	movs	r3, #64	; 0x40
 8001a70:	f8a7 3c0e 	strh.w	r3, [r7, #3086]	; 0xc0e
		break;
 8001a74:	e008      	b.n	8001a88 <RunSession+0x44>
	case 1:
		real_message_size = 256;
 8001a76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a7a:	f8a7 3c0e 	strh.w	r3, [r7, #3086]	; 0xc0e
		break;
 8001a7e:	e003      	b.n	8001a88 <RunSession+0x44>
	default:
		real_message_size = 1024;
 8001a80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a84:	f8a7 3c0e 	strh.w	r3, [r7, #3086]	; 0xc0e
	}
	while (1)
	{

		recv_err = netconn_recv(received_conn, &receive_netbuf);
 8001a88:	f107 0208 	add.w	r2, r7, #8
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	4611      	mov	r1, r2
 8001a90:	6818      	ldr	r0, [r3, #0]
 8001a92:	f006 faeb 	bl	800806c <netconn_recv>
 8001a96:	4603      	mov	r3, r0
 8001a98:	f887 3c0d 	strb.w	r3, [r7, #3085]	; 0xc0d

		//If receive data successfully
		if (recv_err == ERR_OK)
 8001a9c:	f997 3c0d 	ldrsb.w	r3, [r7, #3085]	; 0xc0d
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d146      	bne.n	8001b32 <RunSession+0xee>
		{

			netbuf_copy(receive_netbuf, receive_buff, real_message_size);
 8001aa4:	f107 0308 	add.w	r3, r7, #8
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6818      	ldr	r0, [r3, #0]
 8001aac:	f8b7 2c0e 	ldrh.w	r2, [r7, #3086]	; 0xc0e
 8001ab0:	f207 410c 	addw	r1, r7, #1036	; 0x40c
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f009 ff5d 	bl	800b974 <pbuf_copy_partial>
			netbuf_delete(receive_netbuf);
 8001aba:	f107 0308 	add.w	r3, r7, #8
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f008 f847 	bl	8009b54 <netbuf_delete>
			if (is_encrypted)
 8001ac6:	1c7b      	adds	r3, r7, #1
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d023      	beq.n	8001b16 <RunSession+0xd2>
			{
				Decrypt(receive_buff, real_message_size, cipher_key, cipher_IV, decrypted_buff);
 8001ace:	f8b7 1c0e 	ldrh.w	r1, [r7, #3086]	; 0xc0e
 8001ad2:	f207 400c 	addw	r0, r7, #1036	; 0x40c
 8001ad6:	f107 030c 	add.w	r3, r7, #12
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	4b19      	ldr	r3, [pc, #100]	; (8001b44 <RunSession+0x100>)
 8001ade:	4a1a      	ldr	r2, [pc, #104]	; (8001b48 <RunSession+0x104>)
 8001ae0:	f015 f9d6 	bl	8016e90 <Decrypt>

			  Encrypt(sending_to_client, real_message_size, cipher_key, cipher_IV, sending_ciphertext);
 8001ae4:	f8b7 1c0e 	ldrh.w	r1, [r7, #3086]	; 0xc0e
 8001ae8:	f607 030c 	addw	r3, r7, #2060	; 0x80c
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <RunSession+0x100>)
 8001af0:	4a15      	ldr	r2, [pc, #84]	; (8001b48 <RunSession+0x104>)
 8001af2:	4816      	ldr	r0, [pc, #88]	; (8001b4c <RunSession+0x108>)
 8001af4:	f015 f9b6 	bl	8016e64 <Encrypt>
				if (netconn_write(received_conn, sending_ciphertext, real_message_size, NETCONN_COPY) != ERR_OK)
 8001af8:	f8b7 2c0e 	ldrh.w	r2, [r7, #3086]	; 0xc0e
 8001afc:	f607 010c 	addw	r1, r7, #2060	; 0x80c
 8001b00:	1d38      	adds	r0, r7, #4
 8001b02:	2300      	movs	r3, #0
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	2301      	movs	r3, #1
 8001b08:	6800      	ldr	r0, [r0, #0]
 8001b0a:	f006 fb29 	bl	8008160 <netconn_write_partly>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d0b9      	beq.n	8001a88 <RunSession+0x44>
				{
					break;
 8001b14:	e010      	b.n	8001b38 <RunSession+0xf4>
				}
			}
			else
			{
				if (netconn_write(received_conn, sending_to_client, real_message_size, NETCONN_COPY) != ERR_OK)
 8001b16:	f8b7 2c0e 	ldrh.w	r2, [r7, #3086]	; 0xc0e
 8001b1a:	1d38      	adds	r0, r7, #4
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	2301      	movs	r3, #1
 8001b22:	490a      	ldr	r1, [pc, #40]	; (8001b4c <RunSession+0x108>)
 8001b24:	6800      	ldr	r0, [r0, #0]
 8001b26:	f006 fb1b 	bl	8008160 <netconn_write_partly>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d102      	bne.n	8001b36 <RunSession+0xf2>
		recv_err = netconn_recv(received_conn, &receive_netbuf);
 8001b30:	e7aa      	b.n	8001a88 <RunSession+0x44>

		}
		//Close fin
		else
		{
			break;
 8001b32:	bf00      	nop
 8001b34:	e000      	b.n	8001b38 <RunSession+0xf4>
					break;
 8001b36:	bf00      	nop
		}
	}


}
 8001b38:	bf00      	nop
 8001b3a:	f507 6741 	add.w	r7, r7, #3088	; 0xc10
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000010 	.word	0x20000010
 8001b48:	20000000 	.word	0x20000000
 8001b4c:	20008310 	.word	0x20008310

08001b50 <Thread_TestService>:


static void Thread_TestService(void const * argument)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	1d3b      	adds	r3, r7, #4
 8001b5a:	6018      	str	r0, [r3, #0]
	struct netconn *server_conn, *accepted_conn;

	char receive_buffer[1024];

	//Setup server and binding port
	server_conn = netconn_new(NETCONN_TCP);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2100      	movs	r1, #0
 8001b60:	2010      	movs	r0, #16
 8001b62:	f005 ff5d 	bl	8007a20 <netconn_new_with_proto_and_callback>
 8001b66:	f8c7 0414 	str.w	r0, [r7, #1044]	; 0x414
	netconn_bind(server_conn, NULL, 7);
 8001b6a:	2207      	movs	r2, #7
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	f8d7 0414 	ldr.w	r0, [r7, #1044]	; 0x414
 8001b72:	f006 f80f 	bl	8007b94 <netconn_bind>
	netconn_listen(server_conn);
 8001b76:	21ff      	movs	r1, #255	; 0xff
 8001b78:	f8d7 0414 	ldr.w	r0, [r7, #1044]	; 0x414
 8001b7c:	f006 f842 	bl	8007c04 <netconn_listen_with_backlog>
	while(1) //Serve TCP service forever
	{
		accept_err = netconn_accept(server_conn, &accepted_conn);// This will block this thread until a TCP SYN packet arrive.
 8001b80:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001b84:	4619      	mov	r1, r3
 8001b86:	f8d7 0414 	ldr.w	r0, [r7, #1044]	; 0x414
 8001b8a:	f006 f867 	bl	8007c5c <netconn_accept>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	f887 3413 	strb.w	r3, [r7, #1043]	; 0x413
		if (accept_err == ERR_OK)
 8001b94:	f997 3413 	ldrsb.w	r3, [r7, #1043]	; 0x413
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1f1      	bne.n	8001b80 <Thread_TestService+0x30>
		{

			recv_err = netconn_recv(accepted_conn, &receive_buffer_ptr);
 8001b9c:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8001ba0:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 8001ba4:	4611      	mov	r1, r2
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f006 fa60 	bl	800806c <netconn_recv>
 8001bac:	4603      	mov	r3, r0
 8001bae:	f887 3412 	strb.w	r3, [r7, #1042]	; 0x412

			//There is data in receive buffer.
			if (recv_err == ERR_OK)
 8001bb2:	f997 3412 	ldrsb.w	r3, [r7, #1042]	; 0x412
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d132      	bne.n	8001c20 <Thread_TestService+0xd0>
			{

				data_receive_len = netbuf_len(receive_buffer_ptr);
 8001bba:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	891b      	ldrh	r3, [r3, #8]
 8001bc2:	f8a7 3410 	strh.w	r3, [r7, #1040]	; 0x410
				netbuf_copy(receive_buffer_ptr, (void*)receive_buffer, data_receive_len);
 8001bc6:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001bca:	6818      	ldr	r0, [r3, #0]
 8001bcc:	f8b7 2410 	ldrh.w	r2, [r7, #1040]	; 0x410
 8001bd0:	f107 0108 	add.w	r1, r7, #8
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f009 fecd 	bl	800b974 <pbuf_copy_partial>
				netbuf_delete(receive_buffer_ptr);
 8001bda:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8001bde:	4618      	mov	r0, r3
 8001be0:	f007 ffb8 	bl	8009b54 <netbuf_delete>
				//Announce message. Format is: (session_type)_(message_size)_(transaction_length)
				//real message size  = 16 * 4 ^(message_size)
				//real transaction length = (transaction_length + 1)*2
				switch (receive_buffer[0] - 48)
 8001be4:	f107 0308 	add.w	r3, r7, #8
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	3b30      	subs	r3, #48	; 0x30
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d10b      	bne.n	8001c08 <Thread_TestService+0xb8>
				{
				case 0:
					RunSession(accepted_conn, receive_buffer[2] - 48, false);
 8001bf0:	f8d7 0408 	ldr.w	r0, [r7, #1032]	; 0x408
 8001bf4:	f107 0308 	add.w	r3, r7, #8
 8001bf8:	789b      	ldrb	r3, [r3, #2]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	3b30      	subs	r3, #48	; 0x30
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	2200      	movs	r2, #0
 8001c02:	4619      	mov	r1, r3
 8001c04:	f7ff ff1e 	bl	8001a44 <RunSession>
				default:
					RunSession(accepted_conn, receive_buffer[2] - 48, true);
 8001c08:	f8d7 0408 	ldr.w	r0, [r7, #1032]	; 0x408
 8001c0c:	f107 0308 	add.w	r3, r7, #8
 8001c10:	789b      	ldrb	r3, [r3, #2]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	3b30      	subs	r3, #48	; 0x30
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	2201      	movs	r2, #1
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	f7ff ff12 	bl	8001a44 <RunSession>
				}


			}
			netconn_close(accepted_conn);
 8001c20:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8001c24:	4618      	mov	r0, r3
 8001c26:	f006 fb9d 	bl	8008364 <netconn_close>
			netconn_delete(accepted_conn);
 8001c2a:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f005 ff94 	bl	8007b5c <netconn_delete>
		accept_err = netconn_accept(server_conn, &accepted_conn);// This will block this thread until a TCP SYN packet arrive.
 8001c34:	e7a4      	b.n	8001b80 <Thread_TestService+0x30>
	...

08001c38 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001c38:	b5b0      	push	{r4, r5, r7, lr}
 8001c3a:	b08c      	sub	sp, #48	; 0x30
 8001c3c:	af02      	add	r7, sp, #8
 8001c3e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001c40:	f002 fba6 	bl	8004390 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */

  /* Infinite loop */

	//Prepare sending buffer to GUI
  uint8_t sending_to_repeat[] = "socket12sensor34";
 8001c44:	4b1f      	ldr	r3, [pc, #124]	; (8001cc4 <StartDefaultTask+0x8c>)
 8001c46:	f107 040c 	add.w	r4, r7, #12
 8001c4a:	461d      	mov	r5, r3
 8001c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c50:	682b      	ldr	r3, [r5, #0]
 8001c52:	7023      	strb	r3, [r4, #0]
  for (int i=0;i < 1024/16;i++)
 8001c54:	2300      	movs	r3, #0
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
 8001c58:	e019      	b.n	8001c8e <StartDefaultTask+0x56>
  {
  	memcpy(sending_to_client+i*strlen(sending_to_repeat), sending_to_repeat, strlen(sending_to_repeat));
 8001c5a:	f107 030c 	add.w	r3, r7, #12
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe fab6 	bl	80001d0 <strlen>
 8001c64:	4602      	mov	r2, r0
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	fb03 f302 	mul.w	r3, r3, r2
 8001c6c:	4a16      	ldr	r2, [pc, #88]	; (8001cc8 <StartDefaultTask+0x90>)
 8001c6e:	189c      	adds	r4, r3, r2
 8001c70:	f107 030c 	add.w	r3, r7, #12
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7fe faab 	bl	80001d0 <strlen>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	f107 030c 	add.w	r3, r7, #12
 8001c80:	4619      	mov	r1, r3
 8001c82:	4620      	mov	r0, r4
 8001c84:	f015 f94f 	bl	8016f26 <memcpy>
  for (int i=0;i < 1024/16;i++)
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	2b3f      	cmp	r3, #63	; 0x3f
 8001c92:	dde2      	ble.n	8001c5a <StartDefaultTask+0x22>
  }
  for (;;)
  {
  	if (gnetif.ip_addr.addr != 0)
 8001c94:	4b0d      	ldr	r3, [pc, #52]	; (8001ccc <StartDefaultTask+0x94>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0fb      	beq.n	8001c94 <StartDefaultTask+0x5c>
  	{
  		TCPservice_id = sys_thread_new("TestService", (void*) Thread_TestService, NULL, 2048, osPriorityAboveNormal);
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	490a      	ldr	r1, [pc, #40]	; (8001cd0 <StartDefaultTask+0x98>)
 8001ca8:	480a      	ldr	r0, [pc, #40]	; (8001cd4 <StartDefaultTask+0x9c>)
 8001caa:	f015 f897 	bl	8016ddc <sys_thread_new>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <StartDefaultTask+0xa0>)
 8001cb2:	601a      	str	r2, [r3, #0]

  uint32_t heap_size;

  for(;;)
  {
    osDelay(1);
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	f002 ff7f 	bl	8004bb8 <osDelay>
    heap_size = xPortGetFreeHeapSize();
 8001cba:	f005 fdcb 	bl	8007854 <xPortGetFreeHeapSize>
 8001cbe:	6238      	str	r0, [r7, #32]
    osDelay(1);
 8001cc0:	e7f8      	b.n	8001cb4 <StartDefaultTask+0x7c>
 8001cc2:	bf00      	nop
 8001cc4:	08017dd8 	.word	0x08017dd8
 8001cc8:	20008310 	.word	0x20008310
 8001ccc:	20008758 	.word	0x20008758
 8001cd0:	08001b51 	.word	0x08001b51
 8001cd4:	08017dcc 	.word	0x08017dcc
 8001cd8:	20008710 	.word	0x20008710

08001cdc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a04      	ldr	r2, [pc, #16]	; (8001cfc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d101      	bne.n	8001cf2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001cee:	f000 f9c1 	bl	8002074 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40010000 	.word	0x40010000

08001d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
	...

08001d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	607b      	str	r3, [r7, #4]
 8001d1a:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <HAL_MspInit+0x54>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	4a11      	ldr	r2, [pc, #68]	; (8001d64 <HAL_MspInit+0x54>)
 8001d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d24:	6453      	str	r3, [r2, #68]	; 0x44
 8001d26:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <HAL_MspInit+0x54>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d2e:	607b      	str	r3, [r7, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	603b      	str	r3, [r7, #0]
 8001d36:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <HAL_MspInit+0x54>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <HAL_MspInit+0x54>)
 8001d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d40:	6413      	str	r3, [r2, #64]	; 0x40
 8001d42:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <HAL_MspInit+0x54>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	603b      	str	r3, [r7, #0]
 8001d4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	210f      	movs	r1, #15
 8001d52:	f06f 0001 	mvn.w	r0, #1
 8001d56:	f000 fa87 	bl	8002268 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800

08001d68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08c      	sub	sp, #48	; 0x30
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8001d78:	2200      	movs	r2, #0
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	2019      	movs	r0, #25
 8001d7e:	f000 fa73 	bl	8002268 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8001d82:	2019      	movs	r0, #25
 8001d84:	f000 fa8c 	bl	80022a0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <HAL_InitTick+0xa4>)
 8001d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d90:	4a1e      	ldr	r2, [pc, #120]	; (8001e0c <HAL_InitTick+0xa4>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	6453      	str	r3, [r2, #68]	; 0x44
 8001d98:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <HAL_InitTick+0xa4>)
 8001d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001da4:	f107 0210 	add.w	r2, r7, #16
 8001da8:	f107 0314 	add.w	r3, r7, #20
 8001dac:	4611      	mov	r1, r2
 8001dae:	4618      	mov	r0, r3
 8001db0:	f002 f87e 	bl	8003eb0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001db4:	f002 f868 	bl	8003e88 <HAL_RCC_GetPCLK2Freq>
 8001db8:	4603      	mov	r3, r0
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc0:	4a13      	ldr	r2, [pc, #76]	; (8001e10 <HAL_InitTick+0xa8>)
 8001dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc6:	0c9b      	lsrs	r3, r3, #18
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001dcc:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <HAL_InitTick+0xac>)
 8001dce:	4a12      	ldr	r2, [pc, #72]	; (8001e18 <HAL_InitTick+0xb0>)
 8001dd0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001dd2:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <HAL_InitTick+0xac>)
 8001dd4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001dd8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001dda:	4a0e      	ldr	r2, [pc, #56]	; (8001e14 <HAL_InitTick+0xac>)
 8001ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dde:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001de0:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <HAL_InitTick+0xac>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de6:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <HAL_InitTick+0xac>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001dec:	4809      	ldr	r0, [pc, #36]	; (8001e14 <HAL_InitTick+0xac>)
 8001dee:	f002 f891 	bl	8003f14 <HAL_TIM_Base_Init>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d104      	bne.n	8001e02 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001df8:	4806      	ldr	r0, [pc, #24]	; (8001e14 <HAL_InitTick+0xac>)
 8001dfa:	f002 f8c0 	bl	8003f7e <HAL_TIM_Base_Start_IT>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	e000      	b.n	8001e04 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3730      	adds	r7, #48	; 0x30
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	431bde83 	.word	0x431bde83
 8001e14:	20008714 	.word	0x20008714
 8001e18:	40010000 	.word	0x40010000

08001e1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e2e:	e7fe      	b.n	8001e2e <HardFault_Handler+0x4>

08001e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e34:	e7fe      	b.n	8001e34 <MemManage_Handler+0x4>

08001e36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e3a:	e7fe      	b.n	8001e3a <BusFault_Handler+0x4>

08001e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <UsageFault_Handler+0x4>

08001e42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e54:	4802      	ldr	r0, [pc, #8]	; (8001e60 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001e56:	f002 f8b6 	bl	8003fc6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20008714 	.word	0x20008714

08001e64 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001e68:	4802      	ldr	r0, [pc, #8]	; (8001e74 <ETH_IRQHandler+0x10>)
 8001e6a:	f000 fe0d 	bl	8002a88 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	2000a068 	.word	0x2000a068

08001e78 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	e00a      	b.n	8001ea0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e8a:	f3af 8000 	nop.w
 8001e8e:	4601      	mov	r1, r0
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	1c5a      	adds	r2, r3, #1
 8001e94:	60ba      	str	r2, [r7, #8]
 8001e96:	b2ca      	uxtb	r2, r1
 8001e98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	dbf0      	blt.n	8001e8a <_read+0x12>
	}

return len;
 8001ea8:	687b      	ldr	r3, [r7, #4]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b086      	sub	sp, #24
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	60f8      	str	r0, [r7, #12]
 8001eba:	60b9      	str	r1, [r7, #8]
 8001ebc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]
 8001ec2:	e009      	b.n	8001ed8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	1c5a      	adds	r2, r3, #1
 8001ec8:	60ba      	str	r2, [r7, #8]
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	dbf1      	blt.n	8001ec4 <_write+0x12>
	}
	return len;
 8001ee0:	687b      	ldr	r3, [r7, #4]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <_close>:

int _close(int file)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
	return -1;
 8001ef2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f12:	605a      	str	r2, [r3, #4]
	return 0;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <_isatty>:

int _isatty(int file)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
	return 1;
 8001f2a:	2301      	movs	r3, #1
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
	return 0;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3714      	adds	r7, #20
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
	...

08001f54 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001f5c:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <_sbrk+0x50>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d102      	bne.n	8001f6a <_sbrk+0x16>
		heap_end = &end;
 8001f64:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <_sbrk+0x50>)
 8001f66:	4a10      	ldr	r2, [pc, #64]	; (8001fa8 <_sbrk+0x54>)
 8001f68:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <_sbrk+0x50>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <_sbrk+0x50>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4413      	add	r3, r2
 8001f78:	466a      	mov	r2, sp
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d905      	bls.n	8001f8a <_sbrk+0x36>
	{
		errno = ENOMEM;
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <_sbrk+0x58>)
 8001f80:	220c      	movs	r2, #12
 8001f82:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001f84:	f04f 33ff 	mov.w	r3, #4294967295
 8001f88:	e006      	b.n	8001f98 <_sbrk+0x44>
	}

	heap_end += incr;
 8001f8a:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <_sbrk+0x50>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	4a04      	ldr	r2, [pc, #16]	; (8001fa4 <_sbrk+0x50>)
 8001f94:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001f96:	68fb      	ldr	r3, [r7, #12]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	20000314 	.word	0x20000314
 8001fa8:	20010ec8 	.word	0x20010ec8
 8001fac:	20010ebc 	.word	0x20010ebc

08001fb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fb4:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <SystemInit+0x28>)
 8001fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fba:	4a07      	ldr	r2, [pc, #28]	; (8001fd8 <SystemInit+0x28>)
 8001fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fc4:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <SystemInit+0x28>)
 8001fc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fca:	609a      	str	r2, [r3, #8]
#endif
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001fdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002014 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001fe0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001fe2:	e003      	b.n	8001fec <LoopCopyDataInit>

08001fe4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001fe6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001fe8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001fea:	3104      	adds	r1, #4

08001fec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001fec:	480b      	ldr	r0, [pc, #44]	; (800201c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001fee:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ff0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ff2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ff4:	d3f6      	bcc.n	8001fe4 <CopyDataInit>
  ldr  r2, =_sbss
 8001ff6:	4a0b      	ldr	r2, [pc, #44]	; (8002024 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ff8:	e002      	b.n	8002000 <LoopFillZerobss>

08001ffa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ffa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ffc:	f842 3b04 	str.w	r3, [r2], #4

08002000 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002000:	4b09      	ldr	r3, [pc, #36]	; (8002028 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002002:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002004:	d3f9      	bcc.n	8001ffa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002006:	f7ff ffd3 	bl	8001fb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800200a:	f014 ff59 	bl	8016ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800200e:	f7ff fc49 	bl	80018a4 <main>
  bx  lr    
 8002012:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002014:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002018:	0801fb70 	.word	0x0801fb70
  ldr  r0, =_sdata
 800201c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002020:	200000a4 	.word	0x200000a4
  ldr  r2, =_sbss
 8002024:	200000a4 	.word	0x200000a4
  ldr  r3, = _ebss
 8002028:	20010ec4 	.word	0x20010ec4

0800202c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800202c:	e7fe      	b.n	800202c <ADC_IRQHandler>
	...

08002030 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002034:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <HAL_Init+0x40>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a0d      	ldr	r2, [pc, #52]	; (8002070 <HAL_Init+0x40>)
 800203a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800203e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002040:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <HAL_Init+0x40>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a0a      	ldr	r2, [pc, #40]	; (8002070 <HAL_Init+0x40>)
 8002046:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800204a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800204c:	4b08      	ldr	r3, [pc, #32]	; (8002070 <HAL_Init+0x40>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a07      	ldr	r2, [pc, #28]	; (8002070 <HAL_Init+0x40>)
 8002052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002056:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002058:	2003      	movs	r0, #3
 800205a:	f000 f8fa 	bl	8002252 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800205e:	2000      	movs	r0, #0
 8002060:	f7ff fe82 	bl	8001d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002064:	f7ff fe54 	bl	8001d10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40023c00 	.word	0x40023c00

08002074 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002078:	4b06      	ldr	r3, [pc, #24]	; (8002094 <HAL_IncTick+0x20>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	461a      	mov	r2, r3
 800207e:	4b06      	ldr	r3, [pc, #24]	; (8002098 <HAL_IncTick+0x24>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4413      	add	r3, r2
 8002084:	4a04      	ldr	r2, [pc, #16]	; (8002098 <HAL_IncTick+0x24>)
 8002086:	6013      	str	r3, [r2, #0]
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	20000028 	.word	0x20000028
 8002098:	20008754 	.word	0x20008754

0800209c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return uwTick;
 80020a0:	4b03      	ldr	r3, [pc, #12]	; (80020b0 <HAL_GetTick+0x14>)
 80020a2:	681b      	ldr	r3, [r3, #0]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	20008754 	.word	0x20008754

080020b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020bc:	f7ff ffee 	bl	800209c <HAL_GetTick>
 80020c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020cc:	d005      	beq.n	80020da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ce:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <HAL_Delay+0x40>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	461a      	mov	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4413      	add	r3, r2
 80020d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020da:	bf00      	nop
 80020dc:	f7ff ffde 	bl	800209c <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d8f7      	bhi.n	80020dc <HAL_Delay+0x28>
  {
  }
}
 80020ec:	bf00      	nop
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20000028 	.word	0x20000028

080020f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002108:	4b0c      	ldr	r3, [pc, #48]	; (800213c <__NVIC_SetPriorityGrouping+0x44>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002114:	4013      	ands	r3, r2
 8002116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002120:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800212a:	4a04      	ldr	r2, [pc, #16]	; (800213c <__NVIC_SetPriorityGrouping+0x44>)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	60d3      	str	r3, [r2, #12]
}
 8002130:	bf00      	nop
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002144:	4b04      	ldr	r3, [pc, #16]	; (8002158 <__NVIC_GetPriorityGrouping+0x18>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	0a1b      	lsrs	r3, r3, #8
 800214a:	f003 0307 	and.w	r3, r3, #7
}
 800214e:	4618      	mov	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216a:	2b00      	cmp	r3, #0
 800216c:	db0b      	blt.n	8002186 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	f003 021f 	and.w	r2, r3, #31
 8002174:	4907      	ldr	r1, [pc, #28]	; (8002194 <__NVIC_EnableIRQ+0x38>)
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	095b      	lsrs	r3, r3, #5
 800217c:	2001      	movs	r0, #1
 800217e:	fa00 f202 	lsl.w	r2, r0, r2
 8002182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	e000e100 	.word	0xe000e100

08002198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	6039      	str	r1, [r7, #0]
 80021a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	db0a      	blt.n	80021c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	490c      	ldr	r1, [pc, #48]	; (80021e4 <__NVIC_SetPriority+0x4c>)
 80021b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b6:	0112      	lsls	r2, r2, #4
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	440b      	add	r3, r1
 80021bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021c0:	e00a      	b.n	80021d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	4908      	ldr	r1, [pc, #32]	; (80021e8 <__NVIC_SetPriority+0x50>)
 80021c8:	79fb      	ldrb	r3, [r7, #7]
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	3b04      	subs	r3, #4
 80021d0:	0112      	lsls	r2, r2, #4
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	440b      	add	r3, r1
 80021d6:	761a      	strb	r2, [r3, #24]
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	e000e100 	.word	0xe000e100
 80021e8:	e000ed00 	.word	0xe000ed00

080021ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b089      	sub	sp, #36	; 0x24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	f1c3 0307 	rsb	r3, r3, #7
 8002206:	2b04      	cmp	r3, #4
 8002208:	bf28      	it	cs
 800220a:	2304      	movcs	r3, #4
 800220c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	3304      	adds	r3, #4
 8002212:	2b06      	cmp	r3, #6
 8002214:	d902      	bls.n	800221c <NVIC_EncodePriority+0x30>
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	3b03      	subs	r3, #3
 800221a:	e000      	b.n	800221e <NVIC_EncodePriority+0x32>
 800221c:	2300      	movs	r3, #0
 800221e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002220:	f04f 32ff 	mov.w	r2, #4294967295
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43da      	mvns	r2, r3
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	401a      	ands	r2, r3
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002234:	f04f 31ff 	mov.w	r1, #4294967295
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	fa01 f303 	lsl.w	r3, r1, r3
 800223e:	43d9      	mvns	r1, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002244:	4313      	orrs	r3, r2
         );
}
 8002246:	4618      	mov	r0, r3
 8002248:	3724      	adds	r7, #36	; 0x24
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff ff4c 	bl	80020f8 <__NVIC_SetPriorityGrouping>
}
 8002260:	bf00      	nop
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
 8002274:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800227a:	f7ff ff61 	bl	8002140 <__NVIC_GetPriorityGrouping>
 800227e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	68b9      	ldr	r1, [r7, #8]
 8002284:	6978      	ldr	r0, [r7, #20]
 8002286:	f7ff ffb1 	bl	80021ec <NVIC_EncodePriority>
 800228a:	4602      	mov	r2, r0
 800228c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002290:	4611      	mov	r1, r2
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff ff80 	bl	8002198 <__NVIC_SetPriority>
}
 8002298:	bf00      	nop
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff ff54 	bl	800215c <__NVIC_EnableIRQ>
}
 80022b4:	bf00      	nop
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b088      	sub	sp, #32
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	61fb      	str	r3, [r7, #28]
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80022cc:	4baa      	ldr	r3, [pc, #680]	; (8002578 <HAL_ETH_Init+0x2bc>)
 80022ce:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80022d4:	2300      	movs	r3, #0
 80022d6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e185      	b.n	80025ee <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d106      	bne.n	80022fc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f002 f88c 	bl	8004414 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022fc:	2300      	movs	r3, #0
 80022fe:	60bb      	str	r3, [r7, #8]
 8002300:	4b9e      	ldr	r3, [pc, #632]	; (800257c <HAL_ETH_Init+0x2c0>)
 8002302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002304:	4a9d      	ldr	r2, [pc, #628]	; (800257c <HAL_ETH_Init+0x2c0>)
 8002306:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800230a:	6453      	str	r3, [r2, #68]	; 0x44
 800230c:	4b9b      	ldr	r3, [pc, #620]	; (800257c <HAL_ETH_Init+0x2c0>)
 800230e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002318:	4b99      	ldr	r3, [pc, #612]	; (8002580 <HAL_ETH_Init+0x2c4>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	4a98      	ldr	r2, [pc, #608]	; (8002580 <HAL_ETH_Init+0x2c4>)
 800231e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002322:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002324:	4b96      	ldr	r3, [pc, #600]	; (8002580 <HAL_ETH_Init+0x2c4>)
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	4994      	ldr	r1, [pc, #592]	; (8002580 <HAL_ETH_Init+0x2c4>)
 800232e:	4313      	orrs	r3, r2
 8002330:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f042 0201 	orr.w	r2, r2, #1
 8002344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002348:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800234a:	f7ff fea7 	bl	800209c <HAL_GetTick>
 800234e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002350:	e011      	b.n	8002376 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002352:	f7ff fea3 	bl	800209c <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002360:	d909      	bls.n	8002376 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2203      	movs	r2, #3
 8002366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e13b      	b.n	80025ee <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1e4      	bne.n	8002352 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f023 031c 	bic.w	r3, r3, #28
 8002396:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002398:	f001 fd6a 	bl	8003e70 <HAL_RCC_GetHCLKFreq>
 800239c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	4a78      	ldr	r2, [pc, #480]	; (8002584 <HAL_ETH_Init+0x2c8>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d908      	bls.n	80023b8 <HAL_ETH_Init+0xfc>
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	4a77      	ldr	r2, [pc, #476]	; (8002588 <HAL_ETH_Init+0x2cc>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d804      	bhi.n	80023b8 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	f043 0308 	orr.w	r3, r3, #8
 80023b4:	61fb      	str	r3, [r7, #28]
 80023b6:	e027      	b.n	8002408 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	4a73      	ldr	r2, [pc, #460]	; (8002588 <HAL_ETH_Init+0x2cc>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d908      	bls.n	80023d2 <HAL_ETH_Init+0x116>
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	4a72      	ldr	r2, [pc, #456]	; (800258c <HAL_ETH_Init+0x2d0>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d804      	bhi.n	80023d2 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f043 030c 	orr.w	r3, r3, #12
 80023ce:	61fb      	str	r3, [r7, #28]
 80023d0:	e01a      	b.n	8002408 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	4a6d      	ldr	r2, [pc, #436]	; (800258c <HAL_ETH_Init+0x2d0>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d903      	bls.n	80023e2 <HAL_ETH_Init+0x126>
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	4a6c      	ldr	r2, [pc, #432]	; (8002590 <HAL_ETH_Init+0x2d4>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d911      	bls.n	8002406 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	4a6a      	ldr	r2, [pc, #424]	; (8002590 <HAL_ETH_Init+0x2d4>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d908      	bls.n	80023fc <HAL_ETH_Init+0x140>
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	4a69      	ldr	r2, [pc, #420]	; (8002594 <HAL_ETH_Init+0x2d8>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d804      	bhi.n	80023fc <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	f043 0304 	orr.w	r3, r3, #4
 80023f8:	61fb      	str	r3, [r7, #28]
 80023fa:	e005      	b.n	8002408 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f043 0310 	orr.w	r3, r3, #16
 8002402:	61fb      	str	r3, [r7, #28]
 8002404:	e000      	b.n	8002408 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002406:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	69fa      	ldr	r2, [r7, #28]
 800240e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002410:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002414:	2100      	movs	r1, #0
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 fc19 	bl	8002c4e <HAL_ETH_WritePHYRegister>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00b      	beq.n	800243a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002426:	6939      	ldr	r1, [r7, #16]
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 fca5 	bl	8002d78 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e0d9      	b.n	80025ee <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800243a:	20ff      	movs	r0, #255	; 0xff
 800243c:	f7ff fe3a 	bl	80020b4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 80a7 	beq.w	8002598 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800244a:	f7ff fe27 	bl	800209c <HAL_GetTick>
 800244e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002450:	f107 030c 	add.w	r3, r7, #12
 8002454:	461a      	mov	r2, r3
 8002456:	2101      	movs	r1, #1
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 fb90 	bl	8002b7e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800245e:	f7ff fe1d 	bl	800209c <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	f241 3288 	movw	r2, #5000	; 0x1388
 800246c:	4293      	cmp	r3, r2
 800246e:	d90f      	bls.n	8002490 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002474:	6939      	ldr	r1, [r7, #16]
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 fc7e 	bl	8002d78 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e0ae      	b.n	80025ee <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f003 0304 	and.w	r3, r3, #4
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0da      	beq.n	8002450 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800249a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800249e:	2100      	movs	r1, #0
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 fbd4 	bl	8002c4e <HAL_ETH_WritePHYRegister>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00b      	beq.n	80024c4 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80024b0:	6939      	ldr	r1, [r7, #16]
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 fc60 	bl	8002d78 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80024c0:	2301      	movs	r3, #1
 80024c2:	e094      	b.n	80025ee <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80024c4:	f7ff fdea 	bl	800209c <HAL_GetTick>
 80024c8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80024ca:	f107 030c 	add.w	r3, r7, #12
 80024ce:	461a      	mov	r2, r3
 80024d0:	2101      	movs	r1, #1
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 fb53 	bl	8002b7e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80024d8:	f7ff fde0 	bl	800209c <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d90f      	bls.n	800250a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80024ee:	6939      	ldr	r1, [r7, #16]
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 fc41 	bl	8002d78 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e071      	b.n	80025ee <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f003 0320 	and.w	r3, r3, #32
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0da      	beq.n	80024ca <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002514:	f107 030c 	add.w	r3, r7, #12
 8002518:	461a      	mov	r2, r3
 800251a:	211f      	movs	r1, #31
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 fb2e 	bl	8002b7e <HAL_ETH_ReadPHYRegister>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00b      	beq.n	8002540 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800252c:	6939      	ldr	r1, [r7, #16]
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 fc22 	bl	8002d78 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800253c:	2301      	movs	r3, #1
 800253e:	e056      	b.n	80025ee <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f003 0310 	and.w	r3, r3, #16
 8002546:	2b00      	cmp	r3, #0
 8002548:	d004      	beq.n	8002554 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002550:	60da      	str	r2, [r3, #12]
 8002552:	e002      	b.n	800255a <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	609a      	str	r2, [r3, #8]
 800256a:	e037      	b.n	80025dc <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	e032      	b.n	80025dc <HAL_ETH_Init+0x320>
 8002576:	bf00      	nop
 8002578:	03938700 	.word	0x03938700
 800257c:	40023800 	.word	0x40023800
 8002580:	40013800 	.word	0x40013800
 8002584:	01312cff 	.word	0x01312cff
 8002588:	02160ebf 	.word	0x02160ebf
 800258c:	039386ff 	.word	0x039386ff
 8002590:	05f5e0ff 	.word	0x05f5e0ff
 8002594:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	08db      	lsrs	r3, r3, #3
 800259e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	085b      	lsrs	r3, r3, #1
 80025a6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80025a8:	4313      	orrs	r3, r2
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	2100      	movs	r1, #0
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 fb4c 	bl	8002c4e <HAL_ETH_WritePHYRegister>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00b      	beq.n	80025d4 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80025c0:	6939      	ldr	r1, [r7, #16]
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 fbd8 	bl	8002d78 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e00c      	b.n	80025ee <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80025d4:	f640 70ff 	movw	r0, #4095	; 0xfff
 80025d8:	f7ff fd6c 	bl	80020b4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80025dc:	6939      	ldr	r1, [r7, #16]
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 fbca 	bl	8002d78 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3720      	adds	r7, #32
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop

080025f8 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b087      	sub	sp, #28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
 8002604:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002610:	2b01      	cmp	r3, #1
 8002612:	d101      	bne.n	8002618 <HAL_ETH_DMATxDescListInit+0x20>
 8002614:	2302      	movs	r3, #2
 8002616:	e052      	b.n	80026be <HAL_ETH_DMATxDescListInit+0xc6>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2202      	movs	r2, #2
 8002624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	e030      	b.n	8002696 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	015b      	lsls	r3, r3, #5
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	4413      	add	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002644:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800264c:	fb02 f303 	mul.w	r3, r2, r3
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	4413      	add	r3, r2
 8002654:	461a      	mov	r2, r3
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d105      	bne.n	800266e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	3b01      	subs	r3, #1
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	429a      	cmp	r2, r3
 8002676:	d208      	bcs.n	800268a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	3301      	adds	r3, #1
 800267c:	015b      	lsls	r3, r3, #5
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	4413      	add	r3, r2
 8002682:	461a      	mov	r2, r3
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	60da      	str	r2, [r3, #12]
 8002688:	e002      	b.n	8002690 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	3301      	adds	r3, #1
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d3ca      	bcc.n	8002634 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026a8:	3310      	adds	r3, #16
 80026aa:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	371c      	adds	r7, #28
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b087      	sub	sp, #28
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	60f8      	str	r0, [r7, #12]
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	607a      	str	r2, [r7, #4]
 80026d6:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d101      	bne.n	80026ea <HAL_ETH_DMARxDescListInit+0x20>
 80026e6:	2302      	movs	r3, #2
 80026e8:	e056      	b.n	8002798 <HAL_ETH_DMARxDescListInit+0xce>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2202      	movs	r2, #2
 80026f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	68ba      	ldr	r2, [r7, #8]
 80026fe:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8002700:	2300      	movs	r3, #0
 8002702:	617b      	str	r3, [r7, #20]
 8002704:	e034      	b.n	8002770 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	015b      	lsls	r3, r3, #5
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	4413      	add	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002716:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800271e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002726:	fb02 f303 	mul.w	r3, r2, r3
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	4413      	add	r3, r2
 800272e:	461a      	mov	r2, r3
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d105      	bne.n	8002748 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	3b01      	subs	r3, #1
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	429a      	cmp	r2, r3
 8002750:	d208      	bcs.n	8002764 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	3301      	adds	r3, #1
 8002756:	015b      	lsls	r3, r3, #5
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	4413      	add	r3, r2
 800275c:	461a      	mov	r2, r3
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	60da      	str	r2, [r3, #12]
 8002762:	e002      	b.n	800276a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	3301      	adds	r3, #1
 800276e:	617b      	str	r3, [r7, #20]
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	429a      	cmp	r2, r3
 8002776:	d3c6      	bcc.n	8002706 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68ba      	ldr	r2, [r7, #8]
 800277e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002782:	330c      	adds	r3, #12
 8002784:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	371c      	adds	r7, #28
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <HAL_ETH_TransmitFrame+0x24>
 80027c4:	2302      	movs	r3, #2
 80027c6:	e0cd      	b.n	8002964 <HAL_ETH_TransmitFrame+0x1c0>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2202      	movs	r2, #2
 80027d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d109      	bne.n	80027f2 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80027ee:	2301      	movs	r3, #1
 80027f0:	e0b8      	b.n	8002964 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	da09      	bge.n	8002810 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2212      	movs	r2, #18
 8002800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e0a9      	b.n	8002964 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002816:	4293      	cmp	r3, r2
 8002818:	d915      	bls.n	8002846 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	4a54      	ldr	r2, [pc, #336]	; (8002970 <HAL_ETH_TransmitFrame+0x1cc>)
 800281e:	fba2 2303 	umull	r2, r3, r2, r3
 8002822:	0a9b      	lsrs	r3, r3, #10
 8002824:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	4b51      	ldr	r3, [pc, #324]	; (8002970 <HAL_ETH_TransmitFrame+0x1cc>)
 800282a:	fba3 1302 	umull	r1, r3, r3, r2
 800282e:	0a9b      	lsrs	r3, r3, #10
 8002830:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002834:	fb01 f303 	mul.w	r3, r1, r3
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d005      	beq.n	800284a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	3301      	adds	r3, #1
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	e001      	b.n	800284a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8002846:	2301      	movs	r3, #1
 8002848:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d11c      	bne.n	800288a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800285e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800286a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002876:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800287a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	461a      	mov	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	62da      	str	r2, [r3, #44]	; 0x2c
 8002888:	e04b      	b.n	8002922 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800288a:	2300      	movs	r3, #0
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	e044      	b.n	800291a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800289e:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d107      	bne.n	80028b6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80028b4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ba:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80028be:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d116      	bne.n	80028f8 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80028d8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	4a25      	ldr	r2, [pc, #148]	; (8002974 <HAL_ETH_TransmitFrame+0x1d0>)
 80028de:	fb02 f203 	mul.w	r2, r2, r3
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	4413      	add	r3, r2
 80028e6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80028ea:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80028f6:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002902:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002906:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	461a      	mov	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	3301      	adds	r3, #1
 8002918:	613b      	str	r3, [r7, #16]
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	429a      	cmp	r2, r3
 8002920:	d3b6      	bcc.n	8002890 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800292a:	3314      	adds	r3, #20
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0304 	and.w	r3, r3, #4
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00d      	beq.n	8002952 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800293e:	3314      	adds	r3, #20
 8002940:	2204      	movs	r2, #4
 8002942:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800294c:	3304      	adds	r3, #4
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	371c      	adds	r7, #28
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	ac02b00b 	.word	0xac02b00b
 8002974:	fffffa0c 	.word	0xfffffa0c

08002978 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8002980:	2300      	movs	r3, #0
 8002982:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800298a:	2b01      	cmp	r3, #1
 800298c:	d101      	bne.n	8002992 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800298e:	2302      	movs	r3, #2
 8002990:	e074      	b.n	8002a7c <HAL_ETH_GetReceivedFrame_IT+0x104>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2202      	movs	r2, #2
 800299e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80029a2:	e05a      	b.n	8002a5a <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	3301      	adds	r3, #1
 80029a8:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029b8:	d10d      	bne.n	80029d6 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	461a      	mov	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	629a      	str	r2, [r3, #40]	; 0x28
 80029d4:	e041      	b.n	8002a5a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10b      	bne.n	80029fc <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e8:	1c5a      	adds	r2, r3, #1
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	461a      	mov	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	629a      	str	r2, [r3, #40]	; 0x28
 80029fa:	e02e      	b.n	8002a5a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a08:	1c5a      	adds	r2, r3, #1
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d103      	bne.n	8002a1e <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	0c1b      	lsrs	r3, r3, #16
 8002a26:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002a2a:	1f1a      	subs	r2, r3, #4
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	461a      	mov	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	e010      	b.n	8002a7c <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	db02      	blt.n	8002a6a <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2b03      	cmp	r3, #3
 8002a68:	d99c      	bls.n	80029a4 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a98:	3314      	adds	r3, #20
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa0:	2b40      	cmp	r3, #64	; 0x40
 8002aa2:	d112      	bne.n	8002aca <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f001 fd63 	bl	8004570 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ab2:	3314      	adds	r3, #20
 8002ab4:	2240      	movs	r2, #64	; 0x40
 8002ab6:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ac8:	e01b      	b.n	8002b02 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ad2:	3314      	adds	r3, #20
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d111      	bne.n	8002b02 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f839 	bl	8002b56 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aec:	3314      	adds	r3, #20
 8002aee:	2201      	movs	r2, #1
 8002af0:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b0a:	3314      	adds	r3, #20
 8002b0c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b10:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b1a:	3314      	adds	r3, #20
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b26:	d112      	bne.n	8002b4e <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 f81e 	bl	8002b6a <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b36:	3314      	adds	r3, #20
 8002b38:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002b3c:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b083      	sub	sp, #12
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b086      	sub	sp, #24
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	60f8      	str	r0, [r7, #12]
 8002b86:	460b      	mov	r3, r1
 8002b88:	607a      	str	r2, [r7, #4]
 8002b8a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b82      	cmp	r3, #130	; 0x82
 8002b9e:	d101      	bne.n	8002ba4 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e050      	b.n	8002c46 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2282      	movs	r2, #130	; 0x82
 8002ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f003 031c 	and.w	r3, r3, #28
 8002bba:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8a1b      	ldrh	r3, [r3, #16]
 8002bc0:	02db      	lsls	r3, r3, #11
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002bca:	897b      	ldrh	r3, [r7, #10]
 8002bcc:	019b      	lsls	r3, r3, #6
 8002bce:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f023 0302 	bic.w	r3, r3, #2
 8002bde:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002bf0:	f7ff fa54 	bl	800209c <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002bf6:	e015      	b.n	8002c24 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002bf8:	f7ff fa50 	bl	800209c <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c06:	d309      	bcc.n	8002c1c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e014      	b.n	8002c46 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1e4      	bne.n	8002bf8 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	461a      	mov	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3718      	adds	r7, #24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b086      	sub	sp, #24
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	60f8      	str	r0, [r7, #12]
 8002c56:	460b      	mov	r3, r1
 8002c58:	607a      	str	r2, [r7, #4]
 8002c5a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b42      	cmp	r3, #66	; 0x42
 8002c6e:	d101      	bne.n	8002c74 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002c70:	2302      	movs	r3, #2
 8002c72:	e04e      	b.n	8002d12 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2242      	movs	r2, #66	; 0x42
 8002c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	f003 031c 	and.w	r3, r3, #28
 8002c8a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8a1b      	ldrh	r3, [r3, #16]
 8002c90:	02db      	lsls	r3, r3, #11
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002c9a:	897b      	ldrh	r3, [r7, #10]
 8002c9c:	019b      	lsls	r3, r3, #6
 8002c9e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f043 0302 	orr.w	r3, r3, #2
 8002cae:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002cca:	f7ff f9e7 	bl	800209c <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002cd0:	e015      	b.n	8002cfe <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002cd2:	f7ff f9e3 	bl	800209c <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce0:	d309      	bcc.n	8002cf6 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e00d      	b.n	8002d12 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1e4      	bne.n	8002cd2 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3718      	adds	r7, #24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b082      	sub	sp, #8
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d101      	bne.n	8002d30 <HAL_ETH_Start+0x16>
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	e01f      	b.n	8002d70 <HAL_ETH_Start+0x56>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 fa1b 	bl	800317c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 fa35 	bl	80031b6 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 fa7f 	bl	8003250 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 fa4c 	bl	80031f0 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 fa61 	bl	8003220 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b0b0      	sub	sp, #192	; 0xc0
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8002d82:	2300      	movs	r3, #0
 8002d84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d007      	beq.n	8002d9e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d94:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d9c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002da2:	2300      	movs	r3, #0
 8002da4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002da6:	2300      	movs	r3, #0
 8002da8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002daa:	2300      	movs	r3, #0
 8002dac:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002dae:	2300      	movs	r3, #0
 8002db0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002db2:	2300      	movs	r3, #0
 8002db4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d103      	bne.n	8002dc6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002dbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dc2:	663b      	str	r3, [r7, #96]	; 0x60
 8002dc4:	e001      	b.n	8002dca <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002dca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dce:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002de0:	2300      	movs	r3, #0
 8002de2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002de4:	2340      	movs	r3, #64	; 0x40
 8002de6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002de8:	2300      	movs	r3, #0
 8002dea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002df4:	2300      	movs	r3, #0
 8002df6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002e00:	2300      	movs	r3, #0
 8002e02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8002e06:	2300      	movs	r3, #0
 8002e08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002e18:	2380      	movs	r3, #128	; 0x80
 8002e1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002e24:	2300      	movs	r3, #0
 8002e26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002e30:	2300      	movs	r3, #0
 8002e32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002e36:	2300      	movs	r3, #0
 8002e38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002e4c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e50:	4bac      	ldr	r3, [pc, #688]	; (8003104 <ETH_MACDMAConfig+0x38c>)
 8002e52:	4013      	ands	r3, r2
 8002e54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002e58:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002e5c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002e5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002e60:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002e62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002e64:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002e6a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002e6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002e6e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002e70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002e72:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002e78:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002e7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002e7c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002e7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002e80:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002e82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002e84:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002e86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002e88:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002e8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002e8c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002e8e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e92:	4313      	orrs	r3, r2
 8002e94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ea0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002eac:	2001      	movs	r0, #1
 8002eae:	f7ff f901 	bl	80020b4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002eba:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002ebc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002ebe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002ec0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002ec2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002ec4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002ec6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002eca:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002ecc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002ed0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002ed2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002ed6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002ed8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002edc:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002ee0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002ee8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002eea:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ef6:	2001      	movs	r0, #1
 8002ef8:	f7ff f8dc 	bl	80020b4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f04:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f0e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002f18:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002f24:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f28:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002f32:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f36:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002f38:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002f3c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002f3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002f42:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002f44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002f48:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002f4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002f4e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002f50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002f54:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002f56:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f68:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f74:	2001      	movs	r0, #1
 8002f76:	f7ff f89d 	bl	80020b4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f82:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002f84:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002f88:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f9e:	2001      	movs	r0, #1
 8002fa0:	f7ff f888 	bl	80020b4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002fac:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002fb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fb6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002fbc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002fc0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002fd2:	2304      	movs	r3, #4
 8002fd4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002fd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fda:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002fdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fe0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002fe2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002fe6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002fe8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fec:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002fee:	2380      	movs	r3, #128	; 0x80
 8002ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003002:	3318      	adds	r3, #24
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800300a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800300e:	4b3e      	ldr	r3, [pc, #248]	; (8003108 <ETH_MACDMAConfig+0x390>)
 8003010:	4013      	ands	r3, r2
 8003012:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003016:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003018:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800301a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800301c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800301e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003020:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003022:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003024:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003026:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003028:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800302a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800302c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800302e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003032:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003034:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003036:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003038:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800303c:	4313      	orrs	r3, r2
 800303e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800304a:	3318      	adds	r3, #24
 800304c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003050:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800305a:	3318      	adds	r3, #24
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003062:	2001      	movs	r0, #1
 8003064:	f7ff f826 	bl	80020b4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003070:	3318      	adds	r3, #24
 8003072:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003076:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003078:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800307a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800307c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800307e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8003080:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8003082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003084:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8003086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8003088:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800308a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800308c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800308e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8003090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003092:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800309c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030a0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80030b0:	2001      	movs	r0, #1
 80030b2:	f7fe ffff 	bl	80020b4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80030c2:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d10f      	bne.n	80030ec <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030d4:	331c      	adds	r3, #28
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80030e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030e8:	331c      	adds	r3, #28
 80030ea:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	461a      	mov	r2, r3
 80030f2:	2100      	movs	r1, #0
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 f809 	bl	800310c <ETH_MACAddressConfig>
}
 80030fa:	bf00      	nop
 80030fc:	37c0      	adds	r7, #192	; 0xc0
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	ff20810f 	.word	0xff20810f
 8003108:	f8de3f23 	.word	0xf8de3f23

0800310c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800310c:	b480      	push	{r7}
 800310e:	b087      	sub	sp, #28
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3305      	adds	r3, #5
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	021b      	lsls	r3, r3, #8
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	3204      	adds	r2, #4
 8003124:	7812      	ldrb	r2, [r2, #0]
 8003126:	4313      	orrs	r3, r2
 8003128:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	4b11      	ldr	r3, [pc, #68]	; (8003174 <ETH_MACAddressConfig+0x68>)
 800312e:	4413      	add	r3, r2
 8003130:	461a      	mov	r2, r3
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3303      	adds	r3, #3
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	061a      	lsls	r2, r3, #24
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	3302      	adds	r3, #2
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	041b      	lsls	r3, r3, #16
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3301      	adds	r3, #1
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	021b      	lsls	r3, r3, #8
 8003150:	4313      	orrs	r3, r2
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	7812      	ldrb	r2, [r2, #0]
 8003156:	4313      	orrs	r3, r2
 8003158:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800315a:	68ba      	ldr	r2, [r7, #8]
 800315c:	4b06      	ldr	r3, [pc, #24]	; (8003178 <ETH_MACAddressConfig+0x6c>)
 800315e:	4413      	add	r3, r2
 8003160:	461a      	mov	r2, r3
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	6013      	str	r3, [r2, #0]
}
 8003166:	bf00      	nop
 8003168:	371c      	adds	r7, #28
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	40028040 	.word	0x40028040
 8003178:	40028044 	.word	0x40028044

0800317c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003184:	2300      	movs	r3, #0
 8003186:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f042 0208 	orr.w	r2, r2, #8
 8003196:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80031a0:	2001      	movs	r0, #1
 80031a2:	f000 f87f 	bl	80032a4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	601a      	str	r2, [r3, #0]
}
 80031ae:	bf00      	nop
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80031be:	2300      	movs	r3, #0
 80031c0:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f042 0204 	orr.w	r2, r2, #4
 80031d0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80031da:	2001      	movs	r0, #1
 80031dc:	f000 f862 	bl	80032a4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	601a      	str	r2, [r3, #0]
}
 80031e8:	bf00      	nop
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003200:	3318      	adds	r3, #24
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800320c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003210:	3318      	adds	r3, #24
 8003212:	601a      	str	r2, [r3, #0]
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003230:	3318      	adds	r3, #24
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f042 0202 	orr.w	r2, r2, #2
 800323c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003240:	3318      	adds	r3, #24
 8003242:	601a      	str	r2, [r3, #0]
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003258:	2300      	movs	r3, #0
 800325a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003264:	3318      	adds	r3, #24
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003270:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003274:	3318      	adds	r3, #24
 8003276:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003280:	3318      	adds	r3, #24
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003286:	2001      	movs	r0, #1
 8003288:	f000 f80c 	bl	80032a4 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003296:	3318      	adds	r3, #24
 8003298:	601a      	str	r2, [r3, #0]
}
 800329a:	bf00      	nop
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
	...

080032a4 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032ac:	4b0a      	ldr	r3, [pc, #40]	; (80032d8 <ETH_Delay+0x34>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a0a      	ldr	r2, [pc, #40]	; (80032dc <ETH_Delay+0x38>)
 80032b2:	fba2 2303 	umull	r2, r3, r2, r3
 80032b6:	0a5b      	lsrs	r3, r3, #9
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	fb02 f303 	mul.w	r3, r2, r3
 80032be:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80032c0:	bf00      	nop
  } 
  while (Delay --);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	1e5a      	subs	r2, r3, #1
 80032c6:	60fa      	str	r2, [r7, #12]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1f9      	bne.n	80032c0 <ETH_Delay+0x1c>
}
 80032cc:	bf00      	nop
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	20000020 	.word	0x20000020
 80032dc:	10624dd3 	.word	0x10624dd3

080032e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b089      	sub	sp, #36	; 0x24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032ea:	2300      	movs	r3, #0
 80032ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032f6:	2300      	movs	r3, #0
 80032f8:	61fb      	str	r3, [r7, #28]
 80032fa:	e16b      	b.n	80035d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032fc:	2201      	movs	r2, #1
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	4013      	ands	r3, r2
 800330e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	429a      	cmp	r2, r3
 8003316:	f040 815a 	bne.w	80035ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d00b      	beq.n	800333a <HAL_GPIO_Init+0x5a>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b02      	cmp	r3, #2
 8003328:	d007      	beq.n	800333a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800332e:	2b11      	cmp	r3, #17
 8003330:	d003      	beq.n	800333a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b12      	cmp	r3, #18
 8003338:	d130      	bne.n	800339c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	2203      	movs	r2, #3
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43db      	mvns	r3, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4013      	ands	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	4313      	orrs	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003370:	2201      	movs	r2, #1
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	43db      	mvns	r3, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4013      	ands	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	091b      	lsrs	r3, r3, #4
 8003386:	f003 0201 	and.w	r2, r3, #1
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	4313      	orrs	r3, r2
 8003394:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	2203      	movs	r2, #3
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	43db      	mvns	r3, r3
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4013      	ands	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d003      	beq.n	80033dc <HAL_GPIO_Init+0xfc>
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b12      	cmp	r3, #18
 80033da:	d123      	bne.n	8003424 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	08da      	lsrs	r2, r3, #3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3208      	adds	r2, #8
 80033e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	220f      	movs	r2, #15
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	43db      	mvns	r3, r3
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	4013      	ands	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	691a      	ldr	r2, [r3, #16]
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4313      	orrs	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	08da      	lsrs	r2, r3, #3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	3208      	adds	r2, #8
 800341e:	69b9      	ldr	r1, [r7, #24]
 8003420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	2203      	movs	r2, #3
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	43db      	mvns	r3, r3
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	4013      	ands	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 0203 	and.w	r2, r3, #3
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4313      	orrs	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 80b4 	beq.w	80035ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	4b5f      	ldr	r3, [pc, #380]	; (80035e8 <HAL_GPIO_Init+0x308>)
 800346c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346e:	4a5e      	ldr	r2, [pc, #376]	; (80035e8 <HAL_GPIO_Init+0x308>)
 8003470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003474:	6453      	str	r3, [r2, #68]	; 0x44
 8003476:	4b5c      	ldr	r3, [pc, #368]	; (80035e8 <HAL_GPIO_Init+0x308>)
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003482:	4a5a      	ldr	r2, [pc, #360]	; (80035ec <HAL_GPIO_Init+0x30c>)
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	089b      	lsrs	r3, r3, #2
 8003488:	3302      	adds	r3, #2
 800348a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800348e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f003 0303 	and.w	r3, r3, #3
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	220f      	movs	r2, #15
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	43db      	mvns	r3, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4013      	ands	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a51      	ldr	r2, [pc, #324]	; (80035f0 <HAL_GPIO_Init+0x310>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d02b      	beq.n	8003506 <HAL_GPIO_Init+0x226>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a50      	ldr	r2, [pc, #320]	; (80035f4 <HAL_GPIO_Init+0x314>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d025      	beq.n	8003502 <HAL_GPIO_Init+0x222>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a4f      	ldr	r2, [pc, #316]	; (80035f8 <HAL_GPIO_Init+0x318>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d01f      	beq.n	80034fe <HAL_GPIO_Init+0x21e>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a4e      	ldr	r2, [pc, #312]	; (80035fc <HAL_GPIO_Init+0x31c>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d019      	beq.n	80034fa <HAL_GPIO_Init+0x21a>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a4d      	ldr	r2, [pc, #308]	; (8003600 <HAL_GPIO_Init+0x320>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d013      	beq.n	80034f6 <HAL_GPIO_Init+0x216>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a4c      	ldr	r2, [pc, #304]	; (8003604 <HAL_GPIO_Init+0x324>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d00d      	beq.n	80034f2 <HAL_GPIO_Init+0x212>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a4b      	ldr	r2, [pc, #300]	; (8003608 <HAL_GPIO_Init+0x328>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d007      	beq.n	80034ee <HAL_GPIO_Init+0x20e>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a4a      	ldr	r2, [pc, #296]	; (800360c <HAL_GPIO_Init+0x32c>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d101      	bne.n	80034ea <HAL_GPIO_Init+0x20a>
 80034e6:	2307      	movs	r3, #7
 80034e8:	e00e      	b.n	8003508 <HAL_GPIO_Init+0x228>
 80034ea:	2308      	movs	r3, #8
 80034ec:	e00c      	b.n	8003508 <HAL_GPIO_Init+0x228>
 80034ee:	2306      	movs	r3, #6
 80034f0:	e00a      	b.n	8003508 <HAL_GPIO_Init+0x228>
 80034f2:	2305      	movs	r3, #5
 80034f4:	e008      	b.n	8003508 <HAL_GPIO_Init+0x228>
 80034f6:	2304      	movs	r3, #4
 80034f8:	e006      	b.n	8003508 <HAL_GPIO_Init+0x228>
 80034fa:	2303      	movs	r3, #3
 80034fc:	e004      	b.n	8003508 <HAL_GPIO_Init+0x228>
 80034fe:	2302      	movs	r3, #2
 8003500:	e002      	b.n	8003508 <HAL_GPIO_Init+0x228>
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <HAL_GPIO_Init+0x228>
 8003506:	2300      	movs	r3, #0
 8003508:	69fa      	ldr	r2, [r7, #28]
 800350a:	f002 0203 	and.w	r2, r2, #3
 800350e:	0092      	lsls	r2, r2, #2
 8003510:	4093      	lsls	r3, r2
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	4313      	orrs	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003518:	4934      	ldr	r1, [pc, #208]	; (80035ec <HAL_GPIO_Init+0x30c>)
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	089b      	lsrs	r3, r3, #2
 800351e:	3302      	adds	r3, #2
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003526:	4b3a      	ldr	r3, [pc, #232]	; (8003610 <HAL_GPIO_Init+0x330>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	43db      	mvns	r3, r3
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	4013      	ands	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	4313      	orrs	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800354a:	4a31      	ldr	r2, [pc, #196]	; (8003610 <HAL_GPIO_Init+0x330>)
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003550:	4b2f      	ldr	r3, [pc, #188]	; (8003610 <HAL_GPIO_Init+0x330>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	43db      	mvns	r3, r3
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	4013      	ands	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	4313      	orrs	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003574:	4a26      	ldr	r2, [pc, #152]	; (8003610 <HAL_GPIO_Init+0x330>)
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800357a:	4b25      	ldr	r3, [pc, #148]	; (8003610 <HAL_GPIO_Init+0x330>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	43db      	mvns	r3, r3
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	4013      	ands	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	4313      	orrs	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800359e:	4a1c      	ldr	r2, [pc, #112]	; (8003610 <HAL_GPIO_Init+0x330>)
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035a4:	4b1a      	ldr	r3, [pc, #104]	; (8003610 <HAL_GPIO_Init+0x330>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	43db      	mvns	r3, r3
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4013      	ands	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035c8:	4a11      	ldr	r2, [pc, #68]	; (8003610 <HAL_GPIO_Init+0x330>)
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	3301      	adds	r3, #1
 80035d2:	61fb      	str	r3, [r7, #28]
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	2b0f      	cmp	r3, #15
 80035d8:	f67f ae90 	bls.w	80032fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035dc:	bf00      	nop
 80035de:	3724      	adds	r7, #36	; 0x24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr
 80035e8:	40023800 	.word	0x40023800
 80035ec:	40013800 	.word	0x40013800
 80035f0:	40020000 	.word	0x40020000
 80035f4:	40020400 	.word	0x40020400
 80035f8:	40020800 	.word	0x40020800
 80035fc:	40020c00 	.word	0x40020c00
 8003600:	40021000 	.word	0x40021000
 8003604:	40021400 	.word	0x40021400
 8003608:	40021800 	.word	0x40021800
 800360c:	40021c00 	.word	0x40021c00
 8003610:	40013c00 	.word	0x40013c00

08003614 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e25b      	b.n	8003ade <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d075      	beq.n	800371e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003632:	4ba3      	ldr	r3, [pc, #652]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 030c 	and.w	r3, r3, #12
 800363a:	2b04      	cmp	r3, #4
 800363c:	d00c      	beq.n	8003658 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800363e:	4ba0      	ldr	r3, [pc, #640]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003646:	2b08      	cmp	r3, #8
 8003648:	d112      	bne.n	8003670 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800364a:	4b9d      	ldr	r3, [pc, #628]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003652:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003656:	d10b      	bne.n	8003670 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003658:	4b99      	ldr	r3, [pc, #612]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d05b      	beq.n	800371c <HAL_RCC_OscConfig+0x108>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d157      	bne.n	800371c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e236      	b.n	8003ade <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003678:	d106      	bne.n	8003688 <HAL_RCC_OscConfig+0x74>
 800367a:	4b91      	ldr	r3, [pc, #580]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a90      	ldr	r2, [pc, #576]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 8003680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003684:	6013      	str	r3, [r2, #0]
 8003686:	e01d      	b.n	80036c4 <HAL_RCC_OscConfig+0xb0>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003690:	d10c      	bne.n	80036ac <HAL_RCC_OscConfig+0x98>
 8003692:	4b8b      	ldr	r3, [pc, #556]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a8a      	ldr	r2, [pc, #552]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 8003698:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	4b88      	ldr	r3, [pc, #544]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a87      	ldr	r2, [pc, #540]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 80036a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	e00b      	b.n	80036c4 <HAL_RCC_OscConfig+0xb0>
 80036ac:	4b84      	ldr	r3, [pc, #528]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a83      	ldr	r2, [pc, #524]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 80036b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b6:	6013      	str	r3, [r2, #0]
 80036b8:	4b81      	ldr	r3, [pc, #516]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a80      	ldr	r2, [pc, #512]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 80036be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d013      	beq.n	80036f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036cc:	f7fe fce6 	bl	800209c <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036d4:	f7fe fce2 	bl	800209c <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b64      	cmp	r3, #100	; 0x64
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e1fb      	b.n	8003ade <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036e6:	4b76      	ldr	r3, [pc, #472]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCC_OscConfig+0xc0>
 80036f2:	e014      	b.n	800371e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f4:	f7fe fcd2 	bl	800209c <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036fc:	f7fe fcce 	bl	800209c <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b64      	cmp	r3, #100	; 0x64
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e1e7      	b.n	8003ade <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800370e:	4b6c      	ldr	r3, [pc, #432]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1f0      	bne.n	80036fc <HAL_RCC_OscConfig+0xe8>
 800371a:	e000      	b.n	800371e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800371c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d063      	beq.n	80037f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800372a:	4b65      	ldr	r3, [pc, #404]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 030c 	and.w	r3, r3, #12
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00b      	beq.n	800374e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003736:	4b62      	ldr	r3, [pc, #392]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800373e:	2b08      	cmp	r3, #8
 8003740:	d11c      	bne.n	800377c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003742:	4b5f      	ldr	r3, [pc, #380]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d116      	bne.n	800377c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800374e:	4b5c      	ldr	r3, [pc, #368]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d005      	beq.n	8003766 <HAL_RCC_OscConfig+0x152>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d001      	beq.n	8003766 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e1bb      	b.n	8003ade <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003766:	4b56      	ldr	r3, [pc, #344]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	4952      	ldr	r1, [pc, #328]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 8003776:	4313      	orrs	r3, r2
 8003778:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800377a:	e03a      	b.n	80037f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d020      	beq.n	80037c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003784:	4b4f      	ldr	r3, [pc, #316]	; (80038c4 <HAL_RCC_OscConfig+0x2b0>)
 8003786:	2201      	movs	r2, #1
 8003788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378a:	f7fe fc87 	bl	800209c <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003792:	f7fe fc83 	bl	800209c <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e19c      	b.n	8003ade <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a4:	4b46      	ldr	r3, [pc, #280]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0f0      	beq.n	8003792 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b0:	4b43      	ldr	r3, [pc, #268]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	4940      	ldr	r1, [pc, #256]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	600b      	str	r3, [r1, #0]
 80037c4:	e015      	b.n	80037f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037c6:	4b3f      	ldr	r3, [pc, #252]	; (80038c4 <HAL_RCC_OscConfig+0x2b0>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037cc:	f7fe fc66 	bl	800209c <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037d4:	f7fe fc62 	bl	800209c <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e17b      	b.n	8003ade <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037e6:	4b36      	ldr	r3, [pc, #216]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1f0      	bne.n	80037d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d030      	beq.n	8003860 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d016      	beq.n	8003834 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003806:	4b30      	ldr	r3, [pc, #192]	; (80038c8 <HAL_RCC_OscConfig+0x2b4>)
 8003808:	2201      	movs	r2, #1
 800380a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800380c:	f7fe fc46 	bl	800209c <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003814:	f7fe fc42 	bl	800209c <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e15b      	b.n	8003ade <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003826:	4b26      	ldr	r3, [pc, #152]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 8003828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0f0      	beq.n	8003814 <HAL_RCC_OscConfig+0x200>
 8003832:	e015      	b.n	8003860 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003834:	4b24      	ldr	r3, [pc, #144]	; (80038c8 <HAL_RCC_OscConfig+0x2b4>)
 8003836:	2200      	movs	r2, #0
 8003838:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800383a:	f7fe fc2f 	bl	800209c <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003842:	f7fe fc2b 	bl	800209c <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e144      	b.n	8003ade <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003854:	4b1a      	ldr	r3, [pc, #104]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 8003856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1f0      	bne.n	8003842 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 80a0 	beq.w	80039ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800386e:	2300      	movs	r3, #0
 8003870:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003872:	4b13      	ldr	r3, [pc, #76]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10f      	bne.n	800389e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800387e:	2300      	movs	r3, #0
 8003880:	60bb      	str	r3, [r7, #8]
 8003882:	4b0f      	ldr	r3, [pc, #60]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	4a0e      	ldr	r2, [pc, #56]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 8003888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800388c:	6413      	str	r3, [r2, #64]	; 0x40
 800388e:	4b0c      	ldr	r3, [pc, #48]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003896:	60bb      	str	r3, [r7, #8]
 8003898:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800389a:	2301      	movs	r3, #1
 800389c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800389e:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <HAL_RCC_OscConfig+0x2b8>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d121      	bne.n	80038ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038aa:	4b08      	ldr	r3, [pc, #32]	; (80038cc <HAL_RCC_OscConfig+0x2b8>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a07      	ldr	r2, [pc, #28]	; (80038cc <HAL_RCC_OscConfig+0x2b8>)
 80038b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038b6:	f7fe fbf1 	bl	800209c <HAL_GetTick>
 80038ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038bc:	e011      	b.n	80038e2 <HAL_RCC_OscConfig+0x2ce>
 80038be:	bf00      	nop
 80038c0:	40023800 	.word	0x40023800
 80038c4:	42470000 	.word	0x42470000
 80038c8:	42470e80 	.word	0x42470e80
 80038cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d0:	f7fe fbe4 	bl	800209c <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e0fd      	b.n	8003ade <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e2:	4b81      	ldr	r3, [pc, #516]	; (8003ae8 <HAL_RCC_OscConfig+0x4d4>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0f0      	beq.n	80038d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d106      	bne.n	8003904 <HAL_RCC_OscConfig+0x2f0>
 80038f6:	4b7d      	ldr	r3, [pc, #500]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 80038f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fa:	4a7c      	ldr	r2, [pc, #496]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 80038fc:	f043 0301 	orr.w	r3, r3, #1
 8003900:	6713      	str	r3, [r2, #112]	; 0x70
 8003902:	e01c      	b.n	800393e <HAL_RCC_OscConfig+0x32a>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	2b05      	cmp	r3, #5
 800390a:	d10c      	bne.n	8003926 <HAL_RCC_OscConfig+0x312>
 800390c:	4b77      	ldr	r3, [pc, #476]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 800390e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003910:	4a76      	ldr	r2, [pc, #472]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 8003912:	f043 0304 	orr.w	r3, r3, #4
 8003916:	6713      	str	r3, [r2, #112]	; 0x70
 8003918:	4b74      	ldr	r3, [pc, #464]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 800391a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391c:	4a73      	ldr	r2, [pc, #460]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 800391e:	f043 0301 	orr.w	r3, r3, #1
 8003922:	6713      	str	r3, [r2, #112]	; 0x70
 8003924:	e00b      	b.n	800393e <HAL_RCC_OscConfig+0x32a>
 8003926:	4b71      	ldr	r3, [pc, #452]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 8003928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392a:	4a70      	ldr	r2, [pc, #448]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 800392c:	f023 0301 	bic.w	r3, r3, #1
 8003930:	6713      	str	r3, [r2, #112]	; 0x70
 8003932:	4b6e      	ldr	r3, [pc, #440]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 8003934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003936:	4a6d      	ldr	r2, [pc, #436]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 8003938:	f023 0304 	bic.w	r3, r3, #4
 800393c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d015      	beq.n	8003972 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003946:	f7fe fba9 	bl	800209c <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800394c:	e00a      	b.n	8003964 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800394e:	f7fe fba5 	bl	800209c <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	f241 3288 	movw	r2, #5000	; 0x1388
 800395c:	4293      	cmp	r3, r2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e0bc      	b.n	8003ade <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003964:	4b61      	ldr	r3, [pc, #388]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 8003966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d0ee      	beq.n	800394e <HAL_RCC_OscConfig+0x33a>
 8003970:	e014      	b.n	800399c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003972:	f7fe fb93 	bl	800209c <HAL_GetTick>
 8003976:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003978:	e00a      	b.n	8003990 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800397a:	f7fe fb8f 	bl	800209c <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	f241 3288 	movw	r2, #5000	; 0x1388
 8003988:	4293      	cmp	r3, r2
 800398a:	d901      	bls.n	8003990 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e0a6      	b.n	8003ade <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003990:	4b56      	ldr	r3, [pc, #344]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 8003992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1ee      	bne.n	800397a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800399c:	7dfb      	ldrb	r3, [r7, #23]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d105      	bne.n	80039ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039a2:	4b52      	ldr	r3, [pc, #328]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	4a51      	ldr	r2, [pc, #324]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 80039a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 8092 	beq.w	8003adc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039b8:	4b4c      	ldr	r3, [pc, #304]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 030c 	and.w	r3, r3, #12
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d05c      	beq.n	8003a7e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d141      	bne.n	8003a50 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039cc:	4b48      	ldr	r3, [pc, #288]	; (8003af0 <HAL_RCC_OscConfig+0x4dc>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d2:	f7fe fb63 	bl	800209c <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d8:	e008      	b.n	80039ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039da:	f7fe fb5f 	bl	800209c <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d901      	bls.n	80039ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e078      	b.n	8003ade <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ec:	4b3f      	ldr	r3, [pc, #252]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1f0      	bne.n	80039da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	69da      	ldr	r2, [r3, #28]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	431a      	orrs	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	019b      	lsls	r3, r3, #6
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0e:	085b      	lsrs	r3, r3, #1
 8003a10:	3b01      	subs	r3, #1
 8003a12:	041b      	lsls	r3, r3, #16
 8003a14:	431a      	orrs	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1a:	061b      	lsls	r3, r3, #24
 8003a1c:	4933      	ldr	r1, [pc, #204]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a22:	4b33      	ldr	r3, [pc, #204]	; (8003af0 <HAL_RCC_OscConfig+0x4dc>)
 8003a24:	2201      	movs	r2, #1
 8003a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a28:	f7fe fb38 	bl	800209c <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a30:	f7fe fb34 	bl	800209c <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e04d      	b.n	8003ade <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a42:	4b2a      	ldr	r3, [pc, #168]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0f0      	beq.n	8003a30 <HAL_RCC_OscConfig+0x41c>
 8003a4e:	e045      	b.n	8003adc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a50:	4b27      	ldr	r3, [pc, #156]	; (8003af0 <HAL_RCC_OscConfig+0x4dc>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a56:	f7fe fb21 	bl	800209c <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a5c:	e008      	b.n	8003a70 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a5e:	f7fe fb1d 	bl	800209c <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e036      	b.n	8003ade <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a70:	4b1e      	ldr	r3, [pc, #120]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1f0      	bne.n	8003a5e <HAL_RCC_OscConfig+0x44a>
 8003a7c:	e02e      	b.n	8003adc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d101      	bne.n	8003a8a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e029      	b.n	8003ade <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a8a:	4b18      	ldr	r3, [pc, #96]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d11c      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d115      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d10d      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d106      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d001      	beq.n	8003adc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e000      	b.n	8003ade <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40007000 	.word	0x40007000
 8003aec:	40023800 	.word	0x40023800
 8003af0:	42470060 	.word	0x42470060

08003af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d101      	bne.n	8003b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e0cc      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b08:	4b68      	ldr	r3, [pc, #416]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 030f 	and.w	r3, r3, #15
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d90c      	bls.n	8003b30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b16:	4b65      	ldr	r3, [pc, #404]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	b2d2      	uxtb	r2, r2
 8003b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1e:	4b63      	ldr	r3, [pc, #396]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d001      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e0b8      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d020      	beq.n	8003b7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d005      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b48:	4b59      	ldr	r3, [pc, #356]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	4a58      	ldr	r2, [pc, #352]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b60:	4b53      	ldr	r3, [pc, #332]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	4a52      	ldr	r2, [pc, #328]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b6c:	4b50      	ldr	r3, [pc, #320]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	494d      	ldr	r1, [pc, #308]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d044      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d107      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b92:	4b47      	ldr	r3, [pc, #284]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d119      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e07f      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d003      	beq.n	8003bb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bae:	2b03      	cmp	r3, #3
 8003bb0:	d107      	bne.n	8003bc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb2:	4b3f      	ldr	r3, [pc, #252]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d109      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e06f      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc2:	4b3b      	ldr	r3, [pc, #236]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e067      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bd2:	4b37      	ldr	r3, [pc, #220]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f023 0203 	bic.w	r2, r3, #3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	4934      	ldr	r1, [pc, #208]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003be4:	f7fe fa5a 	bl	800209c <HAL_GetTick>
 8003be8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bea:	e00a      	b.n	8003c02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bec:	f7fe fa56 	bl	800209c <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e04f      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c02:	4b2b      	ldr	r3, [pc, #172]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f003 020c 	and.w	r2, r3, #12
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d1eb      	bne.n	8003bec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c14:	4b25      	ldr	r3, [pc, #148]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 030f 	and.w	r3, r3, #15
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d20c      	bcs.n	8003c3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c22:	4b22      	ldr	r3, [pc, #136]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c2a:	4b20      	ldr	r3, [pc, #128]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d001      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e032      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d008      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c48:	4b19      	ldr	r3, [pc, #100]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	4916      	ldr	r1, [pc, #88]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d009      	beq.n	8003c7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c66:	4b12      	ldr	r3, [pc, #72]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	490e      	ldr	r1, [pc, #56]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c7a:	f000 f821 	bl	8003cc0 <HAL_RCC_GetSysClockFreq>
 8003c7e:	4601      	mov	r1, r0
 8003c80:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	091b      	lsrs	r3, r3, #4
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	4a0a      	ldr	r2, [pc, #40]	; (8003cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c8c:	5cd3      	ldrb	r3, [r2, r3]
 8003c8e:	fa21 f303 	lsr.w	r3, r1, r3
 8003c92:	4a09      	ldr	r2, [pc, #36]	; (8003cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c96:	4b09      	ldr	r3, [pc, #36]	; (8003cbc <HAL_RCC_ClockConfig+0x1c8>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fe f864 	bl	8001d68 <HAL_InitTick>

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40023c00 	.word	0x40023c00
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	0801f96c 	.word	0x0801f96c
 8003cb8:	20000020 	.word	0x20000020
 8003cbc:	20000024 	.word	0x20000024

08003cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	607b      	str	r3, [r7, #4]
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	2300      	movs	r3, #0
 8003cd0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cd6:	4b63      	ldr	r3, [pc, #396]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 030c 	and.w	r3, r3, #12
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d007      	beq.n	8003cf2 <HAL_RCC_GetSysClockFreq+0x32>
 8003ce2:	2b08      	cmp	r3, #8
 8003ce4:	d008      	beq.n	8003cf8 <HAL_RCC_GetSysClockFreq+0x38>
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f040 80b4 	bne.w	8003e54 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cec:	4b5e      	ldr	r3, [pc, #376]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003cee:	60bb      	str	r3, [r7, #8]
       break;
 8003cf0:	e0b3      	b.n	8003e5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cf2:	4b5e      	ldr	r3, [pc, #376]	; (8003e6c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003cf4:	60bb      	str	r3, [r7, #8]
      break;
 8003cf6:	e0b0      	b.n	8003e5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cf8:	4b5a      	ldr	r3, [pc, #360]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d00:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d02:	4b58      	ldr	r3, [pc, #352]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d04a      	beq.n	8003da4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d0e:	4b55      	ldr	r3, [pc, #340]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	099b      	lsrs	r3, r3, #6
 8003d14:	f04f 0400 	mov.w	r4, #0
 8003d18:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d1c:	f04f 0200 	mov.w	r2, #0
 8003d20:	ea03 0501 	and.w	r5, r3, r1
 8003d24:	ea04 0602 	and.w	r6, r4, r2
 8003d28:	4629      	mov	r1, r5
 8003d2a:	4632      	mov	r2, r6
 8003d2c:	f04f 0300 	mov.w	r3, #0
 8003d30:	f04f 0400 	mov.w	r4, #0
 8003d34:	0154      	lsls	r4, r2, #5
 8003d36:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003d3a:	014b      	lsls	r3, r1, #5
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	4622      	mov	r2, r4
 8003d40:	1b49      	subs	r1, r1, r5
 8003d42:	eb62 0206 	sbc.w	r2, r2, r6
 8003d46:	f04f 0300 	mov.w	r3, #0
 8003d4a:	f04f 0400 	mov.w	r4, #0
 8003d4e:	0194      	lsls	r4, r2, #6
 8003d50:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003d54:	018b      	lsls	r3, r1, #6
 8003d56:	1a5b      	subs	r3, r3, r1
 8003d58:	eb64 0402 	sbc.w	r4, r4, r2
 8003d5c:	f04f 0100 	mov.w	r1, #0
 8003d60:	f04f 0200 	mov.w	r2, #0
 8003d64:	00e2      	lsls	r2, r4, #3
 8003d66:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003d6a:	00d9      	lsls	r1, r3, #3
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	4614      	mov	r4, r2
 8003d70:	195b      	adds	r3, r3, r5
 8003d72:	eb44 0406 	adc.w	r4, r4, r6
 8003d76:	f04f 0100 	mov.w	r1, #0
 8003d7a:	f04f 0200 	mov.w	r2, #0
 8003d7e:	0262      	lsls	r2, r4, #9
 8003d80:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003d84:	0259      	lsls	r1, r3, #9
 8003d86:	460b      	mov	r3, r1
 8003d88:	4614      	mov	r4, r2
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	4621      	mov	r1, r4
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f04f 0400 	mov.w	r4, #0
 8003d94:	461a      	mov	r2, r3
 8003d96:	4623      	mov	r3, r4
 8003d98:	f7fc fa72 	bl	8000280 <__aeabi_uldivmod>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	460c      	mov	r4, r1
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	e049      	b.n	8003e38 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003da4:	4b2f      	ldr	r3, [pc, #188]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	099b      	lsrs	r3, r3, #6
 8003daa:	f04f 0400 	mov.w	r4, #0
 8003dae:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003db2:	f04f 0200 	mov.w	r2, #0
 8003db6:	ea03 0501 	and.w	r5, r3, r1
 8003dba:	ea04 0602 	and.w	r6, r4, r2
 8003dbe:	4629      	mov	r1, r5
 8003dc0:	4632      	mov	r2, r6
 8003dc2:	f04f 0300 	mov.w	r3, #0
 8003dc6:	f04f 0400 	mov.w	r4, #0
 8003dca:	0154      	lsls	r4, r2, #5
 8003dcc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003dd0:	014b      	lsls	r3, r1, #5
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	4622      	mov	r2, r4
 8003dd6:	1b49      	subs	r1, r1, r5
 8003dd8:	eb62 0206 	sbc.w	r2, r2, r6
 8003ddc:	f04f 0300 	mov.w	r3, #0
 8003de0:	f04f 0400 	mov.w	r4, #0
 8003de4:	0194      	lsls	r4, r2, #6
 8003de6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003dea:	018b      	lsls	r3, r1, #6
 8003dec:	1a5b      	subs	r3, r3, r1
 8003dee:	eb64 0402 	sbc.w	r4, r4, r2
 8003df2:	f04f 0100 	mov.w	r1, #0
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	00e2      	lsls	r2, r4, #3
 8003dfc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003e00:	00d9      	lsls	r1, r3, #3
 8003e02:	460b      	mov	r3, r1
 8003e04:	4614      	mov	r4, r2
 8003e06:	195b      	adds	r3, r3, r5
 8003e08:	eb44 0406 	adc.w	r4, r4, r6
 8003e0c:	f04f 0100 	mov.w	r1, #0
 8003e10:	f04f 0200 	mov.w	r2, #0
 8003e14:	02a2      	lsls	r2, r4, #10
 8003e16:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003e1a:	0299      	lsls	r1, r3, #10
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	4614      	mov	r4, r2
 8003e20:	4618      	mov	r0, r3
 8003e22:	4621      	mov	r1, r4
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f04f 0400 	mov.w	r4, #0
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	4623      	mov	r3, r4
 8003e2e:	f7fc fa27 	bl	8000280 <__aeabi_uldivmod>
 8003e32:	4603      	mov	r3, r0
 8003e34:	460c      	mov	r4, r1
 8003e36:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e38:	4b0a      	ldr	r3, [pc, #40]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	0c1b      	lsrs	r3, r3, #16
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	3301      	adds	r3, #1
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e50:	60bb      	str	r3, [r7, #8]
      break;
 8003e52:	e002      	b.n	8003e5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e54:	4b04      	ldr	r3, [pc, #16]	; (8003e68 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003e56:	60bb      	str	r3, [r7, #8]
      break;
 8003e58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e5a:	68bb      	ldr	r3, [r7, #8]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e64:	40023800 	.word	0x40023800
 8003e68:	00f42400 	.word	0x00f42400
 8003e6c:	007a1200 	.word	0x007a1200

08003e70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e74:	4b03      	ldr	r3, [pc, #12]	; (8003e84 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e76:	681b      	ldr	r3, [r3, #0]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	20000020 	.word	0x20000020

08003e88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e8c:	f7ff fff0 	bl	8003e70 <HAL_RCC_GetHCLKFreq>
 8003e90:	4601      	mov	r1, r0
 8003e92:	4b05      	ldr	r3, [pc, #20]	; (8003ea8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	0b5b      	lsrs	r3, r3, #13
 8003e98:	f003 0307 	and.w	r3, r3, #7
 8003e9c:	4a03      	ldr	r2, [pc, #12]	; (8003eac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e9e:	5cd3      	ldrb	r3, [r2, r3]
 8003ea0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	40023800 	.word	0x40023800
 8003eac:	0801f97c 	.word	0x0801f97c

08003eb0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	220f      	movs	r2, #15
 8003ebe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ec0:	4b12      	ldr	r3, [pc, #72]	; (8003f0c <HAL_RCC_GetClockConfig+0x5c>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f003 0203 	and.w	r2, r3, #3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ecc:	4b0f      	ldr	r3, [pc, #60]	; (8003f0c <HAL_RCC_GetClockConfig+0x5c>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ed8:	4b0c      	ldr	r3, [pc, #48]	; (8003f0c <HAL_RCC_GetClockConfig+0x5c>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003ee4:	4b09      	ldr	r3, [pc, #36]	; (8003f0c <HAL_RCC_GetClockConfig+0x5c>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	08db      	lsrs	r3, r3, #3
 8003eea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ef2:	4b07      	ldr	r3, [pc, #28]	; (8003f10 <HAL_RCC_GetClockConfig+0x60>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 020f 	and.w	r2, r3, #15
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	601a      	str	r2, [r3, #0]
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	40023800 	.word	0x40023800
 8003f10:	40023c00 	.word	0x40023c00

08003f14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e01d      	b.n	8003f62 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d106      	bne.n	8003f40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f815 	bl	8003f6a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2202      	movs	r2, #2
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3304      	adds	r3, #4
 8003f50:	4619      	mov	r1, r3
 8003f52:	4610      	mov	r0, r2
 8003f54:	f000 f968 	bl	8004228 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b085      	sub	sp, #20
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68da      	ldr	r2, [r3, #12]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f042 0201 	orr.w	r2, r2, #1
 8003f94:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2b06      	cmp	r3, #6
 8003fa6:	d007      	beq.n	8003fb8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 0201 	orr.w	r2, r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b082      	sub	sp, #8
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d122      	bne.n	8004022 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d11b      	bne.n	8004022 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f06f 0202 	mvn.w	r2, #2
 8003ff2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	f003 0303 	and.w	r3, r3, #3
 8004004:	2b00      	cmp	r3, #0
 8004006:	d003      	beq.n	8004010 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f8ee 	bl	80041ea <HAL_TIM_IC_CaptureCallback>
 800400e:	e005      	b.n	800401c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f8e0 	bl	80041d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f8f1 	bl	80041fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b04      	cmp	r3, #4
 800402e:	d122      	bne.n	8004076 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	2b04      	cmp	r3, #4
 800403c:	d11b      	bne.n	8004076 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f06f 0204 	mvn.w	r2, #4
 8004046:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2202      	movs	r2, #2
 800404c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f8c4 	bl	80041ea <HAL_TIM_IC_CaptureCallback>
 8004062:	e005      	b.n	8004070 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f8b6 	bl	80041d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f8c7 	bl	80041fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	f003 0308 	and.w	r3, r3, #8
 8004080:	2b08      	cmp	r3, #8
 8004082:	d122      	bne.n	80040ca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f003 0308 	and.w	r3, r3, #8
 800408e:	2b08      	cmp	r3, #8
 8004090:	d11b      	bne.n	80040ca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f06f 0208 	mvn.w	r2, #8
 800409a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2204      	movs	r2, #4
 80040a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	69db      	ldr	r3, [r3, #28]
 80040a8:	f003 0303 	and.w	r3, r3, #3
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d003      	beq.n	80040b8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f89a 	bl	80041ea <HAL_TIM_IC_CaptureCallback>
 80040b6:	e005      	b.n	80040c4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f88c 	bl	80041d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f89d 	bl	80041fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	f003 0310 	and.w	r3, r3, #16
 80040d4:	2b10      	cmp	r3, #16
 80040d6:	d122      	bne.n	800411e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f003 0310 	and.w	r3, r3, #16
 80040e2:	2b10      	cmp	r3, #16
 80040e4:	d11b      	bne.n	800411e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f06f 0210 	mvn.w	r2, #16
 80040ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2208      	movs	r2, #8
 80040f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004100:	2b00      	cmp	r3, #0
 8004102:	d003      	beq.n	800410c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f870 	bl	80041ea <HAL_TIM_IC_CaptureCallback>
 800410a:	e005      	b.n	8004118 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f862 	bl	80041d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f873 	bl	80041fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	2b01      	cmp	r3, #1
 800412a:	d10e      	bne.n	800414a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b01      	cmp	r3, #1
 8004138:	d107      	bne.n	800414a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f06f 0201 	mvn.w	r2, #1
 8004142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f7fd fdc9 	bl	8001cdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004154:	2b80      	cmp	r3, #128	; 0x80
 8004156:	d10e      	bne.n	8004176 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004162:	2b80      	cmp	r3, #128	; 0x80
 8004164:	d107      	bne.n	8004176 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800416e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f903 	bl	800437c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004180:	2b40      	cmp	r3, #64	; 0x40
 8004182:	d10e      	bne.n	80041a2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418e:	2b40      	cmp	r3, #64	; 0x40
 8004190:	d107      	bne.n	80041a2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800419a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f838 	bl	8004212 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	f003 0320 	and.w	r3, r3, #32
 80041ac:	2b20      	cmp	r3, #32
 80041ae:	d10e      	bne.n	80041ce <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f003 0320 	and.w	r3, r3, #32
 80041ba:	2b20      	cmp	r3, #32
 80041bc:	d107      	bne.n	80041ce <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f06f 0220 	mvn.w	r2, #32
 80041c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f8cd 	bl	8004368 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041ce:	bf00      	nop
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b083      	sub	sp, #12
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
	...

08004228 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a40      	ldr	r2, [pc, #256]	; (800433c <TIM_Base_SetConfig+0x114>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d013      	beq.n	8004268 <TIM_Base_SetConfig+0x40>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004246:	d00f      	beq.n	8004268 <TIM_Base_SetConfig+0x40>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a3d      	ldr	r2, [pc, #244]	; (8004340 <TIM_Base_SetConfig+0x118>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d00b      	beq.n	8004268 <TIM_Base_SetConfig+0x40>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a3c      	ldr	r2, [pc, #240]	; (8004344 <TIM_Base_SetConfig+0x11c>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d007      	beq.n	8004268 <TIM_Base_SetConfig+0x40>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a3b      	ldr	r2, [pc, #236]	; (8004348 <TIM_Base_SetConfig+0x120>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d003      	beq.n	8004268 <TIM_Base_SetConfig+0x40>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a3a      	ldr	r2, [pc, #232]	; (800434c <TIM_Base_SetConfig+0x124>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d108      	bne.n	800427a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800426e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	4313      	orrs	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a2f      	ldr	r2, [pc, #188]	; (800433c <TIM_Base_SetConfig+0x114>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d02b      	beq.n	80042da <TIM_Base_SetConfig+0xb2>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004288:	d027      	beq.n	80042da <TIM_Base_SetConfig+0xb2>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a2c      	ldr	r2, [pc, #176]	; (8004340 <TIM_Base_SetConfig+0x118>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d023      	beq.n	80042da <TIM_Base_SetConfig+0xb2>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a2b      	ldr	r2, [pc, #172]	; (8004344 <TIM_Base_SetConfig+0x11c>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d01f      	beq.n	80042da <TIM_Base_SetConfig+0xb2>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a2a      	ldr	r2, [pc, #168]	; (8004348 <TIM_Base_SetConfig+0x120>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d01b      	beq.n	80042da <TIM_Base_SetConfig+0xb2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a29      	ldr	r2, [pc, #164]	; (800434c <TIM_Base_SetConfig+0x124>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d017      	beq.n	80042da <TIM_Base_SetConfig+0xb2>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a28      	ldr	r2, [pc, #160]	; (8004350 <TIM_Base_SetConfig+0x128>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d013      	beq.n	80042da <TIM_Base_SetConfig+0xb2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a27      	ldr	r2, [pc, #156]	; (8004354 <TIM_Base_SetConfig+0x12c>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d00f      	beq.n	80042da <TIM_Base_SetConfig+0xb2>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a26      	ldr	r2, [pc, #152]	; (8004358 <TIM_Base_SetConfig+0x130>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d00b      	beq.n	80042da <TIM_Base_SetConfig+0xb2>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a25      	ldr	r2, [pc, #148]	; (800435c <TIM_Base_SetConfig+0x134>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d007      	beq.n	80042da <TIM_Base_SetConfig+0xb2>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a24      	ldr	r2, [pc, #144]	; (8004360 <TIM_Base_SetConfig+0x138>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d003      	beq.n	80042da <TIM_Base_SetConfig+0xb2>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a23      	ldr	r2, [pc, #140]	; (8004364 <TIM_Base_SetConfig+0x13c>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d108      	bne.n	80042ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a0a      	ldr	r2, [pc, #40]	; (800433c <TIM_Base_SetConfig+0x114>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d003      	beq.n	8004320 <TIM_Base_SetConfig+0xf8>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a0c      	ldr	r2, [pc, #48]	; (800434c <TIM_Base_SetConfig+0x124>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d103      	bne.n	8004328 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	691a      	ldr	r2, [r3, #16]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	615a      	str	r2, [r3, #20]
}
 800432e:	bf00      	nop
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	40010000 	.word	0x40010000
 8004340:	40000400 	.word	0x40000400
 8004344:	40000800 	.word	0x40000800
 8004348:	40000c00 	.word	0x40000c00
 800434c:	40010400 	.word	0x40010400
 8004350:	40014000 	.word	0x40014000
 8004354:	40014400 	.word	0x40014400
 8004358:	40014800 	.word	0x40014800
 800435c:	40001800 	.word	0x40001800
 8004360:	40001c00 	.word	0x40001c00
 8004364:	40002000 	.word	0x40002000

08004368 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004396:	2100      	movs	r1, #0
 8004398:	2000      	movs	r0, #0
 800439a:	f005 fd65 	bl	8009e68 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800439e:	4b17      	ldr	r3, [pc, #92]	; (80043fc <MX_LWIP_Init+0x6c>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80043a4:	4b16      	ldr	r3, [pc, #88]	; (8004400 <MX_LWIP_Init+0x70>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80043aa:	4b16      	ldr	r3, [pc, #88]	; (8004404 <MX_LWIP_Init+0x74>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80043b0:	4b15      	ldr	r3, [pc, #84]	; (8004408 <MX_LWIP_Init+0x78>)
 80043b2:	9302      	str	r3, [sp, #8]
 80043b4:	4b15      	ldr	r3, [pc, #84]	; (800440c <MX_LWIP_Init+0x7c>)
 80043b6:	9301      	str	r3, [sp, #4]
 80043b8:	2300      	movs	r3, #0
 80043ba:	9300      	str	r3, [sp, #0]
 80043bc:	4b11      	ldr	r3, [pc, #68]	; (8004404 <MX_LWIP_Init+0x74>)
 80043be:	4a10      	ldr	r2, [pc, #64]	; (8004400 <MX_LWIP_Init+0x70>)
 80043c0:	490e      	ldr	r1, [pc, #56]	; (80043fc <MX_LWIP_Init+0x6c>)
 80043c2:	4813      	ldr	r0, [pc, #76]	; (8004410 <MX_LWIP_Init+0x80>)
 80043c4:	f006 fad4 	bl	800a970 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80043c8:	4811      	ldr	r0, [pc, #68]	; (8004410 <MX_LWIP_Init+0x80>)
 80043ca:	f006 fc87 	bl	800acdc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80043ce:	4b10      	ldr	r3, [pc, #64]	; (8004410 <MX_LWIP_Init+0x80>)
 80043d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80043d4:	089b      	lsrs	r3, r3, #2
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80043e0:	480b      	ldr	r0, [pc, #44]	; (8004410 <MX_LWIP_Init+0x80>)
 80043e2:	f006 fc8b 	bl	800acfc <netif_set_up>
 80043e6:	e002      	b.n	80043ee <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80043e8:	4809      	ldr	r0, [pc, #36]	; (8004410 <MX_LWIP_Init+0x80>)
 80043ea:	f006 fcf3 	bl	800add4 <netif_set_down>
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80043ee:	4808      	ldr	r0, [pc, #32]	; (8004410 <MX_LWIP_Init+0x80>)
 80043f0:	f00e fda2 	bl	8012f38 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80043f4:	bf00      	nop
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	2000878c 	.word	0x2000878c
 8004400:	20008790 	.word	0x20008790
 8004404:	20008794 	.word	0x20008794
 8004408:	08009d79 	.word	0x08009d79
 800440c:	08004a35 	.word	0x08004a35
 8004410:	20008758 	.word	0x20008758

08004414 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b08e      	sub	sp, #56	; 0x38
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800441c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004420:	2200      	movs	r2, #0
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	605a      	str	r2, [r3, #4]
 8004426:	609a      	str	r2, [r3, #8]
 8004428:	60da      	str	r2, [r3, #12]
 800442a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a4a      	ldr	r2, [pc, #296]	; (800455c <HAL_ETH_MspInit+0x148>)
 8004432:	4293      	cmp	r3, r2
 8004434:	f040 808d 	bne.w	8004552 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004438:	2300      	movs	r3, #0
 800443a:	623b      	str	r3, [r7, #32]
 800443c:	4b48      	ldr	r3, [pc, #288]	; (8004560 <HAL_ETH_MspInit+0x14c>)
 800443e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004440:	4a47      	ldr	r2, [pc, #284]	; (8004560 <HAL_ETH_MspInit+0x14c>)
 8004442:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004446:	6313      	str	r3, [r2, #48]	; 0x30
 8004448:	4b45      	ldr	r3, [pc, #276]	; (8004560 <HAL_ETH_MspInit+0x14c>)
 800444a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004450:	623b      	str	r3, [r7, #32]
 8004452:	6a3b      	ldr	r3, [r7, #32]
 8004454:	2300      	movs	r3, #0
 8004456:	61fb      	str	r3, [r7, #28]
 8004458:	4b41      	ldr	r3, [pc, #260]	; (8004560 <HAL_ETH_MspInit+0x14c>)
 800445a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445c:	4a40      	ldr	r2, [pc, #256]	; (8004560 <HAL_ETH_MspInit+0x14c>)
 800445e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004462:	6313      	str	r3, [r2, #48]	; 0x30
 8004464:	4b3e      	ldr	r3, [pc, #248]	; (8004560 <HAL_ETH_MspInit+0x14c>)
 8004466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004468:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800446c:	61fb      	str	r3, [r7, #28]
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	2300      	movs	r3, #0
 8004472:	61bb      	str	r3, [r7, #24]
 8004474:	4b3a      	ldr	r3, [pc, #232]	; (8004560 <HAL_ETH_MspInit+0x14c>)
 8004476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004478:	4a39      	ldr	r2, [pc, #228]	; (8004560 <HAL_ETH_MspInit+0x14c>)
 800447a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800447e:	6313      	str	r3, [r2, #48]	; 0x30
 8004480:	4b37      	ldr	r3, [pc, #220]	; (8004560 <HAL_ETH_MspInit+0x14c>)
 8004482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004484:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004488:	61bb      	str	r3, [r7, #24]
 800448a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800448c:	2300      	movs	r3, #0
 800448e:	617b      	str	r3, [r7, #20]
 8004490:	4b33      	ldr	r3, [pc, #204]	; (8004560 <HAL_ETH_MspInit+0x14c>)
 8004492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004494:	4a32      	ldr	r2, [pc, #200]	; (8004560 <HAL_ETH_MspInit+0x14c>)
 8004496:	f043 0304 	orr.w	r3, r3, #4
 800449a:	6313      	str	r3, [r2, #48]	; 0x30
 800449c:	4b30      	ldr	r3, [pc, #192]	; (8004560 <HAL_ETH_MspInit+0x14c>)
 800449e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	617b      	str	r3, [r7, #20]
 80044a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044a8:	2300      	movs	r3, #0
 80044aa:	613b      	str	r3, [r7, #16]
 80044ac:	4b2c      	ldr	r3, [pc, #176]	; (8004560 <HAL_ETH_MspInit+0x14c>)
 80044ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b0:	4a2b      	ldr	r2, [pc, #172]	; (8004560 <HAL_ETH_MspInit+0x14c>)
 80044b2:	f043 0301 	orr.w	r3, r3, #1
 80044b6:	6313      	str	r3, [r2, #48]	; 0x30
 80044b8:	4b29      	ldr	r3, [pc, #164]	; (8004560 <HAL_ETH_MspInit+0x14c>)
 80044ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	613b      	str	r3, [r7, #16]
 80044c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044c4:	2300      	movs	r3, #0
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	4b25      	ldr	r3, [pc, #148]	; (8004560 <HAL_ETH_MspInit+0x14c>)
 80044ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044cc:	4a24      	ldr	r2, [pc, #144]	; (8004560 <HAL_ETH_MspInit+0x14c>)
 80044ce:	f043 0302 	orr.w	r3, r3, #2
 80044d2:	6313      	str	r3, [r2, #48]	; 0x30
 80044d4:	4b22      	ldr	r3, [pc, #136]	; (8004560 <HAL_ETH_MspInit+0x14c>)
 80044d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	60fb      	str	r3, [r7, #12]
 80044de:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80044e0:	2332      	movs	r3, #50	; 0x32
 80044e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044e4:	2302      	movs	r3, #2
 80044e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e8:	2300      	movs	r3, #0
 80044ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044ec:	2303      	movs	r3, #3
 80044ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80044f0:	230b      	movs	r3, #11
 80044f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044f8:	4619      	mov	r1, r3
 80044fa:	481a      	ldr	r0, [pc, #104]	; (8004564 <HAL_ETH_MspInit+0x150>)
 80044fc:	f7fe fef0 	bl	80032e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004500:	2386      	movs	r3, #134	; 0x86
 8004502:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004504:	2302      	movs	r3, #2
 8004506:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004508:	2300      	movs	r3, #0
 800450a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800450c:	2303      	movs	r3, #3
 800450e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004510:	230b      	movs	r3, #11
 8004512:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004518:	4619      	mov	r1, r3
 800451a:	4813      	ldr	r0, [pc, #76]	; (8004568 <HAL_ETH_MspInit+0x154>)
 800451c:	f7fe fee0 	bl	80032e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8004520:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004524:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004526:	2302      	movs	r3, #2
 8004528:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800452a:	2300      	movs	r3, #0
 800452c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800452e:	2303      	movs	r3, #3
 8004530:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004532:	230b      	movs	r3, #11
 8004534:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800453a:	4619      	mov	r1, r3
 800453c:	480b      	ldr	r0, [pc, #44]	; (800456c <HAL_ETH_MspInit+0x158>)
 800453e:	f7fe fecf 	bl	80032e0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 6, 0);
 8004542:	2200      	movs	r2, #0
 8004544:	2106      	movs	r1, #6
 8004546:	203d      	movs	r0, #61	; 0x3d
 8004548:	f7fd fe8e 	bl	8002268 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800454c:	203d      	movs	r0, #61	; 0x3d
 800454e:	f7fd fea7 	bl	80022a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004552:	bf00      	nop
 8004554:	3738      	adds	r7, #56	; 0x38
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	40028000 	.word	0x40028000
 8004560:	40023800 	.word	0x40023800
 8004564:	40020800 	.word	0x40020800
 8004568:	40020000 	.word	0x40020000
 800456c:	40020400 	.word	0x40020400

08004570 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8004578:	4b04      	ldr	r3, [pc, #16]	; (800458c <HAL_ETH_RxCpltCallback+0x1c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4618      	mov	r0, r3
 800457e:	f000 fc4d 	bl	8004e1c <osSemaphoreRelease>
}
 8004582:	bf00      	nop
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	20000318 	.word	0x20000318

08004590 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8004590:	b5b0      	push	{r4, r5, r7, lr}
 8004592:	b090      	sub	sp, #64	; 0x40
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004598:	2300      	movs	r3, #0
 800459a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800459c:	4b5c      	ldr	r3, [pc, #368]	; (8004710 <low_level_init+0x180>)
 800459e:	4a5d      	ldr	r2, [pc, #372]	; (8004714 <low_level_init+0x184>)
 80045a0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80045a2:	4b5b      	ldr	r3, [pc, #364]	; (8004710 <low_level_init+0x180>)
 80045a4:	2201      	movs	r2, #1
 80045a6:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80045a8:	4b59      	ldr	r3, [pc, #356]	; (8004710 <low_level_init+0x180>)
 80045aa:	2201      	movs	r2, #1
 80045ac:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80045ae:	2300      	movs	r3, #0
 80045b0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 80045b4:	2380      	movs	r3, #128	; 0x80
 80045b6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 80045ba:	23e1      	movs	r3, #225	; 0xe1
 80045bc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 80045c0:	2300      	movs	r3, #0
 80045c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 80045c6:	2300      	movs	r3, #0
 80045c8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 80045cc:	2300      	movs	r3, #0
 80045ce:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 80045d2:	4a4f      	ldr	r2, [pc, #316]	; (8004710 <low_level_init+0x180>)
 80045d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80045d8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80045da:	4b4d      	ldr	r3, [pc, #308]	; (8004710 <low_level_init+0x180>)
 80045dc:	2201      	movs	r2, #1
 80045de:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80045e0:	4b4b      	ldr	r3, [pc, #300]	; (8004710 <low_level_init+0x180>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80045e6:	4b4a      	ldr	r3, [pc, #296]	; (8004710 <low_level_init+0x180>)
 80045e8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80045ec:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80045ee:	4848      	ldr	r0, [pc, #288]	; (8004710 <low_level_init+0x180>)
 80045f0:	f7fd fe64 	bl	80022bc <HAL_ETH_Init>
 80045f4:	4603      	mov	r3, r0
 80045f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80045fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d108      	bne.n	8004614 <low_level_init+0x84>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004608:	f043 0304 	orr.w	r3, r3, #4
 800460c:	b2da      	uxtb	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004614:	2304      	movs	r3, #4
 8004616:	4a40      	ldr	r2, [pc, #256]	; (8004718 <low_level_init+0x188>)
 8004618:	4940      	ldr	r1, [pc, #256]	; (800471c <low_level_init+0x18c>)
 800461a:	483d      	ldr	r0, [pc, #244]	; (8004710 <low_level_init+0x180>)
 800461c:	f7fd ffec 	bl	80025f8 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004620:	2304      	movs	r3, #4
 8004622:	4a3f      	ldr	r2, [pc, #252]	; (8004720 <low_level_init+0x190>)
 8004624:	493f      	ldr	r1, [pc, #252]	; (8004724 <low_level_init+0x194>)
 8004626:	483a      	ldr	r0, [pc, #232]	; (8004710 <low_level_init+0x180>)
 8004628:	f7fe f84f 	bl	80026ca <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2206      	movs	r2, #6
 8004630:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004634:	4b36      	ldr	r3, [pc, #216]	; (8004710 <low_level_init+0x180>)
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	781a      	ldrb	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004640:	4b33      	ldr	r3, [pc, #204]	; (8004710 <low_level_init+0x180>)
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	785a      	ldrb	r2, [r3, #1]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800464c:	4b30      	ldr	r3, [pc, #192]	; (8004710 <low_level_init+0x180>)
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	789a      	ldrb	r2, [r3, #2]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004658:	4b2d      	ldr	r3, [pc, #180]	; (8004710 <low_level_init+0x180>)
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	78da      	ldrb	r2, [r3, #3]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004664:	4b2a      	ldr	r3, [pc, #168]	; (8004710 <low_level_init+0x180>)
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	791a      	ldrb	r2, [r3, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004670:	4b27      	ldr	r3, [pc, #156]	; (8004710 <low_level_init+0x180>)
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	795a      	ldrb	r2, [r3, #5]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004682:	849a      	strh	r2, [r3, #36]	; 0x24
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800468a:	f043 030a 	orr.w	r3, r3, #10
 800468e:	b2da      	uxtb	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8004696:	2300      	movs	r3, #0
 8004698:	62bb      	str	r3, [r7, #40]	; 0x28
 800469a:	2300      	movs	r3, #0
 800469c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800469e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046a2:	2101      	movs	r1, #1
 80046a4:	4618      	mov	r0, r3
 80046a6:	f000 fb37 	bl	8004d18 <osSemaphoreCreate>
 80046aa:	4602      	mov	r2, r0
 80046ac:	4b1e      	ldr	r3, [pc, #120]	; (8004728 <low_level_init+0x198>)
 80046ae:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80046b0:	4b1e      	ldr	r3, [pc, #120]	; (800472c <low_level_init+0x19c>)
 80046b2:	f107 040c 	add.w	r4, r7, #12
 80046b6:	461d      	mov	r5, r3
 80046b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80046c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80046c4:	f107 030c 	add.w	r3, r7, #12
 80046c8:	6879      	ldr	r1, [r7, #4]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 fa28 	bl	8004b20 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80046d0:	480f      	ldr	r0, [pc, #60]	; (8004710 <low_level_init+0x180>)
 80046d2:	f7fe fb22 	bl	8002d1a <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80046d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80046da:	461a      	mov	r2, r3
 80046dc:	211d      	movs	r1, #29
 80046de:	480c      	ldr	r0, [pc, #48]	; (8004710 <low_level_init+0x180>)
 80046e0:	f7fe fa4d 	bl	8002b7e <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80046e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e6:	f043 030b 	orr.w	r3, r3, #11
 80046ea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80046ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ee:	461a      	mov	r2, r3
 80046f0:	211d      	movs	r1, #29
 80046f2:	4807      	ldr	r0, [pc, #28]	; (8004710 <low_level_init+0x180>)
 80046f4:	f7fe faab 	bl	8002c4e <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80046f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80046fc:	461a      	mov	r2, r3
 80046fe:	211d      	movs	r1, #29
 8004700:	4803      	ldr	r0, [pc, #12]	; (8004710 <low_level_init+0x180>)
 8004702:	f7fe fa3c 	bl	8002b7e <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8004706:	bf00      	nop
 8004708:	3740      	adds	r7, #64	; 0x40
 800470a:	46bd      	mov	sp, r7
 800470c:	bdb0      	pop	{r4, r5, r7, pc}
 800470e:	bf00      	nop
 8004710:	2000a068 	.word	0x2000a068
 8004714:	40028000 	.word	0x40028000
 8004718:	2000a0b0 	.word	0x2000a0b0
 800471c:	20008798 	.word	0x20008798
 8004720:	20008818 	.word	0x20008818
 8004724:	20009fe8 	.word	0x20009fe8
 8004728:	20000318 	.word	0x20000318
 800472c:	08017df4 	.word	0x08017df4

08004730 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b08a      	sub	sp, #40	; 0x28
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800473a:	4b4b      	ldr	r3, [pc, #300]	; (8004868 <low_level_output+0x138>)
 800473c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8004742:	2300      	movs	r3, #0
 8004744:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004746:	2300      	movs	r3, #0
 8004748:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800474a:	2300      	movs	r3, #0
 800474c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800474e:	2300      	movs	r3, #0
 8004750:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8004752:	4b45      	ldr	r3, [pc, #276]	; (8004868 <low_level_output+0x138>)
 8004754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004756:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004758:	2300      	movs	r3, #0
 800475a:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	623b      	str	r3, [r7, #32]
 8004760:	e05a      	b.n	8004818 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	da03      	bge.n	8004772 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800476a:	23f8      	movs	r3, #248	; 0xf8
 800476c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8004770:	e05c      	b.n	800482c <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8004772:	6a3b      	ldr	r3, [r7, #32]
 8004774:	895b      	ldrh	r3, [r3, #10]
 8004776:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004778:	2300      	movs	r3, #0
 800477a:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800477c:	e02f      	b.n	80047de <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800477e:	69fa      	ldr	r2, [r7, #28]
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	18d0      	adds	r0, r2, r3
 8004784:	6a3b      	ldr	r3, [r7, #32]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	18d1      	adds	r1, r2, r3
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004792:	3304      	adds	r3, #4
 8004794:	461a      	mov	r2, r3
 8004796:	f012 fbc6 	bl	8016f26 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	da03      	bge.n	80047b0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80047a8:	23f8      	movs	r3, #248	; 0xf8
 80047aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80047ae:	e03d      	b.n	800482c <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4413      	add	r3, r2
 80047bc:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80047c0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80047cc:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80047d8:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80047da:	2300      	movs	r3, #0
 80047dc:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	4413      	add	r3, r2
 80047e4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d8c8      	bhi.n	800477e <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80047ec:	69fa      	ldr	r2, [r7, #28]
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	18d0      	adds	r0, r2, r3
 80047f2:	6a3b      	ldr	r3, [r7, #32]
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	4413      	add	r3, r2
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	4619      	mov	r1, r3
 80047fe:	f012 fb92 	bl	8016f26 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	4413      	add	r3, r2
 8004808:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4413      	add	r3, r2
 8004810:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004812:	6a3b      	ldr	r3, [r7, #32]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	623b      	str	r3, [r7, #32]
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1a1      	bne.n	8004762 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 800481e:	6979      	ldr	r1, [r7, #20]
 8004820:	4811      	ldr	r0, [pc, #68]	; (8004868 <low_level_output+0x138>)
 8004822:	f7fd ffbf 	bl	80027a4 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8004826:	2300      	movs	r3, #0
 8004828:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800482c:	4b0e      	ldr	r3, [pc, #56]	; (8004868 <low_level_output+0x138>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004834:	3314      	adds	r3, #20
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0320 	and.w	r3, r3, #32
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00d      	beq.n	800485c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004840:	4b09      	ldr	r3, [pc, #36]	; (8004868 <low_level_output+0x138>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004848:	3314      	adds	r3, #20
 800484a:	2220      	movs	r2, #32
 800484c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800484e:	4b06      	ldr	r3, [pc, #24]	; (8004868 <low_level_output+0x138>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004856:	3304      	adds	r3, #4
 8004858:	2200      	movs	r2, #0
 800485a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800485c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004860:	4618      	mov	r0, r3
 8004862:	3728      	adds	r7, #40	; 0x28
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	2000a068 	.word	0x2000a068

0800486c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b08c      	sub	sp, #48	; 0x30
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004874:	2300      	movs	r3, #0
 8004876:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8004878:	2300      	movs	r3, #0
 800487a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800487c:	2300      	movs	r3, #0
 800487e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004880:	2300      	movs	r3, #0
 8004882:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8004884:	2300      	movs	r3, #0
 8004886:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8004888:	2300      	movs	r3, #0
 800488a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800488c:	2300      	movs	r3, #0
 800488e:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8004890:	484f      	ldr	r0, [pc, #316]	; (80049d0 <low_level_input+0x164>)
 8004892:	f7fe f871 	bl	8002978 <HAL_ETH_GetReceivedFrame_IT>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <low_level_input+0x34>
  
    return NULL;
 800489c:	2300      	movs	r3, #0
 800489e:	e092      	b.n	80049c6 <low_level_input+0x15a>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80048a0:	4b4b      	ldr	r3, [pc, #300]	; (80049d0 <low_level_input+0x164>)
 80048a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a4:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80048a6:	4b4a      	ldr	r3, [pc, #296]	; (80049d0 <low_level_input+0x164>)
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 80048ac:	89fb      	ldrh	r3, [r7, #14]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d007      	beq.n	80048c2 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80048b2:	89fb      	ldrh	r3, [r7, #14]
 80048b4:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80048b8:	4619      	mov	r1, r3
 80048ba:	2000      	movs	r0, #0
 80048bc:	f006 fb74 	bl	800afa8 <pbuf_alloc>
 80048c0:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 80048c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d04b      	beq.n	8004960 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80048c8:	4b41      	ldr	r3, [pc, #260]	; (80049d0 <low_level_input+0x164>)
 80048ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048cc:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80048ce:	2300      	movs	r3, #0
 80048d0:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80048d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80048d6:	e040      	b.n	800495a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80048d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048da:	895b      	ldrh	r3, [r3, #10]
 80048dc:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80048de:	2300      	movs	r3, #0
 80048e0:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80048e2:	e021      	b.n	8004928 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80048e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	18d0      	adds	r0, r2, r3
 80048ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	18d1      	adds	r1, r2, r3
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80048f8:	3304      	adds	r3, #4
 80048fa:	461a      	mov	r2, r3
 80048fc:	f012 fb13 	bl	8016f26 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004900:	6a3b      	ldr	r3, [r7, #32]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800490c:	69fa      	ldr	r2, [r7, #28]
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	4413      	add	r3, r2
 8004912:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004916:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004922:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004924:	2300      	movs	r3, #0
 8004926:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	4413      	add	r3, r2
 800492e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004932:	4293      	cmp	r3, r2
 8004934:	d8d6      	bhi.n	80048e4 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	18d0      	adds	r0, r2, r3
 800493e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	4413      	add	r3, r2
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	4619      	mov	r1, r3
 8004948:	f012 faed 	bl	8016f26 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800494c:	69fa      	ldr	r2, [r7, #28]
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	4413      	add	r3, r2
 8004952:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	62bb      	str	r3, [r7, #40]	; 0x28
 800495a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1bb      	bne.n	80048d8 <low_level_input+0x6c>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004960:	4b1b      	ldr	r3, [pc, #108]	; (80049d0 <low_level_input+0x164>)
 8004962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004964:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004966:	2300      	movs	r3, #0
 8004968:	613b      	str	r3, [r7, #16]
 800496a:	e00b      	b.n	8004984 <low_level_input+0x118>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800496c:	6a3b      	ldr	r3, [r7, #32]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004978:	6a3b      	ldr	r3, [r7, #32]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	3301      	adds	r3, #1
 8004982:	613b      	str	r3, [r7, #16]
 8004984:	4b12      	ldr	r3, [pc, #72]	; (80049d0 <low_level_input+0x164>)
 8004986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	429a      	cmp	r2, r3
 800498c:	d3ee      	bcc.n	800496c <low_level_input+0x100>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 800498e:	4b10      	ldr	r3, [pc, #64]	; (80049d0 <low_level_input+0x164>)
 8004990:	2200      	movs	r2, #0
 8004992:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8004994:	4b0e      	ldr	r3, [pc, #56]	; (80049d0 <low_level_input+0x164>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800499c:	3314      	adds	r3, #20
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00d      	beq.n	80049c4 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80049a8:	4b09      	ldr	r3, [pc, #36]	; (80049d0 <low_level_input+0x164>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049b0:	3314      	adds	r3, #20
 80049b2:	2280      	movs	r2, #128	; 0x80
 80049b4:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80049b6:	4b06      	ldr	r3, [pc, #24]	; (80049d0 <low_level_input+0x164>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049be:	3308      	adds	r3, #8
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]
  }
  return p;
 80049c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3730      	adds	r7, #48	; 0x30
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	2000a068 	.word	0x2000a068

080049d4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80049e0:	4b12      	ldr	r3, [pc, #72]	; (8004a2c <ethernetif_input+0x58>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f04f 31ff 	mov.w	r1, #4294967295
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 f9c9 	bl	8004d80 <osSemaphoreWait>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1f5      	bne.n	80049e0 <ethernetif_input+0xc>
    {
      do
      {   
        LOCK_TCPIP_CORE();
 80049f4:	480e      	ldr	r0, [pc, #56]	; (8004a30 <ethernetif_input+0x5c>)
 80049f6:	f012 f9d5 	bl	8016da4 <sys_mutex_lock>
        p = low_level_input( netif );
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f7ff ff36 	bl	800486c <low_level_input>
 8004a00:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00a      	beq.n	8004a1e <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	68f9      	ldr	r1, [r7, #12]
 8004a0e:	68b8      	ldr	r0, [r7, #8]
 8004a10:	4798      	blx	r3
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d002      	beq.n	8004a1e <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8004a18:	68b8      	ldr	r0, [r7, #8]
 8004a1a:	f006 fda5 	bl	800b568 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8004a1e:	4804      	ldr	r0, [pc, #16]	; (8004a30 <ethernetif_input+0x5c>)
 8004a20:	f012 f9cf 	bl	8016dc2 <sys_mutex_unlock>
      } while(p!=NULL);
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1e4      	bne.n	80049f4 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004a2a:	e7d9      	b.n	80049e0 <ethernetif_input+0xc>
 8004a2c:	20000318 	.word	0x20000318
 8004a30:	2000b8c0 	.word	0x2000b8c0

08004a34 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d106      	bne.n	8004a50 <ethernetif_init+0x1c>
 8004a42:	4b0e      	ldr	r3, [pc, #56]	; (8004a7c <ethernetif_init+0x48>)
 8004a44:	f240 222b 	movw	r2, #555	; 0x22b
 8004a48:	490d      	ldr	r1, [pc, #52]	; (8004a80 <ethernetif_init+0x4c>)
 8004a4a:	480e      	ldr	r0, [pc, #56]	; (8004a84 <ethernetif_init+0x50>)
 8004a4c:	f012 fa7e 	bl	8016f4c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2273      	movs	r2, #115	; 0x73
 8004a54:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2274      	movs	r2, #116	; 0x74
 8004a5c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a09      	ldr	r2, [pc, #36]	; (8004a88 <ethernetif_init+0x54>)
 8004a64:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a08      	ldr	r2, [pc, #32]	; (8004a8c <ethernetif_init+0x58>)
 8004a6a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f7ff fd8f 	bl	8004590 <low_level_init>

  return ERR_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3708      	adds	r7, #8
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	08017e10 	.word	0x08017e10
 8004a80:	08017e2c 	.word	0x08017e2c
 8004a84:	08017e3c 	.word	0x08017e3c
 8004a88:	08014d89 	.word	0x08014d89
 8004a8c:	08004731 	.word	0x08004731

08004a90 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004a94:	f7fd fb02 	bl	800209c <HAL_GetTick>
 8004a98:	4603      	mov	r3, r0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b085      	sub	sp, #20
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004aac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ab0:	2b84      	cmp	r3, #132	; 0x84
 8004ab2:	d005      	beq.n	8004ac0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004ab4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4413      	add	r3, r2
 8004abc:	3303      	adds	r3, #3
 8004abe:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b083      	sub	sp, #12
 8004ad2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ad4:	f3ef 8305 	mrs	r3, IPSR
 8004ad8:	607b      	str	r3, [r7, #4]
  return(result);
 8004ada:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	bf14      	ite	ne
 8004ae0:	2301      	movne	r3, #1
 8004ae2:	2300      	moveq	r3, #0
 8004ae4:	b2db      	uxtb	r3, r3
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004af6:	f001 fd07 	bl	8006508 <vTaskStartScheduler>
  
  return osOK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8004b04:	f7ff ffe3 	bl	8004ace <inHandlerMode>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8004b0e:	f001 fe13 	bl	8006738 <xTaskGetTickCountFromISR>
 8004b12:	4603      	mov	r3, r0
 8004b14:	e002      	b.n	8004b1c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8004b16:	f001 fdff 	bl	8006718 <xTaskGetTickCount>
 8004b1a:	4603      	mov	r3, r0
  }
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b22:	b089      	sub	sp, #36	; 0x24
 8004b24:	af04      	add	r7, sp, #16
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d020      	beq.n	8004b74 <osThreadCreate+0x54>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d01c      	beq.n	8004b74 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685c      	ldr	r4, [r3, #4]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681d      	ldr	r5, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691e      	ldr	r6, [r3, #16]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7ff ffa6 	bl	8004a9e <makeFreeRtosPriority>
 8004b52:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b5c:	9202      	str	r2, [sp, #8]
 8004b5e:	9301      	str	r3, [sp, #4]
 8004b60:	9100      	str	r1, [sp, #0]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	4632      	mov	r2, r6
 8004b66:	4629      	mov	r1, r5
 8004b68:	4620      	mov	r0, r4
 8004b6a:	f001 fb09 	bl	8006180 <xTaskCreateStatic>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	60fb      	str	r3, [r7, #12]
 8004b72:	e01c      	b.n	8004bae <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685c      	ldr	r4, [r3, #4]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004b80:	b29e      	uxth	r6, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff ff88 	bl	8004a9e <makeFreeRtosPriority>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	f107 030c 	add.w	r3, r7, #12
 8004b94:	9301      	str	r3, [sp, #4]
 8004b96:	9200      	str	r2, [sp, #0]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	4632      	mov	r2, r6
 8004b9c:	4629      	mov	r1, r5
 8004b9e:	4620      	mov	r0, r4
 8004ba0:	f001 fb48 	bl	8006234 <xTaskCreate>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d001      	beq.n	8004bae <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004baa:	2300      	movs	r3, #0
 8004bac:	e000      	b.n	8004bb0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004bae:	68fb      	ldr	r3, [r7, #12]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004bb8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <osDelay+0x16>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	e000      	b.n	8004bd0 <osDelay+0x18>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f001 fc65 	bl	80064a0 <vTaskDelay>
  
  return osOK;
 8004bd6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d007      	beq.n	8004c00 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	2001      	movs	r0, #1
 8004bf8:	f000 fc7f 	bl	80054fa <xQueueCreateMutexStatic>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	e003      	b.n	8004c08 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004c00:	2001      	movs	r0, #1
 8004c02:	f000 fc62 	bl	80054ca <xQueueCreateMutex>
 8004c06:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3708      	adds	r7, #8
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <osMutexWait+0x18>
    return osErrorParameter;
 8004c24:	2380      	movs	r3, #128	; 0x80
 8004c26:	e03a      	b.n	8004c9e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c32:	d103      	bne.n	8004c3c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004c34:	f04f 33ff 	mov.w	r3, #4294967295
 8004c38:	60fb      	str	r3, [r7, #12]
 8004c3a:	e009      	b.n	8004c50 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d006      	beq.n	8004c50 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <osMutexWait+0x40>
      ticks = 1;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004c50:	f7ff ff3d 	bl	8004ace <inHandlerMode>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d017      	beq.n	8004c8a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004c5a:	f107 0308 	add.w	r3, r7, #8
 8004c5e:	461a      	mov	r2, r3
 8004c60:	2100      	movs	r1, #0
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f001 f860 	bl	8005d28 <xQueueReceiveFromISR>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d001      	beq.n	8004c72 <osMutexWait+0x62>
      return osErrorOS;
 8004c6e:	23ff      	movs	r3, #255	; 0xff
 8004c70:	e015      	b.n	8004c9e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d011      	beq.n	8004c9c <osMutexWait+0x8c>
 8004c78:	4b0b      	ldr	r3, [pc, #44]	; (8004ca8 <osMutexWait+0x98>)
 8004c7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c7e:	601a      	str	r2, [r3, #0]
 8004c80:	f3bf 8f4f 	dsb	sy
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	e008      	b.n	8004c9c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004c8a:	68f9      	ldr	r1, [r7, #12]
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 ff43 	bl	8005b18 <xQueueSemaphoreTake>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d001      	beq.n	8004c9c <osMutexWait+0x8c>
    return osErrorOS;
 8004c98:	23ff      	movs	r3, #255	; 0xff
 8004c9a:	e000      	b.n	8004c9e <osMutexWait+0x8e>
  }
  
  return osOK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	e000ed04 	.word	0xe000ed04

08004cac <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004cbc:	f7ff ff07 	bl	8004ace <inHandlerMode>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d016      	beq.n	8004cf4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004cc6:	f107 0308 	add.w	r3, r7, #8
 8004cca:	4619      	mov	r1, r3
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 fdbd 	bl	800584c <xQueueGiveFromISR>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d001      	beq.n	8004cdc <osMutexRelease+0x30>
      return osErrorOS;
 8004cd8:	23ff      	movs	r3, #255	; 0xff
 8004cda:	e017      	b.n	8004d0c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d013      	beq.n	8004d0a <osMutexRelease+0x5e>
 8004ce2:	4b0c      	ldr	r3, [pc, #48]	; (8004d14 <osMutexRelease+0x68>)
 8004ce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	f3bf 8f6f 	isb	sy
 8004cf2:	e00a      	b.n	8004d0a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	2100      	movs	r1, #0
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 fc18 	bl	8005530 <xQueueGenericSend>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d001      	beq.n	8004d0a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8004d06:	23ff      	movs	r3, #255	; 0xff
 8004d08:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	e000ed04 	.word	0xe000ed04

08004d18 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af02      	add	r7, sp, #8
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d010      	beq.n	8004d4c <osSemaphoreCreate+0x34>
    if (count == 1) {
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d10b      	bne.n	8004d48 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	2303      	movs	r3, #3
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	2001      	movs	r0, #1
 8004d40:	f000 fad8 	bl	80052f4 <xQueueGenericCreateStatic>
 8004d44:	4603      	mov	r3, r0
 8004d46:	e016      	b.n	8004d76 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	e014      	b.n	8004d76 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d110      	bne.n	8004d74 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8004d52:	2203      	movs	r2, #3
 8004d54:	2100      	movs	r1, #0
 8004d56:	2001      	movs	r0, #1
 8004d58:	f000 fb3f 	bl	80053da <xQueueGenericCreate>
 8004d5c:	60f8      	str	r0, [r7, #12]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d005      	beq.n	8004d70 <osSemaphoreCreate+0x58>
 8004d64:	2300      	movs	r3, #0
 8004d66:	2200      	movs	r2, #0
 8004d68:	2100      	movs	r1, #0
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f000 fbe0 	bl	8005530 <xQueueGenericSend>
      return sema;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	e000      	b.n	8004d76 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004d74:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
	...

08004d80 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d101      	bne.n	8004d98 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004d94:	2380      	movs	r3, #128	; 0x80
 8004d96:	e03a      	b.n	8004e0e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da2:	d103      	bne.n	8004dac <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004da4:	f04f 33ff 	mov.w	r3, #4294967295
 8004da8:	60fb      	str	r3, [r7, #12]
 8004daa:	e009      	b.n	8004dc0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d006      	beq.n	8004dc0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d101      	bne.n	8004dc0 <osSemaphoreWait+0x40>
      ticks = 1;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004dc0:	f7ff fe85 	bl	8004ace <inHandlerMode>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d017      	beq.n	8004dfa <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004dca:	f107 0308 	add.w	r3, r7, #8
 8004dce:	461a      	mov	r2, r3
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 ffa8 	bl	8005d28 <xQueueReceiveFromISR>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d001      	beq.n	8004de2 <osSemaphoreWait+0x62>
      return osErrorOS;
 8004dde:	23ff      	movs	r3, #255	; 0xff
 8004de0:	e015      	b.n	8004e0e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d011      	beq.n	8004e0c <osSemaphoreWait+0x8c>
 8004de8:	4b0b      	ldr	r3, [pc, #44]	; (8004e18 <osSemaphoreWait+0x98>)
 8004dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	f3bf 8f4f 	dsb	sy
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	e008      	b.n	8004e0c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8004dfa:	68f9      	ldr	r1, [r7, #12]
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 fe8b 	bl	8005b18 <xQueueSemaphoreTake>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d001      	beq.n	8004e0c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8004e08:	23ff      	movs	r3, #255	; 0xff
 8004e0a:	e000      	b.n	8004e0e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	e000ed04 	.word	0xe000ed04

08004e1c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004e24:	2300      	movs	r3, #0
 8004e26:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004e2c:	f7ff fe4f 	bl	8004ace <inHandlerMode>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d016      	beq.n	8004e64 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004e36:	f107 0308 	add.w	r3, r7, #8
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 fd05 	bl	800584c <xQueueGiveFromISR>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d001      	beq.n	8004e4c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004e48:	23ff      	movs	r3, #255	; 0xff
 8004e4a:	e017      	b.n	8004e7c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d013      	beq.n	8004e7a <osSemaphoreRelease+0x5e>
 8004e52:	4b0c      	ldr	r3, [pc, #48]	; (8004e84 <osSemaphoreRelease+0x68>)
 8004e54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e58:	601a      	str	r2, [r3, #0]
 8004e5a:	f3bf 8f4f 	dsb	sy
 8004e5e:	f3bf 8f6f 	isb	sy
 8004e62:	e00a      	b.n	8004e7a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004e64:	2300      	movs	r3, #0
 8004e66:	2200      	movs	r2, #0
 8004e68:	2100      	movs	r1, #0
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 fb60 	bl	8005530 <xQueueGenericSend>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d001      	beq.n	8004e7a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8004e76:	23ff      	movs	r3, #255	; 0xff
 8004e78:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	e000ed04 	.word	0xe000ed04

08004e88 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004e90:	f7ff fe1d 	bl	8004ace <inHandlerMode>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <osSemaphoreDelete+0x16>
    return osErrorISR;
 8004e9a:	2382      	movs	r3, #130	; 0x82
 8004e9c:	e003      	b.n	8004ea6 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 fff9 	bl	8005e96 <vQueueDelete>

  return osOK; 
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3708      	adds	r7, #8
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004eae:	b590      	push	{r4, r7, lr}
 8004eb0:	b085      	sub	sp, #20
 8004eb2:	af02      	add	r7, sp, #8
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d012      	beq.n	8004ee6 <osMessageCreate+0x38>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00e      	beq.n	8004ee6 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6818      	ldr	r0, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6859      	ldr	r1, [r3, #4]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689a      	ldr	r2, [r3, #8]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	68dc      	ldr	r4, [r3, #12]
 8004ed8:	2300      	movs	r3, #0
 8004eda:	9300      	str	r3, [sp, #0]
 8004edc:	4623      	mov	r3, r4
 8004ede:	f000 fa09 	bl	80052f4 <xQueueGenericCreateStatic>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	e008      	b.n	8004ef8 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6818      	ldr	r0, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	f000 fa72 	bl	80053da <xQueueGenericCreate>
 8004ef6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd90      	pop	{r4, r7, pc}

08004f00 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <osMessagePut+0x1e>
    ticks = 1;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8004f1e:	f7ff fdd6 	bl	8004ace <inHandlerMode>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d018      	beq.n	8004f5a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004f28:	f107 0210 	add.w	r2, r7, #16
 8004f2c:	f107 0108 	add.w	r1, r7, #8
 8004f30:	2300      	movs	r3, #0
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 fbf6 	bl	8005724 <xQueueGenericSendFromISR>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d001      	beq.n	8004f42 <osMessagePut+0x42>
      return osErrorOS;
 8004f3e:	23ff      	movs	r3, #255	; 0xff
 8004f40:	e018      	b.n	8004f74 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d014      	beq.n	8004f72 <osMessagePut+0x72>
 8004f48:	4b0c      	ldr	r3, [pc, #48]	; (8004f7c <osMessagePut+0x7c>)
 8004f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f4e:	601a      	str	r2, [r3, #0]
 8004f50:	f3bf 8f4f 	dsb	sy
 8004f54:	f3bf 8f6f 	isb	sy
 8004f58:	e00b      	b.n	8004f72 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004f5a:	f107 0108 	add.w	r1, r7, #8
 8004f5e:	2300      	movs	r3, #0
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f000 fae4 	bl	8005530 <xQueueGenericSend>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d001      	beq.n	8004f72 <osMessagePut+0x72>
      return osErrorOS;
 8004f6e:	23ff      	movs	r3, #255	; 0xff
 8004f70:	e000      	b.n	8004f74 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3718      	adds	r7, #24
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	e000ed04 	.word	0xe000ed04

08004f80 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004f80:	b590      	push	{r4, r7, lr}
 8004f82:	b08b      	sub	sp, #44	; 0x2c
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004f90:	2300      	movs	r3, #0
 8004f92:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10a      	bne.n	8004fb0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8004f9a:	2380      	movs	r3, #128	; 0x80
 8004f9c:	617b      	str	r3, [r7, #20]
    return event;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	461c      	mov	r4, r3
 8004fa2:	f107 0314 	add.w	r3, r7, #20
 8004fa6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004faa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004fae:	e054      	b.n	800505a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fbe:	d103      	bne.n	8004fc8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8004fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8004fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8004fc6:	e009      	b.n	8004fdc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d006      	beq.n	8004fdc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d101      	bne.n	8004fdc <osMessageGet+0x5c>
      ticks = 1;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004fdc:	f7ff fd77 	bl	8004ace <inHandlerMode>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d01c      	beq.n	8005020 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004fe6:	f107 0220 	add.w	r2, r7, #32
 8004fea:	f107 0314 	add.w	r3, r7, #20
 8004fee:	3304      	adds	r3, #4
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	68b8      	ldr	r0, [r7, #8]
 8004ff4:	f000 fe98 	bl	8005d28 <xQueueReceiveFromISR>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d102      	bne.n	8005004 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8004ffe:	2310      	movs	r3, #16
 8005000:	617b      	str	r3, [r7, #20]
 8005002:	e001      	b.n	8005008 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005004:	2300      	movs	r3, #0
 8005006:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005008:	6a3b      	ldr	r3, [r7, #32]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d01d      	beq.n	800504a <osMessageGet+0xca>
 800500e:	4b15      	ldr	r3, [pc, #84]	; (8005064 <osMessageGet+0xe4>)
 8005010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005014:	601a      	str	r2, [r3, #0]
 8005016:	f3bf 8f4f 	dsb	sy
 800501a:	f3bf 8f6f 	isb	sy
 800501e:	e014      	b.n	800504a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005020:	f107 0314 	add.w	r3, r7, #20
 8005024:	3304      	adds	r3, #4
 8005026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005028:	4619      	mov	r1, r3
 800502a:	68b8      	ldr	r0, [r7, #8]
 800502c:	f000 fc98 	bl	8005960 <xQueueReceive>
 8005030:	4603      	mov	r3, r0
 8005032:	2b01      	cmp	r3, #1
 8005034:	d102      	bne.n	800503c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005036:	2310      	movs	r3, #16
 8005038:	617b      	str	r3, [r7, #20]
 800503a:	e006      	b.n	800504a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <osMessageGet+0xc6>
 8005042:	2300      	movs	r3, #0
 8005044:	e000      	b.n	8005048 <osMessageGet+0xc8>
 8005046:	2340      	movs	r3, #64	; 0x40
 8005048:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	461c      	mov	r4, r3
 800504e:	f107 0314 	add.w	r3, r7, #20
 8005052:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005056:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	372c      	adds	r7, #44	; 0x2c
 800505e:	46bd      	mov	sp, r7
 8005060:	bd90      	pop	{r4, r7, pc}
 8005062:	bf00      	nop
 8005064:	e000ed04 	.word	0xe000ed04

08005068 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005070:	f7ff fd2d 	bl	8004ace <inHandlerMode>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d004      	beq.n	8005084 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 feee 	bl	8005e5c <uxQueueMessagesWaitingFromISR>
 8005080:	4603      	mov	r3, r0
 8005082:	e003      	b.n	800508c <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 fecc 	bl	8005e22 <uxQueueMessagesWaiting>
 800508a:	4603      	mov	r3, r0
  }
}
 800508c:	4618      	mov	r0, r3
 800508e:	3708      	adds	r7, #8
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800509c:	f7ff fd17 	bl	8004ace <inHandlerMode>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <osMessageDelete+0x16>
    return osErrorISR;
 80050a6:	2382      	movs	r3, #130	; 0x82
 80050a8:	e003      	b.n	80050b2 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 fef3 	bl	8005e96 <vQueueDelete>

  return osOK; 
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f103 0208 	add.w	r2, r3, #8
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f04f 32ff 	mov.w	r2, #4294967295
 80050d2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f103 0208 	add.w	r2, r3, #8
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f103 0208 	add.w	r2, r3, #8
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80050ee:	bf00      	nop
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80050fa:	b480      	push	{r7}
 80050fc:	b083      	sub	sp, #12
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	689a      	ldr	r2, [r3, #8]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	683a      	ldr	r2, [r7, #0]
 8005138:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	1c5a      	adds	r2, r3, #1
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	601a      	str	r2, [r3, #0]
}
 8005150:	bf00      	nop
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005172:	d103      	bne.n	800517c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	60fb      	str	r3, [r7, #12]
 800517a:	e00c      	b.n	8005196 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	3308      	adds	r3, #8
 8005180:	60fb      	str	r3, [r7, #12]
 8005182:	e002      	b.n	800518a <vListInsert+0x2e>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	60fb      	str	r3, [r7, #12]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	429a      	cmp	r2, r3
 8005194:	d2f6      	bcs.n	8005184 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	1c5a      	adds	r2, r3, #1
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	601a      	str	r2, [r3, #0]
}
 80051c2:	bf00      	nop
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80051ce:	b480      	push	{r7}
 80051d0:	b085      	sub	sp, #20
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	6892      	ldr	r2, [r2, #8]
 80051e4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	6852      	ldr	r2, [r2, #4]
 80051ee:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d103      	bne.n	8005202 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	689a      	ldr	r2, [r3, #8]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	1e5a      	subs	r2, r3, #1
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
	...

08005224 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d109      	bne.n	800524c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523c:	f383 8811 	msr	BASEPRI, r3
 8005240:	f3bf 8f6f 	isb	sy
 8005244:	f3bf 8f4f 	dsb	sy
 8005248:	60bb      	str	r3, [r7, #8]
 800524a:	e7fe      	b.n	800524a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800524c:	f002 f8ce 	bl	80073ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005258:	68f9      	ldr	r1, [r7, #12]
 800525a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800525c:	fb01 f303 	mul.w	r3, r1, r3
 8005260:	441a      	add	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800527c:	3b01      	subs	r3, #1
 800527e:	68f9      	ldr	r1, [r7, #12]
 8005280:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005282:	fb01 f303 	mul.w	r3, r1, r3
 8005286:	441a      	add	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	22ff      	movs	r2, #255	; 0xff
 8005290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	22ff      	movs	r2, #255	; 0xff
 8005298:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d114      	bne.n	80052cc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d01a      	beq.n	80052e0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	3310      	adds	r3, #16
 80052ae:	4618      	mov	r0, r3
 80052b0:	f001 fb8a 	bl	80069c8 <xTaskRemoveFromEventList>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d012      	beq.n	80052e0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80052ba:	4b0d      	ldr	r3, [pc, #52]	; (80052f0 <xQueueGenericReset+0xcc>)
 80052bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	f3bf 8f4f 	dsb	sy
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	e009      	b.n	80052e0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	3310      	adds	r3, #16
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7ff fef2 	bl	80050ba <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	3324      	adds	r3, #36	; 0x24
 80052da:	4618      	mov	r0, r3
 80052dc:	f7ff feed 	bl	80050ba <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80052e0:	f002 f8b2 	bl	8007448 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80052e4:	2301      	movs	r3, #1
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	e000ed04 	.word	0xe000ed04

080052f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b08e      	sub	sp, #56	; 0x38
 80052f8:	af02      	add	r7, sp, #8
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
 8005300:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d109      	bne.n	800531c <xQueueGenericCreateStatic+0x28>
 8005308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530c:	f383 8811 	msr	BASEPRI, r3
 8005310:	f3bf 8f6f 	isb	sy
 8005314:	f3bf 8f4f 	dsb	sy
 8005318:	62bb      	str	r3, [r7, #40]	; 0x28
 800531a:	e7fe      	b.n	800531a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d109      	bne.n	8005336 <xQueueGenericCreateStatic+0x42>
 8005322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	627b      	str	r3, [r7, #36]	; 0x24
 8005334:	e7fe      	b.n	8005334 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d002      	beq.n	8005342 <xQueueGenericCreateStatic+0x4e>
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <xQueueGenericCreateStatic+0x52>
 8005342:	2301      	movs	r3, #1
 8005344:	e000      	b.n	8005348 <xQueueGenericCreateStatic+0x54>
 8005346:	2300      	movs	r3, #0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d109      	bne.n	8005360 <xQueueGenericCreateStatic+0x6c>
 800534c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005350:	f383 8811 	msr	BASEPRI, r3
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	623b      	str	r3, [r7, #32]
 800535e:	e7fe      	b.n	800535e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d102      	bne.n	800536c <xQueueGenericCreateStatic+0x78>
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <xQueueGenericCreateStatic+0x7c>
 800536c:	2301      	movs	r3, #1
 800536e:	e000      	b.n	8005372 <xQueueGenericCreateStatic+0x7e>
 8005370:	2300      	movs	r3, #0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d109      	bne.n	800538a <xQueueGenericCreateStatic+0x96>
 8005376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537a:	f383 8811 	msr	BASEPRI, r3
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	f3bf 8f4f 	dsb	sy
 8005386:	61fb      	str	r3, [r7, #28]
 8005388:	e7fe      	b.n	8005388 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800538a:	2348      	movs	r3, #72	; 0x48
 800538c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	2b48      	cmp	r3, #72	; 0x48
 8005392:	d009      	beq.n	80053a8 <xQueueGenericCreateStatic+0xb4>
 8005394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005398:	f383 8811 	msr	BASEPRI, r3
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	61bb      	str	r3, [r7, #24]
 80053a6:	e7fe      	b.n	80053a6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80053a8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80053ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00d      	beq.n	80053d0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80053b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80053bc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80053c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	4613      	mov	r3, r2
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	68b9      	ldr	r1, [r7, #8]
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f000 f844 	bl	8005458 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80053d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3730      	adds	r7, #48	; 0x30
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b08a      	sub	sp, #40	; 0x28
 80053de:	af02      	add	r7, sp, #8
 80053e0:	60f8      	str	r0, [r7, #12]
 80053e2:	60b9      	str	r1, [r7, #8]
 80053e4:	4613      	mov	r3, r2
 80053e6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d109      	bne.n	8005402 <xQueueGenericCreate+0x28>
 80053ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f2:	f383 8811 	msr	BASEPRI, r3
 80053f6:	f3bf 8f6f 	isb	sy
 80053fa:	f3bf 8f4f 	dsb	sy
 80053fe:	613b      	str	r3, [r7, #16]
 8005400:	e7fe      	b.n	8005400 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d102      	bne.n	800540e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005408:	2300      	movs	r3, #0
 800540a:	61fb      	str	r3, [r7, #28]
 800540c:	e004      	b.n	8005418 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	fb02 f303 	mul.w	r3, r2, r3
 8005416:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	3348      	adds	r3, #72	; 0x48
 800541c:	4618      	mov	r0, r3
 800541e:	f002 f8ff 	bl	8007620 <pvPortMalloc>
 8005422:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d011      	beq.n	800544e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	3348      	adds	r3, #72	; 0x48
 8005432:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800543c:	79fa      	ldrb	r2, [r7, #7]
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	4613      	mov	r3, r2
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	68b9      	ldr	r1, [r7, #8]
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f000 f805 	bl	8005458 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800544e:	69bb      	ldr	r3, [r7, #24]
	}
 8005450:	4618      	mov	r0, r3
 8005452:	3720      	adds	r7, #32
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
 8005464:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d103      	bne.n	8005474 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	69ba      	ldr	r2, [r7, #24]
 8005470:	601a      	str	r2, [r3, #0]
 8005472:	e002      	b.n	800547a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005486:	2101      	movs	r1, #1
 8005488:	69b8      	ldr	r0, [r7, #24]
 800548a:	f7ff fecb 	bl	8005224 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800548e:	bf00      	nop
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}

08005496 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005496:	b580      	push	{r7, lr}
 8005498:	b082      	sub	sp, #8
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00e      	beq.n	80054c2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80054b6:	2300      	movs	r3, #0
 80054b8:	2200      	movs	r2, #0
 80054ba:	2100      	movs	r1, #0
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 f837 	bl	8005530 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80054c2:	bf00      	nop
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b086      	sub	sp, #24
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	4603      	mov	r3, r0
 80054d2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80054d4:	2301      	movs	r3, #1
 80054d6:	617b      	str	r3, [r7, #20]
 80054d8:	2300      	movs	r3, #0
 80054da:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80054dc:	79fb      	ldrb	r3, [r7, #7]
 80054de:	461a      	mov	r2, r3
 80054e0:	6939      	ldr	r1, [r7, #16]
 80054e2:	6978      	ldr	r0, [r7, #20]
 80054e4:	f7ff ff79 	bl	80053da <xQueueGenericCreate>
 80054e8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f7ff ffd3 	bl	8005496 <prvInitialiseMutex>

		return xNewQueue;
 80054f0:	68fb      	ldr	r3, [r7, #12]
	}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3718      	adds	r7, #24
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b088      	sub	sp, #32
 80054fe:	af02      	add	r7, sp, #8
 8005500:	4603      	mov	r3, r0
 8005502:	6039      	str	r1, [r7, #0]
 8005504:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005506:	2301      	movs	r3, #1
 8005508:	617b      	str	r3, [r7, #20]
 800550a:	2300      	movs	r3, #0
 800550c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800550e:	79fb      	ldrb	r3, [r7, #7]
 8005510:	9300      	str	r3, [sp, #0]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	2200      	movs	r2, #0
 8005516:	6939      	ldr	r1, [r7, #16]
 8005518:	6978      	ldr	r0, [r7, #20]
 800551a:	f7ff feeb 	bl	80052f4 <xQueueGenericCreateStatic>
 800551e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f7ff ffb8 	bl	8005496 <prvInitialiseMutex>

		return xNewQueue;
 8005526:	68fb      	ldr	r3, [r7, #12]
	}
 8005528:	4618      	mov	r0, r3
 800552a:	3718      	adds	r7, #24
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b08e      	sub	sp, #56	; 0x38
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
 800553c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800553e:	2300      	movs	r3, #0
 8005540:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005548:	2b00      	cmp	r3, #0
 800554a:	d109      	bne.n	8005560 <xQueueGenericSend+0x30>
 800554c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005550:	f383 8811 	msr	BASEPRI, r3
 8005554:	f3bf 8f6f 	isb	sy
 8005558:	f3bf 8f4f 	dsb	sy
 800555c:	62bb      	str	r3, [r7, #40]	; 0x28
 800555e:	e7fe      	b.n	800555e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d103      	bne.n	800556e <xQueueGenericSend+0x3e>
 8005566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <xQueueGenericSend+0x42>
 800556e:	2301      	movs	r3, #1
 8005570:	e000      	b.n	8005574 <xQueueGenericSend+0x44>
 8005572:	2300      	movs	r3, #0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d109      	bne.n	800558c <xQueueGenericSend+0x5c>
 8005578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557c:	f383 8811 	msr	BASEPRI, r3
 8005580:	f3bf 8f6f 	isb	sy
 8005584:	f3bf 8f4f 	dsb	sy
 8005588:	627b      	str	r3, [r7, #36]	; 0x24
 800558a:	e7fe      	b.n	800558a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	2b02      	cmp	r3, #2
 8005590:	d103      	bne.n	800559a <xQueueGenericSend+0x6a>
 8005592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005596:	2b01      	cmp	r3, #1
 8005598:	d101      	bne.n	800559e <xQueueGenericSend+0x6e>
 800559a:	2301      	movs	r3, #1
 800559c:	e000      	b.n	80055a0 <xQueueGenericSend+0x70>
 800559e:	2300      	movs	r3, #0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d109      	bne.n	80055b8 <xQueueGenericSend+0x88>
 80055a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a8:	f383 8811 	msr	BASEPRI, r3
 80055ac:	f3bf 8f6f 	isb	sy
 80055b0:	f3bf 8f4f 	dsb	sy
 80055b4:	623b      	str	r3, [r7, #32]
 80055b6:	e7fe      	b.n	80055b6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055b8:	f001 fbbc 	bl	8006d34 <xTaskGetSchedulerState>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d102      	bne.n	80055c8 <xQueueGenericSend+0x98>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <xQueueGenericSend+0x9c>
 80055c8:	2301      	movs	r3, #1
 80055ca:	e000      	b.n	80055ce <xQueueGenericSend+0x9e>
 80055cc:	2300      	movs	r3, #0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d109      	bne.n	80055e6 <xQueueGenericSend+0xb6>
 80055d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d6:	f383 8811 	msr	BASEPRI, r3
 80055da:	f3bf 8f6f 	isb	sy
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	61fb      	str	r3, [r7, #28]
 80055e4:	e7fe      	b.n	80055e4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80055e6:	f001 ff01 	bl	80073ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d302      	bcc.n	80055fc <xQueueGenericSend+0xcc>
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d129      	bne.n	8005650 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	68b9      	ldr	r1, [r7, #8]
 8005600:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005602:	f000 fc82 	bl	8005f0a <prvCopyDataToQueue>
 8005606:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560c:	2b00      	cmp	r3, #0
 800560e:	d010      	beq.n	8005632 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005612:	3324      	adds	r3, #36	; 0x24
 8005614:	4618      	mov	r0, r3
 8005616:	f001 f9d7 	bl	80069c8 <xTaskRemoveFromEventList>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d013      	beq.n	8005648 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005620:	4b3f      	ldr	r3, [pc, #252]	; (8005720 <xQueueGenericSend+0x1f0>)
 8005622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005626:	601a      	str	r2, [r3, #0]
 8005628:	f3bf 8f4f 	dsb	sy
 800562c:	f3bf 8f6f 	isb	sy
 8005630:	e00a      	b.n	8005648 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005634:	2b00      	cmp	r3, #0
 8005636:	d007      	beq.n	8005648 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005638:	4b39      	ldr	r3, [pc, #228]	; (8005720 <xQueueGenericSend+0x1f0>)
 800563a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800563e:	601a      	str	r2, [r3, #0]
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005648:	f001 fefe 	bl	8007448 <vPortExitCritical>
				return pdPASS;
 800564c:	2301      	movs	r3, #1
 800564e:	e063      	b.n	8005718 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d103      	bne.n	800565e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005656:	f001 fef7 	bl	8007448 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800565a:	2300      	movs	r3, #0
 800565c:	e05c      	b.n	8005718 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800565e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005660:	2b00      	cmp	r3, #0
 8005662:	d106      	bne.n	8005672 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005664:	f107 0314 	add.w	r3, r7, #20
 8005668:	4618      	mov	r0, r3
 800566a:	f001 fa0f 	bl	8006a8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800566e:	2301      	movs	r3, #1
 8005670:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005672:	f001 fee9 	bl	8007448 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005676:	f000 ffa5 	bl	80065c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800567a:	f001 feb7 	bl	80073ec <vPortEnterCritical>
 800567e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005680:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005684:	b25b      	sxtb	r3, r3
 8005686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800568a:	d103      	bne.n	8005694 <xQueueGenericSend+0x164>
 800568c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568e:	2200      	movs	r2, #0
 8005690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005696:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800569a:	b25b      	sxtb	r3, r3
 800569c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a0:	d103      	bne.n	80056aa <xQueueGenericSend+0x17a>
 80056a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056aa:	f001 fecd 	bl	8007448 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056ae:	1d3a      	adds	r2, r7, #4
 80056b0:	f107 0314 	add.w	r3, r7, #20
 80056b4:	4611      	mov	r1, r2
 80056b6:	4618      	mov	r0, r3
 80056b8:	f001 f9fe 	bl	8006ab8 <xTaskCheckForTimeOut>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d124      	bne.n	800570c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80056c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056c4:	f000 fd19 	bl	80060fa <prvIsQueueFull>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d018      	beq.n	8005700 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80056ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d0:	3310      	adds	r3, #16
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	4611      	mov	r1, r2
 80056d6:	4618      	mov	r0, r3
 80056d8:	f001 f952 	bl	8006980 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80056dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80056de:	f000 fca4 	bl	800602a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80056e2:	f000 ff7d 	bl	80065e0 <xTaskResumeAll>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f47f af7c 	bne.w	80055e6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80056ee:	4b0c      	ldr	r3, [pc, #48]	; (8005720 <xQueueGenericSend+0x1f0>)
 80056f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056f4:	601a      	str	r2, [r3, #0]
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	f3bf 8f6f 	isb	sy
 80056fe:	e772      	b.n	80055e6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005700:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005702:	f000 fc92 	bl	800602a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005706:	f000 ff6b 	bl	80065e0 <xTaskResumeAll>
 800570a:	e76c      	b.n	80055e6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800570c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800570e:	f000 fc8c 	bl	800602a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005712:	f000 ff65 	bl	80065e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005716:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005718:	4618      	mov	r0, r3
 800571a:	3738      	adds	r7, #56	; 0x38
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	e000ed04 	.word	0xe000ed04

08005724 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b08e      	sub	sp, #56	; 0x38
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
 8005730:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005738:	2b00      	cmp	r3, #0
 800573a:	d109      	bne.n	8005750 <xQueueGenericSendFromISR+0x2c>
 800573c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005740:	f383 8811 	msr	BASEPRI, r3
 8005744:	f3bf 8f6f 	isb	sy
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	627b      	str	r3, [r7, #36]	; 0x24
 800574e:	e7fe      	b.n	800574e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d103      	bne.n	800575e <xQueueGenericSendFromISR+0x3a>
 8005756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <xQueueGenericSendFromISR+0x3e>
 800575e:	2301      	movs	r3, #1
 8005760:	e000      	b.n	8005764 <xQueueGenericSendFromISR+0x40>
 8005762:	2300      	movs	r3, #0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d109      	bne.n	800577c <xQueueGenericSendFromISR+0x58>
 8005768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576c:	f383 8811 	msr	BASEPRI, r3
 8005770:	f3bf 8f6f 	isb	sy
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	623b      	str	r3, [r7, #32]
 800577a:	e7fe      	b.n	800577a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	2b02      	cmp	r3, #2
 8005780:	d103      	bne.n	800578a <xQueueGenericSendFromISR+0x66>
 8005782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005786:	2b01      	cmp	r3, #1
 8005788:	d101      	bne.n	800578e <xQueueGenericSendFromISR+0x6a>
 800578a:	2301      	movs	r3, #1
 800578c:	e000      	b.n	8005790 <xQueueGenericSendFromISR+0x6c>
 800578e:	2300      	movs	r3, #0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d109      	bne.n	80057a8 <xQueueGenericSendFromISR+0x84>
 8005794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005798:	f383 8811 	msr	BASEPRI, r3
 800579c:	f3bf 8f6f 	isb	sy
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	61fb      	str	r3, [r7, #28]
 80057a6:	e7fe      	b.n	80057a6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80057a8:	f001 fefc 	bl	80075a4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80057ac:	f3ef 8211 	mrs	r2, BASEPRI
 80057b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b4:	f383 8811 	msr	BASEPRI, r3
 80057b8:	f3bf 8f6f 	isb	sy
 80057bc:	f3bf 8f4f 	dsb	sy
 80057c0:	61ba      	str	r2, [r7, #24]
 80057c2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80057c4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80057c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d302      	bcc.n	80057da <xQueueGenericSendFromISR+0xb6>
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d12c      	bne.n	8005834 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80057da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	68b9      	ldr	r1, [r7, #8]
 80057e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057ea:	f000 fb8e 	bl	8005f0a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80057ee:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80057f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f6:	d112      	bne.n	800581e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d016      	beq.n	800582e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005802:	3324      	adds	r3, #36	; 0x24
 8005804:	4618      	mov	r0, r3
 8005806:	f001 f8df 	bl	80069c8 <xTaskRemoveFromEventList>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00e      	beq.n	800582e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00b      	beq.n	800582e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	601a      	str	r2, [r3, #0]
 800581c:	e007      	b.n	800582e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800581e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005822:	3301      	adds	r3, #1
 8005824:	b2db      	uxtb	r3, r3
 8005826:	b25a      	sxtb	r2, r3
 8005828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800582e:	2301      	movs	r3, #1
 8005830:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005832:	e001      	b.n	8005838 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005834:	2300      	movs	r3, #0
 8005836:	637b      	str	r3, [r7, #52]	; 0x34
 8005838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800583a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005844:	4618      	mov	r0, r3
 8005846:	3738      	adds	r7, #56	; 0x38
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b08e      	sub	sp, #56	; 0x38
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800585a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585c:	2b00      	cmp	r3, #0
 800585e:	d109      	bne.n	8005874 <xQueueGiveFromISR+0x28>
	__asm volatile
 8005860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	623b      	str	r3, [r7, #32]
 8005872:	e7fe      	b.n	8005872 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005878:	2b00      	cmp	r3, #0
 800587a:	d009      	beq.n	8005890 <xQueueGiveFromISR+0x44>
 800587c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005880:	f383 8811 	msr	BASEPRI, r3
 8005884:	f3bf 8f6f 	isb	sy
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	61fb      	str	r3, [r7, #28]
 800588e:	e7fe      	b.n	800588e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d103      	bne.n	80058a0 <xQueueGiveFromISR+0x54>
 8005898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <xQueueGiveFromISR+0x58>
 80058a0:	2301      	movs	r3, #1
 80058a2:	e000      	b.n	80058a6 <xQueueGiveFromISR+0x5a>
 80058a4:	2300      	movs	r3, #0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d109      	bne.n	80058be <xQueueGiveFromISR+0x72>
 80058aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ae:	f383 8811 	msr	BASEPRI, r3
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	f3bf 8f4f 	dsb	sy
 80058ba:	61bb      	str	r3, [r7, #24]
 80058bc:	e7fe      	b.n	80058bc <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058be:	f001 fe71 	bl	80075a4 <vPortValidateInterruptPriority>
	__asm volatile
 80058c2:	f3ef 8211 	mrs	r2, BASEPRI
 80058c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ca:	f383 8811 	msr	BASEPRI, r3
 80058ce:	f3bf 8f6f 	isb	sy
 80058d2:	f3bf 8f4f 	dsb	sy
 80058d6:	617a      	str	r2, [r7, #20]
 80058d8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80058da:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80058e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d22b      	bcs.n	8005946 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80058ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80058f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fa:	1c5a      	adds	r2, r3, #1
 80058fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fe:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005900:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005908:	d112      	bne.n	8005930 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800590a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590e:	2b00      	cmp	r3, #0
 8005910:	d016      	beq.n	8005940 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005914:	3324      	adds	r3, #36	; 0x24
 8005916:	4618      	mov	r0, r3
 8005918:	f001 f856 	bl	80069c8 <xTaskRemoveFromEventList>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00e      	beq.n	8005940 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00b      	beq.n	8005940 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	2201      	movs	r2, #1
 800592c:	601a      	str	r2, [r3, #0]
 800592e:	e007      	b.n	8005940 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005934:	3301      	adds	r3, #1
 8005936:	b2db      	uxtb	r3, r3
 8005938:	b25a      	sxtb	r2, r3
 800593a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005940:	2301      	movs	r3, #1
 8005942:	637b      	str	r3, [r7, #52]	; 0x34
 8005944:	e001      	b.n	800594a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005946:	2300      	movs	r3, #0
 8005948:	637b      	str	r3, [r7, #52]	; 0x34
 800594a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005956:	4618      	mov	r0, r3
 8005958:	3738      	adds	r7, #56	; 0x38
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
	...

08005960 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b08c      	sub	sp, #48	; 0x30
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800596c:	2300      	movs	r3, #0
 800596e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005976:	2b00      	cmp	r3, #0
 8005978:	d109      	bne.n	800598e <xQueueReceive+0x2e>
	__asm volatile
 800597a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800597e:	f383 8811 	msr	BASEPRI, r3
 8005982:	f3bf 8f6f 	isb	sy
 8005986:	f3bf 8f4f 	dsb	sy
 800598a:	623b      	str	r3, [r7, #32]
 800598c:	e7fe      	b.n	800598c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d103      	bne.n	800599c <xQueueReceive+0x3c>
 8005994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <xQueueReceive+0x40>
 800599c:	2301      	movs	r3, #1
 800599e:	e000      	b.n	80059a2 <xQueueReceive+0x42>
 80059a0:	2300      	movs	r3, #0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d109      	bne.n	80059ba <xQueueReceive+0x5a>
 80059a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	61fb      	str	r3, [r7, #28]
 80059b8:	e7fe      	b.n	80059b8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059ba:	f001 f9bb 	bl	8006d34 <xTaskGetSchedulerState>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d102      	bne.n	80059ca <xQueueReceive+0x6a>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d101      	bne.n	80059ce <xQueueReceive+0x6e>
 80059ca:	2301      	movs	r3, #1
 80059cc:	e000      	b.n	80059d0 <xQueueReceive+0x70>
 80059ce:	2300      	movs	r3, #0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d109      	bne.n	80059e8 <xQueueReceive+0x88>
 80059d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d8:	f383 8811 	msr	BASEPRI, r3
 80059dc:	f3bf 8f6f 	isb	sy
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	61bb      	str	r3, [r7, #24]
 80059e6:	e7fe      	b.n	80059e6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059e8:	f001 fd00 	bl	80073ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d01f      	beq.n	8005a38 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80059f8:	68b9      	ldr	r1, [r7, #8]
 80059fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059fc:	f000 faef 	bl	8005fde <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	1e5a      	subs	r2, r3, #1
 8005a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a06:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00f      	beq.n	8005a30 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a12:	3310      	adds	r3, #16
 8005a14:	4618      	mov	r0, r3
 8005a16:	f000 ffd7 	bl	80069c8 <xTaskRemoveFromEventList>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d007      	beq.n	8005a30 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a20:	4b3c      	ldr	r3, [pc, #240]	; (8005b14 <xQueueReceive+0x1b4>)
 8005a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a26:	601a      	str	r2, [r3, #0]
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a30:	f001 fd0a 	bl	8007448 <vPortExitCritical>
				return pdPASS;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e069      	b.n	8005b0c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d103      	bne.n	8005a46 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a3e:	f001 fd03 	bl	8007448 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a42:	2300      	movs	r3, #0
 8005a44:	e062      	b.n	8005b0c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d106      	bne.n	8005a5a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a4c:	f107 0310 	add.w	r3, r7, #16
 8005a50:	4618      	mov	r0, r3
 8005a52:	f001 f81b 	bl	8006a8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a56:	2301      	movs	r3, #1
 8005a58:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a5a:	f001 fcf5 	bl	8007448 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a5e:	f000 fdb1 	bl	80065c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a62:	f001 fcc3 	bl	80073ec <vPortEnterCritical>
 8005a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a6c:	b25b      	sxtb	r3, r3
 8005a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a72:	d103      	bne.n	8005a7c <xQueueReceive+0x11c>
 8005a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a82:	b25b      	sxtb	r3, r3
 8005a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a88:	d103      	bne.n	8005a92 <xQueueReceive+0x132>
 8005a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a92:	f001 fcd9 	bl	8007448 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a96:	1d3a      	adds	r2, r7, #4
 8005a98:	f107 0310 	add.w	r3, r7, #16
 8005a9c:	4611      	mov	r1, r2
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f001 f80a 	bl	8006ab8 <xTaskCheckForTimeOut>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d123      	bne.n	8005af2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005aaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005aac:	f000 fb0f 	bl	80060ce <prvIsQueueEmpty>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d017      	beq.n	8005ae6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab8:	3324      	adds	r3, #36	; 0x24
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	4611      	mov	r1, r2
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 ff5e 	bl	8006980 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ac4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ac6:	f000 fab0 	bl	800602a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005aca:	f000 fd89 	bl	80065e0 <xTaskResumeAll>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d189      	bne.n	80059e8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005ad4:	4b0f      	ldr	r3, [pc, #60]	; (8005b14 <xQueueReceive+0x1b4>)
 8005ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ada:	601a      	str	r2, [r3, #0]
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	f3bf 8f6f 	isb	sy
 8005ae4:	e780      	b.n	80059e8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ae6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ae8:	f000 fa9f 	bl	800602a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005aec:	f000 fd78 	bl	80065e0 <xTaskResumeAll>
 8005af0:	e77a      	b.n	80059e8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005af2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005af4:	f000 fa99 	bl	800602a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005af8:	f000 fd72 	bl	80065e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005afc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005afe:	f000 fae6 	bl	80060ce <prvIsQueueEmpty>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f43f af6f 	beq.w	80059e8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b0a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3730      	adds	r7, #48	; 0x30
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	e000ed04 	.word	0xe000ed04

08005b18 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b08e      	sub	sp, #56	; 0x38
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b22:	2300      	movs	r3, #0
 8005b24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d109      	bne.n	8005b48 <xQueueSemaphoreTake+0x30>
 8005b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b38:	f383 8811 	msr	BASEPRI, r3
 8005b3c:	f3bf 8f6f 	isb	sy
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	623b      	str	r3, [r7, #32]
 8005b46:	e7fe      	b.n	8005b46 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d009      	beq.n	8005b64 <xQueueSemaphoreTake+0x4c>
 8005b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	61fb      	str	r3, [r7, #28]
 8005b62:	e7fe      	b.n	8005b62 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b64:	f001 f8e6 	bl	8006d34 <xTaskGetSchedulerState>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d102      	bne.n	8005b74 <xQueueSemaphoreTake+0x5c>
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d101      	bne.n	8005b78 <xQueueSemaphoreTake+0x60>
 8005b74:	2301      	movs	r3, #1
 8005b76:	e000      	b.n	8005b7a <xQueueSemaphoreTake+0x62>
 8005b78:	2300      	movs	r3, #0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d109      	bne.n	8005b92 <xQueueSemaphoreTake+0x7a>
 8005b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	61bb      	str	r3, [r7, #24]
 8005b90:	e7fe      	b.n	8005b90 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b92:	f001 fc2b 	bl	80073ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d024      	beq.n	8005bec <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba4:	1e5a      	subs	r2, r3, #1
 8005ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d104      	bne.n	8005bbc <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005bb2:	f001 fa79 	bl	80070a8 <pvTaskIncrementMutexHeldCount>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bba:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00f      	beq.n	8005be4 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc6:	3310      	adds	r3, #16
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f000 fefd 	bl	80069c8 <xTaskRemoveFromEventList>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d007      	beq.n	8005be4 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005bd4:	4b53      	ldr	r3, [pc, #332]	; (8005d24 <xQueueSemaphoreTake+0x20c>)
 8005bd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bda:	601a      	str	r2, [r3, #0]
 8005bdc:	f3bf 8f4f 	dsb	sy
 8005be0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005be4:	f001 fc30 	bl	8007448 <vPortExitCritical>
				return pdPASS;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e096      	b.n	8005d1a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d110      	bne.n	8005c14 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d009      	beq.n	8005c0c <xQueueSemaphoreTake+0xf4>
 8005bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfc:	f383 8811 	msr	BASEPRI, r3
 8005c00:	f3bf 8f6f 	isb	sy
 8005c04:	f3bf 8f4f 	dsb	sy
 8005c08:	617b      	str	r3, [r7, #20]
 8005c0a:	e7fe      	b.n	8005c0a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005c0c:	f001 fc1c 	bl	8007448 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c10:	2300      	movs	r3, #0
 8005c12:	e082      	b.n	8005d1a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d106      	bne.n	8005c28 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c1a:	f107 030c 	add.w	r3, r7, #12
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f000 ff34 	bl	8006a8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c24:	2301      	movs	r3, #1
 8005c26:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c28:	f001 fc0e 	bl	8007448 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c2c:	f000 fcca 	bl	80065c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c30:	f001 fbdc 	bl	80073ec <vPortEnterCritical>
 8005c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c3a:	b25b      	sxtb	r3, r3
 8005c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c40:	d103      	bne.n	8005c4a <xQueueSemaphoreTake+0x132>
 8005c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c50:	b25b      	sxtb	r3, r3
 8005c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c56:	d103      	bne.n	8005c60 <xQueueSemaphoreTake+0x148>
 8005c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c60:	f001 fbf2 	bl	8007448 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c64:	463a      	mov	r2, r7
 8005c66:	f107 030c 	add.w	r3, r7, #12
 8005c6a:	4611      	mov	r1, r2
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f000 ff23 	bl	8006ab8 <xTaskCheckForTimeOut>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d132      	bne.n	8005cde <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c7a:	f000 fa28 	bl	80060ce <prvIsQueueEmpty>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d026      	beq.n	8005cd2 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d109      	bne.n	8005ca0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8005c8c:	f001 fbae 	bl	80073ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	4618      	mov	r0, r3
 8005c96:	f001 f86b 	bl	8006d70 <xTaskPriorityInherit>
 8005c9a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005c9c:	f001 fbd4 	bl	8007448 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca2:	3324      	adds	r3, #36	; 0x24
 8005ca4:	683a      	ldr	r2, [r7, #0]
 8005ca6:	4611      	mov	r1, r2
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f000 fe69 	bl	8006980 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005cae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cb0:	f000 f9bb 	bl	800602a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005cb4:	f000 fc94 	bl	80065e0 <xTaskResumeAll>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f47f af69 	bne.w	8005b92 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8005cc0:	4b18      	ldr	r3, [pc, #96]	; (8005d24 <xQueueSemaphoreTake+0x20c>)
 8005cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cc6:	601a      	str	r2, [r3, #0]
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	f3bf 8f6f 	isb	sy
 8005cd0:	e75f      	b.n	8005b92 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005cd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cd4:	f000 f9a9 	bl	800602a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cd8:	f000 fc82 	bl	80065e0 <xTaskResumeAll>
 8005cdc:	e759      	b.n	8005b92 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005cde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ce0:	f000 f9a3 	bl	800602a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ce4:	f000 fc7c 	bl	80065e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ce8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cea:	f000 f9f0 	bl	80060ce <prvIsQueueEmpty>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f43f af4e 	beq.w	8005b92 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00d      	beq.n	8005d18 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8005cfc:	f001 fb76 	bl	80073ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005d00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d02:	f000 f8ea 	bl	8005eda <prvGetDisinheritPriorityAfterTimeout>
 8005d06:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f001 f932 	bl	8006f78 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005d14:	f001 fb98 	bl	8007448 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3738      	adds	r7, #56	; 0x38
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	e000ed04 	.word	0xe000ed04

08005d28 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b08e      	sub	sp, #56	; 0x38
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d109      	bne.n	8005d52 <xQueueReceiveFromISR+0x2a>
 8005d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d42:	f383 8811 	msr	BASEPRI, r3
 8005d46:	f3bf 8f6f 	isb	sy
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	623b      	str	r3, [r7, #32]
 8005d50:	e7fe      	b.n	8005d50 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d103      	bne.n	8005d60 <xQueueReceiveFromISR+0x38>
 8005d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d101      	bne.n	8005d64 <xQueueReceiveFromISR+0x3c>
 8005d60:	2301      	movs	r3, #1
 8005d62:	e000      	b.n	8005d66 <xQueueReceiveFromISR+0x3e>
 8005d64:	2300      	movs	r3, #0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d109      	bne.n	8005d7e <xQueueReceiveFromISR+0x56>
 8005d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6e:	f383 8811 	msr	BASEPRI, r3
 8005d72:	f3bf 8f6f 	isb	sy
 8005d76:	f3bf 8f4f 	dsb	sy
 8005d7a:	61fb      	str	r3, [r7, #28]
 8005d7c:	e7fe      	b.n	8005d7c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d7e:	f001 fc11 	bl	80075a4 <vPortValidateInterruptPriority>
	__asm volatile
 8005d82:	f3ef 8211 	mrs	r2, BASEPRI
 8005d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8a:	f383 8811 	msr	BASEPRI, r3
 8005d8e:	f3bf 8f6f 	isb	sy
 8005d92:	f3bf 8f4f 	dsb	sy
 8005d96:	61ba      	str	r2, [r7, #24]
 8005d98:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005d9a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d02f      	beq.n	8005e0a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005db4:	68b9      	ldr	r1, [r7, #8]
 8005db6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005db8:	f000 f911 	bl	8005fde <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dbe:	1e5a      	subs	r2, r3, #1
 8005dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005dc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dcc:	d112      	bne.n	8005df4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d016      	beq.n	8005e04 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd8:	3310      	adds	r3, #16
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 fdf4 	bl	80069c8 <xTaskRemoveFromEventList>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00e      	beq.n	8005e04 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00b      	beq.n	8005e04 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	601a      	str	r2, [r3, #0]
 8005df2:	e007      	b.n	8005e04 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005df4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005df8:	3301      	adds	r3, #1
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	b25a      	sxtb	r2, r3
 8005dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005e04:	2301      	movs	r3, #1
 8005e06:	637b      	str	r3, [r7, #52]	; 0x34
 8005e08:	e001      	b.n	8005e0e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8005e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e10:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3738      	adds	r7, #56	; 0x38
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b084      	sub	sp, #16
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d109      	bne.n	8005e44 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 8005e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e34:	f383 8811 	msr	BASEPRI, r3
 8005e38:	f3bf 8f6f 	isb	sy
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	60bb      	str	r3, [r7, #8]
 8005e42:	e7fe      	b.n	8005e42 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8005e44:	f001 fad2 	bl	80073ec <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005e4e:	f001 fafb 	bl	8007448 <vPortExitCritical>

	return uxReturn;
 8005e52:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005e54:	4618      	mov	r0, r3
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b087      	sub	sp, #28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d109      	bne.n	8005e82 <uxQueueMessagesWaitingFromISR+0x26>
 8005e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e72:	f383 8811 	msr	BASEPRI, r3
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	e7fe      	b.n	8005e80 <uxQueueMessagesWaitingFromISR+0x24>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e86:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005e88:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	371c      	adds	r7, #28
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr

08005e96 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b084      	sub	sp, #16
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d109      	bne.n	8005ebc <vQueueDelete+0x26>
 8005ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eac:	f383 8811 	msr	BASEPRI, r3
 8005eb0:	f3bf 8f6f 	isb	sy
 8005eb4:	f3bf 8f4f 	dsb	sy
 8005eb8:	60bb      	str	r3, [r7, #8]
 8005eba:	e7fe      	b.n	8005eba <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f000 f935 	bl	800612c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d102      	bne.n	8005ed2 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f001 fc69 	bl	80077a4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005ed2:	bf00      	nop
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005eda:	b480      	push	{r7}
 8005edc:	b085      	sub	sp, #20
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d006      	beq.n	8005ef8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f1c3 0307 	rsb	r3, r3, #7
 8005ef4:	60fb      	str	r3, [r7, #12]
 8005ef6:	e001      	b.n	8005efc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005efc:	68fb      	ldr	r3, [r7, #12]
	}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b086      	sub	sp, #24
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	60f8      	str	r0, [r7, #12]
 8005f12:	60b9      	str	r1, [r7, #8]
 8005f14:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005f16:	2300      	movs	r3, #0
 8005f18:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d10d      	bne.n	8005f44 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d14d      	bne.n	8005fcc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	4618      	mov	r0, r3
 8005f36:	f000 ff9b 	bl	8006e70 <xTaskPriorityDisinherit>
 8005f3a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	609a      	str	r2, [r3, #8]
 8005f42:	e043      	b.n	8005fcc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d119      	bne.n	8005f7e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6858      	ldr	r0, [r3, #4]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f52:	461a      	mov	r2, r3
 8005f54:	68b9      	ldr	r1, [r7, #8]
 8005f56:	f010 ffe6 	bl	8016f26 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f62:	441a      	add	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d32b      	bcc.n	8005fcc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	605a      	str	r2, [r3, #4]
 8005f7c:	e026      	b.n	8005fcc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	68d8      	ldr	r0, [r3, #12]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f86:	461a      	mov	r2, r3
 8005f88:	68b9      	ldr	r1, [r7, #8]
 8005f8a:	f010 ffcc 	bl	8016f26 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	68da      	ldr	r2, [r3, #12]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f96:	425b      	negs	r3, r3
 8005f98:	441a      	add	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	68da      	ldr	r2, [r3, #12]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d207      	bcs.n	8005fba <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	689a      	ldr	r2, [r3, #8]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb2:	425b      	negs	r3, r3
 8005fb4:	441a      	add	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d105      	bne.n	8005fcc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d002      	beq.n	8005fcc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	1c5a      	adds	r2, r3, #1
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005fd4:	697b      	ldr	r3, [r7, #20]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3718      	adds	r7, #24
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b082      	sub	sp, #8
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
 8005fe6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d018      	beq.n	8006022 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	68da      	ldr	r2, [r3, #12]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff8:	441a      	add	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68da      	ldr	r2, [r3, #12]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	429a      	cmp	r2, r3
 8006008:	d303      	bcc.n	8006012 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68d9      	ldr	r1, [r3, #12]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601a:	461a      	mov	r2, r3
 800601c:	6838      	ldr	r0, [r7, #0]
 800601e:	f010 ff82 	bl	8016f26 <memcpy>
	}
}
 8006022:	bf00      	nop
 8006024:	3708      	adds	r7, #8
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b084      	sub	sp, #16
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006032:	f001 f9db 	bl	80073ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800603c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800603e:	e011      	b.n	8006064 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006044:	2b00      	cmp	r3, #0
 8006046:	d012      	beq.n	800606e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	3324      	adds	r3, #36	; 0x24
 800604c:	4618      	mov	r0, r3
 800604e:	f000 fcbb 	bl	80069c8 <xTaskRemoveFromEventList>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d001      	beq.n	800605c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006058:	f000 fd8e 	bl	8006b78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800605c:	7bfb      	ldrb	r3, [r7, #15]
 800605e:	3b01      	subs	r3, #1
 8006060:	b2db      	uxtb	r3, r3
 8006062:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006064:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006068:	2b00      	cmp	r3, #0
 800606a:	dce9      	bgt.n	8006040 <prvUnlockQueue+0x16>
 800606c:	e000      	b.n	8006070 <prvUnlockQueue+0x46>
					break;
 800606e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	22ff      	movs	r2, #255	; 0xff
 8006074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006078:	f001 f9e6 	bl	8007448 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800607c:	f001 f9b6 	bl	80073ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006086:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006088:	e011      	b.n	80060ae <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d012      	beq.n	80060b8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	3310      	adds	r3, #16
 8006096:	4618      	mov	r0, r3
 8006098:	f000 fc96 	bl	80069c8 <xTaskRemoveFromEventList>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80060a2:	f000 fd69 	bl	8006b78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80060a6:	7bbb      	ldrb	r3, [r7, #14]
 80060a8:	3b01      	subs	r3, #1
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	dce9      	bgt.n	800608a <prvUnlockQueue+0x60>
 80060b6:	e000      	b.n	80060ba <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80060b8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	22ff      	movs	r2, #255	; 0xff
 80060be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80060c2:	f001 f9c1 	bl	8007448 <vPortExitCritical>
}
 80060c6:	bf00      	nop
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b084      	sub	sp, #16
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060d6:	f001 f989 	bl	80073ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d102      	bne.n	80060e8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80060e2:	2301      	movs	r3, #1
 80060e4:	60fb      	str	r3, [r7, #12]
 80060e6:	e001      	b.n	80060ec <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80060e8:	2300      	movs	r3, #0
 80060ea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060ec:	f001 f9ac 	bl	8007448 <vPortExitCritical>

	return xReturn;
 80060f0:	68fb      	ldr	r3, [r7, #12]
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b084      	sub	sp, #16
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006102:	f001 f973 	bl	80073ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800610e:	429a      	cmp	r2, r3
 8006110:	d102      	bne.n	8006118 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006112:	2301      	movs	r3, #1
 8006114:	60fb      	str	r3, [r7, #12]
 8006116:	e001      	b.n	800611c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006118:	2300      	movs	r3, #0
 800611a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800611c:	f001 f994 	bl	8007448 <vPortExitCritical>

	return xReturn;
 8006120:	68fb      	ldr	r3, [r7, #12]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
	...

0800612c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006134:	2300      	movs	r3, #0
 8006136:	60fb      	str	r3, [r7, #12]
 8006138:	e016      	b.n	8006168 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800613a:	4a10      	ldr	r2, [pc, #64]	; (800617c <vQueueUnregisterQueue+0x50>)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	00db      	lsls	r3, r3, #3
 8006140:	4413      	add	r3, r2
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	429a      	cmp	r2, r3
 8006148:	d10b      	bne.n	8006162 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800614a:	4a0c      	ldr	r2, [pc, #48]	; (800617c <vQueueUnregisterQueue+0x50>)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2100      	movs	r1, #0
 8006150:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006154:	4a09      	ldr	r2, [pc, #36]	; (800617c <vQueueUnregisterQueue+0x50>)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	00db      	lsls	r3, r3, #3
 800615a:	4413      	add	r3, r2
 800615c:	2200      	movs	r2, #0
 800615e:	605a      	str	r2, [r3, #4]
				break;
 8006160:	e005      	b.n	800616e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	3301      	adds	r3, #1
 8006166:	60fb      	str	r3, [r7, #12]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2b07      	cmp	r3, #7
 800616c:	d9e5      	bls.n	800613a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800616e:	bf00      	nop
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	2000b880 	.word	0x2000b880

08006180 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006180:	b580      	push	{r7, lr}
 8006182:	b08e      	sub	sp, #56	; 0x38
 8006184:	af04      	add	r7, sp, #16
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
 800618c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800618e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006190:	2b00      	cmp	r3, #0
 8006192:	d109      	bne.n	80061a8 <xTaskCreateStatic+0x28>
 8006194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006198:	f383 8811 	msr	BASEPRI, r3
 800619c:	f3bf 8f6f 	isb	sy
 80061a0:	f3bf 8f4f 	dsb	sy
 80061a4:	623b      	str	r3, [r7, #32]
 80061a6:	e7fe      	b.n	80061a6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80061a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d109      	bne.n	80061c2 <xTaskCreateStatic+0x42>
 80061ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	61fb      	str	r3, [r7, #28]
 80061c0:	e7fe      	b.n	80061c0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80061c2:	2354      	movs	r3, #84	; 0x54
 80061c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	2b54      	cmp	r3, #84	; 0x54
 80061ca:	d009      	beq.n	80061e0 <xTaskCreateStatic+0x60>
 80061cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d0:	f383 8811 	msr	BASEPRI, r3
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	61bb      	str	r3, [r7, #24]
 80061de:	e7fe      	b.n	80061de <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80061e0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80061e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d01e      	beq.n	8006226 <xTaskCreateStatic+0xa6>
 80061e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d01b      	beq.n	8006226 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80061f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061f6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	2202      	movs	r2, #2
 80061fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006200:	2300      	movs	r3, #0
 8006202:	9303      	str	r3, [sp, #12]
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	9302      	str	r3, [sp, #8]
 8006208:	f107 0314 	add.w	r3, r7, #20
 800620c:	9301      	str	r3, [sp, #4]
 800620e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006210:	9300      	str	r3, [sp, #0]
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	68b9      	ldr	r1, [r7, #8]
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f000 f850 	bl	80062be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800621e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006220:	f000 f8d4 	bl	80063cc <prvAddNewTaskToReadyList>
 8006224:	e001      	b.n	800622a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8006226:	2300      	movs	r3, #0
 8006228:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800622a:	697b      	ldr	r3, [r7, #20]
	}
 800622c:	4618      	mov	r0, r3
 800622e:	3728      	adds	r7, #40	; 0x28
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006234:	b580      	push	{r7, lr}
 8006236:	b08c      	sub	sp, #48	; 0x30
 8006238:	af04      	add	r7, sp, #16
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	603b      	str	r3, [r7, #0]
 8006240:	4613      	mov	r3, r2
 8006242:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006244:	88fb      	ldrh	r3, [r7, #6]
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	4618      	mov	r0, r3
 800624a:	f001 f9e9 	bl	8007620 <pvPortMalloc>
 800624e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00e      	beq.n	8006274 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006256:	2054      	movs	r0, #84	; 0x54
 8006258:	f001 f9e2 	bl	8007620 <pvPortMalloc>
 800625c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d003      	beq.n	800626c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	631a      	str	r2, [r3, #48]	; 0x30
 800626a:	e005      	b.n	8006278 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800626c:	6978      	ldr	r0, [r7, #20]
 800626e:	f001 fa99 	bl	80077a4 <vPortFree>
 8006272:	e001      	b.n	8006278 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006274:	2300      	movs	r3, #0
 8006276:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d017      	beq.n	80062ae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006286:	88fa      	ldrh	r2, [r7, #6]
 8006288:	2300      	movs	r3, #0
 800628a:	9303      	str	r3, [sp, #12]
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	9302      	str	r3, [sp, #8]
 8006290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006292:	9301      	str	r3, [sp, #4]
 8006294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	68b9      	ldr	r1, [r7, #8]
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f000 f80e 	bl	80062be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062a2:	69f8      	ldr	r0, [r7, #28]
 80062a4:	f000 f892 	bl	80063cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80062a8:	2301      	movs	r3, #1
 80062aa:	61bb      	str	r3, [r7, #24]
 80062ac:	e002      	b.n	80062b4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80062ae:	f04f 33ff 	mov.w	r3, #4294967295
 80062b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80062b4:	69bb      	ldr	r3, [r7, #24]
	}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3720      	adds	r7, #32
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b088      	sub	sp, #32
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	60f8      	str	r0, [r7, #12]
 80062c6:	60b9      	str	r1, [r7, #8]
 80062c8:	607a      	str	r2, [r7, #4]
 80062ca:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80062cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80062d6:	3b01      	subs	r3, #1
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4413      	add	r3, r2
 80062dc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	f023 0307 	bic.w	r3, r3, #7
 80062e4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	f003 0307 	and.w	r3, r3, #7
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d009      	beq.n	8006304 <prvInitialiseNewTask+0x46>
 80062f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f4:	f383 8811 	msr	BASEPRI, r3
 80062f8:	f3bf 8f6f 	isb	sy
 80062fc:	f3bf 8f4f 	dsb	sy
 8006300:	617b      	str	r3, [r7, #20]
 8006302:	e7fe      	b.n	8006302 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d01f      	beq.n	800634a <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800630a:	2300      	movs	r3, #0
 800630c:	61fb      	str	r3, [r7, #28]
 800630e:	e012      	b.n	8006336 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006310:	68ba      	ldr	r2, [r7, #8]
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	4413      	add	r3, r2
 8006316:	7819      	ldrb	r1, [r3, #0]
 8006318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	4413      	add	r3, r2
 800631e:	3334      	adds	r3, #52	; 0x34
 8006320:	460a      	mov	r2, r1
 8006322:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	4413      	add	r3, r2
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d006      	beq.n	800633e <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	3301      	adds	r3, #1
 8006334:	61fb      	str	r3, [r7, #28]
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	2b0f      	cmp	r3, #15
 800633a:	d9e9      	bls.n	8006310 <prvInitialiseNewTask+0x52>
 800633c:	e000      	b.n	8006340 <prvInitialiseNewTask+0x82>
			{
				break;
 800633e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006342:	2200      	movs	r2, #0
 8006344:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006348:	e003      	b.n	8006352 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800634a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006354:	2b06      	cmp	r3, #6
 8006356:	d901      	bls.n	800635c <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006358:	2306      	movs	r3, #6
 800635a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800635c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006360:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006364:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006366:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636a:	2200      	movs	r2, #0
 800636c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800636e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006370:	3304      	adds	r3, #4
 8006372:	4618      	mov	r0, r3
 8006374:	f7fe fec1 	bl	80050fa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637a:	3318      	adds	r3, #24
 800637c:	4618      	mov	r0, r3
 800637e:	f7fe febc 	bl	80050fa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006386:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638a:	f1c3 0207 	rsb	r2, r3, #7
 800638e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006390:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006396:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639a:	2200      	movs	r2, #0
 800639c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800639e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80063a6:	683a      	ldr	r2, [r7, #0]
 80063a8:	68f9      	ldr	r1, [r7, #12]
 80063aa:	69b8      	ldr	r0, [r7, #24]
 80063ac:	f000 fef6 	bl	800719c <pxPortInitialiseStack>
 80063b0:	4602      	mov	r2, r0
 80063b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80063b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d002      	beq.n	80063c2 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80063bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063c2:	bf00      	nop
 80063c4:	3720      	adds	r7, #32
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
	...

080063cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80063d4:	f001 f80a 	bl	80073ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80063d8:	4b2a      	ldr	r3, [pc, #168]	; (8006484 <prvAddNewTaskToReadyList+0xb8>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3301      	adds	r3, #1
 80063de:	4a29      	ldr	r2, [pc, #164]	; (8006484 <prvAddNewTaskToReadyList+0xb8>)
 80063e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80063e2:	4b29      	ldr	r3, [pc, #164]	; (8006488 <prvAddNewTaskToReadyList+0xbc>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d109      	bne.n	80063fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80063ea:	4a27      	ldr	r2, [pc, #156]	; (8006488 <prvAddNewTaskToReadyList+0xbc>)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80063f0:	4b24      	ldr	r3, [pc, #144]	; (8006484 <prvAddNewTaskToReadyList+0xb8>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d110      	bne.n	800641a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80063f8:	f000 fbe2 	bl	8006bc0 <prvInitialiseTaskLists>
 80063fc:	e00d      	b.n	800641a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80063fe:	4b23      	ldr	r3, [pc, #140]	; (800648c <prvAddNewTaskToReadyList+0xc0>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d109      	bne.n	800641a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006406:	4b20      	ldr	r3, [pc, #128]	; (8006488 <prvAddNewTaskToReadyList+0xbc>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006410:	429a      	cmp	r2, r3
 8006412:	d802      	bhi.n	800641a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006414:	4a1c      	ldr	r2, [pc, #112]	; (8006488 <prvAddNewTaskToReadyList+0xbc>)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800641a:	4b1d      	ldr	r3, [pc, #116]	; (8006490 <prvAddNewTaskToReadyList+0xc4>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	3301      	adds	r3, #1
 8006420:	4a1b      	ldr	r2, [pc, #108]	; (8006490 <prvAddNewTaskToReadyList+0xc4>)
 8006422:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006428:	2201      	movs	r2, #1
 800642a:	409a      	lsls	r2, r3
 800642c:	4b19      	ldr	r3, [pc, #100]	; (8006494 <prvAddNewTaskToReadyList+0xc8>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4313      	orrs	r3, r2
 8006432:	4a18      	ldr	r2, [pc, #96]	; (8006494 <prvAddNewTaskToReadyList+0xc8>)
 8006434:	6013      	str	r3, [r2, #0]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800643a:	4613      	mov	r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4413      	add	r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4a15      	ldr	r2, [pc, #84]	; (8006498 <prvAddNewTaskToReadyList+0xcc>)
 8006444:	441a      	add	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	3304      	adds	r3, #4
 800644a:	4619      	mov	r1, r3
 800644c:	4610      	mov	r0, r2
 800644e:	f7fe fe61 	bl	8005114 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006452:	f000 fff9 	bl	8007448 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006456:	4b0d      	ldr	r3, [pc, #52]	; (800648c <prvAddNewTaskToReadyList+0xc0>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00e      	beq.n	800647c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800645e:	4b0a      	ldr	r3, [pc, #40]	; (8006488 <prvAddNewTaskToReadyList+0xbc>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006468:	429a      	cmp	r2, r3
 800646a:	d207      	bcs.n	800647c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800646c:	4b0b      	ldr	r3, [pc, #44]	; (800649c <prvAddNewTaskToReadyList+0xd0>)
 800646e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006472:	601a      	str	r2, [r3, #0]
 8006474:	f3bf 8f4f 	dsb	sy
 8006478:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800647c:	bf00      	nop
 800647e:	3708      	adds	r7, #8
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	2000041c 	.word	0x2000041c
 8006488:	2000031c 	.word	0x2000031c
 800648c:	20000428 	.word	0x20000428
 8006490:	20000438 	.word	0x20000438
 8006494:	20000424 	.word	0x20000424
 8006498:	20000320 	.word	0x20000320
 800649c:	e000ed04 	.word	0xe000ed04

080064a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80064a8:	2300      	movs	r3, #0
 80064aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d016      	beq.n	80064e0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80064b2:	4b13      	ldr	r3, [pc, #76]	; (8006500 <vTaskDelay+0x60>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d009      	beq.n	80064ce <vTaskDelay+0x2e>
 80064ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064be:	f383 8811 	msr	BASEPRI, r3
 80064c2:	f3bf 8f6f 	isb	sy
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	60bb      	str	r3, [r7, #8]
 80064cc:	e7fe      	b.n	80064cc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80064ce:	f000 f879 	bl	80065c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80064d2:	2100      	movs	r1, #0
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 fdfb 	bl	80070d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80064da:	f000 f881 	bl	80065e0 <xTaskResumeAll>
 80064de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d107      	bne.n	80064f6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80064e6:	4b07      	ldr	r3, [pc, #28]	; (8006504 <vTaskDelay+0x64>)
 80064e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ec:	601a      	str	r2, [r3, #0]
 80064ee:	f3bf 8f4f 	dsb	sy
 80064f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80064f6:	bf00      	nop
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	20000444 	.word	0x20000444
 8006504:	e000ed04 	.word	0xe000ed04

08006508 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b08a      	sub	sp, #40	; 0x28
 800650c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800650e:	2300      	movs	r3, #0
 8006510:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006512:	2300      	movs	r3, #0
 8006514:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006516:	463a      	mov	r2, r7
 8006518:	1d39      	adds	r1, r7, #4
 800651a:	f107 0308 	add.w	r3, r7, #8
 800651e:	4618      	mov	r0, r3
 8006520:	f7fb f9a6 	bl	8001870 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006524:	6839      	ldr	r1, [r7, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	9202      	str	r2, [sp, #8]
 800652c:	9301      	str	r3, [sp, #4]
 800652e:	2300      	movs	r3, #0
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	2300      	movs	r3, #0
 8006534:	460a      	mov	r2, r1
 8006536:	491d      	ldr	r1, [pc, #116]	; (80065ac <vTaskStartScheduler+0xa4>)
 8006538:	481d      	ldr	r0, [pc, #116]	; (80065b0 <vTaskStartScheduler+0xa8>)
 800653a:	f7ff fe21 	bl	8006180 <xTaskCreateStatic>
 800653e:	4602      	mov	r2, r0
 8006540:	4b1c      	ldr	r3, [pc, #112]	; (80065b4 <vTaskStartScheduler+0xac>)
 8006542:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006544:	4b1b      	ldr	r3, [pc, #108]	; (80065b4 <vTaskStartScheduler+0xac>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d002      	beq.n	8006552 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800654c:	2301      	movs	r3, #1
 800654e:	617b      	str	r3, [r7, #20]
 8006550:	e001      	b.n	8006556 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006552:	2300      	movs	r3, #0
 8006554:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d115      	bne.n	8006588 <vTaskStartScheduler+0x80>
 800655c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006560:	f383 8811 	msr	BASEPRI, r3
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800656e:	4b12      	ldr	r3, [pc, #72]	; (80065b8 <vTaskStartScheduler+0xb0>)
 8006570:	f04f 32ff 	mov.w	r2, #4294967295
 8006574:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006576:	4b11      	ldr	r3, [pc, #68]	; (80065bc <vTaskStartScheduler+0xb4>)
 8006578:	2201      	movs	r2, #1
 800657a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800657c:	4b10      	ldr	r3, [pc, #64]	; (80065c0 <vTaskStartScheduler+0xb8>)
 800657e:	2200      	movs	r2, #0
 8006580:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006582:	f000 fe95 	bl	80072b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006586:	e00d      	b.n	80065a4 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800658e:	d109      	bne.n	80065a4 <vTaskStartScheduler+0x9c>
 8006590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	60fb      	str	r3, [r7, #12]
 80065a2:	e7fe      	b.n	80065a2 <vTaskStartScheduler+0x9a>
}
 80065a4:	bf00      	nop
 80065a6:	3718      	adds	r7, #24
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	08017e64 	.word	0x08017e64
 80065b0:	08006b91 	.word	0x08006b91
 80065b4:	20000440 	.word	0x20000440
 80065b8:	2000043c 	.word	0x2000043c
 80065bc:	20000428 	.word	0x20000428
 80065c0:	20000420 	.word	0x20000420

080065c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80065c4:	b480      	push	{r7}
 80065c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80065c8:	4b04      	ldr	r3, [pc, #16]	; (80065dc <vTaskSuspendAll+0x18>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	3301      	adds	r3, #1
 80065ce:	4a03      	ldr	r2, [pc, #12]	; (80065dc <vTaskSuspendAll+0x18>)
 80065d0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80065d2:	bf00      	nop
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr
 80065dc:	20000444 	.word	0x20000444

080065e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80065e6:	2300      	movs	r3, #0
 80065e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80065ea:	2300      	movs	r3, #0
 80065ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80065ee:	4b41      	ldr	r3, [pc, #260]	; (80066f4 <xTaskResumeAll+0x114>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d109      	bne.n	800660a <xTaskResumeAll+0x2a>
 80065f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fa:	f383 8811 	msr	BASEPRI, r3
 80065fe:	f3bf 8f6f 	isb	sy
 8006602:	f3bf 8f4f 	dsb	sy
 8006606:	603b      	str	r3, [r7, #0]
 8006608:	e7fe      	b.n	8006608 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800660a:	f000 feef 	bl	80073ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800660e:	4b39      	ldr	r3, [pc, #228]	; (80066f4 <xTaskResumeAll+0x114>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	3b01      	subs	r3, #1
 8006614:	4a37      	ldr	r2, [pc, #220]	; (80066f4 <xTaskResumeAll+0x114>)
 8006616:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006618:	4b36      	ldr	r3, [pc, #216]	; (80066f4 <xTaskResumeAll+0x114>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d161      	bne.n	80066e4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006620:	4b35      	ldr	r3, [pc, #212]	; (80066f8 <xTaskResumeAll+0x118>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d05d      	beq.n	80066e4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006628:	e02e      	b.n	8006688 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800662a:	4b34      	ldr	r3, [pc, #208]	; (80066fc <xTaskResumeAll+0x11c>)
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	3318      	adds	r3, #24
 8006636:	4618      	mov	r0, r3
 8006638:	f7fe fdc9 	bl	80051ce <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	3304      	adds	r3, #4
 8006640:	4618      	mov	r0, r3
 8006642:	f7fe fdc4 	bl	80051ce <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664a:	2201      	movs	r2, #1
 800664c:	409a      	lsls	r2, r3
 800664e:	4b2c      	ldr	r3, [pc, #176]	; (8006700 <xTaskResumeAll+0x120>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4313      	orrs	r3, r2
 8006654:	4a2a      	ldr	r2, [pc, #168]	; (8006700 <xTaskResumeAll+0x120>)
 8006656:	6013      	str	r3, [r2, #0]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800665c:	4613      	mov	r3, r2
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	4413      	add	r3, r2
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	4a27      	ldr	r2, [pc, #156]	; (8006704 <xTaskResumeAll+0x124>)
 8006666:	441a      	add	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	3304      	adds	r3, #4
 800666c:	4619      	mov	r1, r3
 800666e:	4610      	mov	r0, r2
 8006670:	f7fe fd50 	bl	8005114 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006678:	4b23      	ldr	r3, [pc, #140]	; (8006708 <xTaskResumeAll+0x128>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667e:	429a      	cmp	r2, r3
 8006680:	d302      	bcc.n	8006688 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8006682:	4b22      	ldr	r3, [pc, #136]	; (800670c <xTaskResumeAll+0x12c>)
 8006684:	2201      	movs	r2, #1
 8006686:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006688:	4b1c      	ldr	r3, [pc, #112]	; (80066fc <xTaskResumeAll+0x11c>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1cc      	bne.n	800662a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d001      	beq.n	800669a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006696:	f000 fb2d 	bl	8006cf4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800669a:	4b1d      	ldr	r3, [pc, #116]	; (8006710 <xTaskResumeAll+0x130>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d010      	beq.n	80066c8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066a6:	f000 f859 	bl	800675c <xTaskIncrementTick>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d002      	beq.n	80066b6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80066b0:	4b16      	ldr	r3, [pc, #88]	; (800670c <xTaskResumeAll+0x12c>)
 80066b2:	2201      	movs	r2, #1
 80066b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	3b01      	subs	r3, #1
 80066ba:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1f1      	bne.n	80066a6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80066c2:	4b13      	ldr	r3, [pc, #76]	; (8006710 <xTaskResumeAll+0x130>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80066c8:	4b10      	ldr	r3, [pc, #64]	; (800670c <xTaskResumeAll+0x12c>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d009      	beq.n	80066e4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80066d0:	2301      	movs	r3, #1
 80066d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80066d4:	4b0f      	ldr	r3, [pc, #60]	; (8006714 <xTaskResumeAll+0x134>)
 80066d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066da:	601a      	str	r2, [r3, #0]
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066e4:	f000 feb0 	bl	8007448 <vPortExitCritical>

	return xAlreadyYielded;
 80066e8:	68bb      	ldr	r3, [r7, #8]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	20000444 	.word	0x20000444
 80066f8:	2000041c 	.word	0x2000041c
 80066fc:	200003dc 	.word	0x200003dc
 8006700:	20000424 	.word	0x20000424
 8006704:	20000320 	.word	0x20000320
 8006708:	2000031c 	.word	0x2000031c
 800670c:	20000430 	.word	0x20000430
 8006710:	2000042c 	.word	0x2000042c
 8006714:	e000ed04 	.word	0xe000ed04

08006718 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800671e:	4b05      	ldr	r3, [pc, #20]	; (8006734 <xTaskGetTickCount+0x1c>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006724:	687b      	ldr	r3, [r7, #4]
}
 8006726:	4618      	mov	r0, r3
 8006728:	370c      	adds	r7, #12
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	20000420 	.word	0x20000420

08006738 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800673e:	f000 ff31 	bl	80075a4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006742:	2300      	movs	r3, #0
 8006744:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006746:	4b04      	ldr	r3, [pc, #16]	; (8006758 <xTaskGetTickCountFromISR+0x20>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800674c:	683b      	ldr	r3, [r7, #0]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3708      	adds	r7, #8
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	20000420 	.word	0x20000420

0800675c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b086      	sub	sp, #24
 8006760:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006762:	2300      	movs	r3, #0
 8006764:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006766:	4b4e      	ldr	r3, [pc, #312]	; (80068a0 <xTaskIncrementTick+0x144>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	f040 8087 	bne.w	800687e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006770:	4b4c      	ldr	r3, [pc, #304]	; (80068a4 <xTaskIncrementTick+0x148>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	3301      	adds	r3, #1
 8006776:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006778:	4a4a      	ldr	r2, [pc, #296]	; (80068a4 <xTaskIncrementTick+0x148>)
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d11f      	bne.n	80067c4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006784:	4b48      	ldr	r3, [pc, #288]	; (80068a8 <xTaskIncrementTick+0x14c>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d009      	beq.n	80067a2 <xTaskIncrementTick+0x46>
 800678e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	603b      	str	r3, [r7, #0]
 80067a0:	e7fe      	b.n	80067a0 <xTaskIncrementTick+0x44>
 80067a2:	4b41      	ldr	r3, [pc, #260]	; (80068a8 <xTaskIncrementTick+0x14c>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	60fb      	str	r3, [r7, #12]
 80067a8:	4b40      	ldr	r3, [pc, #256]	; (80068ac <xTaskIncrementTick+0x150>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a3e      	ldr	r2, [pc, #248]	; (80068a8 <xTaskIncrementTick+0x14c>)
 80067ae:	6013      	str	r3, [r2, #0]
 80067b0:	4a3e      	ldr	r2, [pc, #248]	; (80068ac <xTaskIncrementTick+0x150>)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6013      	str	r3, [r2, #0]
 80067b6:	4b3e      	ldr	r3, [pc, #248]	; (80068b0 <xTaskIncrementTick+0x154>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	3301      	adds	r3, #1
 80067bc:	4a3c      	ldr	r2, [pc, #240]	; (80068b0 <xTaskIncrementTick+0x154>)
 80067be:	6013      	str	r3, [r2, #0]
 80067c0:	f000 fa98 	bl	8006cf4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80067c4:	4b3b      	ldr	r3, [pc, #236]	; (80068b4 <xTaskIncrementTick+0x158>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d348      	bcc.n	8006860 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067ce:	4b36      	ldr	r3, [pc, #216]	; (80068a8 <xTaskIncrementTick+0x14c>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d104      	bne.n	80067e2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067d8:	4b36      	ldr	r3, [pc, #216]	; (80068b4 <xTaskIncrementTick+0x158>)
 80067da:	f04f 32ff 	mov.w	r2, #4294967295
 80067de:	601a      	str	r2, [r3, #0]
					break;
 80067e0:	e03e      	b.n	8006860 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067e2:	4b31      	ldr	r3, [pc, #196]	; (80068a8 <xTaskIncrementTick+0x14c>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d203      	bcs.n	8006802 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80067fa:	4a2e      	ldr	r2, [pc, #184]	; (80068b4 <xTaskIncrementTick+0x158>)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006800:	e02e      	b.n	8006860 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	3304      	adds	r3, #4
 8006806:	4618      	mov	r0, r3
 8006808:	f7fe fce1 	bl	80051ce <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006810:	2b00      	cmp	r3, #0
 8006812:	d004      	beq.n	800681e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	3318      	adds	r3, #24
 8006818:	4618      	mov	r0, r3
 800681a:	f7fe fcd8 	bl	80051ce <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006822:	2201      	movs	r2, #1
 8006824:	409a      	lsls	r2, r3
 8006826:	4b24      	ldr	r3, [pc, #144]	; (80068b8 <xTaskIncrementTick+0x15c>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4313      	orrs	r3, r2
 800682c:	4a22      	ldr	r2, [pc, #136]	; (80068b8 <xTaskIncrementTick+0x15c>)
 800682e:	6013      	str	r3, [r2, #0]
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006834:	4613      	mov	r3, r2
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	4413      	add	r3, r2
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	4a1f      	ldr	r2, [pc, #124]	; (80068bc <xTaskIncrementTick+0x160>)
 800683e:	441a      	add	r2, r3
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	3304      	adds	r3, #4
 8006844:	4619      	mov	r1, r3
 8006846:	4610      	mov	r0, r2
 8006848:	f7fe fc64 	bl	8005114 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006850:	4b1b      	ldr	r3, [pc, #108]	; (80068c0 <xTaskIncrementTick+0x164>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006856:	429a      	cmp	r2, r3
 8006858:	d3b9      	bcc.n	80067ce <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800685a:	2301      	movs	r3, #1
 800685c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800685e:	e7b6      	b.n	80067ce <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006860:	4b17      	ldr	r3, [pc, #92]	; (80068c0 <xTaskIncrementTick+0x164>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006866:	4915      	ldr	r1, [pc, #84]	; (80068bc <xTaskIncrementTick+0x160>)
 8006868:	4613      	mov	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4413      	add	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	440b      	add	r3, r1
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d907      	bls.n	8006888 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8006878:	2301      	movs	r3, #1
 800687a:	617b      	str	r3, [r7, #20]
 800687c:	e004      	b.n	8006888 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800687e:	4b11      	ldr	r3, [pc, #68]	; (80068c4 <xTaskIncrementTick+0x168>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	3301      	adds	r3, #1
 8006884:	4a0f      	ldr	r2, [pc, #60]	; (80068c4 <xTaskIncrementTick+0x168>)
 8006886:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006888:	4b0f      	ldr	r3, [pc, #60]	; (80068c8 <xTaskIncrementTick+0x16c>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d001      	beq.n	8006894 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8006890:	2301      	movs	r3, #1
 8006892:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006894:	697b      	ldr	r3, [r7, #20]
}
 8006896:	4618      	mov	r0, r3
 8006898:	3718      	adds	r7, #24
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	20000444 	.word	0x20000444
 80068a4:	20000420 	.word	0x20000420
 80068a8:	200003d4 	.word	0x200003d4
 80068ac:	200003d8 	.word	0x200003d8
 80068b0:	20000434 	.word	0x20000434
 80068b4:	2000043c 	.word	0x2000043c
 80068b8:	20000424 	.word	0x20000424
 80068bc:	20000320 	.word	0x20000320
 80068c0:	2000031c 	.word	0x2000031c
 80068c4:	2000042c 	.word	0x2000042c
 80068c8:	20000430 	.word	0x20000430

080068cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068cc:	b480      	push	{r7}
 80068ce:	b087      	sub	sp, #28
 80068d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068d2:	4b26      	ldr	r3, [pc, #152]	; (800696c <vTaskSwitchContext+0xa0>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d003      	beq.n	80068e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80068da:	4b25      	ldr	r3, [pc, #148]	; (8006970 <vTaskSwitchContext+0xa4>)
 80068dc:	2201      	movs	r2, #1
 80068de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80068e0:	e03e      	b.n	8006960 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80068e2:	4b23      	ldr	r3, [pc, #140]	; (8006970 <vTaskSwitchContext+0xa4>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068e8:	4b22      	ldr	r3, [pc, #136]	; (8006974 <vTaskSwitchContext+0xa8>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	fab3 f383 	clz	r3, r3
 80068f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80068f6:	7afb      	ldrb	r3, [r7, #11]
 80068f8:	f1c3 031f 	rsb	r3, r3, #31
 80068fc:	617b      	str	r3, [r7, #20]
 80068fe:	491e      	ldr	r1, [pc, #120]	; (8006978 <vTaskSwitchContext+0xac>)
 8006900:	697a      	ldr	r2, [r7, #20]
 8006902:	4613      	mov	r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	4413      	add	r3, r2
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	440b      	add	r3, r1
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d109      	bne.n	8006926 <vTaskSwitchContext+0x5a>
	__asm volatile
 8006912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006916:	f383 8811 	msr	BASEPRI, r3
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	f3bf 8f4f 	dsb	sy
 8006922:	607b      	str	r3, [r7, #4]
 8006924:	e7fe      	b.n	8006924 <vTaskSwitchContext+0x58>
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	4613      	mov	r3, r2
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	4413      	add	r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4a11      	ldr	r2, [pc, #68]	; (8006978 <vTaskSwitchContext+0xac>)
 8006932:	4413      	add	r3, r2
 8006934:	613b      	str	r3, [r7, #16]
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	685a      	ldr	r2, [r3, #4]
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	605a      	str	r2, [r3, #4]
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	685a      	ldr	r2, [r3, #4]
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	3308      	adds	r3, #8
 8006948:	429a      	cmp	r2, r3
 800694a:	d104      	bne.n	8006956 <vTaskSwitchContext+0x8a>
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	605a      	str	r2, [r3, #4]
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	4a07      	ldr	r2, [pc, #28]	; (800697c <vTaskSwitchContext+0xb0>)
 800695e:	6013      	str	r3, [r2, #0]
}
 8006960:	bf00      	nop
 8006962:	371c      	adds	r7, #28
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr
 800696c:	20000444 	.word	0x20000444
 8006970:	20000430 	.word	0x20000430
 8006974:	20000424 	.word	0x20000424
 8006978:	20000320 	.word	0x20000320
 800697c:	2000031c 	.word	0x2000031c

08006980 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d109      	bne.n	80069a4 <vTaskPlaceOnEventList+0x24>
 8006990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006994:	f383 8811 	msr	BASEPRI, r3
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	60fb      	str	r3, [r7, #12]
 80069a2:	e7fe      	b.n	80069a2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069a4:	4b07      	ldr	r3, [pc, #28]	; (80069c4 <vTaskPlaceOnEventList+0x44>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	3318      	adds	r3, #24
 80069aa:	4619      	mov	r1, r3
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f7fe fbd5 	bl	800515c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80069b2:	2101      	movs	r1, #1
 80069b4:	6838      	ldr	r0, [r7, #0]
 80069b6:	f000 fb8b 	bl	80070d0 <prvAddCurrentTaskToDelayedList>
}
 80069ba:	bf00      	nop
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	2000031c 	.word	0x2000031c

080069c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d109      	bne.n	80069f2 <xTaskRemoveFromEventList+0x2a>
 80069de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	60fb      	str	r3, [r7, #12]
 80069f0:	e7fe      	b.n	80069f0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	3318      	adds	r3, #24
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7fe fbe9 	bl	80051ce <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069fc:	4b1d      	ldr	r3, [pc, #116]	; (8006a74 <xTaskRemoveFromEventList+0xac>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d11c      	bne.n	8006a3e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	3304      	adds	r3, #4
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7fe fbe0 	bl	80051ce <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a12:	2201      	movs	r2, #1
 8006a14:	409a      	lsls	r2, r3
 8006a16:	4b18      	ldr	r3, [pc, #96]	; (8006a78 <xTaskRemoveFromEventList+0xb0>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	4a16      	ldr	r2, [pc, #88]	; (8006a78 <xTaskRemoveFromEventList+0xb0>)
 8006a1e:	6013      	str	r3, [r2, #0]
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a24:	4613      	mov	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	4a13      	ldr	r2, [pc, #76]	; (8006a7c <xTaskRemoveFromEventList+0xb4>)
 8006a2e:	441a      	add	r2, r3
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	3304      	adds	r3, #4
 8006a34:	4619      	mov	r1, r3
 8006a36:	4610      	mov	r0, r2
 8006a38:	f7fe fb6c 	bl	8005114 <vListInsertEnd>
 8006a3c:	e005      	b.n	8006a4a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	3318      	adds	r3, #24
 8006a42:	4619      	mov	r1, r3
 8006a44:	480e      	ldr	r0, [pc, #56]	; (8006a80 <xTaskRemoveFromEventList+0xb8>)
 8006a46:	f7fe fb65 	bl	8005114 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a4e:	4b0d      	ldr	r3, [pc, #52]	; (8006a84 <xTaskRemoveFromEventList+0xbc>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d905      	bls.n	8006a64 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006a5c:	4b0a      	ldr	r3, [pc, #40]	; (8006a88 <xTaskRemoveFromEventList+0xc0>)
 8006a5e:	2201      	movs	r2, #1
 8006a60:	601a      	str	r2, [r3, #0]
 8006a62:	e001      	b.n	8006a68 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8006a64:	2300      	movs	r3, #0
 8006a66:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006a68:	697b      	ldr	r3, [r7, #20]
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3718      	adds	r7, #24
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	20000444 	.word	0x20000444
 8006a78:	20000424 	.word	0x20000424
 8006a7c:	20000320 	.word	0x20000320
 8006a80:	200003dc 	.word	0x200003dc
 8006a84:	2000031c 	.word	0x2000031c
 8006a88:	20000430 	.word	0x20000430

08006a8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a94:	4b06      	ldr	r3, [pc, #24]	; (8006ab0 <vTaskInternalSetTimeOutState+0x24>)
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006a9c:	4b05      	ldr	r3, [pc, #20]	; (8006ab4 <vTaskInternalSetTimeOutState+0x28>)
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	605a      	str	r2, [r3, #4]
}
 8006aa4:	bf00      	nop
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr
 8006ab0:	20000434 	.word	0x20000434
 8006ab4:	20000420 	.word	0x20000420

08006ab8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b088      	sub	sp, #32
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d109      	bne.n	8006adc <xTaskCheckForTimeOut+0x24>
 8006ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006acc:	f383 8811 	msr	BASEPRI, r3
 8006ad0:	f3bf 8f6f 	isb	sy
 8006ad4:	f3bf 8f4f 	dsb	sy
 8006ad8:	613b      	str	r3, [r7, #16]
 8006ada:	e7fe      	b.n	8006ada <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d109      	bne.n	8006af6 <xTaskCheckForTimeOut+0x3e>
 8006ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae6:	f383 8811 	msr	BASEPRI, r3
 8006aea:	f3bf 8f6f 	isb	sy
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	60fb      	str	r3, [r7, #12]
 8006af4:	e7fe      	b.n	8006af4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006af6:	f000 fc79 	bl	80073ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006afa:	4b1d      	ldr	r3, [pc, #116]	; (8006b70 <xTaskCheckForTimeOut+0xb8>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	69ba      	ldr	r2, [r7, #24]
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b12:	d102      	bne.n	8006b1a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b14:	2300      	movs	r3, #0
 8006b16:	61fb      	str	r3, [r7, #28]
 8006b18:	e023      	b.n	8006b62 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	4b15      	ldr	r3, [pc, #84]	; (8006b74 <xTaskCheckForTimeOut+0xbc>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d007      	beq.n	8006b36 <xTaskCheckForTimeOut+0x7e>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	69ba      	ldr	r2, [r7, #24]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d302      	bcc.n	8006b36 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006b30:	2301      	movs	r3, #1
 8006b32:	61fb      	str	r3, [r7, #28]
 8006b34:	e015      	b.n	8006b62 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d20b      	bcs.n	8006b58 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	1ad2      	subs	r2, r2, r3
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f7ff ff9d 	bl	8006a8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b52:	2300      	movs	r3, #0
 8006b54:	61fb      	str	r3, [r7, #28]
 8006b56:	e004      	b.n	8006b62 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006b62:	f000 fc71 	bl	8007448 <vPortExitCritical>

	return xReturn;
 8006b66:	69fb      	ldr	r3, [r7, #28]
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3720      	adds	r7, #32
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	20000420 	.word	0x20000420
 8006b74:	20000434 	.word	0x20000434

08006b78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006b78:	b480      	push	{r7}
 8006b7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006b7c:	4b03      	ldr	r3, [pc, #12]	; (8006b8c <vTaskMissedYield+0x14>)
 8006b7e:	2201      	movs	r2, #1
 8006b80:	601a      	str	r2, [r3, #0]
}
 8006b82:	bf00      	nop
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr
 8006b8c:	20000430 	.word	0x20000430

08006b90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006b98:	f000 f852 	bl	8006c40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006b9c:	4b06      	ldr	r3, [pc, #24]	; (8006bb8 <prvIdleTask+0x28>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d9f9      	bls.n	8006b98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006ba4:	4b05      	ldr	r3, [pc, #20]	; (8006bbc <prvIdleTask+0x2c>)
 8006ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006baa:	601a      	str	r2, [r3, #0]
 8006bac:	f3bf 8f4f 	dsb	sy
 8006bb0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006bb4:	e7f0      	b.n	8006b98 <prvIdleTask+0x8>
 8006bb6:	bf00      	nop
 8006bb8:	20000320 	.word	0x20000320
 8006bbc:	e000ed04 	.word	0xe000ed04

08006bc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	607b      	str	r3, [r7, #4]
 8006bca:	e00c      	b.n	8006be6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	4613      	mov	r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	4413      	add	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4a12      	ldr	r2, [pc, #72]	; (8006c20 <prvInitialiseTaskLists+0x60>)
 8006bd8:	4413      	add	r3, r2
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7fe fa6d 	bl	80050ba <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	3301      	adds	r3, #1
 8006be4:	607b      	str	r3, [r7, #4]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2b06      	cmp	r3, #6
 8006bea:	d9ef      	bls.n	8006bcc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006bec:	480d      	ldr	r0, [pc, #52]	; (8006c24 <prvInitialiseTaskLists+0x64>)
 8006bee:	f7fe fa64 	bl	80050ba <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006bf2:	480d      	ldr	r0, [pc, #52]	; (8006c28 <prvInitialiseTaskLists+0x68>)
 8006bf4:	f7fe fa61 	bl	80050ba <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006bf8:	480c      	ldr	r0, [pc, #48]	; (8006c2c <prvInitialiseTaskLists+0x6c>)
 8006bfa:	f7fe fa5e 	bl	80050ba <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006bfe:	480c      	ldr	r0, [pc, #48]	; (8006c30 <prvInitialiseTaskLists+0x70>)
 8006c00:	f7fe fa5b 	bl	80050ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c04:	480b      	ldr	r0, [pc, #44]	; (8006c34 <prvInitialiseTaskLists+0x74>)
 8006c06:	f7fe fa58 	bl	80050ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c0a:	4b0b      	ldr	r3, [pc, #44]	; (8006c38 <prvInitialiseTaskLists+0x78>)
 8006c0c:	4a05      	ldr	r2, [pc, #20]	; (8006c24 <prvInitialiseTaskLists+0x64>)
 8006c0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c10:	4b0a      	ldr	r3, [pc, #40]	; (8006c3c <prvInitialiseTaskLists+0x7c>)
 8006c12:	4a05      	ldr	r2, [pc, #20]	; (8006c28 <prvInitialiseTaskLists+0x68>)
 8006c14:	601a      	str	r2, [r3, #0]
}
 8006c16:	bf00      	nop
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	20000320 	.word	0x20000320
 8006c24:	200003ac 	.word	0x200003ac
 8006c28:	200003c0 	.word	0x200003c0
 8006c2c:	200003dc 	.word	0x200003dc
 8006c30:	200003f0 	.word	0x200003f0
 8006c34:	20000408 	.word	0x20000408
 8006c38:	200003d4 	.word	0x200003d4
 8006c3c:	200003d8 	.word	0x200003d8

08006c40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c46:	e019      	b.n	8006c7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c48:	f000 fbd0 	bl	80073ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c4c:	4b0f      	ldr	r3, [pc, #60]	; (8006c8c <prvCheckTasksWaitingTermination+0x4c>)
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	3304      	adds	r3, #4
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7fe fab8 	bl	80051ce <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c5e:	4b0c      	ldr	r3, [pc, #48]	; (8006c90 <prvCheckTasksWaitingTermination+0x50>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	3b01      	subs	r3, #1
 8006c64:	4a0a      	ldr	r2, [pc, #40]	; (8006c90 <prvCheckTasksWaitingTermination+0x50>)
 8006c66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006c68:	4b0a      	ldr	r3, [pc, #40]	; (8006c94 <prvCheckTasksWaitingTermination+0x54>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	3b01      	subs	r3, #1
 8006c6e:	4a09      	ldr	r2, [pc, #36]	; (8006c94 <prvCheckTasksWaitingTermination+0x54>)
 8006c70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c72:	f000 fbe9 	bl	8007448 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 f80e 	bl	8006c98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c7c:	4b05      	ldr	r3, [pc, #20]	; (8006c94 <prvCheckTasksWaitingTermination+0x54>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1e1      	bne.n	8006c48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006c84:	bf00      	nop
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	200003f0 	.word	0x200003f0
 8006c90:	2000041c 	.word	0x2000041c
 8006c94:	20000404 	.word	0x20000404

08006c98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d108      	bne.n	8006cbc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f000 fd78 	bl	80077a4 <vPortFree>
				vPortFree( pxTCB );
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 fd75 	bl	80077a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006cba:	e017      	b.n	8006cec <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d103      	bne.n	8006cce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 fd6c 	bl	80077a4 <vPortFree>
	}
 8006ccc:	e00e      	b.n	8006cec <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d009      	beq.n	8006cec <prvDeleteTCB+0x54>
 8006cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cdc:	f383 8811 	msr	BASEPRI, r3
 8006ce0:	f3bf 8f6f 	isb	sy
 8006ce4:	f3bf 8f4f 	dsb	sy
 8006ce8:	60fb      	str	r3, [r7, #12]
 8006cea:	e7fe      	b.n	8006cea <prvDeleteTCB+0x52>
	}
 8006cec:	bf00      	nop
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cfa:	4b0c      	ldr	r3, [pc, #48]	; (8006d2c <prvResetNextTaskUnblockTime+0x38>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d104      	bne.n	8006d0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d04:	4b0a      	ldr	r3, [pc, #40]	; (8006d30 <prvResetNextTaskUnblockTime+0x3c>)
 8006d06:	f04f 32ff 	mov.w	r2, #4294967295
 8006d0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d0c:	e008      	b.n	8006d20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d0e:	4b07      	ldr	r3, [pc, #28]	; (8006d2c <prvResetNextTaskUnblockTime+0x38>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	4a04      	ldr	r2, [pc, #16]	; (8006d30 <prvResetNextTaskUnblockTime+0x3c>)
 8006d1e:	6013      	str	r3, [r2, #0]
}
 8006d20:	bf00      	nop
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr
 8006d2c:	200003d4 	.word	0x200003d4
 8006d30:	2000043c 	.word	0x2000043c

08006d34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d3a:	4b0b      	ldr	r3, [pc, #44]	; (8006d68 <xTaskGetSchedulerState+0x34>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d102      	bne.n	8006d48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d42:	2301      	movs	r3, #1
 8006d44:	607b      	str	r3, [r7, #4]
 8006d46:	e008      	b.n	8006d5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d48:	4b08      	ldr	r3, [pc, #32]	; (8006d6c <xTaskGetSchedulerState+0x38>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d102      	bne.n	8006d56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006d50:	2302      	movs	r3, #2
 8006d52:	607b      	str	r3, [r7, #4]
 8006d54:	e001      	b.n	8006d5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006d56:	2300      	movs	r3, #0
 8006d58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006d5a:	687b      	ldr	r3, [r7, #4]
	}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr
 8006d68:	20000428 	.word	0x20000428
 8006d6c:	20000444 	.word	0x20000444

08006d70 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d069      	beq.n	8006e5a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d8a:	4b36      	ldr	r3, [pc, #216]	; (8006e64 <xTaskPriorityInherit+0xf4>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d259      	bcs.n	8006e48 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	699b      	ldr	r3, [r3, #24]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	db06      	blt.n	8006daa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d9c:	4b31      	ldr	r3, [pc, #196]	; (8006e64 <xTaskPriorityInherit+0xf4>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da2:	f1c3 0207 	rsb	r2, r3, #7
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	6959      	ldr	r1, [r3, #20]
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006db2:	4613      	mov	r3, r2
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	4413      	add	r3, r2
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4a2b      	ldr	r2, [pc, #172]	; (8006e68 <xTaskPriorityInherit+0xf8>)
 8006dbc:	4413      	add	r3, r2
 8006dbe:	4299      	cmp	r1, r3
 8006dc0:	d13a      	bne.n	8006e38 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	3304      	adds	r3, #4
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7fe fa01 	bl	80051ce <uxListRemove>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d115      	bne.n	8006dfe <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd6:	4924      	ldr	r1, [pc, #144]	; (8006e68 <xTaskPriorityInherit+0xf8>)
 8006dd8:	4613      	mov	r3, r2
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	4413      	add	r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	440b      	add	r3, r1
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d10a      	bne.n	8006dfe <xTaskPriorityInherit+0x8e>
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dec:	2201      	movs	r2, #1
 8006dee:	fa02 f303 	lsl.w	r3, r2, r3
 8006df2:	43da      	mvns	r2, r3
 8006df4:	4b1d      	ldr	r3, [pc, #116]	; (8006e6c <xTaskPriorityInherit+0xfc>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4013      	ands	r3, r2
 8006dfa:	4a1c      	ldr	r2, [pc, #112]	; (8006e6c <xTaskPriorityInherit+0xfc>)
 8006dfc:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006dfe:	4b19      	ldr	r3, [pc, #100]	; (8006e64 <xTaskPriorityInherit+0xf4>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	409a      	lsls	r2, r3
 8006e10:	4b16      	ldr	r3, [pc, #88]	; (8006e6c <xTaskPriorityInherit+0xfc>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	4a15      	ldr	r2, [pc, #84]	; (8006e6c <xTaskPriorityInherit+0xfc>)
 8006e18:	6013      	str	r3, [r2, #0]
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e1e:	4613      	mov	r3, r2
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	4413      	add	r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	4a10      	ldr	r2, [pc, #64]	; (8006e68 <xTaskPriorityInherit+0xf8>)
 8006e28:	441a      	add	r2, r3
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	3304      	adds	r3, #4
 8006e2e:	4619      	mov	r1, r3
 8006e30:	4610      	mov	r0, r2
 8006e32:	f7fe f96f 	bl	8005114 <vListInsertEnd>
 8006e36:	e004      	b.n	8006e42 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006e38:	4b0a      	ldr	r3, [pc, #40]	; (8006e64 <xTaskPriorityInherit+0xf4>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006e42:	2301      	movs	r3, #1
 8006e44:	60fb      	str	r3, [r7, #12]
 8006e46:	e008      	b.n	8006e5a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e4c:	4b05      	ldr	r3, [pc, #20]	; (8006e64 <xTaskPriorityInherit+0xf4>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d201      	bcs.n	8006e5a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006e56:	2301      	movs	r3, #1
 8006e58:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
	}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3710      	adds	r7, #16
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	2000031c 	.word	0x2000031c
 8006e68:	20000320 	.word	0x20000320
 8006e6c:	20000424 	.word	0x20000424

08006e70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b086      	sub	sp, #24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d06c      	beq.n	8006f60 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e86:	4b39      	ldr	r3, [pc, #228]	; (8006f6c <xTaskPriorityDisinherit+0xfc>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d009      	beq.n	8006ea4 <xTaskPriorityDisinherit+0x34>
 8006e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e94:	f383 8811 	msr	BASEPRI, r3
 8006e98:	f3bf 8f6f 	isb	sy
 8006e9c:	f3bf 8f4f 	dsb	sy
 8006ea0:	60fb      	str	r3, [r7, #12]
 8006ea2:	e7fe      	b.n	8006ea2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d109      	bne.n	8006ec0 <xTaskPriorityDisinherit+0x50>
 8006eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb0:	f383 8811 	msr	BASEPRI, r3
 8006eb4:	f3bf 8f6f 	isb	sy
 8006eb8:	f3bf 8f4f 	dsb	sy
 8006ebc:	60bb      	str	r3, [r7, #8]
 8006ebe:	e7fe      	b.n	8006ebe <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ec4:	1e5a      	subs	r2, r3, #1
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d044      	beq.n	8006f60 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d140      	bne.n	8006f60 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	3304      	adds	r3, #4
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7fe f973 	bl	80051ce <uxListRemove>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d115      	bne.n	8006f1a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef2:	491f      	ldr	r1, [pc, #124]	; (8006f70 <xTaskPriorityDisinherit+0x100>)
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	4413      	add	r3, r2
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	440b      	add	r3, r1
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10a      	bne.n	8006f1a <xTaskPriorityDisinherit+0xaa>
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f08:	2201      	movs	r2, #1
 8006f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f0e:	43da      	mvns	r2, r3
 8006f10:	4b18      	ldr	r3, [pc, #96]	; (8006f74 <xTaskPriorityDisinherit+0x104>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4013      	ands	r3, r2
 8006f16:	4a17      	ldr	r2, [pc, #92]	; (8006f74 <xTaskPriorityDisinherit+0x104>)
 8006f18:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f26:	f1c3 0207 	rsb	r2, r3, #7
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f32:	2201      	movs	r2, #1
 8006f34:	409a      	lsls	r2, r3
 8006f36:	4b0f      	ldr	r3, [pc, #60]	; (8006f74 <xTaskPriorityDisinherit+0x104>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	4a0d      	ldr	r2, [pc, #52]	; (8006f74 <xTaskPriorityDisinherit+0x104>)
 8006f3e:	6013      	str	r3, [r2, #0]
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f44:	4613      	mov	r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	4413      	add	r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	4a08      	ldr	r2, [pc, #32]	; (8006f70 <xTaskPriorityDisinherit+0x100>)
 8006f4e:	441a      	add	r2, r3
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	3304      	adds	r3, #4
 8006f54:	4619      	mov	r1, r3
 8006f56:	4610      	mov	r0, r2
 8006f58:	f7fe f8dc 	bl	8005114 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f60:	697b      	ldr	r3, [r7, #20]
	}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3718      	adds	r7, #24
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	2000031c 	.word	0x2000031c
 8006f70:	20000320 	.word	0x20000320
 8006f74:	20000424 	.word	0x20000424

08006f78 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b088      	sub	sp, #32
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006f86:	2301      	movs	r3, #1
 8006f88:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f000 8081 	beq.w	8007094 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d109      	bne.n	8006fae <vTaskPriorityDisinheritAfterTimeout+0x36>
 8006f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9e:	f383 8811 	msr	BASEPRI, r3
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	f3bf 8f4f 	dsb	sy
 8006faa:	60fb      	str	r3, [r7, #12]
 8006fac:	e7fe      	b.n	8006fac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb2:	683a      	ldr	r2, [r7, #0]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d902      	bls.n	8006fbe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	61fb      	str	r3, [r7, #28]
 8006fbc:	e002      	b.n	8006fc4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc8:	69fa      	ldr	r2, [r7, #28]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d062      	beq.n	8007094 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d15d      	bne.n	8007094 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006fd8:	4b30      	ldr	r3, [pc, #192]	; (800709c <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	69ba      	ldr	r2, [r7, #24]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d109      	bne.n	8006ff6 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8006fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe6:	f383 8811 	msr	BASEPRI, r3
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	60bb      	str	r3, [r7, #8]
 8006ff4:	e7fe      	b.n	8006ff4 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffa:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	69fa      	ldr	r2, [r7, #28]
 8007000:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	699b      	ldr	r3, [r3, #24]
 8007006:	2b00      	cmp	r3, #0
 8007008:	db04      	blt.n	8007014 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	f1c3 0207 	rsb	r2, r3, #7
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	6959      	ldr	r1, [r3, #20]
 8007018:	693a      	ldr	r2, [r7, #16]
 800701a:	4613      	mov	r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	4413      	add	r3, r2
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4a1f      	ldr	r2, [pc, #124]	; (80070a0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8007024:	4413      	add	r3, r2
 8007026:	4299      	cmp	r1, r3
 8007028:	d134      	bne.n	8007094 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	3304      	adds	r3, #4
 800702e:	4618      	mov	r0, r3
 8007030:	f7fe f8cd 	bl	80051ce <uxListRemove>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d115      	bne.n	8007066 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800703e:	4918      	ldr	r1, [pc, #96]	; (80070a0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8007040:	4613      	mov	r3, r2
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	4413      	add	r3, r2
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	440b      	add	r3, r1
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10a      	bne.n	8007066 <vTaskPriorityDisinheritAfterTimeout+0xee>
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007054:	2201      	movs	r2, #1
 8007056:	fa02 f303 	lsl.w	r3, r2, r3
 800705a:	43da      	mvns	r2, r3
 800705c:	4b11      	ldr	r3, [pc, #68]	; (80070a4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4013      	ands	r3, r2
 8007062:	4a10      	ldr	r2, [pc, #64]	; (80070a4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007064:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706a:	2201      	movs	r2, #1
 800706c:	409a      	lsls	r2, r3
 800706e:	4b0d      	ldr	r3, [pc, #52]	; (80070a4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4313      	orrs	r3, r2
 8007074:	4a0b      	ldr	r2, [pc, #44]	; (80070a4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8007076:	6013      	str	r3, [r2, #0]
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800707c:	4613      	mov	r3, r2
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4413      	add	r3, r2
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4a06      	ldr	r2, [pc, #24]	; (80070a0 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8007086:	441a      	add	r2, r3
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	3304      	adds	r3, #4
 800708c:	4619      	mov	r1, r3
 800708e:	4610      	mov	r0, r2
 8007090:	f7fe f840 	bl	8005114 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007094:	bf00      	nop
 8007096:	3720      	adds	r7, #32
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	2000031c 	.word	0x2000031c
 80070a0:	20000320 	.word	0x20000320
 80070a4:	20000424 	.word	0x20000424

080070a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80070a8:	b480      	push	{r7}
 80070aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80070ac:	4b07      	ldr	r3, [pc, #28]	; (80070cc <pvTaskIncrementMutexHeldCount+0x24>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d004      	beq.n	80070be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80070b4:	4b05      	ldr	r3, [pc, #20]	; (80070cc <pvTaskIncrementMutexHeldCount+0x24>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070ba:	3201      	adds	r2, #1
 80070bc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80070be:	4b03      	ldr	r3, [pc, #12]	; (80070cc <pvTaskIncrementMutexHeldCount+0x24>)
 80070c0:	681b      	ldr	r3, [r3, #0]
	}
 80070c2:	4618      	mov	r0, r3
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr
 80070cc:	2000031c 	.word	0x2000031c

080070d0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80070da:	4b29      	ldr	r3, [pc, #164]	; (8007180 <prvAddCurrentTaskToDelayedList+0xb0>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80070e0:	4b28      	ldr	r3, [pc, #160]	; (8007184 <prvAddCurrentTaskToDelayedList+0xb4>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	3304      	adds	r3, #4
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7fe f871 	bl	80051ce <uxListRemove>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d10b      	bne.n	800710a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80070f2:	4b24      	ldr	r3, [pc, #144]	; (8007184 <prvAddCurrentTaskToDelayedList+0xb4>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f8:	2201      	movs	r2, #1
 80070fa:	fa02 f303 	lsl.w	r3, r2, r3
 80070fe:	43da      	mvns	r2, r3
 8007100:	4b21      	ldr	r3, [pc, #132]	; (8007188 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4013      	ands	r3, r2
 8007106:	4a20      	ldr	r2, [pc, #128]	; (8007188 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007108:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007110:	d10a      	bne.n	8007128 <prvAddCurrentTaskToDelayedList+0x58>
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d007      	beq.n	8007128 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007118:	4b1a      	ldr	r3, [pc, #104]	; (8007184 <prvAddCurrentTaskToDelayedList+0xb4>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	3304      	adds	r3, #4
 800711e:	4619      	mov	r1, r3
 8007120:	481a      	ldr	r0, [pc, #104]	; (800718c <prvAddCurrentTaskToDelayedList+0xbc>)
 8007122:	f7fd fff7 	bl	8005114 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007126:	e026      	b.n	8007176 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4413      	add	r3, r2
 800712e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007130:	4b14      	ldr	r3, [pc, #80]	; (8007184 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007138:	68ba      	ldr	r2, [r7, #8]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	429a      	cmp	r2, r3
 800713e:	d209      	bcs.n	8007154 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007140:	4b13      	ldr	r3, [pc, #76]	; (8007190 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	4b0f      	ldr	r3, [pc, #60]	; (8007184 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	3304      	adds	r3, #4
 800714a:	4619      	mov	r1, r3
 800714c:	4610      	mov	r0, r2
 800714e:	f7fe f805 	bl	800515c <vListInsert>
}
 8007152:	e010      	b.n	8007176 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007154:	4b0f      	ldr	r3, [pc, #60]	; (8007194 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	4b0a      	ldr	r3, [pc, #40]	; (8007184 <prvAddCurrentTaskToDelayedList+0xb4>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	3304      	adds	r3, #4
 800715e:	4619      	mov	r1, r3
 8007160:	4610      	mov	r0, r2
 8007162:	f7fd fffb 	bl	800515c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007166:	4b0c      	ldr	r3, [pc, #48]	; (8007198 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	429a      	cmp	r2, r3
 800716e:	d202      	bcs.n	8007176 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007170:	4a09      	ldr	r2, [pc, #36]	; (8007198 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	6013      	str	r3, [r2, #0]
}
 8007176:	bf00      	nop
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	20000420 	.word	0x20000420
 8007184:	2000031c 	.word	0x2000031c
 8007188:	20000424 	.word	0x20000424
 800718c:	20000408 	.word	0x20000408
 8007190:	200003d8 	.word	0x200003d8
 8007194:	200003d4 	.word	0x200003d4
 8007198:	2000043c 	.word	0x2000043c

0800719c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	3b04      	subs	r3, #4
 80071ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80071b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	3b04      	subs	r3, #4
 80071ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	f023 0201 	bic.w	r2, r3, #1
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	3b04      	subs	r3, #4
 80071ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80071cc:	4a0c      	ldr	r2, [pc, #48]	; (8007200 <pxPortInitialiseStack+0x64>)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	3b14      	subs	r3, #20
 80071d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	3b04      	subs	r3, #4
 80071e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f06f 0202 	mvn.w	r2, #2
 80071ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	3b20      	subs	r3, #32
 80071f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80071f2:	68fb      	ldr	r3, [r7, #12]
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3714      	adds	r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr
 8007200:	08007205 	.word	0x08007205

08007204 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800720a:	2300      	movs	r3, #0
 800720c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800720e:	4b11      	ldr	r3, [pc, #68]	; (8007254 <prvTaskExitError+0x50>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007216:	d009      	beq.n	800722c <prvTaskExitError+0x28>
 8007218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721c:	f383 8811 	msr	BASEPRI, r3
 8007220:	f3bf 8f6f 	isb	sy
 8007224:	f3bf 8f4f 	dsb	sy
 8007228:	60fb      	str	r3, [r7, #12]
 800722a:	e7fe      	b.n	800722a <prvTaskExitError+0x26>
 800722c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007230:	f383 8811 	msr	BASEPRI, r3
 8007234:	f3bf 8f6f 	isb	sy
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800723e:	bf00      	nop
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d0fc      	beq.n	8007240 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007246:	bf00      	nop
 8007248:	3714      	adds	r7, #20
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	2000002c 	.word	0x2000002c
	...

08007260 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007260:	4b07      	ldr	r3, [pc, #28]	; (8007280 <pxCurrentTCBConst2>)
 8007262:	6819      	ldr	r1, [r3, #0]
 8007264:	6808      	ldr	r0, [r1, #0]
 8007266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800726a:	f380 8809 	msr	PSP, r0
 800726e:	f3bf 8f6f 	isb	sy
 8007272:	f04f 0000 	mov.w	r0, #0
 8007276:	f380 8811 	msr	BASEPRI, r0
 800727a:	4770      	bx	lr
 800727c:	f3af 8000 	nop.w

08007280 <pxCurrentTCBConst2>:
 8007280:	2000031c 	.word	0x2000031c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007284:	bf00      	nop
 8007286:	bf00      	nop

08007288 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007288:	4808      	ldr	r0, [pc, #32]	; (80072ac <prvPortStartFirstTask+0x24>)
 800728a:	6800      	ldr	r0, [r0, #0]
 800728c:	6800      	ldr	r0, [r0, #0]
 800728e:	f380 8808 	msr	MSP, r0
 8007292:	f04f 0000 	mov.w	r0, #0
 8007296:	f380 8814 	msr	CONTROL, r0
 800729a:	b662      	cpsie	i
 800729c:	b661      	cpsie	f
 800729e:	f3bf 8f4f 	dsb	sy
 80072a2:	f3bf 8f6f 	isb	sy
 80072a6:	df00      	svc	0
 80072a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80072aa:	bf00      	nop
 80072ac:	e000ed08 	.word	0xe000ed08

080072b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b086      	sub	sp, #24
 80072b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80072b6:	4b44      	ldr	r3, [pc, #272]	; (80073c8 <xPortStartScheduler+0x118>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a44      	ldr	r2, [pc, #272]	; (80073cc <xPortStartScheduler+0x11c>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d109      	bne.n	80072d4 <xPortStartScheduler+0x24>
 80072c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c4:	f383 8811 	msr	BASEPRI, r3
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	613b      	str	r3, [r7, #16]
 80072d2:	e7fe      	b.n	80072d2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80072d4:	4b3c      	ldr	r3, [pc, #240]	; (80073c8 <xPortStartScheduler+0x118>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a3d      	ldr	r2, [pc, #244]	; (80073d0 <xPortStartScheduler+0x120>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d109      	bne.n	80072f2 <xPortStartScheduler+0x42>
 80072de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e2:	f383 8811 	msr	BASEPRI, r3
 80072e6:	f3bf 8f6f 	isb	sy
 80072ea:	f3bf 8f4f 	dsb	sy
 80072ee:	60fb      	str	r3, [r7, #12]
 80072f0:	e7fe      	b.n	80072f0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80072f2:	4b38      	ldr	r3, [pc, #224]	; (80073d4 <xPortStartScheduler+0x124>)
 80072f4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	22ff      	movs	r2, #255	; 0xff
 8007302:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	b2db      	uxtb	r3, r3
 800730a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800730c:	78fb      	ldrb	r3, [r7, #3]
 800730e:	b2db      	uxtb	r3, r3
 8007310:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007314:	b2da      	uxtb	r2, r3
 8007316:	4b30      	ldr	r3, [pc, #192]	; (80073d8 <xPortStartScheduler+0x128>)
 8007318:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800731a:	4b30      	ldr	r3, [pc, #192]	; (80073dc <xPortStartScheduler+0x12c>)
 800731c:	2207      	movs	r2, #7
 800731e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007320:	e009      	b.n	8007336 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007322:	4b2e      	ldr	r3, [pc, #184]	; (80073dc <xPortStartScheduler+0x12c>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	3b01      	subs	r3, #1
 8007328:	4a2c      	ldr	r2, [pc, #176]	; (80073dc <xPortStartScheduler+0x12c>)
 800732a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800732c:	78fb      	ldrb	r3, [r7, #3]
 800732e:	b2db      	uxtb	r3, r3
 8007330:	005b      	lsls	r3, r3, #1
 8007332:	b2db      	uxtb	r3, r3
 8007334:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007336:	78fb      	ldrb	r3, [r7, #3]
 8007338:	b2db      	uxtb	r3, r3
 800733a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800733e:	2b80      	cmp	r3, #128	; 0x80
 8007340:	d0ef      	beq.n	8007322 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007342:	4b26      	ldr	r3, [pc, #152]	; (80073dc <xPortStartScheduler+0x12c>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f1c3 0307 	rsb	r3, r3, #7
 800734a:	2b04      	cmp	r3, #4
 800734c:	d009      	beq.n	8007362 <xPortStartScheduler+0xb2>
 800734e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	60bb      	str	r3, [r7, #8]
 8007360:	e7fe      	b.n	8007360 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007362:	4b1e      	ldr	r3, [pc, #120]	; (80073dc <xPortStartScheduler+0x12c>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	021b      	lsls	r3, r3, #8
 8007368:	4a1c      	ldr	r2, [pc, #112]	; (80073dc <xPortStartScheduler+0x12c>)
 800736a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800736c:	4b1b      	ldr	r3, [pc, #108]	; (80073dc <xPortStartScheduler+0x12c>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007374:	4a19      	ldr	r2, [pc, #100]	; (80073dc <xPortStartScheduler+0x12c>)
 8007376:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	b2da      	uxtb	r2, r3
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007380:	4b17      	ldr	r3, [pc, #92]	; (80073e0 <xPortStartScheduler+0x130>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a16      	ldr	r2, [pc, #88]	; (80073e0 <xPortStartScheduler+0x130>)
 8007386:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800738a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800738c:	4b14      	ldr	r3, [pc, #80]	; (80073e0 <xPortStartScheduler+0x130>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a13      	ldr	r2, [pc, #76]	; (80073e0 <xPortStartScheduler+0x130>)
 8007392:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007396:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007398:	f000 f8d6 	bl	8007548 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800739c:	4b11      	ldr	r3, [pc, #68]	; (80073e4 <xPortStartScheduler+0x134>)
 800739e:	2200      	movs	r2, #0
 80073a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80073a2:	f000 f8f5 	bl	8007590 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80073a6:	4b10      	ldr	r3, [pc, #64]	; (80073e8 <xPortStartScheduler+0x138>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a0f      	ldr	r2, [pc, #60]	; (80073e8 <xPortStartScheduler+0x138>)
 80073ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80073b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80073b2:	f7ff ff69 	bl	8007288 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80073b6:	f7ff fa89 	bl	80068cc <vTaskSwitchContext>
	prvTaskExitError();
 80073ba:	f7ff ff23 	bl	8007204 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3718      	adds	r7, #24
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	e000ed00 	.word	0xe000ed00
 80073cc:	410fc271 	.word	0x410fc271
 80073d0:	410fc270 	.word	0x410fc270
 80073d4:	e000e400 	.word	0xe000e400
 80073d8:	20000448 	.word	0x20000448
 80073dc:	2000044c 	.word	0x2000044c
 80073e0:	e000ed20 	.word	0xe000ed20
 80073e4:	2000002c 	.word	0x2000002c
 80073e8:	e000ef34 	.word	0xe000ef34

080073ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f6:	f383 8811 	msr	BASEPRI, r3
 80073fa:	f3bf 8f6f 	isb	sy
 80073fe:	f3bf 8f4f 	dsb	sy
 8007402:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007404:	4b0e      	ldr	r3, [pc, #56]	; (8007440 <vPortEnterCritical+0x54>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	3301      	adds	r3, #1
 800740a:	4a0d      	ldr	r2, [pc, #52]	; (8007440 <vPortEnterCritical+0x54>)
 800740c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800740e:	4b0c      	ldr	r3, [pc, #48]	; (8007440 <vPortEnterCritical+0x54>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2b01      	cmp	r3, #1
 8007414:	d10e      	bne.n	8007434 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007416:	4b0b      	ldr	r3, [pc, #44]	; (8007444 <vPortEnterCritical+0x58>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	b2db      	uxtb	r3, r3
 800741c:	2b00      	cmp	r3, #0
 800741e:	d009      	beq.n	8007434 <vPortEnterCritical+0x48>
 8007420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007424:	f383 8811 	msr	BASEPRI, r3
 8007428:	f3bf 8f6f 	isb	sy
 800742c:	f3bf 8f4f 	dsb	sy
 8007430:	603b      	str	r3, [r7, #0]
 8007432:	e7fe      	b.n	8007432 <vPortEnterCritical+0x46>
	}
}
 8007434:	bf00      	nop
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr
 8007440:	2000002c 	.word	0x2000002c
 8007444:	e000ed04 	.word	0xe000ed04

08007448 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800744e:	4b11      	ldr	r3, [pc, #68]	; (8007494 <vPortExitCritical+0x4c>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d109      	bne.n	800746a <vPortExitCritical+0x22>
 8007456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745a:	f383 8811 	msr	BASEPRI, r3
 800745e:	f3bf 8f6f 	isb	sy
 8007462:	f3bf 8f4f 	dsb	sy
 8007466:	607b      	str	r3, [r7, #4]
 8007468:	e7fe      	b.n	8007468 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800746a:	4b0a      	ldr	r3, [pc, #40]	; (8007494 <vPortExitCritical+0x4c>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	3b01      	subs	r3, #1
 8007470:	4a08      	ldr	r2, [pc, #32]	; (8007494 <vPortExitCritical+0x4c>)
 8007472:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007474:	4b07      	ldr	r3, [pc, #28]	; (8007494 <vPortExitCritical+0x4c>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d104      	bne.n	8007486 <vPortExitCritical+0x3e>
 800747c:	2300      	movs	r3, #0
 800747e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007486:	bf00      	nop
 8007488:	370c      	adds	r7, #12
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	2000002c 	.word	0x2000002c
	...

080074a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80074a0:	f3ef 8009 	mrs	r0, PSP
 80074a4:	f3bf 8f6f 	isb	sy
 80074a8:	4b15      	ldr	r3, [pc, #84]	; (8007500 <pxCurrentTCBConst>)
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	f01e 0f10 	tst.w	lr, #16
 80074b0:	bf08      	it	eq
 80074b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80074b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ba:	6010      	str	r0, [r2, #0]
 80074bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80074c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80074c4:	f380 8811 	msr	BASEPRI, r0
 80074c8:	f3bf 8f4f 	dsb	sy
 80074cc:	f3bf 8f6f 	isb	sy
 80074d0:	f7ff f9fc 	bl	80068cc <vTaskSwitchContext>
 80074d4:	f04f 0000 	mov.w	r0, #0
 80074d8:	f380 8811 	msr	BASEPRI, r0
 80074dc:	bc09      	pop	{r0, r3}
 80074de:	6819      	ldr	r1, [r3, #0]
 80074e0:	6808      	ldr	r0, [r1, #0]
 80074e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e6:	f01e 0f10 	tst.w	lr, #16
 80074ea:	bf08      	it	eq
 80074ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80074f0:	f380 8809 	msr	PSP, r0
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	f3af 8000 	nop.w

08007500 <pxCurrentTCBConst>:
 8007500:	2000031c 	.word	0x2000031c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007504:	bf00      	nop
 8007506:	bf00      	nop

08007508 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
	__asm volatile
 800750e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	f3bf 8f6f 	isb	sy
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007520:	f7ff f91c 	bl	800675c <xTaskIncrementTick>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d003      	beq.n	8007532 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800752a:	4b06      	ldr	r3, [pc, #24]	; (8007544 <SysTick_Handler+0x3c>)
 800752c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007530:	601a      	str	r2, [r3, #0]
 8007532:	2300      	movs	r3, #0
 8007534:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800753c:	bf00      	nop
 800753e:	3708      	adds	r7, #8
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	e000ed04 	.word	0xe000ed04

08007548 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007548:	b480      	push	{r7}
 800754a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800754c:	4b0b      	ldr	r3, [pc, #44]	; (800757c <vPortSetupTimerInterrupt+0x34>)
 800754e:	2200      	movs	r2, #0
 8007550:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007552:	4b0b      	ldr	r3, [pc, #44]	; (8007580 <vPortSetupTimerInterrupt+0x38>)
 8007554:	2200      	movs	r2, #0
 8007556:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007558:	4b0a      	ldr	r3, [pc, #40]	; (8007584 <vPortSetupTimerInterrupt+0x3c>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a0a      	ldr	r2, [pc, #40]	; (8007588 <vPortSetupTimerInterrupt+0x40>)
 800755e:	fba2 2303 	umull	r2, r3, r2, r3
 8007562:	099b      	lsrs	r3, r3, #6
 8007564:	4a09      	ldr	r2, [pc, #36]	; (800758c <vPortSetupTimerInterrupt+0x44>)
 8007566:	3b01      	subs	r3, #1
 8007568:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800756a:	4b04      	ldr	r3, [pc, #16]	; (800757c <vPortSetupTimerInterrupt+0x34>)
 800756c:	2207      	movs	r2, #7
 800756e:	601a      	str	r2, [r3, #0]
}
 8007570:	bf00      	nop
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	e000e010 	.word	0xe000e010
 8007580:	e000e018 	.word	0xe000e018
 8007584:	20000020 	.word	0x20000020
 8007588:	10624dd3 	.word	0x10624dd3
 800758c:	e000e014 	.word	0xe000e014

08007590 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007590:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80075a0 <vPortEnableVFP+0x10>
 8007594:	6801      	ldr	r1, [r0, #0]
 8007596:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800759a:	6001      	str	r1, [r0, #0]
 800759c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800759e:	bf00      	nop
 80075a0:	e000ed88 	.word	0xe000ed88

080075a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80075aa:	f3ef 8305 	mrs	r3, IPSR
 80075ae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2b0f      	cmp	r3, #15
 80075b4:	d913      	bls.n	80075de <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80075b6:	4a16      	ldr	r2, [pc, #88]	; (8007610 <vPortValidateInterruptPriority+0x6c>)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	4413      	add	r3, r2
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80075c0:	4b14      	ldr	r3, [pc, #80]	; (8007614 <vPortValidateInterruptPriority+0x70>)
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	7afa      	ldrb	r2, [r7, #11]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d209      	bcs.n	80075de <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80075ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	607b      	str	r3, [r7, #4]
 80075dc:	e7fe      	b.n	80075dc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80075de:	4b0e      	ldr	r3, [pc, #56]	; (8007618 <vPortValidateInterruptPriority+0x74>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80075e6:	4b0d      	ldr	r3, [pc, #52]	; (800761c <vPortValidateInterruptPriority+0x78>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d909      	bls.n	8007602 <vPortValidateInterruptPriority+0x5e>
 80075ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	603b      	str	r3, [r7, #0]
 8007600:	e7fe      	b.n	8007600 <vPortValidateInterruptPriority+0x5c>
	}
 8007602:	bf00      	nop
 8007604:	3714      	adds	r7, #20
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr
 800760e:	bf00      	nop
 8007610:	e000e3f0 	.word	0xe000e3f0
 8007614:	20000448 	.word	0x20000448
 8007618:	e000ed0c 	.word	0xe000ed0c
 800761c:	2000044c 	.word	0x2000044c

08007620 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b08a      	sub	sp, #40	; 0x28
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007628:	2300      	movs	r3, #0
 800762a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800762c:	f7fe ffca 	bl	80065c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007630:	4b57      	ldr	r3, [pc, #348]	; (8007790 <pvPortMalloc+0x170>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d101      	bne.n	800763c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007638:	f000 f918 	bl	800786c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800763c:	4b55      	ldr	r3, [pc, #340]	; (8007794 <pvPortMalloc+0x174>)
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4013      	ands	r3, r2
 8007644:	2b00      	cmp	r3, #0
 8007646:	f040 808c 	bne.w	8007762 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d01c      	beq.n	800768a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007650:	2208      	movs	r2, #8
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4413      	add	r3, r2
 8007656:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f003 0307 	and.w	r3, r3, #7
 800765e:	2b00      	cmp	r3, #0
 8007660:	d013      	beq.n	800768a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f023 0307 	bic.w	r3, r3, #7
 8007668:	3308      	adds	r3, #8
 800766a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f003 0307 	and.w	r3, r3, #7
 8007672:	2b00      	cmp	r3, #0
 8007674:	d009      	beq.n	800768a <pvPortMalloc+0x6a>
 8007676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767a:	f383 8811 	msr	BASEPRI, r3
 800767e:	f3bf 8f6f 	isb	sy
 8007682:	f3bf 8f4f 	dsb	sy
 8007686:	617b      	str	r3, [r7, #20]
 8007688:	e7fe      	b.n	8007688 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d068      	beq.n	8007762 <pvPortMalloc+0x142>
 8007690:	4b41      	ldr	r3, [pc, #260]	; (8007798 <pvPortMalloc+0x178>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	429a      	cmp	r2, r3
 8007698:	d863      	bhi.n	8007762 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800769a:	4b40      	ldr	r3, [pc, #256]	; (800779c <pvPortMalloc+0x17c>)
 800769c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800769e:	4b3f      	ldr	r3, [pc, #252]	; (800779c <pvPortMalloc+0x17c>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076a4:	e004      	b.n	80076b0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80076a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80076aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d903      	bls.n	80076c2 <pvPortMalloc+0xa2>
 80076ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1f1      	bne.n	80076a6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80076c2:	4b33      	ldr	r3, [pc, #204]	; (8007790 <pvPortMalloc+0x170>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d04a      	beq.n	8007762 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80076cc:	6a3b      	ldr	r3, [r7, #32]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2208      	movs	r2, #8
 80076d2:	4413      	add	r3, r2
 80076d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80076d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	6a3b      	ldr	r3, [r7, #32]
 80076dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80076de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e0:	685a      	ldr	r2, [r3, #4]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	1ad2      	subs	r2, r2, r3
 80076e6:	2308      	movs	r3, #8
 80076e8:	005b      	lsls	r3, r3, #1
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d91e      	bls.n	800772c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80076ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4413      	add	r3, r2
 80076f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	f003 0307 	and.w	r3, r3, #7
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d009      	beq.n	8007714 <pvPortMalloc+0xf4>
 8007700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007704:	f383 8811 	msr	BASEPRI, r3
 8007708:	f3bf 8f6f 	isb	sy
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	613b      	str	r3, [r7, #16]
 8007712:	e7fe      	b.n	8007712 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007716:	685a      	ldr	r2, [r3, #4]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	1ad2      	subs	r2, r2, r3
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007726:	69b8      	ldr	r0, [r7, #24]
 8007728:	f000 f902 	bl	8007930 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800772c:	4b1a      	ldr	r3, [pc, #104]	; (8007798 <pvPortMalloc+0x178>)
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	4a18      	ldr	r2, [pc, #96]	; (8007798 <pvPortMalloc+0x178>)
 8007738:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800773a:	4b17      	ldr	r3, [pc, #92]	; (8007798 <pvPortMalloc+0x178>)
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	4b18      	ldr	r3, [pc, #96]	; (80077a0 <pvPortMalloc+0x180>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	429a      	cmp	r2, r3
 8007744:	d203      	bcs.n	800774e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007746:	4b14      	ldr	r3, [pc, #80]	; (8007798 <pvPortMalloc+0x178>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a15      	ldr	r2, [pc, #84]	; (80077a0 <pvPortMalloc+0x180>)
 800774c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800774e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007750:	685a      	ldr	r2, [r3, #4]
 8007752:	4b10      	ldr	r3, [pc, #64]	; (8007794 <pvPortMalloc+0x174>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	431a      	orrs	r2, r3
 8007758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800775c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775e:	2200      	movs	r2, #0
 8007760:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007762:	f7fe ff3d 	bl	80065e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	f003 0307 	and.w	r3, r3, #7
 800776c:	2b00      	cmp	r3, #0
 800776e:	d009      	beq.n	8007784 <pvPortMalloc+0x164>
 8007770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007774:	f383 8811 	msr	BASEPRI, r3
 8007778:	f3bf 8f6f 	isb	sy
 800777c:	f3bf 8f4f 	dsb	sy
 8007780:	60fb      	str	r3, [r7, #12]
 8007782:	e7fe      	b.n	8007782 <pvPortMalloc+0x162>
	return pvReturn;
 8007784:	69fb      	ldr	r3, [r7, #28]
}
 8007786:	4618      	mov	r0, r3
 8007788:	3728      	adds	r7, #40	; 0x28
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	20008158 	.word	0x20008158
 8007794:	20008164 	.word	0x20008164
 8007798:	2000815c 	.word	0x2000815c
 800779c:	20008150 	.word	0x20008150
 80077a0:	20008160 	.word	0x20008160

080077a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b086      	sub	sp, #24
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d046      	beq.n	8007844 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80077b6:	2308      	movs	r3, #8
 80077b8:	425b      	negs	r3, r3
 80077ba:	697a      	ldr	r2, [r7, #20]
 80077bc:	4413      	add	r3, r2
 80077be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	685a      	ldr	r2, [r3, #4]
 80077c8:	4b20      	ldr	r3, [pc, #128]	; (800784c <vPortFree+0xa8>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4013      	ands	r3, r2
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d109      	bne.n	80077e6 <vPortFree+0x42>
 80077d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d6:	f383 8811 	msr	BASEPRI, r3
 80077da:	f3bf 8f6f 	isb	sy
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	60fb      	str	r3, [r7, #12]
 80077e4:	e7fe      	b.n	80077e4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d009      	beq.n	8007802 <vPortFree+0x5e>
 80077ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f2:	f383 8811 	msr	BASEPRI, r3
 80077f6:	f3bf 8f6f 	isb	sy
 80077fa:	f3bf 8f4f 	dsb	sy
 80077fe:	60bb      	str	r3, [r7, #8]
 8007800:	e7fe      	b.n	8007800 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	685a      	ldr	r2, [r3, #4]
 8007806:	4b11      	ldr	r3, [pc, #68]	; (800784c <vPortFree+0xa8>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4013      	ands	r3, r2
 800780c:	2b00      	cmp	r3, #0
 800780e:	d019      	beq.n	8007844 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d115      	bne.n	8007844 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	685a      	ldr	r2, [r3, #4]
 800781c:	4b0b      	ldr	r3, [pc, #44]	; (800784c <vPortFree+0xa8>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	43db      	mvns	r3, r3
 8007822:	401a      	ands	r2, r3
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007828:	f7fe fecc 	bl	80065c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	685a      	ldr	r2, [r3, #4]
 8007830:	4b07      	ldr	r3, [pc, #28]	; (8007850 <vPortFree+0xac>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4413      	add	r3, r2
 8007836:	4a06      	ldr	r2, [pc, #24]	; (8007850 <vPortFree+0xac>)
 8007838:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800783a:	6938      	ldr	r0, [r7, #16]
 800783c:	f000 f878 	bl	8007930 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007840:	f7fe fece 	bl	80065e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007844:	bf00      	nop
 8007846:	3718      	adds	r7, #24
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	20008164 	.word	0x20008164
 8007850:	2000815c 	.word	0x2000815c

08007854 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8007854:	b480      	push	{r7}
 8007856:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8007858:	4b03      	ldr	r3, [pc, #12]	; (8007868 <xPortGetFreeHeapSize+0x14>)
 800785a:	681b      	ldr	r3, [r3, #0]
}
 800785c:	4618      	mov	r0, r3
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr
 8007866:	bf00      	nop
 8007868:	2000815c 	.word	0x2000815c

0800786c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007872:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007876:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007878:	4b27      	ldr	r3, [pc, #156]	; (8007918 <prvHeapInit+0xac>)
 800787a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f003 0307 	and.w	r3, r3, #7
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00c      	beq.n	80078a0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	3307      	adds	r3, #7
 800788a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f023 0307 	bic.w	r3, r3, #7
 8007892:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007894:	68ba      	ldr	r2, [r7, #8]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	4a1f      	ldr	r2, [pc, #124]	; (8007918 <prvHeapInit+0xac>)
 800789c:	4413      	add	r3, r2
 800789e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80078a4:	4a1d      	ldr	r2, [pc, #116]	; (800791c <prvHeapInit+0xb0>)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80078aa:	4b1c      	ldr	r3, [pc, #112]	; (800791c <prvHeapInit+0xb0>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	4413      	add	r3, r2
 80078b6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80078b8:	2208      	movs	r2, #8
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	1a9b      	subs	r3, r3, r2
 80078be:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f023 0307 	bic.w	r3, r3, #7
 80078c6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	4a15      	ldr	r2, [pc, #84]	; (8007920 <prvHeapInit+0xb4>)
 80078cc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80078ce:	4b14      	ldr	r3, [pc, #80]	; (8007920 <prvHeapInit+0xb4>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2200      	movs	r2, #0
 80078d4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80078d6:	4b12      	ldr	r3, [pc, #72]	; (8007920 <prvHeapInit+0xb4>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2200      	movs	r2, #0
 80078dc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	1ad2      	subs	r2, r2, r3
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80078ec:	4b0c      	ldr	r3, [pc, #48]	; (8007920 <prvHeapInit+0xb4>)
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	4a0a      	ldr	r2, [pc, #40]	; (8007924 <prvHeapInit+0xb8>)
 80078fa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	4a09      	ldr	r2, [pc, #36]	; (8007928 <prvHeapInit+0xbc>)
 8007902:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007904:	4b09      	ldr	r3, [pc, #36]	; (800792c <prvHeapInit+0xc0>)
 8007906:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800790a:	601a      	str	r2, [r3, #0]
}
 800790c:	bf00      	nop
 800790e:	3714      	adds	r7, #20
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr
 8007918:	20000450 	.word	0x20000450
 800791c:	20008150 	.word	0x20008150
 8007920:	20008158 	.word	0x20008158
 8007924:	20008160 	.word	0x20008160
 8007928:	2000815c 	.word	0x2000815c
 800792c:	20008164 	.word	0x20008164

08007930 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007930:	b480      	push	{r7}
 8007932:	b085      	sub	sp, #20
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007938:	4b28      	ldr	r3, [pc, #160]	; (80079dc <prvInsertBlockIntoFreeList+0xac>)
 800793a:	60fb      	str	r3, [r7, #12]
 800793c:	e002      	b.n	8007944 <prvInsertBlockIntoFreeList+0x14>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	60fb      	str	r3, [r7, #12]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	429a      	cmp	r2, r3
 800794c:	d8f7      	bhi.n	800793e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	68ba      	ldr	r2, [r7, #8]
 8007958:	4413      	add	r3, r2
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	429a      	cmp	r2, r3
 800795e:	d108      	bne.n	8007972 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	685a      	ldr	r2, [r3, #4]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	441a      	add	r2, r3
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	68ba      	ldr	r2, [r7, #8]
 800797c:	441a      	add	r2, r3
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	429a      	cmp	r2, r3
 8007984:	d118      	bne.n	80079b8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	4b15      	ldr	r3, [pc, #84]	; (80079e0 <prvInsertBlockIntoFreeList+0xb0>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	429a      	cmp	r2, r3
 8007990:	d00d      	beq.n	80079ae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	685a      	ldr	r2, [r3, #4]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	441a      	add	r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	601a      	str	r2, [r3, #0]
 80079ac:	e008      	b.n	80079c0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80079ae:	4b0c      	ldr	r3, [pc, #48]	; (80079e0 <prvInsertBlockIntoFreeList+0xb0>)
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	601a      	str	r2, [r3, #0]
 80079b6:	e003      	b.n	80079c0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80079c0:	68fa      	ldr	r2, [r7, #12]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d002      	beq.n	80079ce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079ce:	bf00      	nop
 80079d0:	3714      	adds	r7, #20
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	20008150 	.word	0x20008150
 80079e0:	20008158 	.word	0x20008158

080079e4 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	330c      	adds	r3, #12
 80079f4:	461a      	mov	r2, r3
 80079f6:	6839      	ldr	r1, [r7, #0]
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f002 fa1f 	bl	8009e3c <tcpip_send_msg_wait_sem>
 80079fe:	4603      	mov	r3, r0
 8007a00:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8007a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d103      	bne.n	8007a12 <netconn_apimsg+0x2e>
    return apimsg->err;
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8007a10:	e001      	b.n	8007a16 <netconn_apimsg+0x32>
  }
  return err;
 8007a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
	...

08007a20 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b08c      	sub	sp, #48	; 0x30
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	4603      	mov	r3, r0
 8007a28:	603a      	str	r2, [r7, #0]
 8007a2a:	71fb      	strb	r3, [r7, #7]
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8007a30:	79fb      	ldrb	r3, [r7, #7]
 8007a32:	6839      	ldr	r1, [r7, #0]
 8007a34:	4618      	mov	r0, r3
 8007a36:	f001 f91f 	bl	8008c78 <netconn_alloc>
 8007a3a:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8007a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d054      	beq.n	8007aec <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8007a42:	79bb      	ldrb	r3, [r7, #6]
 8007a44:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8007a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a48:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8007a4a:	f107 0308 	add.w	r3, r7, #8
 8007a4e:	4619      	mov	r1, r3
 8007a50:	4829      	ldr	r0, [pc, #164]	; (8007af8 <netconn_new_with_proto_and_callback+0xd8>)
 8007a52:	f7ff ffc7 	bl	80079e4 <netconn_apimsg>
 8007a56:	4603      	mov	r3, r0
 8007a58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8007a5c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d043      	beq.n	8007aec <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8007a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d005      	beq.n	8007a78 <netconn_new_with_proto_and_callback+0x58>
 8007a6c:	4b23      	ldr	r3, [pc, #140]	; (8007afc <netconn_new_with_proto_and_callback+0xdc>)
 8007a6e:	22a3      	movs	r2, #163	; 0xa3
 8007a70:	4923      	ldr	r1, [pc, #140]	; (8007b00 <netconn_new_with_proto_and_callback+0xe0>)
 8007a72:	4824      	ldr	r0, [pc, #144]	; (8007b04 <netconn_new_with_proto_and_callback+0xe4>)
 8007a74:	f00f fa6a 	bl	8016f4c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8007a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a7a:	3310      	adds	r3, #16
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f00f f8b8 	bl	8016bf2 <sys_mbox_valid>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d105      	bne.n	8007a94 <netconn_new_with_proto_and_callback+0x74>
 8007a88:	4b1c      	ldr	r3, [pc, #112]	; (8007afc <netconn_new_with_proto_and_callback+0xdc>)
 8007a8a:	22a4      	movs	r2, #164	; 0xa4
 8007a8c:	491e      	ldr	r1, [pc, #120]	; (8007b08 <netconn_new_with_proto_and_callback+0xe8>)
 8007a8e:	481d      	ldr	r0, [pc, #116]	; (8007b04 <netconn_new_with_proto_and_callback+0xe4>)
 8007a90:	f00f fa5c 	bl	8016f4c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8007a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a96:	3314      	adds	r3, #20
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f00f f8aa 	bl	8016bf2 <sys_mbox_valid>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d005      	beq.n	8007ab0 <netconn_new_with_proto_and_callback+0x90>
 8007aa4:	4b15      	ldr	r3, [pc, #84]	; (8007afc <netconn_new_with_proto_and_callback+0xdc>)
 8007aa6:	22a6      	movs	r2, #166	; 0xa6
 8007aa8:	4918      	ldr	r1, [pc, #96]	; (8007b0c <netconn_new_with_proto_and_callback+0xec>)
 8007aaa:	4816      	ldr	r0, [pc, #88]	; (8007b04 <netconn_new_with_proto_and_callback+0xe4>)
 8007aac:	f00f fa4e 	bl	8016f4c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8007ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab2:	330c      	adds	r3, #12
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f00f f92d 	bl	8016d14 <sys_sem_valid>
 8007aba:	4603      	mov	r3, r0
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d105      	bne.n	8007acc <netconn_new_with_proto_and_callback+0xac>
 8007ac0:	4b0e      	ldr	r3, [pc, #56]	; (8007afc <netconn_new_with_proto_and_callback+0xdc>)
 8007ac2:	22a9      	movs	r2, #169	; 0xa9
 8007ac4:	4912      	ldr	r1, [pc, #72]	; (8007b10 <netconn_new_with_proto_and_callback+0xf0>)
 8007ac6:	480f      	ldr	r0, [pc, #60]	; (8007b04 <netconn_new_with_proto_and_callback+0xe4>)
 8007ac8:	f00f fa40 	bl	8016f4c <iprintf>
      sys_sem_free(&conn->op_completed);
 8007acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ace:	330c      	adds	r3, #12
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f00f f912 	bl	8016cfa <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8007ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad8:	3310      	adds	r3, #16
 8007ada:	4618      	mov	r0, r3
 8007adc:	f00f f802 	bl	8016ae4 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8007ae0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ae2:	2007      	movs	r0, #7
 8007ae4:	f002 ff12 	bl	800a90c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	e000      	b.n	8007aee <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8007aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3730      	adds	r7, #48	; 0x30
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	08008c4d 	.word	0x08008c4d
 8007afc:	08017e6c 	.word	0x08017e6c
 8007b00:	08017ea0 	.word	0x08017ea0
 8007b04:	08017ec4 	.word	0x08017ec4
 8007b08:	08017eec 	.word	0x08017eec
 8007b0c:	08017f04 	.word	0x08017f04
 8007b10:	08017f28 	.word	0x08017f28

08007b14 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b08c      	sub	sp, #48	; 0x30
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d101      	bne.n	8007b26 <netconn_prepare_delete+0x12>
    return ERR_OK;
 8007b22:	2300      	movs	r3, #0
 8007b24:	e014      	b.n	8007b50 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8007b2a:	2329      	movs	r3, #41	; 0x29
 8007b2c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8007b2e:	f107 030c 	add.w	r3, r7, #12
 8007b32:	4619      	mov	r1, r3
 8007b34:	4808      	ldr	r0, [pc, #32]	; (8007b58 <netconn_prepare_delete+0x44>)
 8007b36:	f7ff ff55 	bl	80079e4 <netconn_apimsg>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8007b40:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d002      	beq.n	8007b4e <netconn_prepare_delete+0x3a>
    return err;
 8007b48:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007b4c:	e000      	b.n	8007b50 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3730      	adds	r7, #48	; 0x30
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	080091b1 	.word	0x080091b1

08007b5c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d101      	bne.n	8007b6e <netconn_delete+0x12>
    return ERR_OK;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	e00d      	b.n	8007b8a <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f7ff ffd0 	bl	8007b14 <netconn_prepare_delete>
 8007b74:	4603      	mov	r3, r0
 8007b76:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8007b78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d102      	bne.n	8007b86 <netconn_delete+0x2a>
    netconn_free(conn);
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f001 f8e7 	bl	8008d54 <netconn_free>
  }
  return err;
 8007b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3710      	adds	r7, #16
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
	...

08007b94 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b08e      	sub	sp, #56	; 0x38
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d109      	bne.n	8007bbc <netconn_bind+0x28>
 8007ba8:	4b11      	ldr	r3, [pc, #68]	; (8007bf0 <netconn_bind+0x5c>)
 8007baa:	f44f 729c 	mov.w	r2, #312	; 0x138
 8007bae:	4911      	ldr	r1, [pc, #68]	; (8007bf4 <netconn_bind+0x60>)
 8007bb0:	4811      	ldr	r0, [pc, #68]	; (8007bf8 <netconn_bind+0x64>)
 8007bb2:	f00f f9cb 	bl	8016f4c <iprintf>
 8007bb6:	f06f 030f 	mvn.w	r3, #15
 8007bba:	e015      	b.n	8007be8 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d101      	bne.n	8007bc6 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8007bc2:	4b0e      	ldr	r3, [pc, #56]	; (8007bfc <netconn_bind+0x68>)
 8007bc4:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8007bce:	88fb      	ldrh	r3, [r7, #6]
 8007bd0:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8007bd2:	f107 0314 	add.w	r3, r7, #20
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	4809      	ldr	r0, [pc, #36]	; (8007c00 <netconn_bind+0x6c>)
 8007bda:	f7ff ff03 	bl	80079e4 <netconn_apimsg>
 8007bde:	4603      	mov	r3, r0
 8007be0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8007be4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3738      	adds	r7, #56	; 0x38
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	08017e6c 	.word	0x08017e6c
 8007bf4:	08017fa4 	.word	0x08017fa4
 8007bf8:	08017ec4 	.word	0x08017ec4
 8007bfc:	0801faa8 	.word	0x0801faa8
 8007c00:	08009379 	.word	0x08009379

08007c04 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b08c      	sub	sp, #48	; 0x30
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d109      	bne.n	8007c2a <netconn_listen_with_backlog+0x26>
 8007c16:	4b0d      	ldr	r3, [pc, #52]	; (8007c4c <netconn_listen_with_backlog+0x48>)
 8007c18:	f240 12bb 	movw	r2, #443	; 0x1bb
 8007c1c:	490c      	ldr	r1, [pc, #48]	; (8007c50 <netconn_listen_with_backlog+0x4c>)
 8007c1e:	480d      	ldr	r0, [pc, #52]	; (8007c54 <netconn_listen_with_backlog+0x50>)
 8007c20:	f00f f994 	bl	8016f4c <iprintf>
 8007c24:	f06f 030f 	mvn.w	r3, #15
 8007c28:	e00c      	b.n	8007c44 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8007c2e:	f107 030c 	add.w	r3, r7, #12
 8007c32:	4619      	mov	r1, r3
 8007c34:	4808      	ldr	r0, [pc, #32]	; (8007c58 <netconn_listen_with_backlog+0x54>)
 8007c36:	f7ff fed5 	bl	80079e4 <netconn_apimsg>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8007c40:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3730      	adds	r7, #48	; 0x30
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	08017e6c 	.word	0x08017e6c
 8007c50:	08018024 	.word	0x08018024
 8007c54:	08017ec4 	.word	0x08017ec4
 8007c58:	080093f1 	.word	0x080093f1

08007c5c <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b086      	sub	sp, #24
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d109      	bne.n	8007c80 <netconn_accept+0x24>
 8007c6c:	4b3d      	ldr	r3, [pc, #244]	; (8007d64 <netconn_accept+0x108>)
 8007c6e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007c72:	493d      	ldr	r1, [pc, #244]	; (8007d68 <netconn_accept+0x10c>)
 8007c74:	483d      	ldr	r0, [pc, #244]	; (8007d6c <netconn_accept+0x110>)
 8007c76:	f00f f969 	bl	8016f4c <iprintf>
 8007c7a:	f06f 030f 	mvn.w	r3, #15
 8007c7e:	e06c      	b.n	8007d5a <netconn_accept+0xfe>
  *new_conn = NULL;
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	2200      	movs	r2, #0
 8007c84:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d109      	bne.n	8007ca0 <netconn_accept+0x44>
 8007c8c:	4b35      	ldr	r3, [pc, #212]	; (8007d64 <netconn_accept+0x108>)
 8007c8e:	f240 12e3 	movw	r2, #483	; 0x1e3
 8007c92:	4937      	ldr	r1, [pc, #220]	; (8007d70 <netconn_accept+0x114>)
 8007c94:	4835      	ldr	r0, [pc, #212]	; (8007d6c <netconn_accept+0x110>)
 8007c96:	f00f f959 	bl	8016f4c <iprintf>
 8007c9a:	f06f 030f 	mvn.w	r3, #15
 8007c9e:	e05c      	b.n	8007d5a <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 fb6c 	bl	800837e <netconn_err>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8007caa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d002      	beq.n	8007cb8 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8007cb2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007cb6:	e050      	b.n	8007d5a <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	3314      	adds	r3, #20
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f00e ff98 	bl	8016bf2 <sys_mbox_valid>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d005      	beq.n	8007cd4 <netconn_accept+0x78>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	7f1b      	ldrb	r3, [r3, #28]
 8007ccc:	f003 0301 	and.w	r3, r3, #1
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d002      	beq.n	8007cda <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8007cd4:	f06f 030e 	mvn.w	r3, #14
 8007cd8:	e03f      	b.n	8007d5a <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	7f1b      	ldrb	r3, [r3, #28]
 8007cde:	f003 0302 	and.w	r3, r3, #2
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00e      	beq.n	8007d04 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	3314      	adds	r3, #20
 8007cea:	f107 020c 	add.w	r2, r7, #12
 8007cee:	4611      	mov	r1, r2
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f00e ff62 	bl	8016bba <sys_arch_mbox_tryfetch>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cfc:	d10a      	bne.n	8007d14 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8007cfe:	f06f 0306 	mvn.w	r3, #6
 8007d02:	e02a      	b.n	8007d5a <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	3314      	adds	r3, #20
 8007d08:	f107 010c 	add.w	r1, r7, #12
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f00e ff14 	bl	8016b3c <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d005      	beq.n	8007d28 <netconn_accept+0xcc>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d20:	2200      	movs	r2, #0
 8007d22:	2101      	movs	r1, #1
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f107 0213 	add.w	r2, r7, #19
 8007d2e:	4611      	mov	r1, r2
 8007d30:	4618      	mov	r0, r3
 8007d32:	f000 fb71 	bl	8008418 <lwip_netconn_is_err_msg>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d002      	beq.n	8007d42 <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8007d3c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007d40:	e00b      	b.n	8007d5a <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d102      	bne.n	8007d4e <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8007d48:	f06f 030e 	mvn.w	r3, #14
 8007d4c:	e005      	b.n	8007d5a <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	697a      	ldr	r2, [r7, #20]
 8007d56:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8007d58:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3718      	adds	r7, #24
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	08017e6c 	.word	0x08017e6c
 8007d68:	08018044 	.word	0x08018044
 8007d6c:	08017ec4 	.word	0x08017ec4
 8007d70:	08018064 	.word	0x08018064

08007d74 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b088      	sub	sp, #32
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8007d82:	2300      	movs	r3, #0
 8007d84:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d109      	bne.n	8007da0 <netconn_recv_data+0x2c>
 8007d8c:	4b58      	ldr	r3, [pc, #352]	; (8007ef0 <netconn_recv_data+0x17c>)
 8007d8e:	f44f 7212 	mov.w	r2, #584	; 0x248
 8007d92:	4958      	ldr	r1, [pc, #352]	; (8007ef4 <netconn_recv_data+0x180>)
 8007d94:	4858      	ldr	r0, [pc, #352]	; (8007ef8 <netconn_recv_data+0x184>)
 8007d96:	f00f f8d9 	bl	8016f4c <iprintf>
 8007d9a:	f06f 030f 	mvn.w	r3, #15
 8007d9e:	e0a2      	b.n	8007ee6 <netconn_recv_data+0x172>
  *new_buf = NULL;
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	2200      	movs	r2, #0
 8007da4:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d109      	bne.n	8007dc0 <netconn_recv_data+0x4c>
 8007dac:	4b50      	ldr	r3, [pc, #320]	; (8007ef0 <netconn_recv_data+0x17c>)
 8007dae:	f240 224a 	movw	r2, #586	; 0x24a
 8007db2:	4952      	ldr	r1, [pc, #328]	; (8007efc <netconn_recv_data+0x188>)
 8007db4:	4850      	ldr	r0, [pc, #320]	; (8007ef8 <netconn_recv_data+0x184>)
 8007db6:	f00f f8c9 	bl	8016f4c <iprintf>
 8007dba:	f06f 030f 	mvn.w	r3, #15
 8007dbe:	e092      	b.n	8007ee6 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	3310      	adds	r3, #16
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f00e ff14 	bl	8016bf2 <sys_mbox_valid>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d10e      	bne.n	8007dee <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f000 fad4 	bl	800837e <netconn_err>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8007dda:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d002      	beq.n	8007de8 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8007de2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8007de6:	e07e      	b.n	8007ee6 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8007de8:	f06f 030a 	mvn.w	r3, #10
 8007dec:	e07b      	b.n	8007ee6 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	7f1b      	ldrb	r3, [r3, #28]
 8007df2:	f003 0302 	and.w	r3, r3, #2
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d10f      	bne.n	8007e1a <netconn_recv_data+0xa6>
 8007dfa:	79fb      	ldrb	r3, [r7, #7]
 8007dfc:	f003 0304 	and.w	r3, r3, #4
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d10a      	bne.n	8007e1a <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	7f1b      	ldrb	r3, [r3, #28]
 8007e08:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d104      	bne.n	8007e1a <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d023      	beq.n	8007e62 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	3310      	adds	r3, #16
 8007e1e:	f107 0218 	add.w	r2, r7, #24
 8007e22:	4611      	mov	r1, r2
 8007e24:	4618      	mov	r0, r3
 8007e26:	f00e fec8 	bl	8016bba <sys_arch_mbox_tryfetch>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e30:	d11f      	bne.n	8007e72 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	f000 faa3 	bl	800837e <netconn_err>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8007e3c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d002      	beq.n	8007e4a <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8007e44:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8007e48:	e04d      	b.n	8007ee6 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	7f1b      	ldrb	r3, [r3, #28]
 8007e4e:	f003 0301 	and.w	r3, r3, #1
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d002      	beq.n	8007e5c <netconn_recv_data+0xe8>
        return ERR_CONN;
 8007e56:	f06f 030a 	mvn.w	r3, #10
 8007e5a:	e044      	b.n	8007ee6 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8007e5c:	f06f 0306 	mvn.w	r3, #6
 8007e60:	e041      	b.n	8007ee6 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	3310      	adds	r3, #16
 8007e66:	f107 0118 	add.w	r1, r7, #24
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f00e fe65 	bl	8016b3c <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e7a:	2b10      	cmp	r3, #16
 8007e7c:	d117      	bne.n	8007eae <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	f107 0217 	add.w	r2, r7, #23
 8007e84:	4611      	mov	r1, r2
 8007e86:	4618      	mov	r0, r3
 8007e88:	f000 fac6 	bl	8008418 <lwip_netconn_is_err_msg>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d009      	beq.n	8007ea6 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8007e92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e96:	f113 0f0f 	cmn.w	r3, #15
 8007e9a:	d101      	bne.n	8007ea0 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	e022      	b.n	8007ee6 <netconn_recv_data+0x172>
      }
      return err;
 8007ea0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ea4:	e01f      	b.n	8007ee6 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	891b      	ldrh	r3, [r3, #8]
 8007eaa:	83fb      	strh	r3, [r7, #30]
 8007eac:	e00d      	b.n	8007eca <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d106      	bne.n	8007ec2 <netconn_recv_data+0x14e>
 8007eb4:	4b0e      	ldr	r3, [pc, #56]	; (8007ef0 <netconn_recv_data+0x17c>)
 8007eb6:	f240 2291 	movw	r2, #657	; 0x291
 8007eba:	4911      	ldr	r1, [pc, #68]	; (8007f00 <netconn_recv_data+0x18c>)
 8007ebc:	480e      	ldr	r0, [pc, #56]	; (8007ef8 <netconn_recv_data+0x184>)
 8007ebe:	f00f f845 	bl	8016f4c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	891b      	ldrh	r3, [r3, #8]
 8007ec8:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d005      	beq.n	8007ede <netconn_recv_data+0x16a>
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed6:	8bfa      	ldrh	r2, [r7, #30]
 8007ed8:	2101      	movs	r1, #1
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8007ede:	69ba      	ldr	r2, [r7, #24]
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3720      	adds	r7, #32
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	08017e6c 	.word	0x08017e6c
 8007ef4:	08018084 	.word	0x08018084
 8007ef8:	08017ec4 	.word	0x08017ec4
 8007efc:	080180a4 	.word	0x080180a4
 8007f00:	080180c0 	.word	0x080180c0

08007f04 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d005      	beq.n	8007f22 <netconn_tcp_recvd_msg+0x1e>
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f1e:	2b10      	cmp	r3, #16
 8007f20:	d009      	beq.n	8007f36 <netconn_tcp_recvd_msg+0x32>
 8007f22:	4b0c      	ldr	r3, [pc, #48]	; (8007f54 <netconn_tcp_recvd_msg+0x50>)
 8007f24:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8007f28:	490b      	ldr	r1, [pc, #44]	; (8007f58 <netconn_tcp_recvd_msg+0x54>)
 8007f2a:	480c      	ldr	r0, [pc, #48]	; (8007f5c <netconn_tcp_recvd_msg+0x58>)
 8007f2c:	f00f f80e 	bl	8016f4c <iprintf>
 8007f30:	f06f 030f 	mvn.w	r3, #15
 8007f34:	e00a      	b.n	8007f4c <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	68ba      	ldr	r2, [r7, #8]
 8007f40:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8007f42:	6879      	ldr	r1, [r7, #4]
 8007f44:	4806      	ldr	r0, [pc, #24]	; (8007f60 <netconn_tcp_recvd_msg+0x5c>)
 8007f46:	f7ff fd4d 	bl	80079e4 <netconn_apimsg>
 8007f4a:	4603      	mov	r3, r0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	08017e6c 	.word	0x08017e6c
 8007f58:	080180cc 	.word	0x080180cc
 8007f5c:	08017ec4 	.word	0x08017ec4
 8007f60:	08009521 	.word	0x08009521

08007f64 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b090      	sub	sp, #64	; 0x40
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	4613      	mov	r3, r2
 8007f70:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	3310      	adds	r3, #16
 8007f76:	4618      	mov	r0, r3
 8007f78:	f00e fe3b 	bl	8016bf2 <sys_mbox_valid>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d102      	bne.n	8007f88 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8007f82:	f06f 030a 	mvn.w	r3, #10
 8007f86:	e06d      	b.n	8008064 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	7f1b      	ldrb	r3, [r3, #28]
 8007f8c:	b25b      	sxtb	r3, r3
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	da07      	bge.n	8007fa2 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	7f1b      	ldrb	r3, [r3, #28]
 8007f96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f9a:	b2da      	uxtb	r2, r3
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8007fa0:	e039      	b.n	8008016 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8007fa2:	79fb      	ldrb	r3, [r7, #7]
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	68b9      	ldr	r1, [r7, #8]
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	f7ff fee3 	bl	8007d74 <netconn_recv_data>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8007fb4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d002      	beq.n	8007fc2 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8007fbc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007fc0:	e050      	b.n	8008064 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8007fc8:	79fb      	ldrb	r3, [r7, #7]
 8007fca:	f003 0308 	and.w	r3, r3, #8
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d10e      	bne.n	8007ff0 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8007fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d002      	beq.n	8007fde <netconn_recv_data_tcp+0x7a>
 8007fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fda:	891b      	ldrh	r3, [r3, #8]
 8007fdc:	e000      	b.n	8007fe0 <netconn_recv_data_tcp+0x7c>
 8007fde:	2301      	movs	r3, #1
 8007fe0:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8007fe2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007fe4:	f107 0214 	add.w	r2, r7, #20
 8007fe8:	4619      	mov	r1, r3
 8007fea:	68f8      	ldr	r0, [r7, #12]
 8007fec:	f7ff ff8a 	bl	8007f04 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8007ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d134      	bne.n	8008060 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8007ff6:	79fb      	ldrb	r3, [r7, #7]
 8007ff8:	f003 0310 	and.w	r3, r3, #16
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d009      	beq.n	8008014 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	7f1b      	ldrb	r3, [r3, #28]
 8008004:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008008:	b2da      	uxtb	r2, r3
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800800e:	f06f 0306 	mvn.w	r3, #6
 8008012:	e027      	b.n	8008064 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8008014:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801a:	2b00      	cmp	r3, #0
 800801c:	d005      	beq.n	800802a <netconn_recv_data_tcp+0xc6>
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008022:	2200      	movs	r2, #0
 8008024:	2101      	movs	r1, #1
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d10f      	bne.n	8008052 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8008032:	68f8      	ldr	r0, [r7, #12]
 8008034:	f000 f9a3 	bl	800837e <netconn_err>
 8008038:	4603      	mov	r3, r0
 800803a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800803e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008042:	2b00      	cmp	r3, #0
 8008044:	d002      	beq.n	800804c <netconn_recv_data_tcp+0xe8>
          return err;
 8008046:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800804a:	e00b      	b.n	8008064 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800804c:	f06f 030d 	mvn.w	r3, #13
 8008050:	e008      	b.n	8008064 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8008052:	2101      	movs	r1, #1
 8008054:	68f8      	ldr	r0, [r7, #12]
 8008056:	f000 f955 	bl	8008304 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800805a:	f06f 030e 	mvn.w	r3, #14
 800805e:	e001      	b.n	8008064 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8008060:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008064:	4618      	mov	r0, r3
 8008066:	3740      	adds	r7, #64	; 0x40
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b086      	sub	sp, #24
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8008076:	2300      	movs	r3, #0
 8008078:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d109      	bne.n	8008094 <netconn_recv+0x28>
 8008080:	4b32      	ldr	r3, [pc, #200]	; (800814c <netconn_recv+0xe0>)
 8008082:	f240 3263 	movw	r2, #867	; 0x363
 8008086:	4932      	ldr	r1, [pc, #200]	; (8008150 <netconn_recv+0xe4>)
 8008088:	4832      	ldr	r0, [pc, #200]	; (8008154 <netconn_recv+0xe8>)
 800808a:	f00e ff5f 	bl	8016f4c <iprintf>
 800808e:	f06f 030f 	mvn.w	r3, #15
 8008092:	e056      	b.n	8008142 <netconn_recv+0xd6>
  *new_buf = NULL;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	2200      	movs	r2, #0
 8008098:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d109      	bne.n	80080b4 <netconn_recv+0x48>
 80080a0:	4b2a      	ldr	r3, [pc, #168]	; (800814c <netconn_recv+0xe0>)
 80080a2:	f240 3265 	movw	r2, #869	; 0x365
 80080a6:	492c      	ldr	r1, [pc, #176]	; (8008158 <netconn_recv+0xec>)
 80080a8:	482a      	ldr	r0, [pc, #168]	; (8008154 <netconn_recv+0xe8>)
 80080aa:	f00e ff4f 	bl	8016f4c <iprintf>
 80080ae:	f06f 030f 	mvn.w	r3, #15
 80080b2:	e046      	b.n	8008142 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080bc:	2b10      	cmp	r3, #16
 80080be:	d13a      	bne.n	8008136 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 80080c0:	2300      	movs	r3, #0
 80080c2:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80080c4:	2006      	movs	r0, #6
 80080c6:	f002 fbcf 	bl	800a868 <memp_malloc>
 80080ca:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d102      	bne.n	80080d8 <netconn_recv+0x6c>
      return ERR_MEM;
 80080d2:	f04f 33ff 	mov.w	r3, #4294967295
 80080d6:	e034      	b.n	8008142 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 80080d8:	f107 030c 	add.w	r3, r7, #12
 80080dc:	2200      	movs	r2, #0
 80080de:	4619      	mov	r1, r3
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f7ff ff3f 	bl	8007f64 <netconn_recv_data_tcp>
 80080e6:	4603      	mov	r3, r0
 80080e8:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80080ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d006      	beq.n	8008100 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 80080f2:	6979      	ldr	r1, [r7, #20]
 80080f4:	2006      	movs	r0, #6
 80080f6:	f002 fc09 	bl	800a90c <memp_free>
      return err;
 80080fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80080fe:	e020      	b.n	8008142 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d106      	bne.n	8008114 <netconn_recv+0xa8>
 8008106:	4b11      	ldr	r3, [pc, #68]	; (800814c <netconn_recv+0xe0>)
 8008108:	f240 3279 	movw	r2, #889	; 0x379
 800810c:	4913      	ldr	r1, [pc, #76]	; (800815c <netconn_recv+0xf0>)
 800810e:	4811      	ldr	r0, [pc, #68]	; (8008154 <netconn_recv+0xe8>)
 8008110:	f00e ff1c 	bl	8016f4c <iprintf>

    buf->p = p;
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800811a:	68fa      	ldr	r2, [r7, #12]
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	2200      	movs	r2, #0
 8008124:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	2200      	movs	r2, #0
 800812a:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	697a      	ldr	r2, [r7, #20]
 8008130:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8008132:	2300      	movs	r3, #0
 8008134:	e005      	b.n	8008142 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8008136:	2200      	movs	r2, #0
 8008138:	6839      	ldr	r1, [r7, #0]
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f7ff fe1a 	bl	8007d74 <netconn_recv_data>
 8008140:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8008142:	4618      	mov	r0, r3
 8008144:	3718      	adds	r7, #24
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	08017e6c 	.word	0x08017e6c
 8008150:	08018084 	.word	0x08018084
 8008154:	08017ec4 	.word	0x08017ec4
 8008158:	080180a4 	.word	0x080180a4
 800815c:	0801811c 	.word	0x0801811c

08008160 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b088      	sub	sp, #32
 8008164:	af02      	add	r7, sp, #8
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	607a      	str	r2, [r7, #4]
 800816c:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8008176:	78fa      	ldrb	r2, [r7, #3]
 8008178:	f107 0110 	add.w	r1, r7, #16
 800817c:	6a3b      	ldr	r3, [r7, #32]
 800817e:	9300      	str	r3, [sp, #0]
 8008180:	4613      	mov	r3, r2
 8008182:	2201      	movs	r2, #1
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f000 f805 	bl	8008194 <netconn_write_vectors_partly>
 800818a:	4603      	mov	r3, r0
}
 800818c:	4618      	mov	r0, r3
 800818e:	3718      	adds	r7, #24
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b092      	sub	sp, #72	; 0x48
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	4611      	mov	r1, r2
 80081a0:	461a      	mov	r2, r3
 80081a2:	460b      	mov	r3, r1
 80081a4:	80fb      	strh	r3, [r7, #6]
 80081a6:	4613      	mov	r3, r2
 80081a8:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d109      	bne.n	80081c4 <netconn_write_vectors_partly+0x30>
 80081b0:	4b4e      	ldr	r3, [pc, #312]	; (80082ec <netconn_write_vectors_partly+0x158>)
 80081b2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80081b6:	494e      	ldr	r1, [pc, #312]	; (80082f0 <netconn_write_vectors_partly+0x15c>)
 80081b8:	484e      	ldr	r0, [pc, #312]	; (80082f4 <netconn_write_vectors_partly+0x160>)
 80081ba:	f00e fec7 	bl	8016f4c <iprintf>
 80081be:	f06f 030f 	mvn.w	r3, #15
 80081c2:	e08e      	b.n	80082e2 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081cc:	2b10      	cmp	r3, #16
 80081ce:	d009      	beq.n	80081e4 <netconn_write_vectors_partly+0x50>
 80081d0:	4b46      	ldr	r3, [pc, #280]	; (80082ec <netconn_write_vectors_partly+0x158>)
 80081d2:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80081d6:	4948      	ldr	r1, [pc, #288]	; (80082f8 <netconn_write_vectors_partly+0x164>)
 80081d8:	4846      	ldr	r0, [pc, #280]	; (80082f4 <netconn_write_vectors_partly+0x160>)
 80081da:	f00e feb7 	bl	8016f4c <iprintf>
 80081de:	f06f 0305 	mvn.w	r3, #5
 80081e2:	e07e      	b.n	80082e2 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	7f1b      	ldrb	r3, [r3, #28]
 80081e8:	f003 0302 	and.w	r3, r3, #2
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d104      	bne.n	80081fa <netconn_write_vectors_partly+0x66>
 80081f0:	797b      	ldrb	r3, [r7, #5]
 80081f2:	f003 0304 	and.w	r3, r3, #4
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d001      	beq.n	80081fe <netconn_write_vectors_partly+0x6a>
 80081fa:	2301      	movs	r3, #1
 80081fc:	e000      	b.n	8008200 <netconn_write_vectors_partly+0x6c>
 80081fe:	2300      	movs	r3, #0
 8008200:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8008204:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008208:	2b00      	cmp	r3, #0
 800820a:	d005      	beq.n	8008218 <netconn_write_vectors_partly+0x84>
 800820c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800820e:	2b00      	cmp	r3, #0
 8008210:	d102      	bne.n	8008218 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8008212:	f06f 0305 	mvn.w	r3, #5
 8008216:	e064      	b.n	80082e2 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8008218:	2300      	movs	r3, #0
 800821a:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800821c:	2300      	movs	r3, #0
 800821e:	643b      	str	r3, [r7, #64]	; 0x40
 8008220:	e015      	b.n	800824e <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8008222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008224:	00db      	lsls	r3, r3, #3
 8008226:	68ba      	ldr	r2, [r7, #8]
 8008228:	4413      	add	r3, r2
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800822e:	4413      	add	r3, r2
 8008230:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8008232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008234:	00db      	lsls	r3, r3, #3
 8008236:	68ba      	ldr	r2, [r7, #8]
 8008238:	4413      	add	r3, r2
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800823e:	429a      	cmp	r2, r3
 8008240:	d202      	bcs.n	8008248 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8008242:	f06f 0305 	mvn.w	r3, #5
 8008246:	e04c      	b.n	80082e2 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8008248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800824a:	3301      	adds	r3, #1
 800824c:	643b      	str	r3, [r7, #64]	; 0x40
 800824e:	88fb      	ldrh	r3, [r7, #6]
 8008250:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008252:	429a      	cmp	r2, r3
 8008254:	dbe5      	blt.n	8008222 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8008256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008258:	2b00      	cmp	r3, #0
 800825a:	d101      	bne.n	8008260 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800825c:	2300      	movs	r3, #0
 800825e:	e040      	b.n	80082e2 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8008260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008262:	2b00      	cmp	r3, #0
 8008264:	da0a      	bge.n	800827c <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8008266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008268:	2b00      	cmp	r3, #0
 800826a:	d102      	bne.n	8008272 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800826c:	f06f 0305 	mvn.w	r3, #5
 8008270:	e037      	b.n	80082e2 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8008272:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008276:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8008278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800827a:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8008284:	88fb      	ldrh	r3, [r7, #6]
 8008286:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8008288:	2300      	movs	r3, #0
 800828a:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800828c:	797b      	ldrb	r3, [r7, #5]
 800828e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8008292:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008294:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8008296:	2300      	movs	r3, #0
 8008298:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800829a:	f107 0314 	add.w	r3, r7, #20
 800829e:	4619      	mov	r1, r3
 80082a0:	4816      	ldr	r0, [pc, #88]	; (80082fc <netconn_write_vectors_partly+0x168>)
 80082a2:	f7ff fb9f 	bl	80079e4 <netconn_apimsg>
 80082a6:	4603      	mov	r3, r0
 80082a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 80082ac:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d114      	bne.n	80082de <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 80082b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d002      	beq.n	80082c0 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 80082ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082be:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 80082c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d10a      	bne.n	80082de <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 80082c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d006      	beq.n	80082de <netconn_write_vectors_partly+0x14a>
 80082d0:	4b06      	ldr	r3, [pc, #24]	; (80082ec <netconn_write_vectors_partly+0x158>)
 80082d2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80082d6:	490a      	ldr	r1, [pc, #40]	; (8008300 <netconn_write_vectors_partly+0x16c>)
 80082d8:	4806      	ldr	r0, [pc, #24]	; (80082f4 <netconn_write_vectors_partly+0x160>)
 80082da:	f00e fe37 	bl	8016f4c <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 80082de:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3748      	adds	r7, #72	; 0x48
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	08017e6c 	.word	0x08017e6c
 80082f0:	08018144 	.word	0x08018144
 80082f4:	08017ec4 	.word	0x08017ec4
 80082f8:	08018160 	.word	0x08018160
 80082fc:	08009925 	.word	0x08009925
 8008300:	08018184 	.word	0x08018184

08008304 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b08c      	sub	sp, #48	; 0x30
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	460b      	mov	r3, r1
 800830e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d109      	bne.n	800832a <netconn_close_shutdown+0x26>
 8008316:	4b0f      	ldr	r3, [pc, #60]	; (8008354 <netconn_close_shutdown+0x50>)
 8008318:	f240 4247 	movw	r2, #1095	; 0x447
 800831c:	490e      	ldr	r1, [pc, #56]	; (8008358 <netconn_close_shutdown+0x54>)
 800831e:	480f      	ldr	r0, [pc, #60]	; (800835c <netconn_close_shutdown+0x58>)
 8008320:	f00e fe14 	bl	8016f4c <iprintf>
 8008324:	f06f 030f 	mvn.w	r3, #15
 8008328:	e010      	b.n	800834c <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800832e:	78fb      	ldrb	r3, [r7, #3]
 8008330:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008332:	2329      	movs	r3, #41	; 0x29
 8008334:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8008336:	f107 030c 	add.w	r3, r7, #12
 800833a:	4619      	mov	r1, r3
 800833c:	4808      	ldr	r0, [pc, #32]	; (8008360 <netconn_close_shutdown+0x5c>)
 800833e:	f7ff fb51 	bl	80079e4 <netconn_apimsg>
 8008342:	4603      	mov	r3, r0
 8008344:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008348:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800834c:	4618      	mov	r0, r3
 800834e:	3730      	adds	r7, #48	; 0x30
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}
 8008354:	08017e6c 	.word	0x08017e6c
 8008358:	080181a8 	.word	0x080181a8
 800835c:	08017ec4 	.word	0x08017ec4
 8008360:	08009a3d 	.word	0x08009a3d

08008364 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800836c:	2103      	movs	r1, #3
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f7ff ffc8 	bl	8008304 <netconn_close_shutdown>
 8008374:	4603      	mov	r3, r0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3708      	adds	r7, #8
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b084      	sub	sp, #16
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d101      	bne.n	8008390 <netconn_err+0x12>
    return ERR_OK;
 800838c:	2300      	movs	r3, #0
 800838e:	e00d      	b.n	80083ac <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008390:	f00e fd4a 	bl	8016e28 <sys_arch_protect>
 8008394:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	7a1b      	ldrb	r3, [r3, #8]
 800839a:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 80083a2:	68f8      	ldr	r0, [r7, #12]
 80083a4:	f00e fd4e 	bl	8016e44 <sys_arch_unprotect>
  return err;
 80083a8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3710      	adds	r7, #16
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b082      	sub	sp, #8
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	4603      	mov	r3, r0
 80083bc:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 80083be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083c2:	f113 0f0e 	cmn.w	r3, #14
 80083c6:	d008      	beq.n	80083da <lwip_netconn_err_to_msg+0x26>
 80083c8:	f113 0f0d 	cmn.w	r3, #13
 80083cc:	d003      	beq.n	80083d6 <lwip_netconn_err_to_msg+0x22>
 80083ce:	f113 0f0f 	cmn.w	r3, #15
 80083d2:	d004      	beq.n	80083de <lwip_netconn_err_to_msg+0x2a>
 80083d4:	e005      	b.n	80083e2 <lwip_netconn_err_to_msg+0x2e>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 80083d6:	4b0a      	ldr	r3, [pc, #40]	; (8008400 <lwip_netconn_err_to_msg+0x4c>)
 80083d8:	e00e      	b.n	80083f8 <lwip_netconn_err_to_msg+0x44>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 80083da:	4b0a      	ldr	r3, [pc, #40]	; (8008404 <lwip_netconn_err_to_msg+0x50>)
 80083dc:	e00c      	b.n	80083f8 <lwip_netconn_err_to_msg+0x44>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80083de:	4b0a      	ldr	r3, [pc, #40]	; (8008408 <lwip_netconn_err_to_msg+0x54>)
 80083e0:	e00a      	b.n	80083f8 <lwip_netconn_err_to_msg+0x44>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80083e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d005      	beq.n	80083f6 <lwip_netconn_err_to_msg+0x42>
 80083ea:	4b08      	ldr	r3, [pc, #32]	; (800840c <lwip_netconn_err_to_msg+0x58>)
 80083ec:	227d      	movs	r2, #125	; 0x7d
 80083ee:	4908      	ldr	r1, [pc, #32]	; (8008410 <lwip_netconn_err_to_msg+0x5c>)
 80083f0:	4808      	ldr	r0, [pc, #32]	; (8008414 <lwip_netconn_err_to_msg+0x60>)
 80083f2:	f00e fdab 	bl	8016f4c <iprintf>
      return NULL;
 80083f6:	2300      	movs	r3, #0
  }
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3708      	adds	r7, #8
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	0801f984 	.word	0x0801f984
 8008404:	0801f985 	.word	0x0801f985
 8008408:	0801f986 	.word	0x0801f986
 800840c:	080181c4 	.word	0x080181c4
 8008410:	080181f8 	.word	0x080181f8
 8008414:	08018208 	.word	0x08018208

08008418 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d105      	bne.n	8008434 <lwip_netconn_is_err_msg+0x1c>
 8008428:	4b12      	ldr	r3, [pc, #72]	; (8008474 <lwip_netconn_is_err_msg+0x5c>)
 800842a:	2285      	movs	r2, #133	; 0x85
 800842c:	4912      	ldr	r1, [pc, #72]	; (8008478 <lwip_netconn_is_err_msg+0x60>)
 800842e:	4813      	ldr	r0, [pc, #76]	; (800847c <lwip_netconn_is_err_msg+0x64>)
 8008430:	f00e fd8c 	bl	8016f4c <iprintf>

  if (msg == &netconn_aborted) {
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	4a12      	ldr	r2, [pc, #72]	; (8008480 <lwip_netconn_is_err_msg+0x68>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d104      	bne.n	8008446 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	22f3      	movs	r2, #243	; 0xf3
 8008440:	701a      	strb	r2, [r3, #0]
    return 1;
 8008442:	2301      	movs	r3, #1
 8008444:	e012      	b.n	800846c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4a0e      	ldr	r2, [pc, #56]	; (8008484 <lwip_netconn_is_err_msg+0x6c>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d104      	bne.n	8008458 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	22f2      	movs	r2, #242	; 0xf2
 8008452:	701a      	strb	r2, [r3, #0]
    return 1;
 8008454:	2301      	movs	r3, #1
 8008456:	e009      	b.n	800846c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a0b      	ldr	r2, [pc, #44]	; (8008488 <lwip_netconn_is_err_msg+0x70>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d104      	bne.n	800846a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	22f1      	movs	r2, #241	; 0xf1
 8008464:	701a      	strb	r2, [r3, #0]
    return 1;
 8008466:	2301      	movs	r3, #1
 8008468:	e000      	b.n	800846c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3708      	adds	r7, #8
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	080181c4 	.word	0x080181c4
 8008478:	08018230 	.word	0x08018230
 800847c:	08018208 	.word	0x08018208
 8008480:	0801f984 	.word	0x0801f984
 8008484:	0801f985 	.word	0x0801f985
 8008488:	0801f986 	.word	0x0801f986

0800848c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b088      	sub	sp, #32
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	607a      	str	r2, [r7, #4]
 8008498:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d105      	bne.n	80084ac <recv_udp+0x20>
 80084a0:	4b34      	ldr	r3, [pc, #208]	; (8008574 <recv_udp+0xe8>)
 80084a2:	22e5      	movs	r2, #229	; 0xe5
 80084a4:	4934      	ldr	r1, [pc, #208]	; (8008578 <recv_udp+0xec>)
 80084a6:	4835      	ldr	r0, [pc, #212]	; (800857c <recv_udp+0xf0>)
 80084a8:	f00e fd50 	bl	8016f4c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d105      	bne.n	80084be <recv_udp+0x32>
 80084b2:	4b30      	ldr	r3, [pc, #192]	; (8008574 <recv_udp+0xe8>)
 80084b4:	22e6      	movs	r2, #230	; 0xe6
 80084b6:	4932      	ldr	r1, [pc, #200]	; (8008580 <recv_udp+0xf4>)
 80084b8:	4830      	ldr	r0, [pc, #192]	; (800857c <recv_udp+0xf0>)
 80084ba:	f00e fd47 	bl	8016f4c <iprintf>
  conn = (struct netconn *)arg;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d103      	bne.n	80084d0 <recv_udp+0x44>
    pbuf_free(p);
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f003 f84d 	bl	800b568 <pbuf_free>
    return;
 80084ce:	e04d      	b.n	800856c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80084d0:	69fb      	ldr	r3, [r7, #28]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	68ba      	ldr	r2, [r7, #8]
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d005      	beq.n	80084e6 <recv_udp+0x5a>
 80084da:	4b26      	ldr	r3, [pc, #152]	; (8008574 <recv_udp+0xe8>)
 80084dc:	22ee      	movs	r2, #238	; 0xee
 80084de:	4929      	ldr	r1, [pc, #164]	; (8008584 <recv_udp+0xf8>)
 80084e0:	4826      	ldr	r0, [pc, #152]	; (800857c <recv_udp+0xf0>)
 80084e2:	f00e fd33 	bl	8016f4c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	3310      	adds	r3, #16
 80084ea:	4618      	mov	r0, r3
 80084ec:	f00e fb81 	bl	8016bf2 <sys_mbox_valid>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d103      	bne.n	80084fe <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f003 f836 	bl	800b568 <pbuf_free>
    return;
 80084fc:	e036      	b.n	800856c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80084fe:	2006      	movs	r0, #6
 8008500:	f002 f9b2 	bl	800a868 <memp_malloc>
 8008504:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d103      	bne.n	8008514 <recv_udp+0x88>
    pbuf_free(p);
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f003 f82b 	bl	800b568 <pbuf_free>
    return;
 8008512:	e02b      	b.n	800856c <recv_udp+0xe0>
  } else {
    buf->p = p;
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d002      	beq.n	800852c <recv_udp+0xa0>
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	e000      	b.n	800852e <recv_udp+0xa2>
 800852c:	2300      	movs	r3, #0
 800852e:	69ba      	ldr	r2, [r7, #24]
 8008530:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8008532:	69bb      	ldr	r3, [r7, #24]
 8008534:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008536:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	891b      	ldrh	r3, [r3, #8]
 800853c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	3310      	adds	r3, #16
 8008542:	69b9      	ldr	r1, [r7, #24]
 8008544:	4618      	mov	r0, r3
 8008546:	f00e fadf 	bl	8016b08 <sys_mbox_trypost>
 800854a:	4603      	mov	r3, r0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d003      	beq.n	8008558 <recv_udp+0xcc>
    netbuf_delete(buf);
 8008550:	69b8      	ldr	r0, [r7, #24]
 8008552:	f001 faff 	bl	8009b54 <netbuf_delete>
    return;
 8008556:	e009      	b.n	800856c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800855c:	2b00      	cmp	r3, #0
 800855e:	d005      	beq.n	800856c <recv_udp+0xe0>
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008564:	8afa      	ldrh	r2, [r7, #22]
 8008566:	2100      	movs	r1, #0
 8008568:	69f8      	ldr	r0, [r7, #28]
 800856a:	4798      	blx	r3
  }
}
 800856c:	3720      	adds	r7, #32
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	080181c4 	.word	0x080181c4
 8008578:	0801823c 	.word	0x0801823c
 800857c:	08018208 	.word	0x08018208
 8008580:	08018260 	.word	0x08018260
 8008584:	08018280 	.word	0x08018280

08008588 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b088      	sub	sp, #32
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	607a      	str	r2, [r7, #4]
 8008594:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d106      	bne.n	80085aa <recv_tcp+0x22>
 800859c:	4b36      	ldr	r3, [pc, #216]	; (8008678 <recv_tcp+0xf0>)
 800859e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80085a2:	4936      	ldr	r1, [pc, #216]	; (800867c <recv_tcp+0xf4>)
 80085a4:	4836      	ldr	r0, [pc, #216]	; (8008680 <recv_tcp+0xf8>)
 80085a6:	f00e fcd1 	bl	8016f4c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d106      	bne.n	80085be <recv_tcp+0x36>
 80085b0:	4b31      	ldr	r3, [pc, #196]	; (8008678 <recv_tcp+0xf0>)
 80085b2:	f240 122d 	movw	r2, #301	; 0x12d
 80085b6:	4933      	ldr	r1, [pc, #204]	; (8008684 <recv_tcp+0xfc>)
 80085b8:	4831      	ldr	r0, [pc, #196]	; (8008680 <recv_tcp+0xf8>)
 80085ba:	f00e fcc7 	bl	8016f4c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80085be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d006      	beq.n	80085d4 <recv_tcp+0x4c>
 80085c6:	4b2c      	ldr	r3, [pc, #176]	; (8008678 <recv_tcp+0xf0>)
 80085c8:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80085cc:	492e      	ldr	r1, [pc, #184]	; (8008688 <recv_tcp+0x100>)
 80085ce:	482c      	ldr	r0, [pc, #176]	; (8008680 <recv_tcp+0xf8>)
 80085d0:	f00e fcbc 	bl	8016f4c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d102      	bne.n	80085e4 <recv_tcp+0x5c>
    return ERR_VAL;
 80085de:	f06f 0305 	mvn.w	r3, #5
 80085e2:	e045      	b.n	8008670 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	68ba      	ldr	r2, [r7, #8]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d006      	beq.n	80085fc <recv_tcp+0x74>
 80085ee:	4b22      	ldr	r3, [pc, #136]	; (8008678 <recv_tcp+0xf0>)
 80085f0:	f240 1235 	movw	r2, #309	; 0x135
 80085f4:	4925      	ldr	r1, [pc, #148]	; (800868c <recv_tcp+0x104>)
 80085f6:	4822      	ldr	r0, [pc, #136]	; (8008680 <recv_tcp+0xf8>)
 80085f8:	f00e fca8 	bl	8016f4c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	3310      	adds	r3, #16
 8008600:	4618      	mov	r0, r3
 8008602:	f00e faf6 	bl	8016bf2 <sys_mbox_valid>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d10d      	bne.n	8008628 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d008      	beq.n	8008624 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	891b      	ldrh	r3, [r3, #8]
 8008616:	4619      	mov	r1, r3
 8008618:	68b8      	ldr	r0, [r7, #8]
 800861a:	f003 ff63 	bl	800c4e4 <tcp_recved>
      pbuf_free(p);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f002 ffa2 	bl	800b568 <pbuf_free>
    }
    return ERR_OK;
 8008624:	2300      	movs	r3, #0
 8008626:	e023      	b.n	8008670 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d005      	beq.n	800863a <recv_tcp+0xb2>
    msg = p;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	891b      	ldrh	r3, [r3, #8]
 8008636:	83fb      	strh	r3, [r7, #30]
 8008638:	e003      	b.n	8008642 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800863a:	4b15      	ldr	r3, [pc, #84]	; (8008690 <recv_tcp+0x108>)
 800863c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800863e:	2300      	movs	r3, #0
 8008640:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	3310      	adds	r3, #16
 8008646:	69b9      	ldr	r1, [r7, #24]
 8008648:	4618      	mov	r0, r3
 800864a:	f00e fa5d 	bl	8016b08 <sys_mbox_trypost>
 800864e:	4603      	mov	r3, r0
 8008650:	2b00      	cmp	r3, #0
 8008652:	d002      	beq.n	800865a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8008654:	f04f 33ff 	mov.w	r3, #4294967295
 8008658:	e00a      	b.n	8008670 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865e:	2b00      	cmp	r3, #0
 8008660:	d005      	beq.n	800866e <recv_tcp+0xe6>
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008666:	8bfa      	ldrh	r2, [r7, #30]
 8008668:	2100      	movs	r1, #0
 800866a:	6978      	ldr	r0, [r7, #20]
 800866c:	4798      	blx	r3
  }

  return ERR_OK;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	3720      	adds	r7, #32
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	080181c4 	.word	0x080181c4
 800867c:	080182a0 	.word	0x080182a0
 8008680:	08018208 	.word	0x08018208
 8008684:	080182c4 	.word	0x080182c4
 8008688:	080182e4 	.word	0x080182e4
 800868c:	080182fc 	.word	0x080182fc
 8008690:	0801f986 	.word	0x0801f986

08008694 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d106      	bne.n	80086b6 <poll_tcp+0x22>
 80086a8:	4b29      	ldr	r3, [pc, #164]	; (8008750 <poll_tcp+0xbc>)
 80086aa:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 80086ae:	4929      	ldr	r1, [pc, #164]	; (8008754 <poll_tcp+0xc0>)
 80086b0:	4829      	ldr	r0, [pc, #164]	; (8008758 <poll_tcp+0xc4>)
 80086b2:	f00e fc4b 	bl	8016f4c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	785b      	ldrb	r3, [r3, #1]
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d104      	bne.n	80086c8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80086be:	2101      	movs	r1, #1
 80086c0:	68f8      	ldr	r0, [r7, #12]
 80086c2:	f000 ff63 	bl	800958c <lwip_netconn_do_writemore>
 80086c6:	e016      	b.n	80086f6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	785b      	ldrb	r3, [r3, #1]
 80086cc:	2b04      	cmp	r3, #4
 80086ce:	d112      	bne.n	80086f6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6a1b      	ldr	r3, [r3, #32]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00a      	beq.n	80086ee <poll_tcp+0x5a>
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6a1b      	ldr	r3, [r3, #32]
 80086dc:	7a5b      	ldrb	r3, [r3, #9]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d005      	beq.n	80086ee <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6a1b      	ldr	r3, [r3, #32]
 80086e6:	7a5a      	ldrb	r2, [r3, #9]
 80086e8:	3a01      	subs	r2, #1
 80086ea:	b2d2      	uxtb	r2, r2
 80086ec:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80086ee:	2101      	movs	r1, #1
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f000 fbf7 	bl	8008ee4 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	7f1b      	ldrb	r3, [r3, #28]
 80086fa:	f003 0310 	and.w	r3, r3, #16
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d021      	beq.n	8008746 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d01d      	beq.n	8008746 <poll_tcp+0xb2>
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008712:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008716:	d316      	bcc.n	8008746 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008720:	2b04      	cmp	r3, #4
 8008722:	d810      	bhi.n	8008746 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	7f1b      	ldrb	r3, [r3, #28]
 8008728:	f023 0310 	bic.w	r3, r3, #16
 800872c:	b2da      	uxtb	r2, r3
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008736:	2b00      	cmp	r3, #0
 8008738:	d005      	beq.n	8008746 <poll_tcp+0xb2>
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873e:	2200      	movs	r2, #0
 8008740:	2102      	movs	r1, #2
 8008742:	68f8      	ldr	r0, [r7, #12]
 8008744:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008746:	2300      	movs	r3, #0
}
 8008748:	4618      	mov	r0, r3
 800874a:	3710      	adds	r7, #16
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}
 8008750:	080181c4 	.word	0x080181c4
 8008754:	0801831c 	.word	0x0801831c
 8008758:	08018208 	.word	0x08018208

0800875c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b086      	sub	sp, #24
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	4613      	mov	r3, r2
 8008768:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d106      	bne.n	8008782 <sent_tcp+0x26>
 8008774:	4b20      	ldr	r3, [pc, #128]	; (80087f8 <sent_tcp+0x9c>)
 8008776:	f240 1293 	movw	r2, #403	; 0x193
 800877a:	4920      	ldr	r1, [pc, #128]	; (80087fc <sent_tcp+0xa0>)
 800877c:	4820      	ldr	r0, [pc, #128]	; (8008800 <sent_tcp+0xa4>)
 800877e:	f00e fbe5 	bl	8016f4c <iprintf>

  if (conn) {
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d032      	beq.n	80087ee <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	785b      	ldrb	r3, [r3, #1]
 800878c:	2b01      	cmp	r3, #1
 800878e:	d104      	bne.n	800879a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008790:	2101      	movs	r1, #1
 8008792:	6978      	ldr	r0, [r7, #20]
 8008794:	f000 fefa 	bl	800958c <lwip_netconn_do_writemore>
 8008798:	e007      	b.n	80087aa <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	785b      	ldrb	r3, [r3, #1]
 800879e:	2b04      	cmp	r3, #4
 80087a0:	d103      	bne.n	80087aa <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80087a2:	2101      	movs	r1, #1
 80087a4:	6978      	ldr	r0, [r7, #20]
 80087a6:	f000 fb9d 	bl	8008ee4 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d01d      	beq.n	80087ee <sent_tcp+0x92>
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80087ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087be:	d316      	bcc.n	80087ee <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80087c8:	2b04      	cmp	r3, #4
 80087ca:	d810      	bhi.n	80087ee <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	7f1b      	ldrb	r3, [r3, #28]
 80087d0:	f023 0310 	bic.w	r3, r3, #16
 80087d4:	b2da      	uxtb	r2, r3
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d005      	beq.n	80087ee <sent_tcp+0x92>
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e6:	88fa      	ldrh	r2, [r7, #6]
 80087e8:	2102      	movs	r1, #2
 80087ea:	6978      	ldr	r0, [r7, #20]
 80087ec:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3718      	adds	r7, #24
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	080181c4 	.word	0x080181c4
 80087fc:	0801831c 	.word	0x0801831c
 8008800:	08018208 	.word	0x08018208

08008804 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b088      	sub	sp, #32
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	460b      	mov	r3, r1
 800880e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d106      	bne.n	8008828 <err_tcp+0x24>
 800881a:	4b5f      	ldr	r3, [pc, #380]	; (8008998 <err_tcp+0x194>)
 800881c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8008820:	495e      	ldr	r1, [pc, #376]	; (800899c <err_tcp+0x198>)
 8008822:	485f      	ldr	r0, [pc, #380]	; (80089a0 <err_tcp+0x19c>)
 8008824:	f00e fb92 	bl	8016f4c <iprintf>

  SYS_ARCH_PROTECT(lev);
 8008828:	f00e fafe 	bl	8016e28 <sys_arch_protect>
 800882c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800882e:	69fb      	ldr	r3, [r7, #28]
 8008830:	2200      	movs	r2, #0
 8008832:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	78fa      	ldrb	r2, [r7, #3]
 8008838:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	7f1b      	ldrb	r3, [r3, #28]
 800883e:	f043 0301 	orr.w	r3, r3, #1
 8008842:	b2da      	uxtb	r2, r3
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	785b      	ldrb	r3, [r3, #1]
 800884c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	2200      	movs	r2, #0
 8008852:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8008854:	69b8      	ldr	r0, [r7, #24]
 8008856:	f00e faf5 	bl	8016e44 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800885a:	69fb      	ldr	r3, [r7, #28]
 800885c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885e:	2b00      	cmp	r3, #0
 8008860:	d005      	beq.n	800886e <err_tcp+0x6a>
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008866:	2200      	movs	r2, #0
 8008868:	2104      	movs	r1, #4
 800886a:	69f8      	ldr	r0, [r7, #28]
 800886c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008872:	2b00      	cmp	r3, #0
 8008874:	d005      	beq.n	8008882 <err_tcp+0x7e>
 8008876:	69fb      	ldr	r3, [r7, #28]
 8008878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887a:	2200      	movs	r2, #0
 800887c:	2100      	movs	r1, #0
 800887e:	69f8      	ldr	r0, [r7, #28]
 8008880:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008886:	2b00      	cmp	r3, #0
 8008888:	d005      	beq.n	8008896 <err_tcp+0x92>
 800888a:	69fb      	ldr	r3, [r7, #28]
 800888c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888e:	2200      	movs	r2, #0
 8008890:	2102      	movs	r1, #2
 8008892:	69f8      	ldr	r0, [r7, #28]
 8008894:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8008896:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800889a:	4618      	mov	r0, r3
 800889c:	f7ff fd8a 	bl	80083b4 <lwip_netconn_err_to_msg>
 80088a0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80088a2:	69fb      	ldr	r3, [r7, #28]
 80088a4:	3310      	adds	r3, #16
 80088a6:	4618      	mov	r0, r3
 80088a8:	f00e f9a3 	bl	8016bf2 <sys_mbox_valid>
 80088ac:	4603      	mov	r3, r0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d005      	beq.n	80088be <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	3310      	adds	r3, #16
 80088b6:	6939      	ldr	r1, [r7, #16]
 80088b8:	4618      	mov	r0, r3
 80088ba:	f00e f925 	bl	8016b08 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	3314      	adds	r3, #20
 80088c2:	4618      	mov	r0, r3
 80088c4:	f00e f995 	bl	8016bf2 <sys_mbox_valid>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d005      	beq.n	80088da <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80088ce:	69fb      	ldr	r3, [r7, #28]
 80088d0:	3314      	adds	r3, #20
 80088d2:	6939      	ldr	r1, [r7, #16]
 80088d4:	4618      	mov	r0, r3
 80088d6:	f00e f917 	bl	8016b08 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80088da:	7dfb      	ldrb	r3, [r7, #23]
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d005      	beq.n	80088ec <err_tcp+0xe8>
 80088e0:	7dfb      	ldrb	r3, [r7, #23]
 80088e2:	2b04      	cmp	r3, #4
 80088e4:	d002      	beq.n	80088ec <err_tcp+0xe8>
 80088e6:	7dfb      	ldrb	r3, [r7, #23]
 80088e8:	2b03      	cmp	r3, #3
 80088ea:	d143      	bne.n	8008974 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	7f1b      	ldrb	r3, [r3, #28]
 80088f0:	f003 0304 	and.w	r3, r3, #4
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	bf14      	ite	ne
 80088f8:	2301      	movne	r3, #1
 80088fa:	2300      	moveq	r3, #0
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	7f1b      	ldrb	r3, [r3, #28]
 8008904:	f023 0304 	bic.w	r3, r3, #4
 8008908:	b2da      	uxtb	r2, r3
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d13b      	bne.n	800898c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	6a1b      	ldr	r3, [r3, #32]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d106      	bne.n	800892a <err_tcp+0x126>
 800891c:	4b1e      	ldr	r3, [pc, #120]	; (8008998 <err_tcp+0x194>)
 800891e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008922:	4920      	ldr	r1, [pc, #128]	; (80089a4 <err_tcp+0x1a0>)
 8008924:	481e      	ldr	r0, [pc, #120]	; (80089a0 <err_tcp+0x19c>)
 8008926:	f00e fb11 	bl	8016f4c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800892a:	7dfb      	ldrb	r3, [r7, #23]
 800892c:	2b04      	cmp	r3, #4
 800892e:	d104      	bne.n	800893a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	6a1b      	ldr	r3, [r3, #32]
 8008934:	2200      	movs	r2, #0
 8008936:	711a      	strb	r2, [r3, #4]
 8008938:	e003      	b.n	8008942 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800893a:	69fb      	ldr	r3, [r7, #28]
 800893c:	6a1b      	ldr	r3, [r3, #32]
 800893e:	78fa      	ldrb	r2, [r7, #3]
 8008940:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	6a1b      	ldr	r3, [r3, #32]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	330c      	adds	r3, #12
 800894a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800894c:	68b8      	ldr	r0, [r7, #8]
 800894e:	f00e f9e1 	bl	8016d14 <sys_sem_valid>
 8008952:	4603      	mov	r3, r0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d106      	bne.n	8008966 <err_tcp+0x162>
 8008958:	4b0f      	ldr	r3, [pc, #60]	; (8008998 <err_tcp+0x194>)
 800895a:	f240 12ef 	movw	r2, #495	; 0x1ef
 800895e:	4912      	ldr	r1, [pc, #72]	; (80089a8 <err_tcp+0x1a4>)
 8008960:	480f      	ldr	r0, [pc, #60]	; (80089a0 <err_tcp+0x19c>)
 8008962:	f00e faf3 	bl	8016f4c <iprintf>
      conn->current_msg = NULL;
 8008966:	69fb      	ldr	r3, [r7, #28]
 8008968:	2200      	movs	r2, #0
 800896a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800896c:	68b8      	ldr	r0, [r7, #8]
 800896e:	f00e f9b7 	bl	8016ce0 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8008972:	e00b      	b.n	800898c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	6a1b      	ldr	r3, [r3, #32]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d008      	beq.n	800898e <err_tcp+0x18a>
 800897c:	4b06      	ldr	r3, [pc, #24]	; (8008998 <err_tcp+0x194>)
 800897e:	f240 12f7 	movw	r2, #503	; 0x1f7
 8008982:	490a      	ldr	r1, [pc, #40]	; (80089ac <err_tcp+0x1a8>)
 8008984:	4806      	ldr	r0, [pc, #24]	; (80089a0 <err_tcp+0x19c>)
 8008986:	f00e fae1 	bl	8016f4c <iprintf>
  }
}
 800898a:	e000      	b.n	800898e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800898c:	bf00      	nop
}
 800898e:	bf00      	nop
 8008990:	3720      	adds	r7, #32
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	080181c4 	.word	0x080181c4
 800899c:	0801831c 	.word	0x0801831c
 80089a0:	08018208 	.word	0x08018208
 80089a4:	0801832c 	.word	0x0801832c
 80089a8:	08018348 	.word	0x08018348
 80089ac:	08018364 	.word	0x08018364

080089b0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 80089be:	6879      	ldr	r1, [r7, #4]
 80089c0:	68f8      	ldr	r0, [r7, #12]
 80089c2:	f004 fc51 	bl	800d268 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80089c6:	490a      	ldr	r1, [pc, #40]	; (80089f0 <setup_tcp+0x40>)
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	f004 fc5f 	bl	800d28c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80089ce:	4909      	ldr	r1, [pc, #36]	; (80089f4 <setup_tcp+0x44>)
 80089d0:	68f8      	ldr	r0, [r7, #12]
 80089d2:	f004 fc7d 	bl	800d2d0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80089d6:	2202      	movs	r2, #2
 80089d8:	4907      	ldr	r1, [pc, #28]	; (80089f8 <setup_tcp+0x48>)
 80089da:	68f8      	ldr	r0, [r7, #12]
 80089dc:	f004 fcd4 	bl	800d388 <tcp_poll>
  tcp_err(pcb, err_tcp);
 80089e0:	4906      	ldr	r1, [pc, #24]	; (80089fc <setup_tcp+0x4c>)
 80089e2:	68f8      	ldr	r0, [r7, #12]
 80089e4:	f004 fc96 	bl	800d314 <tcp_err>
}
 80089e8:	bf00      	nop
 80089ea:	3710      	adds	r7, #16
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}
 80089f0:	08008589 	.word	0x08008589
 80089f4:	0800875d 	.word	0x0800875d
 80089f8:	08008695 	.word	0x08008695
 80089fc:	08008805 	.word	0x08008805

08008a00 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8008a00:	b590      	push	{r4, r7, lr}
 8008a02:	b089      	sub	sp, #36	; 0x24
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d102      	bne.n	8008a1e <accept_function+0x1e>
    return ERR_VAL;
 8008a18:	f06f 0305 	mvn.w	r3, #5
 8008a1c:	e0a1      	b.n	8008b62 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8008a1e:	69fb      	ldr	r3, [r7, #28]
 8008a20:	3314      	adds	r3, #20
 8008a22:	4618      	mov	r0, r3
 8008a24:	f00e f8e5 	bl	8016bf2 <sys_mbox_valid>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d102      	bne.n	8008a34 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8008a2e:	f06f 0305 	mvn.w	r3, #5
 8008a32:	e096      	b.n	8008b62 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d11b      	bne.n	8008a72 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	f103 0414 	add.w	r4, r3, #20
 8008a40:	f06f 000c 	mvn.w	r0, #12
 8008a44:	f7ff fcb6 	bl	80083b4 <lwip_netconn_err_to_msg>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	f00e f85b 	bl	8016b08 <sys_mbox_trypost>
 8008a52:	4603      	mov	r3, r0
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d109      	bne.n	8008a6c <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d005      	beq.n	8008a6c <accept_function+0x6c>
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a64:	2200      	movs	r2, #0
 8008a66:	2100      	movs	r1, #0
 8008a68:	69f8      	ldr	r0, [r7, #28]
 8008a6a:	4798      	blx	r3
    }
    return ERR_VAL;
 8008a6c:	f06f 0305 	mvn.w	r3, #5
 8008a70:	e077      	b.n	8008b62 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8008a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d006      	beq.n	8008a88 <accept_function+0x88>
 8008a7a:	4b3c      	ldr	r3, [pc, #240]	; (8008b6c <accept_function+0x16c>)
 8008a7c:	f240 222a 	movw	r2, #554	; 0x22a
 8008a80:	493b      	ldr	r1, [pc, #236]	; (8008b70 <accept_function+0x170>)
 8008a82:	483c      	ldr	r0, [pc, #240]	; (8008b74 <accept_function+0x174>)
 8008a84:	f00e fa62 	bl	8016f4c <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	781a      	ldrb	r2, [r3, #0]
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a90:	4619      	mov	r1, r3
 8008a92:	4610      	mov	r0, r2
 8008a94:	f000 f8f0 	bl	8008c78 <netconn_alloc>
 8008a98:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d11b      	bne.n	8008ad8 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	f103 0414 	add.w	r4, r3, #20
 8008aa6:	f06f 000c 	mvn.w	r0, #12
 8008aaa:	f7ff fc83 	bl	80083b4 <lwip_netconn_err_to_msg>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	f00e f828 	bl	8016b08 <sys_mbox_trypost>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d109      	bne.n	8008ad2 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d005      	beq.n	8008ad2 <accept_function+0xd2>
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aca:	2200      	movs	r2, #0
 8008acc:	2100      	movs	r1, #0
 8008ace:	69f8      	ldr	r0, [r7, #28]
 8008ad0:	4798      	blx	r3
    }
    return ERR_MEM;
 8008ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ad6:	e044      	b.n	8008b62 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	68ba      	ldr	r2, [r7, #8]
 8008adc:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8008ade:	69b8      	ldr	r0, [r7, #24]
 8008ae0:	f7ff ff66 	bl	80089b0 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	3314      	adds	r3, #20
 8008ae8:	69b9      	ldr	r1, [r7, #24]
 8008aea:	4618      	mov	r0, r3
 8008aec:	f00e f80c 	bl	8016b08 <sys_mbox_trypost>
 8008af0:	4603      	mov	r3, r0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d02a      	beq.n	8008b4c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8008af6:	69bb      	ldr	r3, [r7, #24]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8008afc:	2100      	movs	r1, #0
 8008afe:	6978      	ldr	r0, [r7, #20]
 8008b00:	f004 fbb2 	bl	800d268 <tcp_arg>
    tcp_recv(pcb, NULL);
 8008b04:	2100      	movs	r1, #0
 8008b06:	6978      	ldr	r0, [r7, #20]
 8008b08:	f004 fbc0 	bl	800d28c <tcp_recv>
    tcp_sent(pcb, NULL);
 8008b0c:	2100      	movs	r1, #0
 8008b0e:	6978      	ldr	r0, [r7, #20]
 8008b10:	f004 fbde 	bl	800d2d0 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8008b14:	2200      	movs	r2, #0
 8008b16:	2100      	movs	r1, #0
 8008b18:	6978      	ldr	r0, [r7, #20]
 8008b1a:	f004 fc35 	bl	800d388 <tcp_poll>
    tcp_err(pcb, NULL);
 8008b1e:	2100      	movs	r1, #0
 8008b20:	6978      	ldr	r0, [r7, #20]
 8008b22:	f004 fbf7 	bl	800d314 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8008b2c:	69bb      	ldr	r3, [r7, #24]
 8008b2e:	3310      	adds	r3, #16
 8008b30:	4618      	mov	r0, r3
 8008b32:	f00d ffd7 	bl	8016ae4 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	3310      	adds	r3, #16
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f00e f86a 	bl	8016c14 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8008b40:	69b8      	ldr	r0, [r7, #24]
 8008b42:	f000 f907 	bl	8008d54 <netconn_free>
    return ERR_MEM;
 8008b46:	f04f 33ff 	mov.w	r3, #4294967295
 8008b4a:	e00a      	b.n	8008b62 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d005      	beq.n	8008b60 <accept_function+0x160>
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b58:	2200      	movs	r2, #0
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	69f8      	ldr	r0, [r7, #28]
 8008b5e:	4798      	blx	r3
  }

  return ERR_OK;
 8008b60:	2300      	movs	r3, #0
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3724      	adds	r7, #36	; 0x24
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd90      	pop	{r4, r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	080181c4 	.word	0x080181c4
 8008b70:	08018380 	.word	0x08018380
 8008b74:	08018208 	.word	0x08018208

08008b78 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8008b78:	b590      	push	{r4, r7, lr}
 8008b7a:	b085      	sub	sp, #20
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8008b80:	2300      	movs	r3, #0
 8008b82:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d006      	beq.n	8008b9c <pcb_new+0x24>
 8008b8e:	4b2b      	ldr	r3, [pc, #172]	; (8008c3c <pcb_new+0xc4>)
 8008b90:	f240 2265 	movw	r2, #613	; 0x265
 8008b94:	492a      	ldr	r1, [pc, #168]	; (8008c40 <pcb_new+0xc8>)
 8008b96:	482b      	ldr	r0, [pc, #172]	; (8008c44 <pcb_new+0xcc>)
 8008b98:	f00e f9d8 	bl	8016f4c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ba6:	2b10      	cmp	r3, #16
 8008ba8:	d022      	beq.n	8008bf0 <pcb_new+0x78>
 8008baa:	2b20      	cmp	r3, #32
 8008bac:	d133      	bne.n	8008c16 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681c      	ldr	r4, [r3, #0]
 8008bb2:	7bfb      	ldrb	r3, [r7, #15]
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f009 fe06 	bl	80127c6 <udp_new_ip_type>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d02a      	beq.n	8008c1e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	2b22      	cmp	r3, #34	; 0x22
 8008bd0:	d104      	bne.n	8008bdc <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	6858      	ldr	r0, [r3, #4]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	461a      	mov	r2, r3
 8008be8:	4917      	ldr	r1, [pc, #92]	; (8008c48 <pcb_new+0xd0>)
 8008bea:	f009 fd73 	bl	80126d4 <udp_recv>
      }
      break;
 8008bee:	e016      	b.n	8008c1e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681c      	ldr	r4, [r3, #0]
 8008bf4:	7bfb      	ldrb	r3, [r7, #15]
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f004 fb28 	bl	800d24c <tcp_new_ip_type>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d00b      	beq.n	8008c22 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7ff fece 	bl	80089b0 <setup_tcp>
      }
      break;
 8008c14:	e005      	b.n	8008c22 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	22fa      	movs	r2, #250	; 0xfa
 8008c1a:	711a      	strb	r2, [r3, #4]
      return;
 8008c1c:	e00a      	b.n	8008c34 <pcb_new+0xbc>
      break;
 8008c1e:	bf00      	nop
 8008c20:	e000      	b.n	8008c24 <pcb_new+0xac>
      break;
 8008c22:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d102      	bne.n	8008c34 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	22ff      	movs	r2, #255	; 0xff
 8008c32:	711a      	strb	r2, [r3, #4]
  }
}
 8008c34:	3714      	adds	r7, #20
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd90      	pop	{r4, r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	080181c4 	.word	0x080181c4
 8008c40:	080183a8 	.word	0x080183a8
 8008c44:	08018208 	.word	0x08018208
 8008c48:	0800848d 	.word	0x0800848d

08008c4c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d102      	bne.n	8008c6e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8008c68:	68f8      	ldr	r0, [r7, #12]
 8008c6a:	f7ff ff85 	bl	8008b78 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8008c6e:	bf00      	nop
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
	...

08008c78 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b086      	sub	sp, #24
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	4603      	mov	r3, r0
 8008c80:	6039      	str	r1, [r7, #0]
 8008c82:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8008c84:	2300      	movs	r3, #0
 8008c86:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8008c88:	2007      	movs	r0, #7
 8008c8a:	f001 fded 	bl	800a868 <memp_malloc>
 8008c8e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d101      	bne.n	8008c9a <netconn_alloc+0x22>
    return NULL;
 8008c96:	2300      	movs	r3, #0
 8008c98:	e052      	b.n	8008d40 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	79fa      	ldrb	r2, [r7, #7]
 8008ca4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8008cac:	79fb      	ldrb	r3, [r7, #7]
 8008cae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008cb2:	2b10      	cmp	r3, #16
 8008cb4:	d004      	beq.n	8008cc0 <netconn_alloc+0x48>
 8008cb6:	2b20      	cmp	r3, #32
 8008cb8:	d105      	bne.n	8008cc6 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8008cba:	2306      	movs	r3, #6
 8008cbc:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8008cbe:	e00a      	b.n	8008cd6 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8008cc0:	2306      	movs	r3, #6
 8008cc2:	617b      	str	r3, [r7, #20]
      break;
 8008cc4:	e007      	b.n	8008cd6 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8008cc6:	4b20      	ldr	r3, [pc, #128]	; (8008d48 <netconn_alloc+0xd0>)
 8008cc8:	f240 22e5 	movw	r2, #741	; 0x2e5
 8008ccc:	491f      	ldr	r1, [pc, #124]	; (8008d4c <netconn_alloc+0xd4>)
 8008cce:	4820      	ldr	r0, [pc, #128]	; (8008d50 <netconn_alloc+0xd8>)
 8008cd0:	f00e f93c 	bl	8016f4c <iprintf>
      goto free_and_return;
 8008cd4:	e02f      	b.n	8008d36 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	3310      	adds	r3, #16
 8008cda:	6979      	ldr	r1, [r7, #20]
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f00d fedf 	bl	8016aa0 <sys_mbox_new>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d125      	bne.n	8008d34 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	330c      	adds	r3, #12
 8008cec:	2100      	movs	r1, #0
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f00d ff9d 	bl	8016c2e <sys_sem_new>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d005      	beq.n	8008d06 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	3310      	adds	r3, #16
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f00d fef0 	bl	8016ae4 <sys_mbox_free>
    goto free_and_return;
 8008d04:	e017      	b.n	8008d36 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	3314      	adds	r3, #20
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f00d ff82 	bl	8016c14 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2200      	movs	r2, #0
 8008d14:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f04f 32ff 	mov.w	r2, #4294967295
 8008d1c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	683a      	ldr	r2, [r7, #0]
 8008d22:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2200      	movs	r2, #0
 8008d28:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	7cfa      	ldrb	r2, [r7, #19]
 8008d2e:	771a      	strb	r2, [r3, #28]
  return conn;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	e005      	b.n	8008d40 <netconn_alloc+0xc8>
    goto free_and_return;
 8008d34:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8008d36:	68f9      	ldr	r1, [r7, #12]
 8008d38:	2007      	movs	r0, #7
 8008d3a:	f001 fde7 	bl	800a90c <memp_free>
  return NULL;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3718      	adds	r7, #24
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	080181c4 	.word	0x080181c4
 8008d4c:	080183c8 	.word	0x080183c8
 8008d50:	08018208 	.word	0x08018208

08008d54 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d006      	beq.n	8008d72 <netconn_free+0x1e>
 8008d64:	4b1b      	ldr	r3, [pc, #108]	; (8008dd4 <netconn_free+0x80>)
 8008d66:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008d6a:	491b      	ldr	r1, [pc, #108]	; (8008dd8 <netconn_free+0x84>)
 8008d6c:	481b      	ldr	r0, [pc, #108]	; (8008ddc <netconn_free+0x88>)
 8008d6e:	f00e f8ed 	bl	8016f4c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	3310      	adds	r3, #16
 8008d76:	4618      	mov	r0, r3
 8008d78:	f00d ff3b 	bl	8016bf2 <sys_mbox_valid>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d006      	beq.n	8008d90 <netconn_free+0x3c>
 8008d82:	4b14      	ldr	r3, [pc, #80]	; (8008dd4 <netconn_free+0x80>)
 8008d84:	f44f 7249 	mov.w	r2, #804	; 0x324
 8008d88:	4915      	ldr	r1, [pc, #84]	; (8008de0 <netconn_free+0x8c>)
 8008d8a:	4814      	ldr	r0, [pc, #80]	; (8008ddc <netconn_free+0x88>)
 8008d8c:	f00e f8de 	bl	8016f4c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	3314      	adds	r3, #20
 8008d94:	4618      	mov	r0, r3
 8008d96:	f00d ff2c 	bl	8016bf2 <sys_mbox_valid>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d006      	beq.n	8008dae <netconn_free+0x5a>
 8008da0:	4b0c      	ldr	r3, [pc, #48]	; (8008dd4 <netconn_free+0x80>)
 8008da2:	f240 3227 	movw	r2, #807	; 0x327
 8008da6:	490f      	ldr	r1, [pc, #60]	; (8008de4 <netconn_free+0x90>)
 8008da8:	480c      	ldr	r0, [pc, #48]	; (8008ddc <netconn_free+0x88>)
 8008daa:	f00e f8cf 	bl	8016f4c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	330c      	adds	r3, #12
 8008db2:	4618      	mov	r0, r3
 8008db4:	f00d ffa1 	bl	8016cfa <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	330c      	adds	r3, #12
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f00d ffba 	bl	8016d36 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8008dc2:	6879      	ldr	r1, [r7, #4]
 8008dc4:	2007      	movs	r0, #7
 8008dc6:	f001 fda1 	bl	800a90c <memp_free>
}
 8008dca:	bf00      	nop
 8008dcc:	3708      	adds	r7, #8
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	080181c4 	.word	0x080181c4
 8008dd8:	080183f0 	.word	0x080183f0
 8008ddc:	08018208 	.word	0x08018208
 8008de0:	08018420 	.word	0x08018420
 8008de4:	0801845c 	.word	0x0801845c

08008de8 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b086      	sub	sp, #24
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	3310      	adds	r3, #16
 8008df4:	4618      	mov	r0, r3
 8008df6:	f00d fefc 	bl	8016bf2 <sys_mbox_valid>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d02f      	beq.n	8008e60 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008e00:	e018      	b.n	8008e34 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e0a:	2b10      	cmp	r3, #16
 8008e0c:	d10e      	bne.n	8008e2c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	f107 020f 	add.w	r2, r7, #15
 8008e14:	4611      	mov	r1, r2
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7ff fafe 	bl	8008418 <lwip_netconn_is_err_msg>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d108      	bne.n	8008e34 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	4618      	mov	r0, r3
 8008e26:	f002 fb9f 	bl	800b568 <pbuf_free>
 8008e2a:	e003      	b.n	8008e34 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f000 fe90 	bl	8009b54 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	3310      	adds	r3, #16
 8008e38:	f107 0210 	add.w	r2, r7, #16
 8008e3c:	4611      	mov	r1, r2
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f00d febb 	bl	8016bba <sys_arch_mbox_tryfetch>
 8008e44:	4603      	mov	r3, r0
 8008e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e4a:	d1da      	bne.n	8008e02 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	3310      	adds	r3, #16
 8008e50:	4618      	mov	r0, r3
 8008e52:	f00d fe47 	bl	8016ae4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	3310      	adds	r3, #16
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f00d feda 	bl	8016c14 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	3314      	adds	r3, #20
 8008e64:	4618      	mov	r0, r3
 8008e66:	f00d fec4 	bl	8016bf2 <sys_mbox_valid>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d034      	beq.n	8008eda <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008e70:	e01d      	b.n	8008eae <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	f107 020e 	add.w	r2, r7, #14
 8008e78:	4611      	mov	r1, r2
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7ff facc 	bl	8008418 <lwip_netconn_is_err_msg>
 8008e80:	4603      	mov	r3, r0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d113      	bne.n	8008eae <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8008e8a:	6978      	ldr	r0, [r7, #20]
 8008e8c:	f7ff ffac 	bl	8008de8 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d007      	beq.n	8008ea8 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f003 f959 	bl	800c154 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8008ea8:	6978      	ldr	r0, [r7, #20]
 8008eaa:	f7ff ff53 	bl	8008d54 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	3314      	adds	r3, #20
 8008eb2:	f107 0210 	add.w	r2, r7, #16
 8008eb6:	4611      	mov	r1, r2
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f00d fe7e 	bl	8016bba <sys_arch_mbox_tryfetch>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ec4:	d1d5      	bne.n	8008e72 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	3314      	adds	r3, #20
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f00d fe0a 	bl	8016ae4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	3314      	adds	r3, #20
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f00d fe9d 	bl	8016c14 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8008eda:	bf00      	nop
 8008edc:	3718      	adds	r7, #24
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
	...

08008ee4 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b086      	sub	sp, #24
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	460b      	mov	r3, r1
 8008eee:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d106      	bne.n	8008f08 <lwip_netconn_do_close_internal+0x24>
 8008efa:	4ba1      	ldr	r3, [pc, #644]	; (8009180 <lwip_netconn_do_close_internal+0x29c>)
 8008efc:	f240 32a2 	movw	r2, #930	; 0x3a2
 8008f00:	49a0      	ldr	r1, [pc, #640]	; (8009184 <lwip_netconn_do_close_internal+0x2a0>)
 8008f02:	48a1      	ldr	r0, [pc, #644]	; (8009188 <lwip_netconn_do_close_internal+0x2a4>)
 8008f04:	f00e f822 	bl	8016f4c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f10:	2b10      	cmp	r3, #16
 8008f12:	d006      	beq.n	8008f22 <lwip_netconn_do_close_internal+0x3e>
 8008f14:	4b9a      	ldr	r3, [pc, #616]	; (8009180 <lwip_netconn_do_close_internal+0x29c>)
 8008f16:	f240 32a3 	movw	r2, #931	; 0x3a3
 8008f1a:	499c      	ldr	r1, [pc, #624]	; (800918c <lwip_netconn_do_close_internal+0x2a8>)
 8008f1c:	489a      	ldr	r0, [pc, #616]	; (8009188 <lwip_netconn_do_close_internal+0x2a4>)
 8008f1e:	f00e f815 	bl	8016f4c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	785b      	ldrb	r3, [r3, #1]
 8008f26:	2b04      	cmp	r3, #4
 8008f28:	d006      	beq.n	8008f38 <lwip_netconn_do_close_internal+0x54>
 8008f2a:	4b95      	ldr	r3, [pc, #596]	; (8009180 <lwip_netconn_do_close_internal+0x29c>)
 8008f2c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8008f30:	4997      	ldr	r1, [pc, #604]	; (8009190 <lwip_netconn_do_close_internal+0x2ac>)
 8008f32:	4895      	ldr	r0, [pc, #596]	; (8009188 <lwip_netconn_do_close_internal+0x2a4>)
 8008f34:	f00e f80a 	bl	8016f4c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d106      	bne.n	8008f4e <lwip_netconn_do_close_internal+0x6a>
 8008f40:	4b8f      	ldr	r3, [pc, #572]	; (8009180 <lwip_netconn_do_close_internal+0x29c>)
 8008f42:	f240 32a5 	movw	r2, #933	; 0x3a5
 8008f46:	4993      	ldr	r1, [pc, #588]	; (8009194 <lwip_netconn_do_close_internal+0x2b0>)
 8008f48:	488f      	ldr	r0, [pc, #572]	; (8009188 <lwip_netconn_do_close_internal+0x2a4>)
 8008f4a:	f00d ffff 	bl	8016f4c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6a1b      	ldr	r3, [r3, #32]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d106      	bne.n	8008f64 <lwip_netconn_do_close_internal+0x80>
 8008f56:	4b8a      	ldr	r3, [pc, #552]	; (8009180 <lwip_netconn_do_close_internal+0x29c>)
 8008f58:	f240 32a6 	movw	r2, #934	; 0x3a6
 8008f5c:	498e      	ldr	r1, [pc, #568]	; (8009198 <lwip_netconn_do_close_internal+0x2b4>)
 8008f5e:	488a      	ldr	r0, [pc, #552]	; (8009188 <lwip_netconn_do_close_internal+0x2a4>)
 8008f60:	f00d fff4 	bl	8016f4c <iprintf>

  tpcb = conn->pcb.tcp;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6a1b      	ldr	r3, [r3, #32]
 8008f6e:	7a1b      	ldrb	r3, [r3, #8]
 8008f70:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8008f72:	7bfb      	ldrb	r3, [r7, #15]
 8008f74:	f003 0301 	and.w	r3, r3, #1
 8008f78:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8008f7a:	7bfb      	ldrb	r3, [r7, #15]
 8008f7c:	f003 0302 	and.w	r3, r3, #2
 8008f80:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8008f82:	7bfb      	ldrb	r3, [r7, #15]
 8008f84:	2b03      	cmp	r3, #3
 8008f86:	d102      	bne.n	8008f8e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	75bb      	strb	r3, [r7, #22]
 8008f8c:	e01f      	b.n	8008fce <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8008f8e:	7bbb      	ldrb	r3, [r7, #14]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d00e      	beq.n	8008fb2 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8008f98:	2b05      	cmp	r3, #5
 8008f9a:	d007      	beq.n	8008fac <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8008fa0:	2b06      	cmp	r3, #6
 8008fa2:	d003      	beq.n	8008fac <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8008fa8:	2b08      	cmp	r3, #8
 8008faa:	d102      	bne.n	8008fb2 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8008fac:	2301      	movs	r3, #1
 8008fae:	75bb      	strb	r3, [r7, #22]
 8008fb0:	e00d      	b.n	8008fce <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8008fb2:	7b7b      	ldrb	r3, [r7, #13]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d008      	beq.n	8008fca <lwip_netconn_do_close_internal+0xe6>
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	8b5b      	ldrh	r3, [r3, #26]
 8008fbc:	f003 0310 	and.w	r3, r3, #16
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d002      	beq.n	8008fca <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	75bb      	strb	r3, [r7, #22]
 8008fc8:	e001      	b.n	8008fce <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8008fce:	7dbb      	ldrb	r3, [r7, #22]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d003      	beq.n	8008fdc <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8008fd4:	2100      	movs	r1, #0
 8008fd6:	6938      	ldr	r0, [r7, #16]
 8008fd8:	f004 f946 	bl	800d268 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	7d1b      	ldrb	r3, [r3, #20]
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d104      	bne.n	8008fee <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8008fe4:	2100      	movs	r1, #0
 8008fe6:	6938      	ldr	r0, [r7, #16]
 8008fe8:	f004 f9b6 	bl	800d358 <tcp_accept>
 8008fec:	e01d      	b.n	800902a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8008fee:	7bbb      	ldrb	r3, [r7, #14]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d007      	beq.n	8009004 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8008ff4:	2100      	movs	r1, #0
 8008ff6:	6938      	ldr	r0, [r7, #16]
 8008ff8:	f004 f948 	bl	800d28c <tcp_recv>
      tcp_accept(tpcb, NULL);
 8008ffc:	2100      	movs	r1, #0
 8008ffe:	6938      	ldr	r0, [r7, #16]
 8009000:	f004 f9aa 	bl	800d358 <tcp_accept>
    }
    if (shut_tx) {
 8009004:	7b7b      	ldrb	r3, [r7, #13]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d003      	beq.n	8009012 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800900a:	2100      	movs	r1, #0
 800900c:	6938      	ldr	r0, [r7, #16]
 800900e:	f004 f95f 	bl	800d2d0 <tcp_sent>
    }
    if (shut_close) {
 8009012:	7dbb      	ldrb	r3, [r7, #22]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d008      	beq.n	800902a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8009018:	2200      	movs	r2, #0
 800901a:	2100      	movs	r1, #0
 800901c:	6938      	ldr	r0, [r7, #16]
 800901e:	f004 f9b3 	bl	800d388 <tcp_poll>
      tcp_err(tpcb, NULL);
 8009022:	2100      	movs	r1, #0
 8009024:	6938      	ldr	r0, [r7, #16]
 8009026:	f004 f975 	bl	800d314 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800902a:	7dbb      	ldrb	r3, [r7, #22]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d005      	beq.n	800903c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8009030:	6938      	ldr	r0, [r7, #16]
 8009032:	f002 ff4b 	bl	800becc <tcp_close>
 8009036:	4603      	mov	r3, r0
 8009038:	75fb      	strb	r3, [r7, #23]
 800903a:	e007      	b.n	800904c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800903c:	7bbb      	ldrb	r3, [r7, #14]
 800903e:	7b7a      	ldrb	r2, [r7, #13]
 8009040:	4619      	mov	r1, r3
 8009042:	6938      	ldr	r0, [r7, #16]
 8009044:	f002 ff6e 	bl	800bf24 <tcp_shutdown>
 8009048:	4603      	mov	r3, r0
 800904a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800904c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d102      	bne.n	800905a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8009054:	2301      	movs	r3, #1
 8009056:	757b      	strb	r3, [r7, #21]
 8009058:	e016      	b.n	8009088 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800905a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800905e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009062:	d10f      	bne.n	8009084 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6a1b      	ldr	r3, [r3, #32]
 8009068:	7a5b      	ldrb	r3, [r3, #9]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d10c      	bne.n	8009088 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800906e:	2301      	movs	r3, #1
 8009070:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8009072:	7dbb      	ldrb	r3, [r7, #22]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d007      	beq.n	8009088 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8009078:	6938      	ldr	r0, [r7, #16]
 800907a:	f003 f86b 	bl	800c154 <tcp_abort>
          err = ERR_OK;
 800907e:	2300      	movs	r3, #0
 8009080:	75fb      	strb	r3, [r7, #23]
 8009082:	e001      	b.n	8009088 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8009084:	2301      	movs	r3, #1
 8009086:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8009088:	7d7b      	ldrb	r3, [r7, #21]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d044      	beq.n	8009118 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6a1b      	ldr	r3, [r3, #32]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	330c      	adds	r3, #12
 8009096:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6a1b      	ldr	r3, [r3, #32]
 800909c:	7dfa      	ldrb	r2, [r7, #23]
 800909e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 80090ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d129      	bne.n	8009108 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 80090b4:	7dbb      	ldrb	r3, [r7, #22]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d00c      	beq.n	80090d4 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d005      	beq.n	80090d4 <lwip_netconn_do_close_internal+0x1f0>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090cc:	2200      	movs	r2, #0
 80090ce:	2104      	movs	r1, #4
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	4798      	blx	r3
      }
      if (shut_rx) {
 80090d4:	7bbb      	ldrb	r3, [r7, #14]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d009      	beq.n	80090ee <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d005      	beq.n	80090ee <lwip_netconn_do_close_internal+0x20a>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090e6:	2200      	movs	r2, #0
 80090e8:	2100      	movs	r1, #0
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	4798      	blx	r3
      }
      if (shut_tx) {
 80090ee:	7b7b      	ldrb	r3, [r7, #13]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d009      	beq.n	8009108 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d005      	beq.n	8009108 <lwip_netconn_do_close_internal+0x224>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009100:	2200      	movs	r2, #0
 8009102:	2102      	movs	r1, #2
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009108:	78fb      	ldrb	r3, [r7, #3]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d002      	beq.n	8009114 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800910e:	68b8      	ldr	r0, [r7, #8]
 8009110:	f00d fde6 	bl	8016ce0 <sys_sem_signal>
    }
    return ERR_OK;
 8009114:	2300      	movs	r3, #0
 8009116:	e02e      	b.n	8009176 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 8009118:	7d7b      	ldrb	r3, [r7, #21]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d11e      	bne.n	800915c <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	7d1b      	ldrb	r3, [r3, #20]
 8009122:	2b01      	cmp	r3, #1
 8009124:	d106      	bne.n	8009134 <lwip_netconn_do_close_internal+0x250>
 8009126:	4b16      	ldr	r3, [pc, #88]	; (8009180 <lwip_netconn_do_close_internal+0x29c>)
 8009128:	f240 4241 	movw	r2, #1089	; 0x441
 800912c:	491b      	ldr	r1, [pc, #108]	; (800919c <lwip_netconn_do_close_internal+0x2b8>)
 800912e:	4816      	ldr	r0, [pc, #88]	; (8009188 <lwip_netconn_do_close_internal+0x2a4>)
 8009130:	f00d ff0c 	bl	8016f4c <iprintf>
    if (shut_tx) {
 8009134:	7b7b      	ldrb	r3, [r7, #13]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d003      	beq.n	8009142 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800913a:	4919      	ldr	r1, [pc, #100]	; (80091a0 <lwip_netconn_do_close_internal+0x2bc>)
 800913c:	6938      	ldr	r0, [r7, #16]
 800913e:	f004 f8c7 	bl	800d2d0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8009142:	2201      	movs	r2, #1
 8009144:	4917      	ldr	r1, [pc, #92]	; (80091a4 <lwip_netconn_do_close_internal+0x2c0>)
 8009146:	6938      	ldr	r0, [r7, #16]
 8009148:	f004 f91e 	bl	800d388 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800914c:	4916      	ldr	r1, [pc, #88]	; (80091a8 <lwip_netconn_do_close_internal+0x2c4>)
 800914e:	6938      	ldr	r0, [r7, #16]
 8009150:	f004 f8e0 	bl	800d314 <tcp_err>
    tcp_arg(tpcb, conn);
 8009154:	6879      	ldr	r1, [r7, #4]
 8009156:	6938      	ldr	r0, [r7, #16]
 8009158:	f004 f886 	bl	800d268 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800915c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d106      	bne.n	8009172 <lwip_netconn_do_close_internal+0x28e>
 8009164:	4b06      	ldr	r3, [pc, #24]	; (8009180 <lwip_netconn_do_close_internal+0x29c>)
 8009166:	f240 424d 	movw	r2, #1101	; 0x44d
 800916a:	4910      	ldr	r1, [pc, #64]	; (80091ac <lwip_netconn_do_close_internal+0x2c8>)
 800916c:	4806      	ldr	r0, [pc, #24]	; (8009188 <lwip_netconn_do_close_internal+0x2a4>)
 800916e:	f00d feed 	bl	8016f4c <iprintf>
  return err;
 8009172:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009176:	4618      	mov	r0, r3
 8009178:	3718      	adds	r7, #24
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	080181c4 	.word	0x080181c4
 8009184:	08018498 	.word	0x08018498
 8009188:	08018208 	.word	0x08018208
 800918c:	080184a8 	.word	0x080184a8
 8009190:	080184c8 	.word	0x080184c8
 8009194:	080184ec 	.word	0x080184ec
 8009198:	0801832c 	.word	0x0801832c
 800919c:	08018500 	.word	0x08018500
 80091a0:	0800875d 	.word	0x0800875d
 80091a4:	08008695 	.word	0x08008695
 80091a8:	08008805 	.word	0x08008805
 80091ac:	08018524 	.word	0x08018524

080091b0 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	785b      	ldrb	r3, [r3, #1]
 80091c2:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80091c4:	7afb      	ldrb	r3, [r7, #11]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d00d      	beq.n	80091e6 <lwip_netconn_do_delconn+0x36>
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80091d4:	2b10      	cmp	r3, #16
 80091d6:	d006      	beq.n	80091e6 <lwip_netconn_do_delconn+0x36>
 80091d8:	4b60      	ldr	r3, [pc, #384]	; (800935c <lwip_netconn_do_delconn+0x1ac>)
 80091da:	f240 425f 	movw	r2, #1119	; 0x45f
 80091de:	4960      	ldr	r1, [pc, #384]	; (8009360 <lwip_netconn_do_delconn+0x1b0>)
 80091e0:	4860      	ldr	r0, [pc, #384]	; (8009364 <lwip_netconn_do_delconn+0x1b4>)
 80091e2:	f00d feb3 	bl	8016f4c <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 80091e6:	7afb      	ldrb	r3, [r7, #11]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d005      	beq.n	80091f8 <lwip_netconn_do_delconn+0x48>
 80091ec:	7afb      	ldrb	r3, [r7, #11]
 80091ee:	2b02      	cmp	r3, #2
 80091f0:	d002      	beq.n	80091f8 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 80091f2:	7afb      	ldrb	r3, [r7, #11]
 80091f4:	2b03      	cmp	r3, #3
 80091f6:	d109      	bne.n	800920c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 80091f8:	7afb      	ldrb	r3, [r7, #11]
 80091fa:	2b03      	cmp	r3, #3
 80091fc:	d10a      	bne.n	8009214 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	7f1b      	ldrb	r3, [r3, #28]
 8009204:	f003 0304 	and.w	r3, r3, #4
 8009208:	2b00      	cmp	r3, #0
 800920a:	d103      	bne.n	8009214 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	22fb      	movs	r2, #251	; 0xfb
 8009210:	711a      	strb	r2, [r3, #4]
 8009212:	e097      	b.n	8009344 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8009214:	7afb      	ldrb	r3, [r7, #11]
 8009216:	2b03      	cmp	r3, #3
 8009218:	d10d      	bne.n	8009236 <lwip_netconn_do_delconn+0x86>
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	7f1b      	ldrb	r3, [r3, #28]
 8009220:	f003 0304 	and.w	r3, r3, #4
 8009224:	2b00      	cmp	r3, #0
 8009226:	d106      	bne.n	8009236 <lwip_netconn_do_delconn+0x86>
 8009228:	4b4c      	ldr	r3, [pc, #304]	; (800935c <lwip_netconn_do_delconn+0x1ac>)
 800922a:	f240 427b 	movw	r2, #1147	; 0x47b
 800922e:	494e      	ldr	r1, [pc, #312]	; (8009368 <lwip_netconn_do_delconn+0x1b8>)
 8009230:	484c      	ldr	r0, [pc, #304]	; (8009364 <lwip_netconn_do_delconn+0x1b4>)
 8009232:	f00d fe8b 	bl	8016f4c <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2200      	movs	r2, #0
 800923a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4618      	mov	r0, r3
 8009242:	f7ff fdd1 	bl	8008de8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d05f      	beq.n	8009310 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800925a:	2b10      	cmp	r3, #16
 800925c:	d00e      	beq.n	800927c <lwip_netconn_do_delconn+0xcc>
 800925e:	2b20      	cmp	r3, #32
 8009260:	d000      	beq.n	8009264 <lwip_netconn_do_delconn+0xb4>
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
#endif /* LWIP_TCP */
        default:
          break;
 8009262:	e051      	b.n	8009308 <lwip_netconn_do_delconn+0x158>
          msg->conn->pcb.udp->recv_arg = NULL;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	2200      	movs	r2, #0
 800926c:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	4618      	mov	r0, r3
 8009276:	f009 fa4d 	bl	8012714 <udp_remove>
          break;
 800927a:	e045      	b.n	8009308 <lwip_netconn_do_delconn+0x158>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	6a1b      	ldr	r3, [r3, #32]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d006      	beq.n	8009294 <lwip_netconn_do_delconn+0xe4>
 8009286:	4b35      	ldr	r3, [pc, #212]	; (800935c <lwip_netconn_do_delconn+0x1ac>)
 8009288:	f240 4294 	movw	r2, #1172	; 0x494
 800928c:	4937      	ldr	r1, [pc, #220]	; (800936c <lwip_netconn_do_delconn+0x1bc>)
 800928e:	4835      	ldr	r0, [pc, #212]	; (8009364 <lwip_netconn_do_delconn+0x1b4>)
 8009290:	f00d fe5c 	bl	8016f4c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2204      	movs	r2, #4
 800929a:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2203      	movs	r2, #3
 80092a0:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	68fa      	ldr	r2, [r7, #12]
 80092a8:	621a      	str	r2, [r3, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	2100      	movs	r1, #0
 80092b0:	4618      	mov	r0, r3
 80092b2:	f7ff fe17 	bl	8008ee4 <lwip_netconn_do_close_internal>
 80092b6:	4603      	mov	r3, r0
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d04a      	beq.n	8009352 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	785b      	ldrb	r3, [r3, #1]
 80092c2:	2b04      	cmp	r3, #4
 80092c4:	d006      	beq.n	80092d4 <lwip_netconn_do_delconn+0x124>
 80092c6:	4b25      	ldr	r3, [pc, #148]	; (800935c <lwip_netconn_do_delconn+0x1ac>)
 80092c8:	f240 429a 	movw	r2, #1178	; 0x49a
 80092cc:	4928      	ldr	r1, [pc, #160]	; (8009370 <lwip_netconn_do_delconn+0x1c0>)
 80092ce:	4825      	ldr	r0, [pc, #148]	; (8009364 <lwip_netconn_do_delconn+0x1b4>)
 80092d0:	f00d fe3c 	bl	8016f4c <iprintf>
            UNLOCK_TCPIP_CORE();
 80092d4:	4827      	ldr	r0, [pc, #156]	; (8009374 <lwip_netconn_do_delconn+0x1c4>)
 80092d6:	f00d fd74 	bl	8016dc2 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	330c      	adds	r3, #12
 80092e0:	2100      	movs	r1, #0
 80092e2:	4618      	mov	r0, r3
 80092e4:	f00d fccb 	bl	8016c7e <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 80092e8:	4822      	ldr	r0, [pc, #136]	; (8009374 <lwip_netconn_do_delconn+0x1c4>)
 80092ea:	f00d fd5b 	bl	8016da4 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	785b      	ldrb	r3, [r3, #1]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d02c      	beq.n	8009352 <lwip_netconn_do_delconn+0x1a2>
 80092f8:	4b18      	ldr	r3, [pc, #96]	; (800935c <lwip_netconn_do_delconn+0x1ac>)
 80092fa:	f240 429e 	movw	r2, #1182	; 0x49e
 80092fe:	491c      	ldr	r1, [pc, #112]	; (8009370 <lwip_netconn_do_delconn+0x1c0>)
 8009300:	4818      	ldr	r0, [pc, #96]	; (8009364 <lwip_netconn_do_delconn+0x1b4>)
 8009302:	f00d fe23 	bl	8016f4c <iprintf>
          return;
 8009306:	e024      	b.n	8009352 <lwip_netconn_do_delconn+0x1a2>
      }
      msg->conn->pcb.tcp = NULL;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	2200      	movs	r2, #0
 800930e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009316:	2b00      	cmp	r3, #0
 8009318:	d007      	beq.n	800932a <lwip_netconn_do_delconn+0x17a>
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009320:	68fa      	ldr	r2, [r7, #12]
 8009322:	6810      	ldr	r0, [r2, #0]
 8009324:	2200      	movs	r2, #0
 8009326:	2100      	movs	r1, #0
 8009328:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009330:	2b00      	cmp	r3, #0
 8009332:	d007      	beq.n	8009344 <lwip_netconn_do_delconn+0x194>
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800933a:	68fa      	ldr	r2, [r7, #12]
 800933c:	6810      	ldr	r0, [r2, #0]
 800933e:	2200      	movs	r2, #0
 8009340:	2102      	movs	r1, #2
 8009342:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	330c      	adds	r3, #12
 800934a:	4618      	mov	r0, r3
 800934c:	f00d fce2 	bl	8016d14 <sys_sem_valid>
 8009350:	e000      	b.n	8009354 <lwip_netconn_do_delconn+0x1a4>
          return;
 8009352:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8009354:	3710      	adds	r7, #16
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop
 800935c:	080181c4 	.word	0x080181c4
 8009360:	08018534 	.word	0x08018534
 8009364:	08018208 	.word	0x08018208
 8009368:	08018548 	.word	0x08018548
 800936c:	08018568 	.word	0x08018568
 8009370:	08018584 	.word	0x08018584
 8009374:	2000b8c0 	.word	0x2000b8c0

08009378 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d026      	beq.n	80093dc <lwip_netconn_do_bind+0x64>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009398:	2b10      	cmp	r3, #16
 800939a:	d00e      	beq.n	80093ba <lwip_netconn_do_bind+0x42>
 800939c:	2b20      	cmp	r3, #32
 800939e:	d119      	bne.n	80093d4 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	6858      	ldr	r0, [r3, #4]
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	6899      	ldr	r1, [r3, #8]
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	899b      	ldrh	r3, [r3, #12]
 80093ae:	461a      	mov	r2, r3
 80093b0:	f009 f89a 	bl	80124e8 <udp_bind>
 80093b4:	4603      	mov	r3, r0
 80093b6:	73fb      	strb	r3, [r7, #15]
        break;
 80093b8:	e012      	b.n	80093e0 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	6858      	ldr	r0, [r3, #4]
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	6899      	ldr	r1, [r3, #8]
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	899b      	ldrh	r3, [r3, #12]
 80093c8:	461a      	mov	r2, r3
 80093ca:	f002 fecf 	bl	800c16c <tcp_bind>
 80093ce:	4603      	mov	r3, r0
 80093d0:	73fb      	strb	r3, [r7, #15]
        break;
 80093d2:	e005      	b.n	80093e0 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 80093d4:	23fa      	movs	r3, #250	; 0xfa
 80093d6:	73fb      	strb	r3, [r7, #15]
        break;
 80093d8:	bf00      	nop
 80093da:	e001      	b.n	80093e0 <lwip_netconn_do_bind+0x68>
    }
  } else {
    err = ERR_VAL;
 80093dc:	23fa      	movs	r3, #250	; 0xfa
 80093de:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	7bfa      	ldrb	r2, [r7, #15]
 80093e4:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80093e6:	bf00      	nop
 80093e8:	3710      	adds	r7, #16
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
	...

080093f0 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b086      	sub	sp, #24
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d07f      	beq.n	8009506 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009410:	2b10      	cmp	r3, #16
 8009412:	d175      	bne.n	8009500 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	785b      	ldrb	r3, [r3, #1]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d165      	bne.n	80094ea <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	7d1b      	ldrb	r3, [r3, #20]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d002      	beq.n	8009430 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800942a:	23fa      	movs	r3, #250	; 0xfa
 800942c:	72fb      	strb	r3, [r7, #11]
 800942e:	e06c      	b.n	800950a <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8009430:	23ff      	movs	r3, #255	; 0xff
 8009432:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	f107 020b 	add.w	r2, r7, #11
 800943e:	7cf9      	ldrb	r1, [r7, #19]
 8009440:	4618      	mov	r0, r3
 8009442:	f002 ff4b 	bl	800c2dc <tcp_listen_with_backlog_and_err>
 8009446:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d05d      	beq.n	800950a <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	3310      	adds	r3, #16
 8009454:	4618      	mov	r0, r3
 8009456:	f00d fbcc 	bl	8016bf2 <sys_mbox_valid>
 800945a:	4603      	mov	r3, r0
 800945c:	2b00      	cmp	r3, #0
 800945e:	d00b      	beq.n	8009478 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	3310      	adds	r3, #16
 8009466:	4618      	mov	r0, r3
 8009468:	f00d fb3c 	bl	8016ae4 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	3310      	adds	r3, #16
 8009472:	4618      	mov	r0, r3
 8009474:	f00d fbce 	bl	8016c14 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 8009478:	2300      	movs	r3, #0
 800947a:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	3314      	adds	r3, #20
 8009482:	4618      	mov	r0, r3
 8009484:	f00d fbb5 	bl	8016bf2 <sys_mbox_valid>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d108      	bne.n	80094a0 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	3314      	adds	r3, #20
 8009494:	2106      	movs	r1, #6
 8009496:	4618      	mov	r0, r3
 8009498:	f00d fb02 	bl	8016aa0 <sys_mbox_new>
 800949c:	4603      	mov	r3, r0
 800949e:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 80094a0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d118      	bne.n	80094da <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2202      	movs	r2, #2
 80094ae:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	68fa      	ldr	r2, [r7, #12]
 80094b6:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	685a      	ldr	r2, [r3, #4]
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4619      	mov	r1, r3
 80094c4:	4610      	mov	r0, r2
 80094c6:	f003 fecf 	bl	800d268 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	4912      	ldr	r1, [pc, #72]	; (800951c <lwip_netconn_do_listen+0x12c>)
 80094d2:	4618      	mov	r0, r3
 80094d4:	f003 ff40 	bl	800d358 <tcp_accept>
 80094d8:	e017      	b.n	800950a <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 80094da:	68f8      	ldr	r0, [r7, #12]
 80094dc:	f002 fcf6 	bl	800becc <tcp_close>
              msg->conn->pcb.tcp = NULL;
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	2200      	movs	r2, #0
 80094e6:	605a      	str	r2, [r3, #4]
 80094e8:	e00f      	b.n	800950a <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	785b      	ldrb	r3, [r3, #1]
 80094f0:	2b02      	cmp	r3, #2
 80094f2:	d102      	bne.n	80094fa <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 80094f4:	2300      	movs	r3, #0
 80094f6:	72fb      	strb	r3, [r7, #11]
 80094f8:	e007      	b.n	800950a <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 80094fa:	23f5      	movs	r3, #245	; 0xf5
 80094fc:	72fb      	strb	r3, [r7, #11]
 80094fe:	e004      	b.n	800950a <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8009500:	23f0      	movs	r3, #240	; 0xf0
 8009502:	72fb      	strb	r3, [r7, #11]
 8009504:	e001      	b.n	800950a <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 8009506:	23f5      	movs	r3, #245	; 0xf5
 8009508:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800950a:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009512:	bf00      	nop
 8009514:	3718      	adds	r7, #24
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop
 800951c:	08008a01 	.word	0x08008a01

08009520 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b086      	sub	sp, #24
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	2200      	movs	r2, #0
 8009530:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d022      	beq.n	8009582 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009546:	2b10      	cmp	r3, #16
 8009548:	d11b      	bne.n	8009582 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	689b      	ldr	r3, [r3, #8]
 800954e:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009556:	d202      	bcs.n	800955e <lwip_netconn_do_recv+0x3e>
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	b29b      	uxth	r3, r3
 800955c:	e001      	b.n	8009562 <lwip_netconn_do_recv+0x42>
 800955e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009562:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	89fa      	ldrh	r2, [r7, #14]
 800956c:	4611      	mov	r1, r2
 800956e:	4618      	mov	r0, r3
 8009570:	f002 ffb8 	bl	800c4e4 <tcp_recved>
        remaining -= recved;
 8009574:	89fb      	ldrh	r3, [r7, #14]
 8009576:	697a      	ldr	r2, [r7, #20]
 8009578:	1ad3      	subs	r3, r2, r3
 800957a:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d1e6      	bne.n	8009550 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009582:	bf00      	nop
 8009584:	3718      	adds	r7, #24
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
	...

0800958c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b088      	sub	sp, #32
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	460b      	mov	r3, r1
 8009596:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8009598:	2300      	movs	r3, #0
 800959a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d106      	bne.n	80095b0 <lwip_netconn_do_writemore+0x24>
 80095a2:	4b96      	ldr	r3, [pc, #600]	; (80097fc <lwip_netconn_do_writemore+0x270>)
 80095a4:	f240 6273 	movw	r2, #1651	; 0x673
 80095a8:	4995      	ldr	r1, [pc, #596]	; (8009800 <lwip_netconn_do_writemore+0x274>)
 80095aa:	4896      	ldr	r0, [pc, #600]	; (8009804 <lwip_netconn_do_writemore+0x278>)
 80095ac:	f00d fcce 	bl	8016f4c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	785b      	ldrb	r3, [r3, #1]
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d006      	beq.n	80095c6 <lwip_netconn_do_writemore+0x3a>
 80095b8:	4b90      	ldr	r3, [pc, #576]	; (80097fc <lwip_netconn_do_writemore+0x270>)
 80095ba:	f240 6274 	movw	r2, #1652	; 0x674
 80095be:	4992      	ldr	r1, [pc, #584]	; (8009808 <lwip_netconn_do_writemore+0x27c>)
 80095c0:	4890      	ldr	r0, [pc, #576]	; (8009804 <lwip_netconn_do_writemore+0x278>)
 80095c2:	f00d fcc3 	bl	8016f4c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6a1b      	ldr	r3, [r3, #32]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d106      	bne.n	80095dc <lwip_netconn_do_writemore+0x50>
 80095ce:	4b8b      	ldr	r3, [pc, #556]	; (80097fc <lwip_netconn_do_writemore+0x270>)
 80095d0:	f240 6275 	movw	r2, #1653	; 0x675
 80095d4:	498d      	ldr	r1, [pc, #564]	; (800980c <lwip_netconn_do_writemore+0x280>)
 80095d6:	488b      	ldr	r0, [pc, #556]	; (8009804 <lwip_netconn_do_writemore+0x278>)
 80095d8:	f00d fcb8 	bl	8016f4c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d106      	bne.n	80095f2 <lwip_netconn_do_writemore+0x66>
 80095e4:	4b85      	ldr	r3, [pc, #532]	; (80097fc <lwip_netconn_do_writemore+0x270>)
 80095e6:	f240 6276 	movw	r2, #1654	; 0x676
 80095ea:	4989      	ldr	r1, [pc, #548]	; (8009810 <lwip_netconn_do_writemore+0x284>)
 80095ec:	4885      	ldr	r0, [pc, #532]	; (8009804 <lwip_netconn_do_writemore+0x278>)
 80095ee:	f00d fcad 	bl	8016f4c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6a1b      	ldr	r3, [r3, #32]
 80095f6:	699a      	ldr	r2, [r3, #24]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6a1b      	ldr	r3, [r3, #32]
 80095fc:	695b      	ldr	r3, [r3, #20]
 80095fe:	429a      	cmp	r2, r3
 8009600:	d306      	bcc.n	8009610 <lwip_netconn_do_writemore+0x84>
 8009602:	4b7e      	ldr	r3, [pc, #504]	; (80097fc <lwip_netconn_do_writemore+0x270>)
 8009604:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8009608:	4982      	ldr	r1, [pc, #520]	; (8009814 <lwip_netconn_do_writemore+0x288>)
 800960a:	487e      	ldr	r0, [pc, #504]	; (8009804 <lwip_netconn_do_writemore+0x278>)
 800960c:	f00d fc9e 	bl	8016f4c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6a1b      	ldr	r3, [r3, #32]
 8009614:	899b      	ldrh	r3, [r3, #12]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d106      	bne.n	8009628 <lwip_netconn_do_writemore+0x9c>
 800961a:	4b78      	ldr	r3, [pc, #480]	; (80097fc <lwip_netconn_do_writemore+0x270>)
 800961c:	f240 6279 	movw	r2, #1657	; 0x679
 8009620:	497d      	ldr	r1, [pc, #500]	; (8009818 <lwip_netconn_do_writemore+0x28c>)
 8009622:	4878      	ldr	r0, [pc, #480]	; (8009804 <lwip_netconn_do_writemore+0x278>)
 8009624:	f00d fc92 	bl	8016f4c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6a1b      	ldr	r3, [r3, #32]
 800962c:	7f1b      	ldrb	r3, [r3, #28]
 800962e:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	7f1b      	ldrb	r3, [r3, #28]
 8009634:	f003 0302 	and.w	r3, r3, #2
 8009638:	2b00      	cmp	r3, #0
 800963a:	d104      	bne.n	8009646 <lwip_netconn_do_writemore+0xba>
 800963c:	7ebb      	ldrb	r3, [r7, #26]
 800963e:	f003 0304 	and.w	r3, r3, #4
 8009642:	2b00      	cmp	r3, #0
 8009644:	d001      	beq.n	800964a <lwip_netconn_do_writemore+0xbe>
 8009646:	2301      	movs	r3, #1
 8009648:	e000      	b.n	800964c <lwip_netconn_do_writemore+0xc0>
 800964a:	2300      	movs	r3, #0
 800964c:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6a1b      	ldr	r3, [r3, #32]
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6a1b      	ldr	r3, [r3, #32]
 800965a:	691b      	ldr	r3, [r3, #16]
 800965c:	4413      	add	r3, r2
 800965e:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6a1b      	ldr	r3, [r3, #32]
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	685a      	ldr	r2, [r3, #4]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6a1b      	ldr	r3, [r3, #32]
 800966c:	691b      	ldr	r3, [r3, #16]
 800966e:	1ad3      	subs	r3, r2, r3
 8009670:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009678:	d307      	bcc.n	800968a <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800967a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800967e:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009680:	7ebb      	ldrb	r3, [r7, #26]
 8009682:	f043 0302 	orr.w	r3, r3, #2
 8009686:	76bb      	strb	r3, [r7, #26]
 8009688:	e001      	b.n	800968e <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009696:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8009698:	89fa      	ldrh	r2, [r7, #14]
 800969a:	8bbb      	ldrh	r3, [r7, #28]
 800969c:	429a      	cmp	r2, r3
 800969e:	d216      	bcs.n	80096ce <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 80096a0:	89fb      	ldrh	r3, [r7, #14]
 80096a2:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 80096a4:	7e3b      	ldrb	r3, [r7, #24]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d00d      	beq.n	80096c6 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 80096aa:	8bbb      	ldrh	r3, [r7, #28]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d10e      	bne.n	80096ce <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6a1b      	ldr	r3, [r3, #32]
 80096b4:	699b      	ldr	r3, [r3, #24]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d102      	bne.n	80096c0 <lwip_netconn_do_writemore+0x134>
 80096ba:	f06f 0306 	mvn.w	r3, #6
 80096be:	e000      	b.n	80096c2 <lwip_netconn_do_writemore+0x136>
 80096c0:	2300      	movs	r3, #0
 80096c2:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 80096c4:	e07d      	b.n	80097c2 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 80096c6:	7ebb      	ldrb	r3, [r7, #26]
 80096c8:	f043 0302 	orr.w	r3, r3, #2
 80096cc:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6a1b      	ldr	r3, [r3, #32]
 80096d2:	691a      	ldr	r2, [r3, #16]
 80096d4:	8bbb      	ldrh	r3, [r7, #28]
 80096d6:	441a      	add	r2, r3
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6a1b      	ldr	r3, [r3, #32]
 80096dc:	689b      	ldr	r3, [r3, #8]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d906      	bls.n	80096f2 <lwip_netconn_do_writemore+0x166>
 80096e4:	4b45      	ldr	r3, [pc, #276]	; (80097fc <lwip_netconn_do_writemore+0x270>)
 80096e6:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80096ea:	494c      	ldr	r1, [pc, #304]	; (800981c <lwip_netconn_do_writemore+0x290>)
 80096ec:	4845      	ldr	r0, [pc, #276]	; (8009804 <lwip_netconn_do_writemore+0x278>)
 80096ee:	f00d fc2d 	bl	8016f4c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 80096f2:	8bbb      	ldrh	r3, [r7, #28]
 80096f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d103      	bne.n	8009704 <lwip_netconn_do_writemore+0x178>
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009702:	d209      	bcs.n	8009718 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009708:	8bba      	ldrh	r2, [r7, #28]
 800970a:	429a      	cmp	r2, r3
 800970c:	d10b      	bne.n	8009726 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6a1b      	ldr	r3, [r3, #32]
 8009712:	899b      	ldrh	r3, [r3, #12]
 8009714:	2b01      	cmp	r3, #1
 8009716:	d906      	bls.n	8009726 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8009718:	2301      	movs	r3, #1
 800971a:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800971c:	7ebb      	ldrb	r3, [r7, #26]
 800971e:	f043 0302 	orr.w	r3, r3, #2
 8009722:	76bb      	strb	r3, [r7, #26]
 8009724:	e001      	b.n	800972a <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8009726:	2300      	movs	r3, #0
 8009728:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6858      	ldr	r0, [r3, #4]
 800972e:	7ebb      	ldrb	r3, [r7, #26]
 8009730:	8bba      	ldrh	r2, [r7, #28]
 8009732:	6979      	ldr	r1, [r7, #20]
 8009734:	f006 fcd4 	bl	80100e0 <tcp_write>
 8009738:	4603      	mov	r3, r0
 800973a:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800973c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d12c      	bne.n	800979e <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6a1b      	ldr	r3, [r3, #32]
 8009748:	6999      	ldr	r1, [r3, #24]
 800974a:	8bba      	ldrh	r2, [r7, #28]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6a1b      	ldr	r3, [r3, #32]
 8009750:	440a      	add	r2, r1
 8009752:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6a1b      	ldr	r3, [r3, #32]
 8009758:	6919      	ldr	r1, [r3, #16]
 800975a:	8bba      	ldrh	r2, [r7, #28]
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6a1b      	ldr	r3, [r3, #32]
 8009760:	440a      	add	r2, r1
 8009762:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6a1b      	ldr	r3, [r3, #32]
 8009768:	691a      	ldr	r2, [r3, #16]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6a1b      	ldr	r3, [r3, #32]
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	429a      	cmp	r2, r3
 8009774:	d113      	bne.n	800979e <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6a1b      	ldr	r3, [r3, #32]
 800977a:	899a      	ldrh	r2, [r3, #12]
 800977c:	3a01      	subs	r2, #1
 800977e:	b292      	uxth	r2, r2
 8009780:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6a1b      	ldr	r3, [r3, #32]
 8009786:	899b      	ldrh	r3, [r3, #12]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d008      	beq.n	800979e <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6a1b      	ldr	r3, [r3, #32]
 8009790:	689a      	ldr	r2, [r3, #8]
 8009792:	3208      	adds	r2, #8
 8009794:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6a1b      	ldr	r3, [r3, #32]
 800979a:	2200      	movs	r2, #0
 800979c:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800979e:	7e7b      	ldrb	r3, [r7, #25]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d004      	beq.n	80097ae <lwip_netconn_do_writemore+0x222>
 80097a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	f43f af50 	beq.w	800964e <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 80097ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d004      	beq.n	80097c0 <lwip_netconn_do_writemore+0x234>
 80097b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80097ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097be:	d146      	bne.n	800984e <lwip_netconn_do_writemore+0x2c2>
err_mem:
 80097c0:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80097c2:	7e3b      	ldrb	r3, [r7, #24]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d02b      	beq.n	8009820 <lwip_netconn_do_writemore+0x294>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6a1b      	ldr	r3, [r3, #32]
 80097cc:	699a      	ldr	r2, [r3, #24]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6a1b      	ldr	r3, [r3, #32]
 80097d2:	695b      	ldr	r3, [r3, #20]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d223      	bcs.n	8009820 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d005      	beq.n	80097ec <lwip_netconn_do_writemore+0x260>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e4:	2200      	movs	r2, #0
 80097e6:	2103      	movs	r1, #3
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	7f1b      	ldrb	r3, [r3, #28]
 80097f0:	f043 0310 	orr.w	r3, r3, #16
 80097f4:	b2da      	uxtb	r2, r3
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	771a      	strb	r2, [r3, #28]
 80097fa:	e028      	b.n	800984e <lwip_netconn_do_writemore+0x2c2>
 80097fc:	080181c4 	.word	0x080181c4
 8009800:	0801831c 	.word	0x0801831c
 8009804:	08018208 	.word	0x08018208
 8009808:	08018624 	.word	0x08018624
 800980c:	0801832c 	.word	0x0801832c
 8009810:	08018644 	.word	0x08018644
 8009814:	0801865c 	.word	0x0801865c
 8009818:	0801869c 	.word	0x0801869c
 800981c:	080186c4 	.word	0x080186c4
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009828:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800982c:	d305      	bcc.n	800983a <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009836:	2b04      	cmp	r3, #4
 8009838:	d909      	bls.n	800984e <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800983e:	2b00      	cmp	r3, #0
 8009840:	d005      	beq.n	800984e <lwip_netconn_do_writemore+0x2c2>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009846:	2200      	movs	r2, #0
 8009848:	2103      	movs	r1, #3
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800984e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d11d      	bne.n	8009892 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6a1b      	ldr	r3, [r3, #32]
 800985a:	699a      	ldr	r2, [r3, #24]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6a1b      	ldr	r3, [r3, #32]
 8009860:	695b      	ldr	r3, [r3, #20]
 8009862:	429a      	cmp	r2, r3
 8009864:	d002      	beq.n	800986c <lwip_netconn_do_writemore+0x2e0>
 8009866:	7e3b      	ldrb	r3, [r7, #24]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d001      	beq.n	8009870 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800986c:	2301      	movs	r3, #1
 800986e:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	4618      	mov	r0, r3
 8009876:	f007 fa1f 	bl	8010cb8 <tcp_output>
 800987a:	4603      	mov	r3, r0
 800987c:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800987e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8009882:	f113 0f04 	cmn.w	r3, #4
 8009886:	d12c      	bne.n	80098e2 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009888:	7b3b      	ldrb	r3, [r7, #12]
 800988a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800988c:	2301      	movs	r3, #1
 800988e:	76fb      	strb	r3, [r7, #27]
 8009890:	e027      	b.n	80098e2 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8009892:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800989a:	d120      	bne.n	80098de <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	4618      	mov	r0, r3
 80098a2:	f007 fa09 	bl	8010cb8 <tcp_output>
 80098a6:	4603      	mov	r3, r0
 80098a8:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 80098aa:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80098ae:	f113 0f04 	cmn.w	r3, #4
 80098b2:	d104      	bne.n	80098be <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80098b4:	7b7b      	ldrb	r3, [r7, #13]
 80098b6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80098b8:	2301      	movs	r3, #1
 80098ba:	76fb      	strb	r3, [r7, #27]
 80098bc:	e011      	b.n	80098e2 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 80098be:	7e3b      	ldrb	r3, [r7, #24]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00e      	beq.n	80098e2 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6a1b      	ldr	r3, [r3, #32]
 80098c8:	699b      	ldr	r3, [r3, #24]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d102      	bne.n	80098d4 <lwip_netconn_do_writemore+0x348>
 80098ce:	f06f 0306 	mvn.w	r3, #6
 80098d2:	e000      	b.n	80098d6 <lwip_netconn_do_writemore+0x34a>
 80098d4:	2300      	movs	r3, #0
 80098d6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80098d8:	2301      	movs	r3, #1
 80098da:	76fb      	strb	r3, [r7, #27]
 80098dc:	e001      	b.n	80098e2 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 80098de:	2301      	movs	r3, #1
 80098e0:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 80098e2:	7efb      	ldrb	r3, [r7, #27]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d015      	beq.n	8009914 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6a1b      	ldr	r3, [r3, #32]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	330c      	adds	r3, #12
 80098f0:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6a1b      	ldr	r3, [r3, #32]
 80098f6:	7ffa      	ldrb	r2, [r7, #31]
 80098f8:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2200      	movs	r2, #0
 80098fe:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2200      	movs	r2, #0
 8009904:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009906:	78fb      	ldrb	r3, [r7, #3]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d006      	beq.n	800991a <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800990c:	68b8      	ldr	r0, [r7, #8]
 800990e:	f00d f9e7 	bl	8016ce0 <sys_sem_signal>
 8009912:	e002      	b.n	800991a <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8009914:	f04f 33ff 	mov.w	r3, #4294967295
 8009918:	e000      	b.n	800991c <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800991a:	2300      	movs	r3, #0
}
 800991c:	4618      	mov	r0, r3
 800991e:	3720      	adds	r7, #32
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4618      	mov	r0, r3
 8009936:	f7fe fd22 	bl	800837e <netconn_err>
 800993a:	4603      	mov	r3, r0
 800993c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800993e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d166      	bne.n	8009a14 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009950:	2b10      	cmp	r3, #16
 8009952:	d15d      	bne.n	8009a10 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	785b      	ldrb	r3, [r3, #1]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d002      	beq.n	8009964 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800995e:	23fb      	movs	r3, #251	; 0xfb
 8009960:	73fb      	strb	r3, [r7, #15]
 8009962:	e057      	b.n	8009a14 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d04d      	beq.n	8009a0a <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	2201      	movs	r2, #1
 8009974:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	6a1b      	ldr	r3, [r3, #32]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d006      	beq.n	800998e <lwip_netconn_do_write+0x6a>
 8009980:	4b28      	ldr	r3, [pc, #160]	; (8009a24 <lwip_netconn_do_write+0x100>)
 8009982:	f240 7223 	movw	r2, #1827	; 0x723
 8009986:	4928      	ldr	r1, [pc, #160]	; (8009a28 <lwip_netconn_do_write+0x104>)
 8009988:	4828      	ldr	r0, [pc, #160]	; (8009a2c <lwip_netconn_do_write+0x108>)
 800998a:	f00d fadf 	bl	8016f4c <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	695b      	ldr	r3, [r3, #20]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d106      	bne.n	80099a4 <lwip_netconn_do_write+0x80>
 8009996:	4b23      	ldr	r3, [pc, #140]	; (8009a24 <lwip_netconn_do_write+0x100>)
 8009998:	f240 7224 	movw	r2, #1828	; 0x724
 800999c:	4924      	ldr	r1, [pc, #144]	; (8009a30 <lwip_netconn_do_write+0x10c>)
 800999e:	4823      	ldr	r0, [pc, #140]	; (8009a2c <lwip_netconn_do_write+0x108>)
 80099a0:	f00d fad4 	bl	8016f4c <iprintf>
        msg->conn->current_msg = msg;
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	68ba      	ldr	r2, [r7, #8]
 80099aa:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	2100      	movs	r1, #0
 80099b2:	4618      	mov	r0, r3
 80099b4:	f7ff fdea 	bl	800958c <lwip_netconn_do_writemore>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d02e      	beq.n	8009a1c <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	785b      	ldrb	r3, [r3, #1]
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d006      	beq.n	80099d6 <lwip_netconn_do_write+0xb2>
 80099c8:	4b16      	ldr	r3, [pc, #88]	; (8009a24 <lwip_netconn_do_write+0x100>)
 80099ca:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80099ce:	4919      	ldr	r1, [pc, #100]	; (8009a34 <lwip_netconn_do_write+0x110>)
 80099d0:	4816      	ldr	r0, [pc, #88]	; (8009a2c <lwip_netconn_do_write+0x108>)
 80099d2:	f00d fabb 	bl	8016f4c <iprintf>
          UNLOCK_TCPIP_CORE();
 80099d6:	4818      	ldr	r0, [pc, #96]	; (8009a38 <lwip_netconn_do_write+0x114>)
 80099d8:	f00d f9f3 	bl	8016dc2 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	330c      	adds	r3, #12
 80099e2:	2100      	movs	r1, #0
 80099e4:	4618      	mov	r0, r3
 80099e6:	f00d f94a 	bl	8016c7e <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80099ea:	4813      	ldr	r0, [pc, #76]	; (8009a38 <lwip_netconn_do_write+0x114>)
 80099ec:	f00d f9da 	bl	8016da4 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	785b      	ldrb	r3, [r3, #1]
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d110      	bne.n	8009a1c <lwip_netconn_do_write+0xf8>
 80099fa:	4b0a      	ldr	r3, [pc, #40]	; (8009a24 <lwip_netconn_do_write+0x100>)
 80099fc:	f240 722c 	movw	r2, #1836	; 0x72c
 8009a00:	490c      	ldr	r1, [pc, #48]	; (8009a34 <lwip_netconn_do_write+0x110>)
 8009a02:	480a      	ldr	r0, [pc, #40]	; (8009a2c <lwip_netconn_do_write+0x108>)
 8009a04:	f00d faa2 	bl	8016f4c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8009a08:	e008      	b.n	8009a1c <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8009a0a:	23f5      	movs	r3, #245	; 0xf5
 8009a0c:	73fb      	strb	r3, [r7, #15]
 8009a0e:	e001      	b.n	8009a14 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8009a10:	23fa      	movs	r3, #250	; 0xfa
 8009a12:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	7bfa      	ldrb	r2, [r7, #15]
 8009a18:	711a      	strb	r2, [r3, #4]
 8009a1a:	e000      	b.n	8009a1e <lwip_netconn_do_write+0xfa>
        return;
 8009a1c:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8009a1e:	3710      	adds	r7, #16
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	080181c4 	.word	0x080181c4
 8009a28:	08018568 	.word	0x08018568
 8009a2c:	08018208 	.word	0x08018208
 8009a30:	080186f0 	.word	0x080186f0
 8009a34:	08018584 	.word	0x08018584
 8009a38:	2000b8c0 	.word	0x2000b8c0

08009a3c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	785b      	ldrb	r3, [r3, #1]
 8009a4e:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d069      	beq.n	8009b2e <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	781b      	ldrb	r3, [r3, #0]
 8009a60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8009a64:	2b10      	cmp	r3, #16
 8009a66:	d162      	bne.n	8009b2e <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009a6c:	2b03      	cmp	r3, #3
 8009a6e:	d002      	beq.n	8009a76 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009a70:	7afb      	ldrb	r3, [r7, #11]
 8009a72:	2b02      	cmp	r3, #2
 8009a74:	d05b      	beq.n	8009b2e <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8009a76:	7afb      	ldrb	r3, [r7, #11]
 8009a78:	2b03      	cmp	r3, #3
 8009a7a:	d103      	bne.n	8009a84 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	22f5      	movs	r2, #245	; 0xf5
 8009a80:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009a82:	e059      	b.n	8009b38 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8009a84:	7afb      	ldrb	r3, [r7, #11]
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	d103      	bne.n	8009a92 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	22fb      	movs	r2, #251	; 0xfb
 8009a8e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009a90:	e052      	b.n	8009b38 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	7a1b      	ldrb	r3, [r3, #8]
 8009a96:	f003 0301 	and.w	r3, r3, #1
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d004      	beq.n	8009aa8 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f7ff f9a0 	bl	8008de8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	6a1b      	ldr	r3, [r3, #32]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d006      	beq.n	8009ac0 <lwip_netconn_do_close+0x84>
 8009ab2:	4b23      	ldr	r3, [pc, #140]	; (8009b40 <lwip_netconn_do_close+0x104>)
 8009ab4:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8009ab8:	4922      	ldr	r1, [pc, #136]	; (8009b44 <lwip_netconn_do_close+0x108>)
 8009aba:	4823      	ldr	r0, [pc, #140]	; (8009b48 <lwip_netconn_do_close+0x10c>)
 8009abc:	f00d fa46 	bl	8016f4c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	2204      	movs	r2, #4
 8009ac6:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	68fa      	ldr	r2, [r7, #12]
 8009ace:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	2100      	movs	r1, #0
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f7ff fa04 	bl	8008ee4 <lwip_netconn_do_close_internal>
 8009adc:	4603      	mov	r3, r0
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d029      	beq.n	8009b36 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	785b      	ldrb	r3, [r3, #1]
 8009ae8:	2b04      	cmp	r3, #4
 8009aea:	d006      	beq.n	8009afa <lwip_netconn_do_close+0xbe>
 8009aec:	4b14      	ldr	r3, [pc, #80]	; (8009b40 <lwip_netconn_do_close+0x104>)
 8009aee:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8009af2:	4916      	ldr	r1, [pc, #88]	; (8009b4c <lwip_netconn_do_close+0x110>)
 8009af4:	4814      	ldr	r0, [pc, #80]	; (8009b48 <lwip_netconn_do_close+0x10c>)
 8009af6:	f00d fa29 	bl	8016f4c <iprintf>
        UNLOCK_TCPIP_CORE();
 8009afa:	4815      	ldr	r0, [pc, #84]	; (8009b50 <lwip_netconn_do_close+0x114>)
 8009afc:	f00d f961 	bl	8016dc2 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	330c      	adds	r3, #12
 8009b06:	2100      	movs	r1, #0
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f00d f8b8 	bl	8016c7e <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8009b0e:	4810      	ldr	r0, [pc, #64]	; (8009b50 <lwip_netconn_do_close+0x114>)
 8009b10:	f00d f948 	bl	8016da4 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	785b      	ldrb	r3, [r3, #1]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d00b      	beq.n	8009b36 <lwip_netconn_do_close+0xfa>
 8009b1e:	4b08      	ldr	r3, [pc, #32]	; (8009b40 <lwip_netconn_do_close+0x104>)
 8009b20:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8009b24:	4909      	ldr	r1, [pc, #36]	; (8009b4c <lwip_netconn_do_close+0x110>)
 8009b26:	4808      	ldr	r0, [pc, #32]	; (8009b48 <lwip_netconn_do_close+0x10c>)
 8009b28:	f00d fa10 	bl	8016f4c <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8009b2c:	e003      	b.n	8009b36 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	22f5      	movs	r2, #245	; 0xf5
 8009b32:	711a      	strb	r2, [r3, #4]
 8009b34:	e000      	b.n	8009b38 <lwip_netconn_do_close+0xfc>
      return;
 8009b36:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009b38:	3710      	adds	r7, #16
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	080181c4 	.word	0x080181c4
 8009b44:	08018568 	.word	0x08018568
 8009b48:	08018208 	.word	0x08018208
 8009b4c:	08018584 	.word	0x08018584
 8009b50:	2000b8c0 	.word	0x2000b8c0

08009b54 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d013      	beq.n	8009b8a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d00b      	beq.n	8009b82 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f001 fcfa 	bl	800b568 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	605a      	str	r2, [r3, #4]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	685a      	ldr	r2, [r3, #4]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8009b82:	6879      	ldr	r1, [r7, #4]
 8009b84:	2006      	movs	r0, #6
 8009b86:	f000 fec1 	bl	800a90c <memp_free>
  }
}
 8009b8a:	bf00      	nop
 8009b8c:	3708      	adds	r7, #8
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
	...

08009b94 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009b9e:	f008 f94f 	bl	8011e40 <sys_timeouts_sleeptime>
 8009ba2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009baa:	d10b      	bne.n	8009bc4 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009bac:	4813      	ldr	r0, [pc, #76]	; (8009bfc <tcpip_timeouts_mbox_fetch+0x68>)
 8009bae:	f00d f908 	bl	8016dc2 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	6839      	ldr	r1, [r7, #0]
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f00c ffc0 	bl	8016b3c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009bbc:	480f      	ldr	r0, [pc, #60]	; (8009bfc <tcpip_timeouts_mbox_fetch+0x68>)
 8009bbe:	f00d f8f1 	bl	8016da4 <sys_mutex_lock>
    return;
 8009bc2:	e018      	b.n	8009bf6 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d102      	bne.n	8009bd0 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8009bca:	f008 f8ff 	bl	8011dcc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009bce:	e7e6      	b.n	8009b9e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009bd0:	480a      	ldr	r0, [pc, #40]	; (8009bfc <tcpip_timeouts_mbox_fetch+0x68>)
 8009bd2:	f00d f8f6 	bl	8016dc2 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8009bd6:	68fa      	ldr	r2, [r7, #12]
 8009bd8:	6839      	ldr	r1, [r7, #0]
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f00c ffae 	bl	8016b3c <sys_arch_mbox_fetch>
 8009be0:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8009be2:	4806      	ldr	r0, [pc, #24]	; (8009bfc <tcpip_timeouts_mbox_fetch+0x68>)
 8009be4:	f00d f8de 	bl	8016da4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bee:	d102      	bne.n	8009bf6 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009bf0:	f008 f8ec 	bl	8011dcc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009bf4:	e7d3      	b.n	8009b9e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8009bf6:	3710      	adds	r7, #16
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	2000b8c0 	.word	0x2000b8c0

08009c00 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b084      	sub	sp, #16
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8009c08:	4810      	ldr	r0, [pc, #64]	; (8009c4c <tcpip_thread+0x4c>)
 8009c0a:	f00d f8cb 	bl	8016da4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8009c0e:	4b10      	ldr	r3, [pc, #64]	; (8009c50 <tcpip_thread+0x50>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d005      	beq.n	8009c22 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8009c16:	4b0e      	ldr	r3, [pc, #56]	; (8009c50 <tcpip_thread+0x50>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4a0e      	ldr	r2, [pc, #56]	; (8009c54 <tcpip_thread+0x54>)
 8009c1c:	6812      	ldr	r2, [r2, #0]
 8009c1e:	4610      	mov	r0, r2
 8009c20:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009c22:	f107 030c 	add.w	r3, r7, #12
 8009c26:	4619      	mov	r1, r3
 8009c28:	480b      	ldr	r0, [pc, #44]	; (8009c58 <tcpip_thread+0x58>)
 8009c2a:	f7ff ffb3 	bl	8009b94 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d106      	bne.n	8009c42 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009c34:	4b09      	ldr	r3, [pc, #36]	; (8009c5c <tcpip_thread+0x5c>)
 8009c36:	2291      	movs	r2, #145	; 0x91
 8009c38:	4909      	ldr	r1, [pc, #36]	; (8009c60 <tcpip_thread+0x60>)
 8009c3a:	480a      	ldr	r0, [pc, #40]	; (8009c64 <tcpip_thread+0x64>)
 8009c3c:	f00d f986 	bl	8016f4c <iprintf>
      continue;
 8009c40:	e003      	b.n	8009c4a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	4618      	mov	r0, r3
 8009c46:	f000 f80f 	bl	8009c68 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009c4a:	e7ea      	b.n	8009c22 <tcpip_thread+0x22>
 8009c4c:	2000b8c0 	.word	0x2000b8c0
 8009c50:	20008168 	.word	0x20008168
 8009c54:	2000816c 	.word	0x2000816c
 8009c58:	20008170 	.word	0x20008170
 8009c5c:	0801871c 	.word	0x0801871c
 8009c60:	0801874c 	.word	0x0801874c
 8009c64:	0801876c 	.word	0x0801876c

08009c68 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d018      	beq.n	8009caa <tcpip_thread_handle_msg+0x42>
 8009c78:	2b02      	cmp	r3, #2
 8009c7a:	d021      	beq.n	8009cc0 <tcpip_thread_handle_msg+0x58>
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d126      	bne.n	8009cce <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	68db      	ldr	r3, [r3, #12]
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	6850      	ldr	r0, [r2, #4]
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	6892      	ldr	r2, [r2, #8]
 8009c8c:	4611      	mov	r1, r2
 8009c8e:	4798      	blx	r3
 8009c90:	4603      	mov	r3, r0
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d004      	beq.n	8009ca0 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f001 fc64 	bl	800b568 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009ca0:	6879      	ldr	r1, [r7, #4]
 8009ca2:	2009      	movs	r0, #9
 8009ca4:	f000 fe32 	bl	800a90c <memp_free>
      break;
 8009ca8:	e018      	b.n	8009cdc <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	6892      	ldr	r2, [r2, #8]
 8009cb2:	4610      	mov	r0, r2
 8009cb4:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009cb6:	6879      	ldr	r1, [r7, #4]
 8009cb8:	2008      	movs	r0, #8
 8009cba:	f000 fe27 	bl	800a90c <memp_free>
      break;
 8009cbe:	e00d      	b.n	8009cdc <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	6892      	ldr	r2, [r2, #8]
 8009cc8:	4610      	mov	r0, r2
 8009cca:	4798      	blx	r3
      break;
 8009ccc:	e006      	b.n	8009cdc <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009cce:	4b05      	ldr	r3, [pc, #20]	; (8009ce4 <tcpip_thread_handle_msg+0x7c>)
 8009cd0:	22cf      	movs	r2, #207	; 0xcf
 8009cd2:	4905      	ldr	r1, [pc, #20]	; (8009ce8 <tcpip_thread_handle_msg+0x80>)
 8009cd4:	4805      	ldr	r0, [pc, #20]	; (8009cec <tcpip_thread_handle_msg+0x84>)
 8009cd6:	f00d f939 	bl	8016f4c <iprintf>
      break;
 8009cda:	bf00      	nop
  }
}
 8009cdc:	bf00      	nop
 8009cde:	3708      	adds	r7, #8
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}
 8009ce4:	0801871c 	.word	0x0801871c
 8009ce8:	0801874c 	.word	0x0801874c
 8009cec:	0801876c 	.word	0x0801876c

08009cf0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b086      	sub	sp, #24
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	60b9      	str	r1, [r7, #8]
 8009cfa:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009cfc:	481a      	ldr	r0, [pc, #104]	; (8009d68 <tcpip_inpkt+0x78>)
 8009cfe:	f00c ff78 	bl	8016bf2 <sys_mbox_valid>
 8009d02:	4603      	mov	r3, r0
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d105      	bne.n	8009d14 <tcpip_inpkt+0x24>
 8009d08:	4b18      	ldr	r3, [pc, #96]	; (8009d6c <tcpip_inpkt+0x7c>)
 8009d0a:	22fc      	movs	r2, #252	; 0xfc
 8009d0c:	4918      	ldr	r1, [pc, #96]	; (8009d70 <tcpip_inpkt+0x80>)
 8009d0e:	4819      	ldr	r0, [pc, #100]	; (8009d74 <tcpip_inpkt+0x84>)
 8009d10:	f00d f91c 	bl	8016f4c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009d14:	2009      	movs	r0, #9
 8009d16:	f000 fda7 	bl	800a868 <memp_malloc>
 8009d1a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d102      	bne.n	8009d28 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009d22:	f04f 33ff 	mov.w	r3, #4294967295
 8009d26:	e01a      	b.n	8009d5e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	68fa      	ldr	r2, [r7, #12]
 8009d32:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	68ba      	ldr	r2, [r7, #8]
 8009d38:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	687a      	ldr	r2, [r7, #4]
 8009d3e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009d40:	6979      	ldr	r1, [r7, #20]
 8009d42:	4809      	ldr	r0, [pc, #36]	; (8009d68 <tcpip_inpkt+0x78>)
 8009d44:	f00c fee0 	bl	8016b08 <sys_mbox_trypost>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d006      	beq.n	8009d5c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009d4e:	6979      	ldr	r1, [r7, #20]
 8009d50:	2009      	movs	r0, #9
 8009d52:	f000 fddb 	bl	800a90c <memp_free>
    return ERR_MEM;
 8009d56:	f04f 33ff 	mov.w	r3, #4294967295
 8009d5a:	e000      	b.n	8009d5e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8009d5c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3718      	adds	r7, #24
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
 8009d66:	bf00      	nop
 8009d68:	20008170 	.word	0x20008170
 8009d6c:	0801871c 	.word	0x0801871c
 8009d70:	08018794 	.word	0x08018794
 8009d74:	0801876c 	.word	0x0801876c

08009d78 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009d88:	f003 0318 	and.w	r3, r3, #24
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d006      	beq.n	8009d9e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009d90:	4a08      	ldr	r2, [pc, #32]	; (8009db4 <tcpip_input+0x3c>)
 8009d92:	6839      	ldr	r1, [r7, #0]
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f7ff ffab 	bl	8009cf0 <tcpip_inpkt>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	e005      	b.n	8009daa <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8009d9e:	4a06      	ldr	r2, [pc, #24]	; (8009db8 <tcpip_input+0x40>)
 8009da0:	6839      	ldr	r1, [r7, #0]
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f7ff ffa4 	bl	8009cf0 <tcpip_inpkt>
 8009da8:	4603      	mov	r3, r0
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3708      	adds	r7, #8
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	bf00      	nop
 8009db4:	080168f5 	.word	0x080168f5
 8009db8:	080157d9 	.word	0x080157d9

08009dbc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009dc6:	4819      	ldr	r0, [pc, #100]	; (8009e2c <tcpip_try_callback+0x70>)
 8009dc8:	f00c ff13 	bl	8016bf2 <sys_mbox_valid>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d106      	bne.n	8009de0 <tcpip_try_callback+0x24>
 8009dd2:	4b17      	ldr	r3, [pc, #92]	; (8009e30 <tcpip_try_callback+0x74>)
 8009dd4:	f240 125d 	movw	r2, #349	; 0x15d
 8009dd8:	4916      	ldr	r1, [pc, #88]	; (8009e34 <tcpip_try_callback+0x78>)
 8009dda:	4817      	ldr	r0, [pc, #92]	; (8009e38 <tcpip_try_callback+0x7c>)
 8009ddc:	f00d f8b6 	bl	8016f4c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009de0:	2008      	movs	r0, #8
 8009de2:	f000 fd41 	bl	800a868 <memp_malloc>
 8009de6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d102      	bne.n	8009df4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8009dee:	f04f 33ff 	mov.w	r3, #4294967295
 8009df2:	e017      	b.n	8009e24 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2201      	movs	r2, #1
 8009df8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	683a      	ldr	r2, [r7, #0]
 8009e04:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009e06:	68f9      	ldr	r1, [r7, #12]
 8009e08:	4808      	ldr	r0, [pc, #32]	; (8009e2c <tcpip_try_callback+0x70>)
 8009e0a:	f00c fe7d 	bl	8016b08 <sys_mbox_trypost>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d006      	beq.n	8009e22 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8009e14:	68f9      	ldr	r1, [r7, #12]
 8009e16:	2008      	movs	r0, #8
 8009e18:	f000 fd78 	bl	800a90c <memp_free>
    return ERR_MEM;
 8009e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8009e20:	e000      	b.n	8009e24 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8009e22:	2300      	movs	r3, #0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3710      	adds	r7, #16
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	20008170 	.word	0x20008170
 8009e30:	0801871c 	.word	0x0801871c
 8009e34:	08018794 	.word	0x08018794
 8009e38:	0801876c 	.word	0x0801876c

08009e3c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8009e48:	4806      	ldr	r0, [pc, #24]	; (8009e64 <tcpip_send_msg_wait_sem+0x28>)
 8009e4a:	f00c ffab 	bl	8016da4 <sys_mutex_lock>
  fn(apimsg);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	68b8      	ldr	r0, [r7, #8]
 8009e52:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8009e54:	4803      	ldr	r0, [pc, #12]	; (8009e64 <tcpip_send_msg_wait_sem+0x28>)
 8009e56:	f00c ffb4 	bl	8016dc2 <sys_mutex_unlock>
  return ERR_OK;
 8009e5a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3710      	adds	r7, #16
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}
 8009e64:	2000b8c0 	.word	0x2000b8c0

08009e68 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af02      	add	r7, sp, #8
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	6039      	str	r1, [r7, #0]
  lwip_init();
 8009e72:	f000 f871 	bl	8009f58 <lwip_init>

  tcpip_init_done = initfunc;
 8009e76:	4a17      	ldr	r2, [pc, #92]	; (8009ed4 <tcpip_init+0x6c>)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009e7c:	4a16      	ldr	r2, [pc, #88]	; (8009ed8 <tcpip_init+0x70>)
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009e82:	2106      	movs	r1, #6
 8009e84:	4815      	ldr	r0, [pc, #84]	; (8009edc <tcpip_init+0x74>)
 8009e86:	f00c fe0b 	bl	8016aa0 <sys_mbox_new>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d006      	beq.n	8009e9e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009e90:	4b13      	ldr	r3, [pc, #76]	; (8009ee0 <tcpip_init+0x78>)
 8009e92:	f240 2261 	movw	r2, #609	; 0x261
 8009e96:	4913      	ldr	r1, [pc, #76]	; (8009ee4 <tcpip_init+0x7c>)
 8009e98:	4813      	ldr	r0, [pc, #76]	; (8009ee8 <tcpip_init+0x80>)
 8009e9a:	f00d f857 	bl	8016f4c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009e9e:	4813      	ldr	r0, [pc, #76]	; (8009eec <tcpip_init+0x84>)
 8009ea0:	f00c ff64 	bl	8016d6c <sys_mutex_new>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d006      	beq.n	8009eb8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8009eaa:	4b0d      	ldr	r3, [pc, #52]	; (8009ee0 <tcpip_init+0x78>)
 8009eac:	f240 2265 	movw	r2, #613	; 0x265
 8009eb0:	490f      	ldr	r1, [pc, #60]	; (8009ef0 <tcpip_init+0x88>)
 8009eb2:	480d      	ldr	r0, [pc, #52]	; (8009ee8 <tcpip_init+0x80>)
 8009eb4:	f00d f84a 	bl	8016f4c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8009eb8:	2300      	movs	r3, #0
 8009eba:	9300      	str	r3, [sp, #0]
 8009ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	490c      	ldr	r1, [pc, #48]	; (8009ef4 <tcpip_init+0x8c>)
 8009ec4:	480c      	ldr	r0, [pc, #48]	; (8009ef8 <tcpip_init+0x90>)
 8009ec6:	f00c ff89 	bl	8016ddc <sys_thread_new>
}
 8009eca:	bf00      	nop
 8009ecc:	3708      	adds	r7, #8
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	20008168 	.word	0x20008168
 8009ed8:	2000816c 	.word	0x2000816c
 8009edc:	20008170 	.word	0x20008170
 8009ee0:	0801871c 	.word	0x0801871c
 8009ee4:	080187a4 	.word	0x080187a4
 8009ee8:	0801876c 	.word	0x0801876c
 8009eec:	2000b8c0 	.word	0x2000b8c0
 8009ef0:	080187c8 	.word	0x080187c8
 8009ef4:	08009c01 	.word	0x08009c01
 8009ef8:	080187ec 	.word	0x080187ec

08009efc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b083      	sub	sp, #12
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	4603      	mov	r3, r0
 8009f04:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009f06:	88fb      	ldrh	r3, [r7, #6]
 8009f08:	021b      	lsls	r3, r3, #8
 8009f0a:	b21a      	sxth	r2, r3
 8009f0c:	88fb      	ldrh	r3, [r7, #6]
 8009f0e:	0a1b      	lsrs	r3, r3, #8
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	b21b      	sxth	r3, r3
 8009f14:	4313      	orrs	r3, r2
 8009f16:	b21b      	sxth	r3, r3
 8009f18:	b29b      	uxth	r3, r3
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	370c      	adds	r7, #12
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr

08009f26 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009f26:	b480      	push	{r7}
 8009f28:	b083      	sub	sp, #12
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	061a      	lsls	r2, r3, #24
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	021b      	lsls	r3, r3, #8
 8009f36:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009f3a:	431a      	orrs	r2, r3
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	0a1b      	lsrs	r3, r3, #8
 8009f40:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009f44:	431a      	orrs	r2, r3
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	0e1b      	lsrs	r3, r3, #24
 8009f4a:	4313      	orrs	r3, r2
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	370c      	adds	r7, #12
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr

08009f58 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b082      	sub	sp, #8
 8009f5c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8009f62:	f00c fef5 	bl	8016d50 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8009f66:	f000 f8d5 	bl	800a114 <mem_init>
  memp_init();
 8009f6a:	f000 fc31 	bl	800a7d0 <memp_init>
  pbuf_init();
  netif_init();
 8009f6e:	f000 fcf7 	bl	800a960 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009f72:	f007 ff9d 	bl	8011eb0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009f76:	f001 fda1 	bl	800babc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8009f7a:	f007 fee1 	bl	8011d40 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009f7e:	bf00      	nop
 8009f80:	3708      	adds	r7, #8
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
	...

08009f88 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b083      	sub	sp, #12
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	4603      	mov	r3, r0
 8009f90:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8009f92:	4b05      	ldr	r3, [pc, #20]	; (8009fa8 <ptr_to_mem+0x20>)
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	88fb      	ldrh	r3, [r7, #6]
 8009f98:	4413      	add	r3, r2
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	370c      	adds	r7, #12
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr
 8009fa6:	bf00      	nop
 8009fa8:	20008174 	.word	0x20008174

08009fac <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	4a05      	ldr	r2, [pc, #20]	; (8009fcc <mem_to_ptr+0x20>)
 8009fb8:	6812      	ldr	r2, [r2, #0]
 8009fba:	1a9b      	subs	r3, r3, r2
 8009fbc:	b29b      	uxth	r3, r3
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	370c      	adds	r7, #12
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr
 8009fca:	bf00      	nop
 8009fcc:	20008174 	.word	0x20008174

08009fd0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009fd0:	b590      	push	{r4, r7, lr}
 8009fd2:	b085      	sub	sp, #20
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009fd8:	4b45      	ldr	r3, [pc, #276]	; (800a0f0 <plug_holes+0x120>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d206      	bcs.n	8009ff0 <plug_holes+0x20>
 8009fe2:	4b44      	ldr	r3, [pc, #272]	; (800a0f4 <plug_holes+0x124>)
 8009fe4:	f240 12df 	movw	r2, #479	; 0x1df
 8009fe8:	4943      	ldr	r1, [pc, #268]	; (800a0f8 <plug_holes+0x128>)
 8009fea:	4844      	ldr	r0, [pc, #272]	; (800a0fc <plug_holes+0x12c>)
 8009fec:	f00c ffae 	bl	8016f4c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009ff0:	4b43      	ldr	r3, [pc, #268]	; (800a100 <plug_holes+0x130>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d306      	bcc.n	800a008 <plug_holes+0x38>
 8009ffa:	4b3e      	ldr	r3, [pc, #248]	; (800a0f4 <plug_holes+0x124>)
 8009ffc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a000:	4940      	ldr	r1, [pc, #256]	; (800a104 <plug_holes+0x134>)
 800a002:	483e      	ldr	r0, [pc, #248]	; (800a0fc <plug_holes+0x12c>)
 800a004:	f00c ffa2 	bl	8016f4c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	791b      	ldrb	r3, [r3, #4]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d006      	beq.n	800a01e <plug_holes+0x4e>
 800a010:	4b38      	ldr	r3, [pc, #224]	; (800a0f4 <plug_holes+0x124>)
 800a012:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a016:	493c      	ldr	r1, [pc, #240]	; (800a108 <plug_holes+0x138>)
 800a018:	4838      	ldr	r0, [pc, #224]	; (800a0fc <plug_holes+0x12c>)
 800a01a:	f00c ff97 	bl	8016f4c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	881b      	ldrh	r3, [r3, #0]
 800a022:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a026:	d906      	bls.n	800a036 <plug_holes+0x66>
 800a028:	4b32      	ldr	r3, [pc, #200]	; (800a0f4 <plug_holes+0x124>)
 800a02a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a02e:	4937      	ldr	r1, [pc, #220]	; (800a10c <plug_holes+0x13c>)
 800a030:	4832      	ldr	r0, [pc, #200]	; (800a0fc <plug_holes+0x12c>)
 800a032:	f00c ff8b 	bl	8016f4c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	881b      	ldrh	r3, [r3, #0]
 800a03a:	4618      	mov	r0, r3
 800a03c:	f7ff ffa4 	bl	8009f88 <ptr_to_mem>
 800a040:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a042:	687a      	ldr	r2, [r7, #4]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	429a      	cmp	r2, r3
 800a048:	d024      	beq.n	800a094 <plug_holes+0xc4>
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	791b      	ldrb	r3, [r3, #4]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d120      	bne.n	800a094 <plug_holes+0xc4>
 800a052:	4b2b      	ldr	r3, [pc, #172]	; (800a100 <plug_holes+0x130>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	68fa      	ldr	r2, [r7, #12]
 800a058:	429a      	cmp	r2, r3
 800a05a:	d01b      	beq.n	800a094 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a05c:	4b2c      	ldr	r3, [pc, #176]	; (800a110 <plug_holes+0x140>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	68fa      	ldr	r2, [r7, #12]
 800a062:	429a      	cmp	r2, r3
 800a064:	d102      	bne.n	800a06c <plug_holes+0x9c>
      lfree = mem;
 800a066:	4a2a      	ldr	r2, [pc, #168]	; (800a110 <plug_holes+0x140>)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	881a      	ldrh	r2, [r3, #0]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	881b      	ldrh	r3, [r3, #0]
 800a078:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a07c:	d00a      	beq.n	800a094 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	881b      	ldrh	r3, [r3, #0]
 800a082:	4618      	mov	r0, r3
 800a084:	f7ff ff80 	bl	8009f88 <ptr_to_mem>
 800a088:	4604      	mov	r4, r0
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f7ff ff8e 	bl	8009fac <mem_to_ptr>
 800a090:	4603      	mov	r3, r0
 800a092:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	885b      	ldrh	r3, [r3, #2]
 800a098:	4618      	mov	r0, r3
 800a09a:	f7ff ff75 	bl	8009f88 <ptr_to_mem>
 800a09e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a0a0:	68ba      	ldr	r2, [r7, #8]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d01f      	beq.n	800a0e8 <plug_holes+0x118>
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	791b      	ldrb	r3, [r3, #4]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d11b      	bne.n	800a0e8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a0b0:	4b17      	ldr	r3, [pc, #92]	; (800a110 <plug_holes+0x140>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d102      	bne.n	800a0c0 <plug_holes+0xf0>
      lfree = pmem;
 800a0ba:	4a15      	ldr	r2, [pc, #84]	; (800a110 <plug_holes+0x140>)
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	881a      	ldrh	r2, [r3, #0]
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	881b      	ldrh	r3, [r3, #0]
 800a0cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a0d0:	d00a      	beq.n	800a0e8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	881b      	ldrh	r3, [r3, #0]
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f7ff ff56 	bl	8009f88 <ptr_to_mem>
 800a0dc:	4604      	mov	r4, r0
 800a0de:	68b8      	ldr	r0, [r7, #8]
 800a0e0:	f7ff ff64 	bl	8009fac <mem_to_ptr>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a0e8:	bf00      	nop
 800a0ea:	3714      	adds	r7, #20
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd90      	pop	{r4, r7, pc}
 800a0f0:	20008174 	.word	0x20008174
 800a0f4:	080187fc 	.word	0x080187fc
 800a0f8:	0801882c 	.word	0x0801882c
 800a0fc:	08018844 	.word	0x08018844
 800a100:	20008178 	.word	0x20008178
 800a104:	0801886c 	.word	0x0801886c
 800a108:	08018888 	.word	0x08018888
 800a10c:	080188a4 	.word	0x080188a4
 800a110:	20008180 	.word	0x20008180

0800a114 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b082      	sub	sp, #8
 800a118:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a11a:	4b1f      	ldr	r3, [pc, #124]	; (800a198 <mem_init+0x84>)
 800a11c:	3303      	adds	r3, #3
 800a11e:	f023 0303 	bic.w	r3, r3, #3
 800a122:	461a      	mov	r2, r3
 800a124:	4b1d      	ldr	r3, [pc, #116]	; (800a19c <mem_init+0x88>)
 800a126:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a128:	4b1c      	ldr	r3, [pc, #112]	; (800a19c <mem_init+0x88>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a134:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2200      	movs	r2, #0
 800a13a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2200      	movs	r2, #0
 800a140:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a142:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800a146:	f7ff ff1f 	bl	8009f88 <ptr_to_mem>
 800a14a:	4602      	mov	r2, r0
 800a14c:	4b14      	ldr	r3, [pc, #80]	; (800a1a0 <mem_init+0x8c>)
 800a14e:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800a150:	4b13      	ldr	r3, [pc, #76]	; (800a1a0 <mem_init+0x8c>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	2201      	movs	r2, #1
 800a156:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a158:	4b11      	ldr	r3, [pc, #68]	; (800a1a0 <mem_init+0x8c>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a160:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a162:	4b0f      	ldr	r3, [pc, #60]	; (800a1a0 <mem_init+0x8c>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a16a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a16c:	4b0b      	ldr	r3, [pc, #44]	; (800a19c <mem_init+0x88>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a0c      	ldr	r2, [pc, #48]	; (800a1a4 <mem_init+0x90>)
 800a172:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a174:	480c      	ldr	r0, [pc, #48]	; (800a1a8 <mem_init+0x94>)
 800a176:	f00c fdf9 	bl	8016d6c <sys_mutex_new>
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d006      	beq.n	800a18e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a180:	4b0a      	ldr	r3, [pc, #40]	; (800a1ac <mem_init+0x98>)
 800a182:	f240 221f 	movw	r2, #543	; 0x21f
 800a186:	490a      	ldr	r1, [pc, #40]	; (800a1b0 <mem_init+0x9c>)
 800a188:	480a      	ldr	r0, [pc, #40]	; (800a1b4 <mem_init+0xa0>)
 800a18a:	f00c fedf 	bl	8016f4c <iprintf>
  }
}
 800a18e:	bf00      	nop
 800a190:	3708      	adds	r7, #8
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop
 800a198:	2000b8dc 	.word	0x2000b8dc
 800a19c:	20008174 	.word	0x20008174
 800a1a0:	20008178 	.word	0x20008178
 800a1a4:	20008180 	.word	0x20008180
 800a1a8:	2000817c 	.word	0x2000817c
 800a1ac:	080187fc 	.word	0x080187fc
 800a1b0:	080188d0 	.word	0x080188d0
 800a1b4:	08018844 	.word	0x08018844

0800a1b8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b086      	sub	sp, #24
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f7ff fef3 	bl	8009fac <mem_to_ptr>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	881b      	ldrh	r3, [r3, #0]
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f7ff feda 	bl	8009f88 <ptr_to_mem>
 800a1d4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	885b      	ldrh	r3, [r3, #2]
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f7ff fed4 	bl	8009f88 <ptr_to_mem>
 800a1e0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	881b      	ldrh	r3, [r3, #0]
 800a1e6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a1ea:	d818      	bhi.n	800a21e <mem_link_valid+0x66>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	885b      	ldrh	r3, [r3, #2]
 800a1f0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a1f4:	d813      	bhi.n	800a21e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a1fa:	8afa      	ldrh	r2, [r7, #22]
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d004      	beq.n	800a20a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	881b      	ldrh	r3, [r3, #0]
 800a204:	8afa      	ldrh	r2, [r7, #22]
 800a206:	429a      	cmp	r2, r3
 800a208:	d109      	bne.n	800a21e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a20a:	4b08      	ldr	r3, [pc, #32]	; (800a22c <mem_link_valid+0x74>)
 800a20c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a20e:	693a      	ldr	r2, [r7, #16]
 800a210:	429a      	cmp	r2, r3
 800a212:	d006      	beq.n	800a222 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	885b      	ldrh	r3, [r3, #2]
 800a218:	8afa      	ldrh	r2, [r7, #22]
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d001      	beq.n	800a222 <mem_link_valid+0x6a>
    return 0;
 800a21e:	2300      	movs	r3, #0
 800a220:	e000      	b.n	800a224 <mem_link_valid+0x6c>
  }
  return 1;
 800a222:	2301      	movs	r3, #1
}
 800a224:	4618      	mov	r0, r3
 800a226:	3718      	adds	r7, #24
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	20008178 	.word	0x20008178

0800a230 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b088      	sub	sp, #32
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d070      	beq.n	800a320 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f003 0303 	and.w	r3, r3, #3
 800a244:	2b00      	cmp	r3, #0
 800a246:	d00d      	beq.n	800a264 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a248:	4b37      	ldr	r3, [pc, #220]	; (800a328 <mem_free+0xf8>)
 800a24a:	f240 2273 	movw	r2, #627	; 0x273
 800a24e:	4937      	ldr	r1, [pc, #220]	; (800a32c <mem_free+0xfc>)
 800a250:	4837      	ldr	r0, [pc, #220]	; (800a330 <mem_free+0x100>)
 800a252:	f00c fe7b 	bl	8016f4c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a256:	f00c fde7 	bl	8016e28 <sys_arch_protect>
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	68f8      	ldr	r0, [r7, #12]
 800a25e:	f00c fdf1 	bl	8016e44 <sys_arch_unprotect>
    return;
 800a262:	e05e      	b.n	800a322 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	3b08      	subs	r3, #8
 800a268:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a26a:	4b32      	ldr	r3, [pc, #200]	; (800a334 <mem_free+0x104>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	69fa      	ldr	r2, [r7, #28]
 800a270:	429a      	cmp	r2, r3
 800a272:	d306      	bcc.n	800a282 <mem_free+0x52>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f103 020c 	add.w	r2, r3, #12
 800a27a:	4b2f      	ldr	r3, [pc, #188]	; (800a338 <mem_free+0x108>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	429a      	cmp	r2, r3
 800a280:	d90d      	bls.n	800a29e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a282:	4b29      	ldr	r3, [pc, #164]	; (800a328 <mem_free+0xf8>)
 800a284:	f240 227f 	movw	r2, #639	; 0x27f
 800a288:	492c      	ldr	r1, [pc, #176]	; (800a33c <mem_free+0x10c>)
 800a28a:	4829      	ldr	r0, [pc, #164]	; (800a330 <mem_free+0x100>)
 800a28c:	f00c fe5e 	bl	8016f4c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a290:	f00c fdca 	bl	8016e28 <sys_arch_protect>
 800a294:	6138      	str	r0, [r7, #16]
 800a296:	6938      	ldr	r0, [r7, #16]
 800a298:	f00c fdd4 	bl	8016e44 <sys_arch_unprotect>
    return;
 800a29c:	e041      	b.n	800a322 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a29e:	4828      	ldr	r0, [pc, #160]	; (800a340 <mem_free+0x110>)
 800a2a0:	f00c fd80 	bl	8016da4 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a2a4:	69fb      	ldr	r3, [r7, #28]
 800a2a6:	791b      	ldrb	r3, [r3, #4]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d110      	bne.n	800a2ce <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a2ac:	4b1e      	ldr	r3, [pc, #120]	; (800a328 <mem_free+0xf8>)
 800a2ae:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a2b2:	4924      	ldr	r1, [pc, #144]	; (800a344 <mem_free+0x114>)
 800a2b4:	481e      	ldr	r0, [pc, #120]	; (800a330 <mem_free+0x100>)
 800a2b6:	f00c fe49 	bl	8016f4c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a2ba:	4821      	ldr	r0, [pc, #132]	; (800a340 <mem_free+0x110>)
 800a2bc:	f00c fd81 	bl	8016dc2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a2c0:	f00c fdb2 	bl	8016e28 <sys_arch_protect>
 800a2c4:	6178      	str	r0, [r7, #20]
 800a2c6:	6978      	ldr	r0, [r7, #20]
 800a2c8:	f00c fdbc 	bl	8016e44 <sys_arch_unprotect>
    return;
 800a2cc:	e029      	b.n	800a322 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800a2ce:	69f8      	ldr	r0, [r7, #28]
 800a2d0:	f7ff ff72 	bl	800a1b8 <mem_link_valid>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d110      	bne.n	800a2fc <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a2da:	4b13      	ldr	r3, [pc, #76]	; (800a328 <mem_free+0xf8>)
 800a2dc:	f240 2295 	movw	r2, #661	; 0x295
 800a2e0:	4919      	ldr	r1, [pc, #100]	; (800a348 <mem_free+0x118>)
 800a2e2:	4813      	ldr	r0, [pc, #76]	; (800a330 <mem_free+0x100>)
 800a2e4:	f00c fe32 	bl	8016f4c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a2e8:	4815      	ldr	r0, [pc, #84]	; (800a340 <mem_free+0x110>)
 800a2ea:	f00c fd6a 	bl	8016dc2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a2ee:	f00c fd9b 	bl	8016e28 <sys_arch_protect>
 800a2f2:	61b8      	str	r0, [r7, #24]
 800a2f4:	69b8      	ldr	r0, [r7, #24]
 800a2f6:	f00c fda5 	bl	8016e44 <sys_arch_unprotect>
    return;
 800a2fa:	e012      	b.n	800a322 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a2fc:	69fb      	ldr	r3, [r7, #28]
 800a2fe:	2200      	movs	r2, #0
 800a300:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a302:	4b12      	ldr	r3, [pc, #72]	; (800a34c <mem_free+0x11c>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	69fa      	ldr	r2, [r7, #28]
 800a308:	429a      	cmp	r2, r3
 800a30a:	d202      	bcs.n	800a312 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a30c:	4a0f      	ldr	r2, [pc, #60]	; (800a34c <mem_free+0x11c>)
 800a30e:	69fb      	ldr	r3, [r7, #28]
 800a310:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a312:	69f8      	ldr	r0, [r7, #28]
 800a314:	f7ff fe5c 	bl	8009fd0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a318:	4809      	ldr	r0, [pc, #36]	; (800a340 <mem_free+0x110>)
 800a31a:	f00c fd52 	bl	8016dc2 <sys_mutex_unlock>
 800a31e:	e000      	b.n	800a322 <mem_free+0xf2>
    return;
 800a320:	bf00      	nop
}
 800a322:	3720      	adds	r7, #32
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}
 800a328:	080187fc 	.word	0x080187fc
 800a32c:	080188ec 	.word	0x080188ec
 800a330:	08018844 	.word	0x08018844
 800a334:	20008174 	.word	0x20008174
 800a338:	20008178 	.word	0x20008178
 800a33c:	08018910 	.word	0x08018910
 800a340:	2000817c 	.word	0x2000817c
 800a344:	0801892c 	.word	0x0801892c
 800a348:	08018954 	.word	0x08018954
 800a34c:	20008180 	.word	0x20008180

0800a350 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b088      	sub	sp, #32
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	460b      	mov	r3, r1
 800a35a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a35c:	887b      	ldrh	r3, [r7, #2]
 800a35e:	3303      	adds	r3, #3
 800a360:	b29b      	uxth	r3, r3
 800a362:	f023 0303 	bic.w	r3, r3, #3
 800a366:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a368:	8bfb      	ldrh	r3, [r7, #30]
 800a36a:	2b0b      	cmp	r3, #11
 800a36c:	d801      	bhi.n	800a372 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a36e:	230c      	movs	r3, #12
 800a370:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a372:	8bfb      	ldrh	r3, [r7, #30]
 800a374:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a378:	d803      	bhi.n	800a382 <mem_trim+0x32>
 800a37a:	8bfa      	ldrh	r2, [r7, #30]
 800a37c:	887b      	ldrh	r3, [r7, #2]
 800a37e:	429a      	cmp	r2, r3
 800a380:	d201      	bcs.n	800a386 <mem_trim+0x36>
    return NULL;
 800a382:	2300      	movs	r3, #0
 800a384:	e0d8      	b.n	800a538 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a386:	4b6e      	ldr	r3, [pc, #440]	; (800a540 <mem_trim+0x1f0>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	687a      	ldr	r2, [r7, #4]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d304      	bcc.n	800a39a <mem_trim+0x4a>
 800a390:	4b6c      	ldr	r3, [pc, #432]	; (800a544 <mem_trim+0x1f4>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	429a      	cmp	r2, r3
 800a398:	d306      	bcc.n	800a3a8 <mem_trim+0x58>
 800a39a:	4b6b      	ldr	r3, [pc, #428]	; (800a548 <mem_trim+0x1f8>)
 800a39c:	f240 22d2 	movw	r2, #722	; 0x2d2
 800a3a0:	496a      	ldr	r1, [pc, #424]	; (800a54c <mem_trim+0x1fc>)
 800a3a2:	486b      	ldr	r0, [pc, #428]	; (800a550 <mem_trim+0x200>)
 800a3a4:	f00c fdd2 	bl	8016f4c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a3a8:	4b65      	ldr	r3, [pc, #404]	; (800a540 <mem_trim+0x1f0>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d304      	bcc.n	800a3bc <mem_trim+0x6c>
 800a3b2:	4b64      	ldr	r3, [pc, #400]	; (800a544 <mem_trim+0x1f4>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	687a      	ldr	r2, [r7, #4]
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d307      	bcc.n	800a3cc <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a3bc:	f00c fd34 	bl	8016e28 <sys_arch_protect>
 800a3c0:	60b8      	str	r0, [r7, #8]
 800a3c2:	68b8      	ldr	r0, [r7, #8]
 800a3c4:	f00c fd3e 	bl	8016e44 <sys_arch_unprotect>
    return rmem;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	e0b5      	b.n	800a538 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	3b08      	subs	r3, #8
 800a3d0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a3d2:	69b8      	ldr	r0, [r7, #24]
 800a3d4:	f7ff fdea 	bl	8009fac <mem_to_ptr>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a3dc:	69bb      	ldr	r3, [r7, #24]
 800a3de:	881a      	ldrh	r2, [r3, #0]
 800a3e0:	8afb      	ldrh	r3, [r7, #22]
 800a3e2:	1ad3      	subs	r3, r2, r3
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	3b08      	subs	r3, #8
 800a3e8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a3ea:	8bfa      	ldrh	r2, [r7, #30]
 800a3ec:	8abb      	ldrh	r3, [r7, #20]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d906      	bls.n	800a400 <mem_trim+0xb0>
 800a3f2:	4b55      	ldr	r3, [pc, #340]	; (800a548 <mem_trim+0x1f8>)
 800a3f4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a3f8:	4956      	ldr	r1, [pc, #344]	; (800a554 <mem_trim+0x204>)
 800a3fa:	4855      	ldr	r0, [pc, #340]	; (800a550 <mem_trim+0x200>)
 800a3fc:	f00c fda6 	bl	8016f4c <iprintf>
  if (newsize > size) {
 800a400:	8bfa      	ldrh	r2, [r7, #30]
 800a402:	8abb      	ldrh	r3, [r7, #20]
 800a404:	429a      	cmp	r2, r3
 800a406:	d901      	bls.n	800a40c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800a408:	2300      	movs	r3, #0
 800a40a:	e095      	b.n	800a538 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800a40c:	8bfa      	ldrh	r2, [r7, #30]
 800a40e:	8abb      	ldrh	r3, [r7, #20]
 800a410:	429a      	cmp	r2, r3
 800a412:	d101      	bne.n	800a418 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	e08f      	b.n	800a538 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a418:	484f      	ldr	r0, [pc, #316]	; (800a558 <mem_trim+0x208>)
 800a41a:	f00c fcc3 	bl	8016da4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800a41e:	69bb      	ldr	r3, [r7, #24]
 800a420:	881b      	ldrh	r3, [r3, #0]
 800a422:	4618      	mov	r0, r3
 800a424:	f7ff fdb0 	bl	8009f88 <ptr_to_mem>
 800a428:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	791b      	ldrb	r3, [r3, #4]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d13f      	bne.n	800a4b2 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a432:	69bb      	ldr	r3, [r7, #24]
 800a434:	881b      	ldrh	r3, [r3, #0]
 800a436:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a43a:	d106      	bne.n	800a44a <mem_trim+0xfa>
 800a43c:	4b42      	ldr	r3, [pc, #264]	; (800a548 <mem_trim+0x1f8>)
 800a43e:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a442:	4946      	ldr	r1, [pc, #280]	; (800a55c <mem_trim+0x20c>)
 800a444:	4842      	ldr	r0, [pc, #264]	; (800a550 <mem_trim+0x200>)
 800a446:	f00c fd81 	bl	8016f4c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	881b      	ldrh	r3, [r3, #0]
 800a44e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a450:	8afa      	ldrh	r2, [r7, #22]
 800a452:	8bfb      	ldrh	r3, [r7, #30]
 800a454:	4413      	add	r3, r2
 800a456:	b29b      	uxth	r3, r3
 800a458:	3308      	adds	r3, #8
 800a45a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a45c:	4b40      	ldr	r3, [pc, #256]	; (800a560 <mem_trim+0x210>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	693a      	ldr	r2, [r7, #16]
 800a462:	429a      	cmp	r2, r3
 800a464:	d106      	bne.n	800a474 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800a466:	89fb      	ldrh	r3, [r7, #14]
 800a468:	4618      	mov	r0, r3
 800a46a:	f7ff fd8d 	bl	8009f88 <ptr_to_mem>
 800a46e:	4602      	mov	r2, r0
 800a470:	4b3b      	ldr	r3, [pc, #236]	; (800a560 <mem_trim+0x210>)
 800a472:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a474:	89fb      	ldrh	r3, [r7, #14]
 800a476:	4618      	mov	r0, r3
 800a478:	f7ff fd86 	bl	8009f88 <ptr_to_mem>
 800a47c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	2200      	movs	r2, #0
 800a482:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	89ba      	ldrh	r2, [r7, #12]
 800a488:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	8afa      	ldrh	r2, [r7, #22]
 800a48e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	89fa      	ldrh	r2, [r7, #14]
 800a494:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	881b      	ldrh	r3, [r3, #0]
 800a49a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a49e:	d047      	beq.n	800a530 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	881b      	ldrh	r3, [r3, #0]
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f7ff fd6f 	bl	8009f88 <ptr_to_mem>
 800a4aa:	4602      	mov	r2, r0
 800a4ac:	89fb      	ldrh	r3, [r7, #14]
 800a4ae:	8053      	strh	r3, [r2, #2]
 800a4b0:	e03e      	b.n	800a530 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a4b2:	8bfb      	ldrh	r3, [r7, #30]
 800a4b4:	f103 0214 	add.w	r2, r3, #20
 800a4b8:	8abb      	ldrh	r3, [r7, #20]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d838      	bhi.n	800a530 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a4be:	8afa      	ldrh	r2, [r7, #22]
 800a4c0:	8bfb      	ldrh	r3, [r7, #30]
 800a4c2:	4413      	add	r3, r2
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	3308      	adds	r3, #8
 800a4c8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	881b      	ldrh	r3, [r3, #0]
 800a4ce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a4d2:	d106      	bne.n	800a4e2 <mem_trim+0x192>
 800a4d4:	4b1c      	ldr	r3, [pc, #112]	; (800a548 <mem_trim+0x1f8>)
 800a4d6:	f240 3216 	movw	r2, #790	; 0x316
 800a4da:	4920      	ldr	r1, [pc, #128]	; (800a55c <mem_trim+0x20c>)
 800a4dc:	481c      	ldr	r0, [pc, #112]	; (800a550 <mem_trim+0x200>)
 800a4de:	f00c fd35 	bl	8016f4c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a4e2:	89fb      	ldrh	r3, [r7, #14]
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f7ff fd4f 	bl	8009f88 <ptr_to_mem>
 800a4ea:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a4ec:	4b1c      	ldr	r3, [pc, #112]	; (800a560 <mem_trim+0x210>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	693a      	ldr	r2, [r7, #16]
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d202      	bcs.n	800a4fc <mem_trim+0x1ac>
      lfree = mem2;
 800a4f6:	4a1a      	ldr	r2, [pc, #104]	; (800a560 <mem_trim+0x210>)
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	2200      	movs	r2, #0
 800a500:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a502:	69bb      	ldr	r3, [r7, #24]
 800a504:	881a      	ldrh	r2, [r3, #0]
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	8afa      	ldrh	r2, [r7, #22]
 800a50e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a510:	69bb      	ldr	r3, [r7, #24]
 800a512:	89fa      	ldrh	r2, [r7, #14]
 800a514:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	881b      	ldrh	r3, [r3, #0]
 800a51a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a51e:	d007      	beq.n	800a530 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	881b      	ldrh	r3, [r3, #0]
 800a524:	4618      	mov	r0, r3
 800a526:	f7ff fd2f 	bl	8009f88 <ptr_to_mem>
 800a52a:	4602      	mov	r2, r0
 800a52c:	89fb      	ldrh	r3, [r7, #14]
 800a52e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a530:	4809      	ldr	r0, [pc, #36]	; (800a558 <mem_trim+0x208>)
 800a532:	f00c fc46 	bl	8016dc2 <sys_mutex_unlock>
  return rmem;
 800a536:	687b      	ldr	r3, [r7, #4]
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3720      	adds	r7, #32
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}
 800a540:	20008174 	.word	0x20008174
 800a544:	20008178 	.word	0x20008178
 800a548:	080187fc 	.word	0x080187fc
 800a54c:	08018988 	.word	0x08018988
 800a550:	08018844 	.word	0x08018844
 800a554:	080189a0 	.word	0x080189a0
 800a558:	2000817c 	.word	0x2000817c
 800a55c:	080189c0 	.word	0x080189c0
 800a560:	20008180 	.word	0x20008180

0800a564 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b088      	sub	sp, #32
 800a568:	af00      	add	r7, sp, #0
 800a56a:	4603      	mov	r3, r0
 800a56c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a56e:	88fb      	ldrh	r3, [r7, #6]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d101      	bne.n	800a578 <mem_malloc+0x14>
    return NULL;
 800a574:	2300      	movs	r3, #0
 800a576:	e0e2      	b.n	800a73e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a578:	88fb      	ldrh	r3, [r7, #6]
 800a57a:	3303      	adds	r3, #3
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	f023 0303 	bic.w	r3, r3, #3
 800a582:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a584:	8bbb      	ldrh	r3, [r7, #28]
 800a586:	2b0b      	cmp	r3, #11
 800a588:	d801      	bhi.n	800a58e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a58a:	230c      	movs	r3, #12
 800a58c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a58e:	8bbb      	ldrh	r3, [r7, #28]
 800a590:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a594:	d803      	bhi.n	800a59e <mem_malloc+0x3a>
 800a596:	8bba      	ldrh	r2, [r7, #28]
 800a598:	88fb      	ldrh	r3, [r7, #6]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d201      	bcs.n	800a5a2 <mem_malloc+0x3e>
    return NULL;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	e0cd      	b.n	800a73e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800a5a2:	4869      	ldr	r0, [pc, #420]	; (800a748 <mem_malloc+0x1e4>)
 800a5a4:	f00c fbfe 	bl	8016da4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a5a8:	4b68      	ldr	r3, [pc, #416]	; (800a74c <mem_malloc+0x1e8>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f7ff fcfd 	bl	8009fac <mem_to_ptr>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	83fb      	strh	r3, [r7, #30]
 800a5b6:	e0b7      	b.n	800a728 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a5b8:	8bfb      	ldrh	r3, [r7, #30]
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f7ff fce4 	bl	8009f88 <ptr_to_mem>
 800a5c0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	791b      	ldrb	r3, [r3, #4]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	f040 80a7 	bne.w	800a71a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	881b      	ldrh	r3, [r3, #0]
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	8bfb      	ldrh	r3, [r7, #30]
 800a5d4:	1ad3      	subs	r3, r2, r3
 800a5d6:	f1a3 0208 	sub.w	r2, r3, #8
 800a5da:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	f0c0 809c 	bcc.w	800a71a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	881b      	ldrh	r3, [r3, #0]
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	8bfb      	ldrh	r3, [r7, #30]
 800a5ea:	1ad3      	subs	r3, r2, r3
 800a5ec:	f1a3 0208 	sub.w	r2, r3, #8
 800a5f0:	8bbb      	ldrh	r3, [r7, #28]
 800a5f2:	3314      	adds	r3, #20
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d333      	bcc.n	800a660 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a5f8:	8bfa      	ldrh	r2, [r7, #30]
 800a5fa:	8bbb      	ldrh	r3, [r7, #28]
 800a5fc:	4413      	add	r3, r2
 800a5fe:	b29b      	uxth	r3, r3
 800a600:	3308      	adds	r3, #8
 800a602:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a604:	8a7b      	ldrh	r3, [r7, #18]
 800a606:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a60a:	d106      	bne.n	800a61a <mem_malloc+0xb6>
 800a60c:	4b50      	ldr	r3, [pc, #320]	; (800a750 <mem_malloc+0x1ec>)
 800a60e:	f240 3287 	movw	r2, #903	; 0x387
 800a612:	4950      	ldr	r1, [pc, #320]	; (800a754 <mem_malloc+0x1f0>)
 800a614:	4850      	ldr	r0, [pc, #320]	; (800a758 <mem_malloc+0x1f4>)
 800a616:	f00c fc99 	bl	8016f4c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a61a:	8a7b      	ldrh	r3, [r7, #18]
 800a61c:	4618      	mov	r0, r3
 800a61e:	f7ff fcb3 	bl	8009f88 <ptr_to_mem>
 800a622:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	2200      	movs	r2, #0
 800a628:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	881a      	ldrh	r2, [r3, #0]
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	8bfa      	ldrh	r2, [r7, #30]
 800a636:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	8a7a      	ldrh	r2, [r7, #18]
 800a63c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	2201      	movs	r2, #1
 800a642:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	881b      	ldrh	r3, [r3, #0]
 800a648:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a64c:	d00b      	beq.n	800a666 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	881b      	ldrh	r3, [r3, #0]
 800a652:	4618      	mov	r0, r3
 800a654:	f7ff fc98 	bl	8009f88 <ptr_to_mem>
 800a658:	4602      	mov	r2, r0
 800a65a:	8a7b      	ldrh	r3, [r7, #18]
 800a65c:	8053      	strh	r3, [r2, #2]
 800a65e:	e002      	b.n	800a666 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	2201      	movs	r2, #1
 800a664:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a666:	4b39      	ldr	r3, [pc, #228]	; (800a74c <mem_malloc+0x1e8>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	697a      	ldr	r2, [r7, #20]
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d127      	bne.n	800a6c0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800a670:	4b36      	ldr	r3, [pc, #216]	; (800a74c <mem_malloc+0x1e8>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a676:	e005      	b.n	800a684 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a678:	69bb      	ldr	r3, [r7, #24]
 800a67a:	881b      	ldrh	r3, [r3, #0]
 800a67c:	4618      	mov	r0, r3
 800a67e:	f7ff fc83 	bl	8009f88 <ptr_to_mem>
 800a682:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a684:	69bb      	ldr	r3, [r7, #24]
 800a686:	791b      	ldrb	r3, [r3, #4]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d004      	beq.n	800a696 <mem_malloc+0x132>
 800a68c:	4b33      	ldr	r3, [pc, #204]	; (800a75c <mem_malloc+0x1f8>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	69ba      	ldr	r2, [r7, #24]
 800a692:	429a      	cmp	r2, r3
 800a694:	d1f0      	bne.n	800a678 <mem_malloc+0x114>
          }
          lfree = cur;
 800a696:	4a2d      	ldr	r2, [pc, #180]	; (800a74c <mem_malloc+0x1e8>)
 800a698:	69bb      	ldr	r3, [r7, #24]
 800a69a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a69c:	4b2b      	ldr	r3, [pc, #172]	; (800a74c <mem_malloc+0x1e8>)
 800a69e:	681a      	ldr	r2, [r3, #0]
 800a6a0:	4b2e      	ldr	r3, [pc, #184]	; (800a75c <mem_malloc+0x1f8>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d00b      	beq.n	800a6c0 <mem_malloc+0x15c>
 800a6a8:	4b28      	ldr	r3, [pc, #160]	; (800a74c <mem_malloc+0x1e8>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	791b      	ldrb	r3, [r3, #4]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d006      	beq.n	800a6c0 <mem_malloc+0x15c>
 800a6b2:	4b27      	ldr	r3, [pc, #156]	; (800a750 <mem_malloc+0x1ec>)
 800a6b4:	f240 32b5 	movw	r2, #949	; 0x3b5
 800a6b8:	4929      	ldr	r1, [pc, #164]	; (800a760 <mem_malloc+0x1fc>)
 800a6ba:	4827      	ldr	r0, [pc, #156]	; (800a758 <mem_malloc+0x1f4>)
 800a6bc:	f00c fc46 	bl	8016f4c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800a6c0:	4821      	ldr	r0, [pc, #132]	; (800a748 <mem_malloc+0x1e4>)
 800a6c2:	f00c fb7e 	bl	8016dc2 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a6c6:	8bba      	ldrh	r2, [r7, #28]
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	4413      	add	r3, r2
 800a6cc:	3308      	adds	r3, #8
 800a6ce:	4a23      	ldr	r2, [pc, #140]	; (800a75c <mem_malloc+0x1f8>)
 800a6d0:	6812      	ldr	r2, [r2, #0]
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d906      	bls.n	800a6e4 <mem_malloc+0x180>
 800a6d6:	4b1e      	ldr	r3, [pc, #120]	; (800a750 <mem_malloc+0x1ec>)
 800a6d8:	f240 32ba 	movw	r2, #954	; 0x3ba
 800a6dc:	4921      	ldr	r1, [pc, #132]	; (800a764 <mem_malloc+0x200>)
 800a6de:	481e      	ldr	r0, [pc, #120]	; (800a758 <mem_malloc+0x1f4>)
 800a6e0:	f00c fc34 	bl	8016f4c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	f003 0303 	and.w	r3, r3, #3
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d006      	beq.n	800a6fc <mem_malloc+0x198>
 800a6ee:	4b18      	ldr	r3, [pc, #96]	; (800a750 <mem_malloc+0x1ec>)
 800a6f0:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800a6f4:	491c      	ldr	r1, [pc, #112]	; (800a768 <mem_malloc+0x204>)
 800a6f6:	4818      	ldr	r0, [pc, #96]	; (800a758 <mem_malloc+0x1f4>)
 800a6f8:	f00c fc28 	bl	8016f4c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	f003 0303 	and.w	r3, r3, #3
 800a702:	2b00      	cmp	r3, #0
 800a704:	d006      	beq.n	800a714 <mem_malloc+0x1b0>
 800a706:	4b12      	ldr	r3, [pc, #72]	; (800a750 <mem_malloc+0x1ec>)
 800a708:	f240 32be 	movw	r2, #958	; 0x3be
 800a70c:	4917      	ldr	r1, [pc, #92]	; (800a76c <mem_malloc+0x208>)
 800a70e:	4812      	ldr	r0, [pc, #72]	; (800a758 <mem_malloc+0x1f4>)
 800a710:	f00c fc1c 	bl	8016f4c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	3308      	adds	r3, #8
 800a718:	e011      	b.n	800a73e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800a71a:	8bfb      	ldrh	r3, [r7, #30]
 800a71c:	4618      	mov	r0, r3
 800a71e:	f7ff fc33 	bl	8009f88 <ptr_to_mem>
 800a722:	4603      	mov	r3, r0
 800a724:	881b      	ldrh	r3, [r3, #0]
 800a726:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a728:	8bfa      	ldrh	r2, [r7, #30]
 800a72a:	8bbb      	ldrh	r3, [r7, #28]
 800a72c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800a730:	429a      	cmp	r2, r3
 800a732:	f4ff af41 	bcc.w	800a5b8 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800a736:	4804      	ldr	r0, [pc, #16]	; (800a748 <mem_malloc+0x1e4>)
 800a738:	f00c fb43 	bl	8016dc2 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a73c:	2300      	movs	r3, #0
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3720      	adds	r7, #32
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	2000817c 	.word	0x2000817c
 800a74c:	20008180 	.word	0x20008180
 800a750:	080187fc 	.word	0x080187fc
 800a754:	080189c0 	.word	0x080189c0
 800a758:	08018844 	.word	0x08018844
 800a75c:	20008178 	.word	0x20008178
 800a760:	080189d4 	.word	0x080189d4
 800a764:	080189f0 	.word	0x080189f0
 800a768:	08018a20 	.word	0x08018a20
 800a76c:	08018a50 	.word	0x08018a50

0800a770 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a770:	b480      	push	{r7}
 800a772:	b085      	sub	sp, #20
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	689b      	ldr	r3, [r3, #8]
 800a77c:	2200      	movs	r2, #0
 800a77e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	3303      	adds	r3, #3
 800a786:	f023 0303 	bic.w	r3, r3, #3
 800a78a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a78c:	2300      	movs	r3, #0
 800a78e:	60fb      	str	r3, [r7, #12]
 800a790:	e011      	b.n	800a7b6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	689b      	ldr	r3, [r3, #8]
 800a796:	681a      	ldr	r2, [r3, #0]
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	689b      	ldr	r3, [r3, #8]
 800a7a0:	68ba      	ldr	r2, [r7, #8]
 800a7a2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	881b      	ldrh	r3, [r3, #0]
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	4413      	add	r3, r2
 800a7ae:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	60fb      	str	r3, [r7, #12]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	885b      	ldrh	r3, [r3, #2]
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	dbe7      	blt.n	800a792 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a7c2:	bf00      	nop
 800a7c4:	3714      	adds	r7, #20
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr
	...

0800a7d0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b082      	sub	sp, #8
 800a7d4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	80fb      	strh	r3, [r7, #6]
 800a7da:	e009      	b.n	800a7f0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a7dc:	88fb      	ldrh	r3, [r7, #6]
 800a7de:	4a08      	ldr	r2, [pc, #32]	; (800a800 <memp_init+0x30>)
 800a7e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f7ff ffc3 	bl	800a770 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a7ea:	88fb      	ldrh	r3, [r7, #6]
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	80fb      	strh	r3, [r7, #6]
 800a7f0:	88fb      	ldrh	r3, [r7, #6]
 800a7f2:	2b0c      	cmp	r3, #12
 800a7f4:	d9f2      	bls.n	800a7dc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a7f6:	bf00      	nop
 800a7f8:	3708      	adds	r7, #8
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop
 800a800:	0801fa24 	.word	0x0801fa24

0800a804 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800a80c:	f00c fb0c 	bl	8016e28 <sys_arch_protect>
 800a810:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	689b      	ldr	r3, [r3, #8]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d015      	beq.n	800a84c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	689b      	ldr	r3, [r3, #8]
 800a824:	68ba      	ldr	r2, [r7, #8]
 800a826:	6812      	ldr	r2, [r2, #0]
 800a828:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	f003 0303 	and.w	r3, r3, #3
 800a830:	2b00      	cmp	r3, #0
 800a832:	d006      	beq.n	800a842 <do_memp_malloc_pool+0x3e>
 800a834:	4b09      	ldr	r3, [pc, #36]	; (800a85c <do_memp_malloc_pool+0x58>)
 800a836:	f240 1219 	movw	r2, #281	; 0x119
 800a83a:	4909      	ldr	r1, [pc, #36]	; (800a860 <do_memp_malloc_pool+0x5c>)
 800a83c:	4809      	ldr	r0, [pc, #36]	; (800a864 <do_memp_malloc_pool+0x60>)
 800a83e:	f00c fb85 	bl	8016f4c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a842:	68f8      	ldr	r0, [r7, #12]
 800a844:	f00c fafe 	bl	8016e44 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	e003      	b.n	800a854 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a84c:	68f8      	ldr	r0, [r7, #12]
 800a84e:	f00c faf9 	bl	8016e44 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800a852:	2300      	movs	r3, #0
}
 800a854:	4618      	mov	r0, r3
 800a856:	3710      	adds	r7, #16
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}
 800a85c:	08018a74 	.word	0x08018a74
 800a860:	08018aa4 	.word	0x08018aa4
 800a864:	08018ac8 	.word	0x08018ac8

0800a868 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b084      	sub	sp, #16
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	4603      	mov	r3, r0
 800a870:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a872:	79fb      	ldrb	r3, [r7, #7]
 800a874:	2b0c      	cmp	r3, #12
 800a876:	d908      	bls.n	800a88a <memp_malloc+0x22>
 800a878:	4b0a      	ldr	r3, [pc, #40]	; (800a8a4 <memp_malloc+0x3c>)
 800a87a:	f240 1257 	movw	r2, #343	; 0x157
 800a87e:	490a      	ldr	r1, [pc, #40]	; (800a8a8 <memp_malloc+0x40>)
 800a880:	480a      	ldr	r0, [pc, #40]	; (800a8ac <memp_malloc+0x44>)
 800a882:	f00c fb63 	bl	8016f4c <iprintf>
 800a886:	2300      	movs	r3, #0
 800a888:	e008      	b.n	800a89c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a88a:	79fb      	ldrb	r3, [r7, #7]
 800a88c:	4a08      	ldr	r2, [pc, #32]	; (800a8b0 <memp_malloc+0x48>)
 800a88e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a892:	4618      	mov	r0, r3
 800a894:	f7ff ffb6 	bl	800a804 <do_memp_malloc_pool>
 800a898:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a89a:	68fb      	ldr	r3, [r7, #12]
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3710      	adds	r7, #16
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}
 800a8a4:	08018a74 	.word	0x08018a74
 800a8a8:	08018b04 	.word	0x08018b04
 800a8ac:	08018ac8 	.word	0x08018ac8
 800a8b0:	0801fa24 	.word	0x0801fa24

0800a8b4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b084      	sub	sp, #16
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
 800a8bc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	f003 0303 	and.w	r3, r3, #3
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d006      	beq.n	800a8d6 <do_memp_free_pool+0x22>
 800a8c8:	4b0d      	ldr	r3, [pc, #52]	; (800a900 <do_memp_free_pool+0x4c>)
 800a8ca:	f240 126d 	movw	r2, #365	; 0x16d
 800a8ce:	490d      	ldr	r1, [pc, #52]	; (800a904 <do_memp_free_pool+0x50>)
 800a8d0:	480d      	ldr	r0, [pc, #52]	; (800a908 <do_memp_free_pool+0x54>)
 800a8d2:	f00c fb3b 	bl	8016f4c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800a8da:	f00c faa5 	bl	8016e28 <sys_arch_protect>
 800a8de:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	689b      	ldr	r3, [r3, #8]
 800a8e4:	681a      	ldr	r2, [r3, #0]
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	689b      	ldr	r3, [r3, #8]
 800a8ee:	68fa      	ldr	r2, [r7, #12]
 800a8f0:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800a8f2:	68b8      	ldr	r0, [r7, #8]
 800a8f4:	f00c faa6 	bl	8016e44 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800a8f8:	bf00      	nop
 800a8fa:	3710      	adds	r7, #16
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	08018a74 	.word	0x08018a74
 800a904:	08018b24 	.word	0x08018b24
 800a908:	08018ac8 	.word	0x08018ac8

0800a90c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b082      	sub	sp, #8
 800a910:	af00      	add	r7, sp, #0
 800a912:	4603      	mov	r3, r0
 800a914:	6039      	str	r1, [r7, #0]
 800a916:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a918:	79fb      	ldrb	r3, [r7, #7]
 800a91a:	2b0c      	cmp	r3, #12
 800a91c:	d907      	bls.n	800a92e <memp_free+0x22>
 800a91e:	4b0c      	ldr	r3, [pc, #48]	; (800a950 <memp_free+0x44>)
 800a920:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800a924:	490b      	ldr	r1, [pc, #44]	; (800a954 <memp_free+0x48>)
 800a926:	480c      	ldr	r0, [pc, #48]	; (800a958 <memp_free+0x4c>)
 800a928:	f00c fb10 	bl	8016f4c <iprintf>
 800a92c:	e00c      	b.n	800a948 <memp_free+0x3c>

  if (mem == NULL) {
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d008      	beq.n	800a946 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a934:	79fb      	ldrb	r3, [r7, #7]
 800a936:	4a09      	ldr	r2, [pc, #36]	; (800a95c <memp_free+0x50>)
 800a938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a93c:	6839      	ldr	r1, [r7, #0]
 800a93e:	4618      	mov	r0, r3
 800a940:	f7ff ffb8 	bl	800a8b4 <do_memp_free_pool>
 800a944:	e000      	b.n	800a948 <memp_free+0x3c>
    return;
 800a946:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a948:	3708      	adds	r7, #8
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
 800a94e:	bf00      	nop
 800a950:	08018a74 	.word	0x08018a74
 800a954:	08018b44 	.word	0x08018b44
 800a958:	08018ac8 	.word	0x08018ac8
 800a95c:	0801fa24 	.word	0x0801fa24

0800a960 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800a960:	b480      	push	{r7}
 800a962:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800a964:	bf00      	nop
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr
	...

0800a970 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b086      	sub	sp, #24
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	607a      	str	r2, [r7, #4]
 800a97c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d108      	bne.n	800a996 <netif_add+0x26>
 800a984:	4b59      	ldr	r3, [pc, #356]	; (800aaec <netif_add+0x17c>)
 800a986:	f240 1227 	movw	r2, #295	; 0x127
 800a98a:	4959      	ldr	r1, [pc, #356]	; (800aaf0 <netif_add+0x180>)
 800a98c:	4859      	ldr	r0, [pc, #356]	; (800aaf4 <netif_add+0x184>)
 800a98e:	f00c fadd 	bl	8016f4c <iprintf>
 800a992:	2300      	movs	r3, #0
 800a994:	e0a6      	b.n	800aae4 <netif_add+0x174>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d108      	bne.n	800a9ae <netif_add+0x3e>
 800a99c:	4b53      	ldr	r3, [pc, #332]	; (800aaec <netif_add+0x17c>)
 800a99e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800a9a2:	4955      	ldr	r1, [pc, #340]	; (800aaf8 <netif_add+0x188>)
 800a9a4:	4853      	ldr	r0, [pc, #332]	; (800aaf4 <netif_add+0x184>)
 800a9a6:	f00c fad1 	bl	8016f4c <iprintf>
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	e09a      	b.n	800aae4 <netif_add+0x174>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d101      	bne.n	800a9b8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a9b4:	4b51      	ldr	r3, [pc, #324]	; (800aafc <netif_add+0x18c>)
 800a9b6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d101      	bne.n	800a9c2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800a9be:	4b4f      	ldr	r3, [pc, #316]	; (800aafc <netif_add+0x18c>)
 800a9c0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d101      	bne.n	800a9cc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800a9c8:	4b4c      	ldr	r3, [pc, #304]	; (800aafc <netif_add+0x18c>)
 800a9ca:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	4a47      	ldr	r2, [pc, #284]	; (800ab00 <netif_add+0x190>)
 800a9e2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	3320      	adds	r3, #32
 800a9f6:	2204      	movs	r2, #4
 800a9f8:	2100      	movs	r1, #0
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f00c fa9e 	bl	8016f3c <memset>
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	6a3a      	ldr	r2, [r7, #32]
 800aa04:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 800aa06:	4b3f      	ldr	r3, [pc, #252]	; (800ab04 <netif_add+0x194>)
 800aa08:	781a      	ldrb	r2, [r3, #0]
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa14:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	687a      	ldr	r2, [r7, #4]
 800aa1a:	68b9      	ldr	r1, [r7, #8]
 800aa1c:	68f8      	ldr	r0, [r7, #12]
 800aa1e:	f000 f913 	bl	800ac48 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800aa22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa24:	68f8      	ldr	r0, [r7, #12]
 800aa26:	4798      	blx	r3
 800aa28:	4603      	mov	r3, r0
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d001      	beq.n	800aa32 <netif_add+0xc2>
    return NULL;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	e058      	b.n	800aae4 <netif_add+0x174>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aa38:	2bff      	cmp	r3, #255	; 0xff
 800aa3a:	d103      	bne.n	800aa44 <netif_add+0xd4>
        netif->num = 0;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800aa44:	2300      	movs	r3, #0
 800aa46:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800aa48:	4b2f      	ldr	r3, [pc, #188]	; (800ab08 <netif_add+0x198>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	617b      	str	r3, [r7, #20]
 800aa4e:	e02b      	b.n	800aaa8 <netif_add+0x138>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800aa50:	697a      	ldr	r2, [r7, #20]
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d106      	bne.n	800aa66 <netif_add+0xf6>
 800aa58:	4b24      	ldr	r3, [pc, #144]	; (800aaec <netif_add+0x17c>)
 800aa5a:	f240 128b 	movw	r2, #395	; 0x18b
 800aa5e:	492b      	ldr	r1, [pc, #172]	; (800ab0c <netif_add+0x19c>)
 800aa60:	4824      	ldr	r0, [pc, #144]	; (800aaf4 <netif_add+0x184>)
 800aa62:	f00c fa73 	bl	8016f4c <iprintf>
        num_netifs++;
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	2bff      	cmp	r3, #255	; 0xff
 800aa70:	dd06      	ble.n	800aa80 <netif_add+0x110>
 800aa72:	4b1e      	ldr	r3, [pc, #120]	; (800aaec <netif_add+0x17c>)
 800aa74:	f240 128d 	movw	r2, #397	; 0x18d
 800aa78:	4925      	ldr	r1, [pc, #148]	; (800ab10 <netif_add+0x1a0>)
 800aa7a:	481e      	ldr	r0, [pc, #120]	; (800aaf4 <netif_add+0x184>)
 800aa7c:	f00c fa66 	bl	8016f4c <iprintf>
        if (netif2->num == netif->num) {
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d108      	bne.n	800aaa2 <netif_add+0x132>
          netif->num++;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aa96:	3301      	adds	r3, #1
 800aa98:	b2da      	uxtb	r2, r3
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800aaa0:	e005      	b.n	800aaae <netif_add+0x13e>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	617b      	str	r3, [r7, #20]
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d1d0      	bne.n	800aa50 <netif_add+0xe0>
        }
      }
    } while (netif2 != NULL);
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d1be      	bne.n	800aa32 <netif_add+0xc2>
  }
  if (netif->num == 254) {
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aaba:	2bfe      	cmp	r3, #254	; 0xfe
 800aabc:	d103      	bne.n	800aac6 <netif_add+0x156>
    netif_num = 0;
 800aabe:	4b11      	ldr	r3, [pc, #68]	; (800ab04 <netif_add+0x194>)
 800aac0:	2200      	movs	r2, #0
 800aac2:	701a      	strb	r2, [r3, #0]
 800aac4:	e006      	b.n	800aad4 <netif_add+0x164>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aacc:	3301      	adds	r3, #1
 800aace:	b2da      	uxtb	r2, r3
 800aad0:	4b0c      	ldr	r3, [pc, #48]	; (800ab04 <netif_add+0x194>)
 800aad2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800aad4:	4b0c      	ldr	r3, [pc, #48]	; (800ab08 <netif_add+0x198>)
 800aad6:	681a      	ldr	r2, [r3, #0]
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800aadc:	4a0a      	ldr	r2, [pc, #40]	; (800ab08 <netif_add+0x198>)
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800aae2:	68fb      	ldr	r3, [r7, #12]
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3718      	adds	r7, #24
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}
 800aaec:	08018b60 	.word	0x08018b60
 800aaf0:	08018bf4 	.word	0x08018bf4
 800aaf4:	08018bb0 	.word	0x08018bb0
 800aaf8:	08018c10 	.word	0x08018c10
 800aafc:	0801faa8 	.word	0x0801faa8
 800ab00:	0800ae39 	.word	0x0800ae39
 800ab04:	200081b8 	.word	0x200081b8
 800ab08:	20010e68 	.word	0x20010e68
 800ab0c:	08018c34 	.word	0x08018c34
 800ab10:	08018c48 	.word	0x08018c48

0800ab14 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b082      	sub	sp, #8
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800ab1e:	6839      	ldr	r1, [r7, #0]
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f002 fdd7 	bl	800d6d4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ab26:	6839      	ldr	r1, [r7, #0]
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f007 fe59 	bl	80127e0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800ab2e:	bf00      	nop
 800ab30:	3708      	adds	r7, #8
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}
	...

0800ab38 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b086      	sub	sp, #24
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	60f8      	str	r0, [r7, #12]
 800ab40:	60b9      	str	r1, [r7, #8]
 800ab42:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d106      	bne.n	800ab58 <netif_do_set_ipaddr+0x20>
 800ab4a:	4b1d      	ldr	r3, [pc, #116]	; (800abc0 <netif_do_set_ipaddr+0x88>)
 800ab4c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800ab50:	491c      	ldr	r1, [pc, #112]	; (800abc4 <netif_do_set_ipaddr+0x8c>)
 800ab52:	481d      	ldr	r0, [pc, #116]	; (800abc8 <netif_do_set_ipaddr+0x90>)
 800ab54:	f00c f9fa 	bl	8016f4c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d106      	bne.n	800ab6c <netif_do_set_ipaddr+0x34>
 800ab5e:	4b18      	ldr	r3, [pc, #96]	; (800abc0 <netif_do_set_ipaddr+0x88>)
 800ab60:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800ab64:	4917      	ldr	r1, [pc, #92]	; (800abc4 <netif_do_set_ipaddr+0x8c>)
 800ab66:	4818      	ldr	r0, [pc, #96]	; (800abc8 <netif_do_set_ipaddr+0x90>)
 800ab68:	f00c f9f0 	bl	8016f4c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	3304      	adds	r3, #4
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	429a      	cmp	r2, r3
 800ab78:	d01c      	beq.n	800abb4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	3304      	adds	r3, #4
 800ab84:	681a      	ldr	r2, [r3, #0]
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ab8a:	f107 0314 	add.w	r3, r7, #20
 800ab8e:	4619      	mov	r1, r3
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f7ff ffbf 	bl	800ab14 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d002      	beq.n	800aba2 <netif_do_set_ipaddr+0x6a>
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	e000      	b.n	800aba4 <netif_do_set_ipaddr+0x6c>
 800aba2:	2300      	movs	r3, #0
 800aba4:	68fa      	ldr	r2, [r7, #12]
 800aba6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800aba8:	2101      	movs	r1, #1
 800abaa:	68f8      	ldr	r0, [r7, #12]
 800abac:	f000 f8d2 	bl	800ad54 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800abb0:	2301      	movs	r3, #1
 800abb2:	e000      	b.n	800abb6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800abb4:	2300      	movs	r3, #0
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3718      	adds	r7, #24
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}
 800abbe:	bf00      	nop
 800abc0:	08018b60 	.word	0x08018b60
 800abc4:	08018c78 	.word	0x08018c78
 800abc8:	08018bb0 	.word	0x08018bb0

0800abcc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800abcc:	b480      	push	{r7}
 800abce:	b085      	sub	sp, #20
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	60f8      	str	r0, [r7, #12]
 800abd4:	60b9      	str	r1, [r7, #8]
 800abd6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	3308      	adds	r3, #8
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d00a      	beq.n	800abfc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d002      	beq.n	800abf2 <netif_do_set_netmask+0x26>
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	e000      	b.n	800abf4 <netif_do_set_netmask+0x28>
 800abf2:	2300      	movs	r3, #0
 800abf4:	68fa      	ldr	r2, [r7, #12]
 800abf6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800abf8:	2301      	movs	r3, #1
 800abfa:	e000      	b.n	800abfe <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800abfc:	2300      	movs	r3, #0
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3714      	adds	r7, #20
 800ac02:	46bd      	mov	sp, r7
 800ac04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac08:	4770      	bx	lr

0800ac0a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800ac0a:	b480      	push	{r7}
 800ac0c:	b085      	sub	sp, #20
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	60f8      	str	r0, [r7, #12]
 800ac12:	60b9      	str	r1, [r7, #8]
 800ac14:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	681a      	ldr	r2, [r3, #0]
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	330c      	adds	r3, #12
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d00a      	beq.n	800ac3a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d002      	beq.n	800ac30 <netif_do_set_gw+0x26>
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	e000      	b.n	800ac32 <netif_do_set_gw+0x28>
 800ac30:	2300      	movs	r3, #0
 800ac32:	68fa      	ldr	r2, [r7, #12]
 800ac34:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800ac36:	2301      	movs	r3, #1
 800ac38:	e000      	b.n	800ac3c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800ac3a:	2300      	movs	r3, #0
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3714      	adds	r7, #20
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr

0800ac48 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b088      	sub	sp, #32
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	60f8      	str	r0, [r7, #12]
 800ac50:	60b9      	str	r1, [r7, #8]
 800ac52:	607a      	str	r2, [r7, #4]
 800ac54:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800ac56:	2300      	movs	r3, #0
 800ac58:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d101      	bne.n	800ac68 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800ac64:	4b1c      	ldr	r3, [pc, #112]	; (800acd8 <netif_set_addr+0x90>)
 800ac66:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d101      	bne.n	800ac72 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800ac6e:	4b1a      	ldr	r3, [pc, #104]	; (800acd8 <netif_set_addr+0x90>)
 800ac70:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d101      	bne.n	800ac7c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800ac78:	4b17      	ldr	r3, [pc, #92]	; (800acd8 <netif_set_addr+0x90>)
 800ac7a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d003      	beq.n	800ac8a <netif_set_addr+0x42>
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d101      	bne.n	800ac8e <netif_set_addr+0x46>
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	e000      	b.n	800ac90 <netif_set_addr+0x48>
 800ac8e:	2300      	movs	r3, #0
 800ac90:	617b      	str	r3, [r7, #20]
  if (remove) {
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d006      	beq.n	800aca6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ac98:	f107 0310 	add.w	r3, r7, #16
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	68b9      	ldr	r1, [r7, #8]
 800aca0:	68f8      	ldr	r0, [r7, #12]
 800aca2:	f7ff ff49 	bl	800ab38 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800aca6:	69fa      	ldr	r2, [r7, #28]
 800aca8:	6879      	ldr	r1, [r7, #4]
 800acaa:	68f8      	ldr	r0, [r7, #12]
 800acac:	f7ff ff8e 	bl	800abcc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800acb0:	69ba      	ldr	r2, [r7, #24]
 800acb2:	6839      	ldr	r1, [r7, #0]
 800acb4:	68f8      	ldr	r0, [r7, #12]
 800acb6:	f7ff ffa8 	bl	800ac0a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d106      	bne.n	800acce <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800acc0:	f107 0310 	add.w	r3, r7, #16
 800acc4:	461a      	mov	r2, r3
 800acc6:	68b9      	ldr	r1, [r7, #8]
 800acc8:	68f8      	ldr	r0, [r7, #12]
 800acca:	f7ff ff35 	bl	800ab38 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800acce:	bf00      	nop
 800acd0:	3720      	adds	r7, #32
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
 800acd6:	bf00      	nop
 800acd8:	0801faa8 	.word	0x0801faa8

0800acdc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800acdc:	b480      	push	{r7}
 800acde:	b083      	sub	sp, #12
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ace4:	4a04      	ldr	r2, [pc, #16]	; (800acf8 <netif_set_default+0x1c>)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800acea:	bf00      	nop
 800acec:	370c      	adds	r7, #12
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr
 800acf6:	bf00      	nop
 800acf8:	20010e6c 	.word	0x20010e6c

0800acfc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b082      	sub	sp, #8
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d107      	bne.n	800ad1a <netif_set_up+0x1e>
 800ad0a:	4b0f      	ldr	r3, [pc, #60]	; (800ad48 <netif_set_up+0x4c>)
 800ad0c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ad10:	490e      	ldr	r1, [pc, #56]	; (800ad4c <netif_set_up+0x50>)
 800ad12:	480f      	ldr	r0, [pc, #60]	; (800ad50 <netif_set_up+0x54>)
 800ad14:	f00c f91a 	bl	8016f4c <iprintf>
 800ad18:	e013      	b.n	800ad42 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ad20:	f003 0301 	and.w	r3, r3, #1
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d10c      	bne.n	800ad42 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ad2e:	f043 0301 	orr.w	r3, r3, #1
 800ad32:	b2da      	uxtb	r2, r3
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ad3a:	2103      	movs	r1, #3
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f000 f809 	bl	800ad54 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ad42:	3708      	adds	r7, #8
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}
 800ad48:	08018b60 	.word	0x08018b60
 800ad4c:	08018ce8 	.word	0x08018ce8
 800ad50:	08018bb0 	.word	0x08018bb0

0800ad54 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d106      	bne.n	800ad74 <netif_issue_reports+0x20>
 800ad66:	4b18      	ldr	r3, [pc, #96]	; (800adc8 <netif_issue_reports+0x74>)
 800ad68:	f240 326d 	movw	r2, #877	; 0x36d
 800ad6c:	4917      	ldr	r1, [pc, #92]	; (800adcc <netif_issue_reports+0x78>)
 800ad6e:	4818      	ldr	r0, [pc, #96]	; (800add0 <netif_issue_reports+0x7c>)
 800ad70:	f00c f8ec 	bl	8016f4c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ad7a:	f003 0304 	and.w	r3, r3, #4
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d01e      	beq.n	800adc0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ad88:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d017      	beq.n	800adc0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ad90:	78fb      	ldrb	r3, [r7, #3]
 800ad92:	f003 0301 	and.w	r3, r3, #1
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d013      	beq.n	800adc2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	3304      	adds	r3, #4
 800ad9e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d00e      	beq.n	800adc2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800adaa:	f003 0308 	and.w	r3, r3, #8
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d007      	beq.n	800adc2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	3304      	adds	r3, #4
 800adb6:	4619      	mov	r1, r3
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f00a fad3 	bl	8015364 <etharp_request>
 800adbe:	e000      	b.n	800adc2 <netif_issue_reports+0x6e>
    return;
 800adc0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800adc2:	3708      	adds	r7, #8
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	08018b60 	.word	0x08018b60
 800adcc:	08018d04 	.word	0x08018d04
 800add0:	08018bb0 	.word	0x08018bb0

0800add4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b082      	sub	sp, #8
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d107      	bne.n	800adf2 <netif_set_down+0x1e>
 800ade2:	4b12      	ldr	r3, [pc, #72]	; (800ae2c <netif_set_down+0x58>)
 800ade4:	f240 329b 	movw	r2, #923	; 0x39b
 800ade8:	4911      	ldr	r1, [pc, #68]	; (800ae30 <netif_set_down+0x5c>)
 800adea:	4812      	ldr	r0, [pc, #72]	; (800ae34 <netif_set_down+0x60>)
 800adec:	f00c f8ae 	bl	8016f4c <iprintf>
 800adf0:	e019      	b.n	800ae26 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800adf8:	f003 0301 	and.w	r3, r3, #1
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d012      	beq.n	800ae26 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ae06:	f023 0301 	bic.w	r3, r3, #1
 800ae0a:	b2da      	uxtb	r2, r3
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ae18:	f003 0308 	and.w	r3, r3, #8
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d002      	beq.n	800ae26 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f009 fe59 	bl	8014ad8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ae26:	3708      	adds	r7, #8
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}
 800ae2c:	08018b60 	.word	0x08018b60
 800ae30:	08018d28 	.word	0x08018d28
 800ae34:	08018bb0 	.word	0x08018bb0

0800ae38 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b085      	sub	sp, #20
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	60f8      	str	r0, [r7, #12]
 800ae40:	60b9      	str	r1, [r7, #8]
 800ae42:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800ae44:	f06f 030b 	mvn.w	r3, #11
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3714      	adds	r7, #20
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae52:	4770      	bx	lr

0800ae54 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b085      	sub	sp, #20
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800ae5e:	79fb      	ldrb	r3, [r7, #7]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d013      	beq.n	800ae8c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800ae64:	4b0d      	ldr	r3, [pc, #52]	; (800ae9c <netif_get_by_index+0x48>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	60fb      	str	r3, [r7, #12]
 800ae6a:	e00c      	b.n	800ae86 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ae72:	3301      	adds	r3, #1
 800ae74:	b2db      	uxtb	r3, r3
 800ae76:	79fa      	ldrb	r2, [r7, #7]
 800ae78:	429a      	cmp	r2, r3
 800ae7a:	d101      	bne.n	800ae80 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	e006      	b.n	800ae8e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	60fb      	str	r3, [r7, #12]
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d1ef      	bne.n	800ae6c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800ae8c:	2300      	movs	r3, #0
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3714      	adds	r7, #20
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr
 800ae9a:	bf00      	nop
 800ae9c:	20010e68 	.word	0x20010e68

0800aea0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800aea6:	f00b ffbf 	bl	8016e28 <sys_arch_protect>
 800aeaa:	6038      	str	r0, [r7, #0]
 800aeac:	4b0d      	ldr	r3, [pc, #52]	; (800aee4 <pbuf_free_ooseq+0x44>)
 800aeae:	2200      	movs	r2, #0
 800aeb0:	701a      	strb	r2, [r3, #0]
 800aeb2:	6838      	ldr	r0, [r7, #0]
 800aeb4:	f00b ffc6 	bl	8016e44 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800aeb8:	4b0b      	ldr	r3, [pc, #44]	; (800aee8 <pbuf_free_ooseq+0x48>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	607b      	str	r3, [r7, #4]
 800aebe:	e00a      	b.n	800aed6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d003      	beq.n	800aed0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f002 fc41 	bl	800d750 <tcp_free_ooseq>
      return;
 800aece:	e005      	b.n	800aedc <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	607b      	str	r3, [r7, #4]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d1f1      	bne.n	800aec0 <pbuf_free_ooseq+0x20>
    }
  }
}
 800aedc:	3708      	adds	r7, #8
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}
 800aee2:	bf00      	nop
 800aee4:	20010e70 	.word	0x20010e70
 800aee8:	20010e78 	.word	0x20010e78

0800aeec <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b082      	sub	sp, #8
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800aef4:	f7ff ffd4 	bl	800aea0 <pbuf_free_ooseq>
}
 800aef8:	bf00      	nop
 800aefa:	3708      	adds	r7, #8
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b082      	sub	sp, #8
 800af04:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800af06:	f00b ff8f 	bl	8016e28 <sys_arch_protect>
 800af0a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800af0c:	4b0f      	ldr	r3, [pc, #60]	; (800af4c <pbuf_pool_is_empty+0x4c>)
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800af12:	4b0e      	ldr	r3, [pc, #56]	; (800af4c <pbuf_pool_is_empty+0x4c>)
 800af14:	2201      	movs	r2, #1
 800af16:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f00b ff93 	bl	8016e44 <sys_arch_unprotect>

  if (!queued) {
 800af1e:	78fb      	ldrb	r3, [r7, #3]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d10f      	bne.n	800af44 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800af24:	2100      	movs	r1, #0
 800af26:	480a      	ldr	r0, [pc, #40]	; (800af50 <pbuf_pool_is_empty+0x50>)
 800af28:	f7fe ff48 	bl	8009dbc <tcpip_try_callback>
 800af2c:	4603      	mov	r3, r0
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d008      	beq.n	800af44 <pbuf_pool_is_empty+0x44>
 800af32:	f00b ff79 	bl	8016e28 <sys_arch_protect>
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	4b04      	ldr	r3, [pc, #16]	; (800af4c <pbuf_pool_is_empty+0x4c>)
 800af3a:	2200      	movs	r2, #0
 800af3c:	701a      	strb	r2, [r3, #0]
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f00b ff80 	bl	8016e44 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800af44:	bf00      	nop
 800af46:	3708      	adds	r7, #8
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}
 800af4c:	20010e70 	.word	0x20010e70
 800af50:	0800aeed 	.word	0x0800aeed

0800af54 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800af54:	b480      	push	{r7}
 800af56:	b085      	sub	sp, #20
 800af58:	af00      	add	r7, sp, #0
 800af5a:	60f8      	str	r0, [r7, #12]
 800af5c:	60b9      	str	r1, [r7, #8]
 800af5e:	4611      	mov	r1, r2
 800af60:	461a      	mov	r2, r3
 800af62:	460b      	mov	r3, r1
 800af64:	80fb      	strh	r3, [r7, #6]
 800af66:	4613      	mov	r3, r2
 800af68:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2200      	movs	r2, #0
 800af6e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	68ba      	ldr	r2, [r7, #8]
 800af74:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	88fa      	ldrh	r2, [r7, #6]
 800af7a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	88ba      	ldrh	r2, [r7, #4]
 800af80:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800af82:	8b3b      	ldrh	r3, [r7, #24]
 800af84:	b2da      	uxtb	r2, r3
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	7f3a      	ldrb	r2, [r7, #28]
 800af8e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	2201      	movs	r2, #1
 800af94:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	2200      	movs	r2, #0
 800af9a:	73da      	strb	r2, [r3, #15]
}
 800af9c:	bf00      	nop
 800af9e:	3714      	adds	r7, #20
 800afa0:	46bd      	mov	sp, r7
 800afa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa6:	4770      	bx	lr

0800afa8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b08c      	sub	sp, #48	; 0x30
 800afac:	af02      	add	r7, sp, #8
 800afae:	4603      	mov	r3, r0
 800afb0:	71fb      	strb	r3, [r7, #7]
 800afb2:	460b      	mov	r3, r1
 800afb4:	80bb      	strh	r3, [r7, #4]
 800afb6:	4613      	mov	r3, r2
 800afb8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800afba:	79fb      	ldrb	r3, [r7, #7]
 800afbc:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800afbe:	887b      	ldrh	r3, [r7, #2]
 800afc0:	2b41      	cmp	r3, #65	; 0x41
 800afc2:	d00b      	beq.n	800afdc <pbuf_alloc+0x34>
 800afc4:	2b41      	cmp	r3, #65	; 0x41
 800afc6:	dc02      	bgt.n	800afce <pbuf_alloc+0x26>
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d007      	beq.n	800afdc <pbuf_alloc+0x34>
 800afcc:	e0c2      	b.n	800b154 <pbuf_alloc+0x1ac>
 800afce:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800afd2:	d00b      	beq.n	800afec <pbuf_alloc+0x44>
 800afd4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800afd8:	d070      	beq.n	800b0bc <pbuf_alloc+0x114>
 800afda:	e0bb      	b.n	800b154 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800afdc:	887a      	ldrh	r2, [r7, #2]
 800afde:	88bb      	ldrh	r3, [r7, #4]
 800afe0:	4619      	mov	r1, r3
 800afe2:	2000      	movs	r0, #0
 800afe4:	f000 f8d2 	bl	800b18c <pbuf_alloc_reference>
 800afe8:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800afea:	e0bd      	b.n	800b168 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800afec:	2300      	movs	r3, #0
 800afee:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800aff0:	2300      	movs	r3, #0
 800aff2:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800aff4:	88bb      	ldrh	r3, [r7, #4]
 800aff6:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800aff8:	200c      	movs	r0, #12
 800affa:	f7ff fc35 	bl	800a868 <memp_malloc>
 800affe:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b000:	693b      	ldr	r3, [r7, #16]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d109      	bne.n	800b01a <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800b006:	f7ff ff7b 	bl	800af00 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d002      	beq.n	800b016 <pbuf_alloc+0x6e>
            pbuf_free(p);
 800b010:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b012:	f000 faa9 	bl	800b568 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b016:	2300      	movs	r3, #0
 800b018:	e0a7      	b.n	800b16a <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b01a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b01c:	3303      	adds	r3, #3
 800b01e:	b29b      	uxth	r3, r3
 800b020:	f023 0303 	bic.w	r3, r3, #3
 800b024:	b29b      	uxth	r3, r3
 800b026:	f5c3 6387 	rsb	r3, r3, #1080	; 0x438
 800b02a:	b29b      	uxth	r3, r3
 800b02c:	8b7a      	ldrh	r2, [r7, #26]
 800b02e:	4293      	cmp	r3, r2
 800b030:	bf28      	it	cs
 800b032:	4613      	movcs	r3, r2
 800b034:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b036:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b038:	3310      	adds	r3, #16
 800b03a:	693a      	ldr	r2, [r7, #16]
 800b03c:	4413      	add	r3, r2
 800b03e:	3303      	adds	r3, #3
 800b040:	f023 0303 	bic.w	r3, r3, #3
 800b044:	4618      	mov	r0, r3
 800b046:	89f9      	ldrh	r1, [r7, #14]
 800b048:	8b7a      	ldrh	r2, [r7, #26]
 800b04a:	2300      	movs	r3, #0
 800b04c:	9301      	str	r3, [sp, #4]
 800b04e:	887b      	ldrh	r3, [r7, #2]
 800b050:	9300      	str	r3, [sp, #0]
 800b052:	460b      	mov	r3, r1
 800b054:	4601      	mov	r1, r0
 800b056:	6938      	ldr	r0, [r7, #16]
 800b058:	f7ff ff7c 	bl	800af54 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b05c:	693b      	ldr	r3, [r7, #16]
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	f003 0303 	and.w	r3, r3, #3
 800b064:	2b00      	cmp	r3, #0
 800b066:	d006      	beq.n	800b076 <pbuf_alloc+0xce>
 800b068:	4b42      	ldr	r3, [pc, #264]	; (800b174 <pbuf_alloc+0x1cc>)
 800b06a:	f240 1201 	movw	r2, #257	; 0x101
 800b06e:	4942      	ldr	r1, [pc, #264]	; (800b178 <pbuf_alloc+0x1d0>)
 800b070:	4842      	ldr	r0, [pc, #264]	; (800b17c <pbuf_alloc+0x1d4>)
 800b072:	f00b ff6b 	bl	8016f4c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b076:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b078:	3303      	adds	r3, #3
 800b07a:	f023 0303 	bic.w	r3, r3, #3
 800b07e:	f5b3 6f87 	cmp.w	r3, #1080	; 0x438
 800b082:	d106      	bne.n	800b092 <pbuf_alloc+0xea>
 800b084:	4b3b      	ldr	r3, [pc, #236]	; (800b174 <pbuf_alloc+0x1cc>)
 800b086:	f240 1203 	movw	r2, #259	; 0x103
 800b08a:	493d      	ldr	r1, [pc, #244]	; (800b180 <pbuf_alloc+0x1d8>)
 800b08c:	483b      	ldr	r0, [pc, #236]	; (800b17c <pbuf_alloc+0x1d4>)
 800b08e:	f00b ff5d 	bl	8016f4c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b094:	2b00      	cmp	r3, #0
 800b096:	d102      	bne.n	800b09e <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	627b      	str	r3, [r7, #36]	; 0x24
 800b09c:	e002      	b.n	800b0a4 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b09e:	69fb      	ldr	r3, [r7, #28]
 800b0a0:	693a      	ldr	r2, [r7, #16]
 800b0a2:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b0a8:	8b7a      	ldrh	r2, [r7, #26]
 800b0aa:	89fb      	ldrh	r3, [r7, #14]
 800b0ac:	1ad3      	subs	r3, r2, r3
 800b0ae:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b0b4:	8b7b      	ldrh	r3, [r7, #26]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d19e      	bne.n	800aff8 <pbuf_alloc+0x50>
      break;
 800b0ba:	e055      	b.n	800b168 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b0bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b0be:	3303      	adds	r3, #3
 800b0c0:	b29b      	uxth	r3, r3
 800b0c2:	f023 0303 	bic.w	r3, r3, #3
 800b0c6:	b29a      	uxth	r2, r3
 800b0c8:	88bb      	ldrh	r3, [r7, #4]
 800b0ca:	3303      	adds	r3, #3
 800b0cc:	b29b      	uxth	r3, r3
 800b0ce:	f023 0303 	bic.w	r3, r3, #3
 800b0d2:	b29b      	uxth	r3, r3
 800b0d4:	4413      	add	r3, r2
 800b0d6:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b0d8:	8b3b      	ldrh	r3, [r7, #24]
 800b0da:	3310      	adds	r3, #16
 800b0dc:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b0de:	8b3a      	ldrh	r2, [r7, #24]
 800b0e0:	88bb      	ldrh	r3, [r7, #4]
 800b0e2:	3303      	adds	r3, #3
 800b0e4:	f023 0303 	bic.w	r3, r3, #3
 800b0e8:	429a      	cmp	r2, r3
 800b0ea:	d306      	bcc.n	800b0fa <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b0ec:	8afa      	ldrh	r2, [r7, #22]
 800b0ee:	88bb      	ldrh	r3, [r7, #4]
 800b0f0:	3303      	adds	r3, #3
 800b0f2:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d201      	bcs.n	800b0fe <pbuf_alloc+0x156>
        return NULL;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	e035      	b.n	800b16a <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b0fe:	8afb      	ldrh	r3, [r7, #22]
 800b100:	4618      	mov	r0, r3
 800b102:	f7ff fa2f 	bl	800a564 <mem_malloc>
 800b106:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d101      	bne.n	800b112 <pbuf_alloc+0x16a>
        return NULL;
 800b10e:	2300      	movs	r3, #0
 800b110:	e02b      	b.n	800b16a <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b112:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b114:	3310      	adds	r3, #16
 800b116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b118:	4413      	add	r3, r2
 800b11a:	3303      	adds	r3, #3
 800b11c:	f023 0303 	bic.w	r3, r3, #3
 800b120:	4618      	mov	r0, r3
 800b122:	88b9      	ldrh	r1, [r7, #4]
 800b124:	88ba      	ldrh	r2, [r7, #4]
 800b126:	2300      	movs	r3, #0
 800b128:	9301      	str	r3, [sp, #4]
 800b12a:	887b      	ldrh	r3, [r7, #2]
 800b12c:	9300      	str	r3, [sp, #0]
 800b12e:	460b      	mov	r3, r1
 800b130:	4601      	mov	r1, r0
 800b132:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b134:	f7ff ff0e 	bl	800af54 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	f003 0303 	and.w	r3, r3, #3
 800b140:	2b00      	cmp	r3, #0
 800b142:	d010      	beq.n	800b166 <pbuf_alloc+0x1be>
 800b144:	4b0b      	ldr	r3, [pc, #44]	; (800b174 <pbuf_alloc+0x1cc>)
 800b146:	f240 1223 	movw	r2, #291	; 0x123
 800b14a:	490e      	ldr	r1, [pc, #56]	; (800b184 <pbuf_alloc+0x1dc>)
 800b14c:	480b      	ldr	r0, [pc, #44]	; (800b17c <pbuf_alloc+0x1d4>)
 800b14e:	f00b fefd 	bl	8016f4c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b152:	e008      	b.n	800b166 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b154:	4b07      	ldr	r3, [pc, #28]	; (800b174 <pbuf_alloc+0x1cc>)
 800b156:	f240 1227 	movw	r2, #295	; 0x127
 800b15a:	490b      	ldr	r1, [pc, #44]	; (800b188 <pbuf_alloc+0x1e0>)
 800b15c:	4807      	ldr	r0, [pc, #28]	; (800b17c <pbuf_alloc+0x1d4>)
 800b15e:	f00b fef5 	bl	8016f4c <iprintf>
      return NULL;
 800b162:	2300      	movs	r3, #0
 800b164:	e001      	b.n	800b16a <pbuf_alloc+0x1c2>
      break;
 800b166:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3728      	adds	r7, #40	; 0x28
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop
 800b174:	08018d90 	.word	0x08018d90
 800b178:	08018dc0 	.word	0x08018dc0
 800b17c:	08018df0 	.word	0x08018df0
 800b180:	08018e18 	.word	0x08018e18
 800b184:	08018e4c 	.word	0x08018e4c
 800b188:	08018e78 	.word	0x08018e78

0800b18c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b086      	sub	sp, #24
 800b190:	af02      	add	r7, sp, #8
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	460b      	mov	r3, r1
 800b196:	807b      	strh	r3, [r7, #2]
 800b198:	4613      	mov	r3, r2
 800b19a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b19c:	883b      	ldrh	r3, [r7, #0]
 800b19e:	2b41      	cmp	r3, #65	; 0x41
 800b1a0:	d009      	beq.n	800b1b6 <pbuf_alloc_reference+0x2a>
 800b1a2:	883b      	ldrh	r3, [r7, #0]
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	d006      	beq.n	800b1b6 <pbuf_alloc_reference+0x2a>
 800b1a8:	4b0f      	ldr	r3, [pc, #60]	; (800b1e8 <pbuf_alloc_reference+0x5c>)
 800b1aa:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b1ae:	490f      	ldr	r1, [pc, #60]	; (800b1ec <pbuf_alloc_reference+0x60>)
 800b1b0:	480f      	ldr	r0, [pc, #60]	; (800b1f0 <pbuf_alloc_reference+0x64>)
 800b1b2:	f00b fecb 	bl	8016f4c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b1b6:	200b      	movs	r0, #11
 800b1b8:	f7ff fb56 	bl	800a868 <memp_malloc>
 800b1bc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d101      	bne.n	800b1c8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	e00b      	b.n	800b1e0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b1c8:	8879      	ldrh	r1, [r7, #2]
 800b1ca:	887a      	ldrh	r2, [r7, #2]
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	9301      	str	r3, [sp, #4]
 800b1d0:	883b      	ldrh	r3, [r7, #0]
 800b1d2:	9300      	str	r3, [sp, #0]
 800b1d4:	460b      	mov	r3, r1
 800b1d6:	6879      	ldr	r1, [r7, #4]
 800b1d8:	68f8      	ldr	r0, [r7, #12]
 800b1da:	f7ff febb 	bl	800af54 <pbuf_init_alloced_pbuf>
  return p;
 800b1de:	68fb      	ldr	r3, [r7, #12]
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3710      	adds	r7, #16
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}
 800b1e8:	08018d90 	.word	0x08018d90
 800b1ec:	08018e94 	.word	0x08018e94
 800b1f0:	08018df0 	.word	0x08018df0

0800b1f4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b088      	sub	sp, #32
 800b1f8:	af02      	add	r7, sp, #8
 800b1fa:	607b      	str	r3, [r7, #4]
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	73fb      	strb	r3, [r7, #15]
 800b200:	460b      	mov	r3, r1
 800b202:	81bb      	strh	r3, [r7, #12]
 800b204:	4613      	mov	r3, r2
 800b206:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b208:	7bfb      	ldrb	r3, [r7, #15]
 800b20a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b20c:	8a7b      	ldrh	r3, [r7, #18]
 800b20e:	3303      	adds	r3, #3
 800b210:	f023 0203 	bic.w	r2, r3, #3
 800b214:	89bb      	ldrh	r3, [r7, #12]
 800b216:	441a      	add	r2, r3
 800b218:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d901      	bls.n	800b222 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b21e:	2300      	movs	r3, #0
 800b220:	e018      	b.n	800b254 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b222:	6a3b      	ldr	r3, [r7, #32]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d007      	beq.n	800b238 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b228:	8a7b      	ldrh	r3, [r7, #18]
 800b22a:	3303      	adds	r3, #3
 800b22c:	f023 0303 	bic.w	r3, r3, #3
 800b230:	6a3a      	ldr	r2, [r7, #32]
 800b232:	4413      	add	r3, r2
 800b234:	617b      	str	r3, [r7, #20]
 800b236:	e001      	b.n	800b23c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b238:	2300      	movs	r3, #0
 800b23a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	89b9      	ldrh	r1, [r7, #12]
 800b240:	89ba      	ldrh	r2, [r7, #12]
 800b242:	2302      	movs	r3, #2
 800b244:	9301      	str	r3, [sp, #4]
 800b246:	897b      	ldrh	r3, [r7, #10]
 800b248:	9300      	str	r3, [sp, #0]
 800b24a:	460b      	mov	r3, r1
 800b24c:	6979      	ldr	r1, [r7, #20]
 800b24e:	f7ff fe81 	bl	800af54 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b252:	687b      	ldr	r3, [r7, #4]
}
 800b254:	4618      	mov	r0, r3
 800b256:	3718      	adds	r7, #24
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}

0800b25c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b084      	sub	sp, #16
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	460b      	mov	r3, r1
 800b266:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d106      	bne.n	800b27c <pbuf_realloc+0x20>
 800b26e:	4b3a      	ldr	r3, [pc, #232]	; (800b358 <pbuf_realloc+0xfc>)
 800b270:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b274:	4939      	ldr	r1, [pc, #228]	; (800b35c <pbuf_realloc+0x100>)
 800b276:	483a      	ldr	r0, [pc, #232]	; (800b360 <pbuf_realloc+0x104>)
 800b278:	f00b fe68 	bl	8016f4c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	891b      	ldrh	r3, [r3, #8]
 800b280:	887a      	ldrh	r2, [r7, #2]
 800b282:	429a      	cmp	r2, r3
 800b284:	d264      	bcs.n	800b350 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	891a      	ldrh	r2, [r3, #8]
 800b28a:	887b      	ldrh	r3, [r7, #2]
 800b28c:	1ad3      	subs	r3, r2, r3
 800b28e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b290:	887b      	ldrh	r3, [r7, #2]
 800b292:	817b      	strh	r3, [r7, #10]
  q = p;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b298:	e018      	b.n	800b2cc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	895b      	ldrh	r3, [r3, #10]
 800b29e:	897a      	ldrh	r2, [r7, #10]
 800b2a0:	1ad3      	subs	r3, r2, r3
 800b2a2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	891a      	ldrh	r2, [r3, #8]
 800b2a8:	893b      	ldrh	r3, [r7, #8]
 800b2aa:	1ad3      	subs	r3, r2, r3
 800b2ac:	b29a      	uxth	r2, r3
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d106      	bne.n	800b2cc <pbuf_realloc+0x70>
 800b2be:	4b26      	ldr	r3, [pc, #152]	; (800b358 <pbuf_realloc+0xfc>)
 800b2c0:	f240 12af 	movw	r2, #431	; 0x1af
 800b2c4:	4927      	ldr	r1, [pc, #156]	; (800b364 <pbuf_realloc+0x108>)
 800b2c6:	4826      	ldr	r0, [pc, #152]	; (800b360 <pbuf_realloc+0x104>)
 800b2c8:	f00b fe40 	bl	8016f4c <iprintf>
  while (rem_len > q->len) {
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	895b      	ldrh	r3, [r3, #10]
 800b2d0:	897a      	ldrh	r2, [r7, #10]
 800b2d2:	429a      	cmp	r2, r3
 800b2d4:	d8e1      	bhi.n	800b29a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	7b1b      	ldrb	r3, [r3, #12]
 800b2da:	f003 030f 	and.w	r3, r3, #15
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d122      	bne.n	800b328 <pbuf_realloc+0xcc>
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	895b      	ldrh	r3, [r3, #10]
 800b2e6:	897a      	ldrh	r2, [r7, #10]
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d01d      	beq.n	800b328 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	7b5b      	ldrb	r3, [r3, #13]
 800b2f0:	f003 0302 	and.w	r3, r3, #2
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d117      	bne.n	800b328 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	1ad3      	subs	r3, r2, r3
 800b302:	b29a      	uxth	r2, r3
 800b304:	897b      	ldrh	r3, [r7, #10]
 800b306:	4413      	add	r3, r2
 800b308:	b29b      	uxth	r3, r3
 800b30a:	4619      	mov	r1, r3
 800b30c:	68f8      	ldr	r0, [r7, #12]
 800b30e:	f7ff f81f 	bl	800a350 <mem_trim>
 800b312:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d106      	bne.n	800b328 <pbuf_realloc+0xcc>
 800b31a:	4b0f      	ldr	r3, [pc, #60]	; (800b358 <pbuf_realloc+0xfc>)
 800b31c:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b320:	4911      	ldr	r1, [pc, #68]	; (800b368 <pbuf_realloc+0x10c>)
 800b322:	480f      	ldr	r0, [pc, #60]	; (800b360 <pbuf_realloc+0x104>)
 800b324:	f00b fe12 	bl	8016f4c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	897a      	ldrh	r2, [r7, #10]
 800b32c:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	895a      	ldrh	r2, [r3, #10]
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d004      	beq.n	800b348 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	4618      	mov	r0, r3
 800b344:	f000 f910 	bl	800b568 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2200      	movs	r2, #0
 800b34c:	601a      	str	r2, [r3, #0]
 800b34e:	e000      	b.n	800b352 <pbuf_realloc+0xf6>
    return;
 800b350:	bf00      	nop

}
 800b352:	3710      	adds	r7, #16
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}
 800b358:	08018d90 	.word	0x08018d90
 800b35c:	08018ea8 	.word	0x08018ea8
 800b360:	08018df0 	.word	0x08018df0
 800b364:	08018ec0 	.word	0x08018ec0
 800b368:	08018ed8 	.word	0x08018ed8

0800b36c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b086      	sub	sp, #24
 800b370:	af00      	add	r7, sp, #0
 800b372:	60f8      	str	r0, [r7, #12]
 800b374:	60b9      	str	r1, [r7, #8]
 800b376:	4613      	mov	r3, r2
 800b378:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d106      	bne.n	800b38e <pbuf_add_header_impl+0x22>
 800b380:	4b2b      	ldr	r3, [pc, #172]	; (800b430 <pbuf_add_header_impl+0xc4>)
 800b382:	f240 12df 	movw	r2, #479	; 0x1df
 800b386:	492b      	ldr	r1, [pc, #172]	; (800b434 <pbuf_add_header_impl+0xc8>)
 800b388:	482b      	ldr	r0, [pc, #172]	; (800b438 <pbuf_add_header_impl+0xcc>)
 800b38a:	f00b fddf 	bl	8016f4c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d003      	beq.n	800b39c <pbuf_add_header_impl+0x30>
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b39a:	d301      	bcc.n	800b3a0 <pbuf_add_header_impl+0x34>
    return 1;
 800b39c:	2301      	movs	r3, #1
 800b39e:	e043      	b.n	800b428 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d101      	bne.n	800b3aa <pbuf_add_header_impl+0x3e>
    return 0;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	e03e      	b.n	800b428 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	891a      	ldrh	r2, [r3, #8]
 800b3b2:	8a7b      	ldrh	r3, [r7, #18]
 800b3b4:	4413      	add	r3, r2
 800b3b6:	b29b      	uxth	r3, r3
 800b3b8:	8a7a      	ldrh	r2, [r7, #18]
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	d901      	bls.n	800b3c2 <pbuf_add_header_impl+0x56>
    return 1;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	e032      	b.n	800b428 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	7b1b      	ldrb	r3, [r3, #12]
 800b3c6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b3c8:	8a3b      	ldrh	r3, [r7, #16]
 800b3ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d00c      	beq.n	800b3ec <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	685a      	ldr	r2, [r3, #4]
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	425b      	negs	r3, r3
 800b3da:	4413      	add	r3, r2
 800b3dc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	3310      	adds	r3, #16
 800b3e2:	697a      	ldr	r2, [r7, #20]
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	d20d      	bcs.n	800b404 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	e01d      	b.n	800b428 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b3ec:	79fb      	ldrb	r3, [r7, #7]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d006      	beq.n	800b400 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	685a      	ldr	r2, [r3, #4]
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	425b      	negs	r3, r3
 800b3fa:	4413      	add	r3, r2
 800b3fc:	617b      	str	r3, [r7, #20]
 800b3fe:	e001      	b.n	800b404 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b400:	2301      	movs	r3, #1
 800b402:	e011      	b.n	800b428 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	697a      	ldr	r2, [r7, #20]
 800b408:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	895a      	ldrh	r2, [r3, #10]
 800b40e:	8a7b      	ldrh	r3, [r7, #18]
 800b410:	4413      	add	r3, r2
 800b412:	b29a      	uxth	r2, r3
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	891a      	ldrh	r2, [r3, #8]
 800b41c:	8a7b      	ldrh	r3, [r7, #18]
 800b41e:	4413      	add	r3, r2
 800b420:	b29a      	uxth	r2, r3
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	811a      	strh	r2, [r3, #8]


  return 0;
 800b426:	2300      	movs	r3, #0
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3718      	adds	r7, #24
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	08018d90 	.word	0x08018d90
 800b434:	08018ef4 	.word	0x08018ef4
 800b438:	08018df0 	.word	0x08018df0

0800b43c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b082      	sub	sp, #8
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b446:	2200      	movs	r2, #0
 800b448:	6839      	ldr	r1, [r7, #0]
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f7ff ff8e 	bl	800b36c <pbuf_add_header_impl>
 800b450:	4603      	mov	r3, r0
}
 800b452:	4618      	mov	r0, r3
 800b454:	3708      	adds	r7, #8
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
	...

0800b45c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b084      	sub	sp, #16
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d106      	bne.n	800b47a <pbuf_remove_header+0x1e>
 800b46c:	4b20      	ldr	r3, [pc, #128]	; (800b4f0 <pbuf_remove_header+0x94>)
 800b46e:	f240 224b 	movw	r2, #587	; 0x24b
 800b472:	4920      	ldr	r1, [pc, #128]	; (800b4f4 <pbuf_remove_header+0x98>)
 800b474:	4820      	ldr	r0, [pc, #128]	; (800b4f8 <pbuf_remove_header+0x9c>)
 800b476:	f00b fd69 	bl	8016f4c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d003      	beq.n	800b488 <pbuf_remove_header+0x2c>
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b486:	d301      	bcc.n	800b48c <pbuf_remove_header+0x30>
    return 1;
 800b488:	2301      	movs	r3, #1
 800b48a:	e02c      	b.n	800b4e6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d101      	bne.n	800b496 <pbuf_remove_header+0x3a>
    return 0;
 800b492:	2300      	movs	r3, #0
 800b494:	e027      	b.n	800b4e6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	895b      	ldrh	r3, [r3, #10]
 800b49e:	89fa      	ldrh	r2, [r7, #14]
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d908      	bls.n	800b4b6 <pbuf_remove_header+0x5a>
 800b4a4:	4b12      	ldr	r3, [pc, #72]	; (800b4f0 <pbuf_remove_header+0x94>)
 800b4a6:	f240 2255 	movw	r2, #597	; 0x255
 800b4aa:	4914      	ldr	r1, [pc, #80]	; (800b4fc <pbuf_remove_header+0xa0>)
 800b4ac:	4812      	ldr	r0, [pc, #72]	; (800b4f8 <pbuf_remove_header+0x9c>)
 800b4ae:	f00b fd4d 	bl	8016f4c <iprintf>
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	e017      	b.n	800b4e6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	685a      	ldr	r2, [r3, #4]
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	441a      	add	r2, r3
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	895a      	ldrh	r2, [r3, #10]
 800b4cc:	89fb      	ldrh	r3, [r7, #14]
 800b4ce:	1ad3      	subs	r3, r2, r3
 800b4d0:	b29a      	uxth	r2, r3
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	891a      	ldrh	r2, [r3, #8]
 800b4da:	89fb      	ldrh	r3, [r7, #14]
 800b4dc:	1ad3      	subs	r3, r2, r3
 800b4de:	b29a      	uxth	r2, r3
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b4e4:	2300      	movs	r3, #0
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3710      	adds	r7, #16
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}
 800b4ee:	bf00      	nop
 800b4f0:	08018d90 	.word	0x08018d90
 800b4f4:	08018ef4 	.word	0x08018ef4
 800b4f8:	08018df0 	.word	0x08018df0
 800b4fc:	08018f00 	.word	0x08018f00

0800b500 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b082      	sub	sp, #8
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	460b      	mov	r3, r1
 800b50a:	807b      	strh	r3, [r7, #2]
 800b50c:	4613      	mov	r3, r2
 800b50e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b510:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b514:	2b00      	cmp	r3, #0
 800b516:	da08      	bge.n	800b52a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b518:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b51c:	425b      	negs	r3, r3
 800b51e:	4619      	mov	r1, r3
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f7ff ff9b 	bl	800b45c <pbuf_remove_header>
 800b526:	4603      	mov	r3, r0
 800b528:	e007      	b.n	800b53a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b52a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b52e:	787a      	ldrb	r2, [r7, #1]
 800b530:	4619      	mov	r1, r3
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f7ff ff1a 	bl	800b36c <pbuf_add_header_impl>
 800b538:	4603      	mov	r3, r0
  }
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3708      	adds	r7, #8
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}

0800b542 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b542:	b580      	push	{r7, lr}
 800b544:	b082      	sub	sp, #8
 800b546:	af00      	add	r7, sp, #0
 800b548:	6078      	str	r0, [r7, #4]
 800b54a:	460b      	mov	r3, r1
 800b54c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b54e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b552:	2201      	movs	r2, #1
 800b554:	4619      	mov	r1, r3
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f7ff ffd2 	bl	800b500 <pbuf_header_impl>
 800b55c:	4603      	mov	r3, r0
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3708      	adds	r7, #8
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
	...

0800b568 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b088      	sub	sp, #32
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d10b      	bne.n	800b58e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d106      	bne.n	800b58a <pbuf_free+0x22>
 800b57c:	4b3b      	ldr	r3, [pc, #236]	; (800b66c <pbuf_free+0x104>)
 800b57e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b582:	493b      	ldr	r1, [pc, #236]	; (800b670 <pbuf_free+0x108>)
 800b584:	483b      	ldr	r0, [pc, #236]	; (800b674 <pbuf_free+0x10c>)
 800b586:	f00b fce1 	bl	8016f4c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b58a:	2300      	movs	r3, #0
 800b58c:	e069      	b.n	800b662 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b58e:	2300      	movs	r3, #0
 800b590:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b592:	e062      	b.n	800b65a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800b594:	f00b fc48 	bl	8016e28 <sys_arch_protect>
 800b598:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	7b9b      	ldrb	r3, [r3, #14]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d106      	bne.n	800b5b0 <pbuf_free+0x48>
 800b5a2:	4b32      	ldr	r3, [pc, #200]	; (800b66c <pbuf_free+0x104>)
 800b5a4:	f240 22f1 	movw	r2, #753	; 0x2f1
 800b5a8:	4933      	ldr	r1, [pc, #204]	; (800b678 <pbuf_free+0x110>)
 800b5aa:	4832      	ldr	r0, [pc, #200]	; (800b674 <pbuf_free+0x10c>)
 800b5ac:	f00b fcce 	bl	8016f4c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	7b9b      	ldrb	r3, [r3, #14]
 800b5b4:	3b01      	subs	r3, #1
 800b5b6:	b2da      	uxtb	r2, r3
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	739a      	strb	r2, [r3, #14]
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	7b9b      	ldrb	r3, [r3, #14]
 800b5c0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800b5c2:	69b8      	ldr	r0, [r7, #24]
 800b5c4:	f00b fc3e 	bl	8016e44 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b5c8:	7dfb      	ldrb	r3, [r7, #23]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d143      	bne.n	800b656 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	7b1b      	ldrb	r3, [r3, #12]
 800b5d8:	f003 030f 	and.w	r3, r3, #15
 800b5dc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	7b5b      	ldrb	r3, [r3, #13]
 800b5e2:	f003 0302 	and.w	r3, r3, #2
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d011      	beq.n	800b60e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	691b      	ldr	r3, [r3, #16]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d106      	bne.n	800b604 <pbuf_free+0x9c>
 800b5f6:	4b1d      	ldr	r3, [pc, #116]	; (800b66c <pbuf_free+0x104>)
 800b5f8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800b5fc:	491f      	ldr	r1, [pc, #124]	; (800b67c <pbuf_free+0x114>)
 800b5fe:	481d      	ldr	r0, [pc, #116]	; (800b674 <pbuf_free+0x10c>)
 800b600:	f00b fca4 	bl	8016f4c <iprintf>
        pc->custom_free_function(p);
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	691b      	ldr	r3, [r3, #16]
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	4798      	blx	r3
 800b60c:	e01d      	b.n	800b64a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b60e:	7bfb      	ldrb	r3, [r7, #15]
 800b610:	2b02      	cmp	r3, #2
 800b612:	d104      	bne.n	800b61e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800b614:	6879      	ldr	r1, [r7, #4]
 800b616:	200c      	movs	r0, #12
 800b618:	f7ff f978 	bl	800a90c <memp_free>
 800b61c:	e015      	b.n	800b64a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b61e:	7bfb      	ldrb	r3, [r7, #15]
 800b620:	2b01      	cmp	r3, #1
 800b622:	d104      	bne.n	800b62e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800b624:	6879      	ldr	r1, [r7, #4]
 800b626:	200b      	movs	r0, #11
 800b628:	f7ff f970 	bl	800a90c <memp_free>
 800b62c:	e00d      	b.n	800b64a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b62e:	7bfb      	ldrb	r3, [r7, #15]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d103      	bne.n	800b63c <pbuf_free+0xd4>
          mem_free(p);
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f7fe fdfb 	bl	800a230 <mem_free>
 800b63a:	e006      	b.n	800b64a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b63c:	4b0b      	ldr	r3, [pc, #44]	; (800b66c <pbuf_free+0x104>)
 800b63e:	f240 320f 	movw	r2, #783	; 0x30f
 800b642:	490f      	ldr	r1, [pc, #60]	; (800b680 <pbuf_free+0x118>)
 800b644:	480b      	ldr	r0, [pc, #44]	; (800b674 <pbuf_free+0x10c>)
 800b646:	f00b fc81 	bl	8016f4c <iprintf>
        }
      }
      count++;
 800b64a:	7ffb      	ldrb	r3, [r7, #31]
 800b64c:	3301      	adds	r3, #1
 800b64e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	607b      	str	r3, [r7, #4]
 800b654:	e001      	b.n	800b65a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b656:	2300      	movs	r3, #0
 800b658:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d199      	bne.n	800b594 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b660:	7ffb      	ldrb	r3, [r7, #31]
}
 800b662:	4618      	mov	r0, r3
 800b664:	3720      	adds	r7, #32
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
 800b66a:	bf00      	nop
 800b66c:	08018d90 	.word	0x08018d90
 800b670:	08018ef4 	.word	0x08018ef4
 800b674:	08018df0 	.word	0x08018df0
 800b678:	08018f20 	.word	0x08018f20
 800b67c:	08018f38 	.word	0x08018f38
 800b680:	08018f5c 	.word	0x08018f5c

0800b684 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b684:	b480      	push	{r7}
 800b686:	b085      	sub	sp, #20
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b68c:	2300      	movs	r3, #0
 800b68e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b690:	e005      	b.n	800b69e <pbuf_clen+0x1a>
    ++len;
 800b692:	89fb      	ldrh	r3, [r7, #14]
 800b694:	3301      	adds	r3, #1
 800b696:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d1f6      	bne.n	800b692 <pbuf_clen+0xe>
  }
  return len;
 800b6a4:	89fb      	ldrh	r3, [r7, #14]
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3714      	adds	r7, #20
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b0:	4770      	bx	lr
	...

0800b6b4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b084      	sub	sp, #16
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d016      	beq.n	800b6f0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b6c2:	f00b fbb1 	bl	8016e28 <sys_arch_protect>
 800b6c6:	60f8      	str	r0, [r7, #12]
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	7b9b      	ldrb	r3, [r3, #14]
 800b6cc:	3301      	adds	r3, #1
 800b6ce:	b2da      	uxtb	r2, r3
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	739a      	strb	r2, [r3, #14]
 800b6d4:	68f8      	ldr	r0, [r7, #12]
 800b6d6:	f00b fbb5 	bl	8016e44 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	7b9b      	ldrb	r3, [r3, #14]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d106      	bne.n	800b6f0 <pbuf_ref+0x3c>
 800b6e2:	4b05      	ldr	r3, [pc, #20]	; (800b6f8 <pbuf_ref+0x44>)
 800b6e4:	f240 3242 	movw	r2, #834	; 0x342
 800b6e8:	4904      	ldr	r1, [pc, #16]	; (800b6fc <pbuf_ref+0x48>)
 800b6ea:	4805      	ldr	r0, [pc, #20]	; (800b700 <pbuf_ref+0x4c>)
 800b6ec:	f00b fc2e 	bl	8016f4c <iprintf>
  }
}
 800b6f0:	bf00      	nop
 800b6f2:	3710      	adds	r7, #16
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}
 800b6f8:	08018d90 	.word	0x08018d90
 800b6fc:	08018f70 	.word	0x08018f70
 800b700:	08018df0 	.word	0x08018df0

0800b704 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b084      	sub	sp, #16
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d002      	beq.n	800b71a <pbuf_cat+0x16>
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d107      	bne.n	800b72a <pbuf_cat+0x26>
 800b71a:	4b20      	ldr	r3, [pc, #128]	; (800b79c <pbuf_cat+0x98>)
 800b71c:	f240 325a 	movw	r2, #858	; 0x35a
 800b720:	491f      	ldr	r1, [pc, #124]	; (800b7a0 <pbuf_cat+0x9c>)
 800b722:	4820      	ldr	r0, [pc, #128]	; (800b7a4 <pbuf_cat+0xa0>)
 800b724:	f00b fc12 	bl	8016f4c <iprintf>
 800b728:	e034      	b.n	800b794 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	60fb      	str	r3, [r7, #12]
 800b72e:	e00a      	b.n	800b746 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	891a      	ldrh	r2, [r3, #8]
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	891b      	ldrh	r3, [r3, #8]
 800b738:	4413      	add	r3, r2
 800b73a:	b29a      	uxth	r2, r3
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	60fb      	str	r3, [r7, #12]
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d1f0      	bne.n	800b730 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	891a      	ldrh	r2, [r3, #8]
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	895b      	ldrh	r3, [r3, #10]
 800b756:	429a      	cmp	r2, r3
 800b758:	d006      	beq.n	800b768 <pbuf_cat+0x64>
 800b75a:	4b10      	ldr	r3, [pc, #64]	; (800b79c <pbuf_cat+0x98>)
 800b75c:	f240 3262 	movw	r2, #866	; 0x362
 800b760:	4911      	ldr	r1, [pc, #68]	; (800b7a8 <pbuf_cat+0xa4>)
 800b762:	4810      	ldr	r0, [pc, #64]	; (800b7a4 <pbuf_cat+0xa0>)
 800b764:	f00b fbf2 	bl	8016f4c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d006      	beq.n	800b77e <pbuf_cat+0x7a>
 800b770:	4b0a      	ldr	r3, [pc, #40]	; (800b79c <pbuf_cat+0x98>)
 800b772:	f240 3263 	movw	r2, #867	; 0x363
 800b776:	490d      	ldr	r1, [pc, #52]	; (800b7ac <pbuf_cat+0xa8>)
 800b778:	480a      	ldr	r0, [pc, #40]	; (800b7a4 <pbuf_cat+0xa0>)
 800b77a:	f00b fbe7 	bl	8016f4c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	891a      	ldrh	r2, [r3, #8]
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	891b      	ldrh	r3, [r3, #8]
 800b786:	4413      	add	r3, r2
 800b788:	b29a      	uxth	r2, r3
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	683a      	ldr	r2, [r7, #0]
 800b792:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b794:	3710      	adds	r7, #16
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}
 800b79a:	bf00      	nop
 800b79c:	08018d90 	.word	0x08018d90
 800b7a0:	08018f84 	.word	0x08018f84
 800b7a4:	08018df0 	.word	0x08018df0
 800b7a8:	08018fbc 	.word	0x08018fbc
 800b7ac:	08018fec 	.word	0x08018fec

0800b7b0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800b7ba:	6839      	ldr	r1, [r7, #0]
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f7ff ffa1 	bl	800b704 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800b7c2:	6838      	ldr	r0, [r7, #0]
 800b7c4:	f7ff ff76 	bl	800b6b4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800b7c8:	bf00      	nop
 800b7ca:	3708      	adds	r7, #8
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b086      	sub	sp, #24
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	617b      	str	r3, [r7, #20]
 800b7de:	2300      	movs	r3, #0
 800b7e0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d008      	beq.n	800b7fa <pbuf_copy+0x2a>
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d005      	beq.n	800b7fa <pbuf_copy+0x2a>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	891a      	ldrh	r2, [r3, #8]
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	891b      	ldrh	r3, [r3, #8]
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	d209      	bcs.n	800b80e <pbuf_copy+0x3e>
 800b7fa:	4b57      	ldr	r3, [pc, #348]	; (800b958 <pbuf_copy+0x188>)
 800b7fc:	f240 32ca 	movw	r2, #970	; 0x3ca
 800b800:	4956      	ldr	r1, [pc, #344]	; (800b95c <pbuf_copy+0x18c>)
 800b802:	4857      	ldr	r0, [pc, #348]	; (800b960 <pbuf_copy+0x190>)
 800b804:	f00b fba2 	bl	8016f4c <iprintf>
 800b808:	f06f 030f 	mvn.w	r3, #15
 800b80c:	e09f      	b.n	800b94e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	895b      	ldrh	r3, [r3, #10]
 800b812:	461a      	mov	r2, r3
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	1ad2      	subs	r2, r2, r3
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	895b      	ldrh	r3, [r3, #10]
 800b81c:	4619      	mov	r1, r3
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	1acb      	subs	r3, r1, r3
 800b822:	429a      	cmp	r2, r3
 800b824:	d306      	bcc.n	800b834 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	895b      	ldrh	r3, [r3, #10]
 800b82a:	461a      	mov	r2, r3
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	1ad3      	subs	r3, r2, r3
 800b830:	60fb      	str	r3, [r7, #12]
 800b832:	e005      	b.n	800b840 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	895b      	ldrh	r3, [r3, #10]
 800b838:	461a      	mov	r2, r3
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	1ad3      	subs	r3, r2, r3
 800b83e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	685a      	ldr	r2, [r3, #4]
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	18d0      	adds	r0, r2, r3
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	685a      	ldr	r2, [r3, #4]
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	4413      	add	r3, r2
 800b850:	68fa      	ldr	r2, [r7, #12]
 800b852:	4619      	mov	r1, r3
 800b854:	f00b fb67 	bl	8016f26 <memcpy>
    offset_to += len;
 800b858:	697a      	ldr	r2, [r7, #20]
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	4413      	add	r3, r2
 800b85e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800b860:	693a      	ldr	r2, [r7, #16]
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	4413      	add	r3, r2
 800b866:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	895b      	ldrh	r3, [r3, #10]
 800b86c:	461a      	mov	r2, r3
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	4293      	cmp	r3, r2
 800b872:	d906      	bls.n	800b882 <pbuf_copy+0xb2>
 800b874:	4b38      	ldr	r3, [pc, #224]	; (800b958 <pbuf_copy+0x188>)
 800b876:	f240 32d9 	movw	r2, #985	; 0x3d9
 800b87a:	493a      	ldr	r1, [pc, #232]	; (800b964 <pbuf_copy+0x194>)
 800b87c:	4838      	ldr	r0, [pc, #224]	; (800b960 <pbuf_copy+0x190>)
 800b87e:	f00b fb65 	bl	8016f4c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	895b      	ldrh	r3, [r3, #10]
 800b886:	461a      	mov	r2, r3
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d906      	bls.n	800b89c <pbuf_copy+0xcc>
 800b88e:	4b32      	ldr	r3, [pc, #200]	; (800b958 <pbuf_copy+0x188>)
 800b890:	f240 32da 	movw	r2, #986	; 0x3da
 800b894:	4934      	ldr	r1, [pc, #208]	; (800b968 <pbuf_copy+0x198>)
 800b896:	4832      	ldr	r0, [pc, #200]	; (800b960 <pbuf_copy+0x190>)
 800b898:	f00b fb58 	bl	8016f4c <iprintf>
    if (offset_from >= p_from->len) {
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	895b      	ldrh	r3, [r3, #10]
 800b8a0:	461a      	mov	r2, r3
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	d304      	bcc.n	800b8b2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	895b      	ldrh	r3, [r3, #10]
 800b8b6:	461a      	mov	r2, r3
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d114      	bne.n	800b8e8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d10c      	bne.n	800b8e8 <pbuf_copy+0x118>
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d009      	beq.n	800b8e8 <pbuf_copy+0x118>
 800b8d4:	4b20      	ldr	r3, [pc, #128]	; (800b958 <pbuf_copy+0x188>)
 800b8d6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800b8da:	4924      	ldr	r1, [pc, #144]	; (800b96c <pbuf_copy+0x19c>)
 800b8dc:	4820      	ldr	r0, [pc, #128]	; (800b960 <pbuf_copy+0x190>)
 800b8de:	f00b fb35 	bl	8016f4c <iprintf>
 800b8e2:	f06f 030f 	mvn.w	r3, #15
 800b8e6:	e032      	b.n	800b94e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d013      	beq.n	800b916 <pbuf_copy+0x146>
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	895a      	ldrh	r2, [r3, #10]
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	891b      	ldrh	r3, [r3, #8]
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	d10d      	bne.n	800b916 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d009      	beq.n	800b916 <pbuf_copy+0x146>
 800b902:	4b15      	ldr	r3, [pc, #84]	; (800b958 <pbuf_copy+0x188>)
 800b904:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800b908:	4919      	ldr	r1, [pc, #100]	; (800b970 <pbuf_copy+0x1a0>)
 800b90a:	4815      	ldr	r0, [pc, #84]	; (800b960 <pbuf_copy+0x190>)
 800b90c:	f00b fb1e 	bl	8016f4c <iprintf>
 800b910:	f06f 0305 	mvn.w	r3, #5
 800b914:	e01b      	b.n	800b94e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d013      	beq.n	800b944 <pbuf_copy+0x174>
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	895a      	ldrh	r2, [r3, #10]
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	891b      	ldrh	r3, [r3, #8]
 800b924:	429a      	cmp	r2, r3
 800b926:	d10d      	bne.n	800b944 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d009      	beq.n	800b944 <pbuf_copy+0x174>
 800b930:	4b09      	ldr	r3, [pc, #36]	; (800b958 <pbuf_copy+0x188>)
 800b932:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800b936:	490e      	ldr	r1, [pc, #56]	; (800b970 <pbuf_copy+0x1a0>)
 800b938:	4809      	ldr	r0, [pc, #36]	; (800b960 <pbuf_copy+0x190>)
 800b93a:	f00b fb07 	bl	8016f4c <iprintf>
 800b93e:	f06f 0305 	mvn.w	r3, #5
 800b942:	e004      	b.n	800b94e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	2b00      	cmp	r3, #0
 800b948:	f47f af61 	bne.w	800b80e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b94c:	2300      	movs	r3, #0
}
 800b94e:	4618      	mov	r0, r3
 800b950:	3718      	adds	r7, #24
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
 800b956:	bf00      	nop
 800b958:	08018d90 	.word	0x08018d90
 800b95c:	08019038 	.word	0x08019038
 800b960:	08018df0 	.word	0x08018df0
 800b964:	08019068 	.word	0x08019068
 800b968:	08019080 	.word	0x08019080
 800b96c:	0801909c 	.word	0x0801909c
 800b970:	080190ac 	.word	0x080190ac

0800b974 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b088      	sub	sp, #32
 800b978:	af00      	add	r7, sp, #0
 800b97a:	60f8      	str	r0, [r7, #12]
 800b97c:	60b9      	str	r1, [r7, #8]
 800b97e:	4611      	mov	r1, r2
 800b980:	461a      	mov	r2, r3
 800b982:	460b      	mov	r3, r1
 800b984:	80fb      	strh	r3, [r7, #6]
 800b986:	4613      	mov	r3, r2
 800b988:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800b98a:	2300      	movs	r3, #0
 800b98c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800b98e:	2300      	movs	r3, #0
 800b990:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d108      	bne.n	800b9aa <pbuf_copy_partial+0x36>
 800b998:	4b2b      	ldr	r3, [pc, #172]	; (800ba48 <pbuf_copy_partial+0xd4>)
 800b99a:	f240 420a 	movw	r2, #1034	; 0x40a
 800b99e:	492b      	ldr	r1, [pc, #172]	; (800ba4c <pbuf_copy_partial+0xd8>)
 800b9a0:	482b      	ldr	r0, [pc, #172]	; (800ba50 <pbuf_copy_partial+0xdc>)
 800b9a2:	f00b fad3 	bl	8016f4c <iprintf>
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	e04a      	b.n	800ba40 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d108      	bne.n	800b9c2 <pbuf_copy_partial+0x4e>
 800b9b0:	4b25      	ldr	r3, [pc, #148]	; (800ba48 <pbuf_copy_partial+0xd4>)
 800b9b2:	f240 420b 	movw	r2, #1035	; 0x40b
 800b9b6:	4927      	ldr	r1, [pc, #156]	; (800ba54 <pbuf_copy_partial+0xe0>)
 800b9b8:	4825      	ldr	r0, [pc, #148]	; (800ba50 <pbuf_copy_partial+0xdc>)
 800b9ba:	f00b fac7 	bl	8016f4c <iprintf>
 800b9be:	2300      	movs	r3, #0
 800b9c0:	e03e      	b.n	800ba40 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	61fb      	str	r3, [r7, #28]
 800b9c6:	e034      	b.n	800ba32 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800b9c8:	88bb      	ldrh	r3, [r7, #4]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d00a      	beq.n	800b9e4 <pbuf_copy_partial+0x70>
 800b9ce:	69fb      	ldr	r3, [r7, #28]
 800b9d0:	895b      	ldrh	r3, [r3, #10]
 800b9d2:	88ba      	ldrh	r2, [r7, #4]
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d305      	bcc.n	800b9e4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800b9d8:	69fb      	ldr	r3, [r7, #28]
 800b9da:	895b      	ldrh	r3, [r3, #10]
 800b9dc:	88ba      	ldrh	r2, [r7, #4]
 800b9de:	1ad3      	subs	r3, r2, r3
 800b9e0:	80bb      	strh	r3, [r7, #4]
 800b9e2:	e023      	b.n	800ba2c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800b9e4:	69fb      	ldr	r3, [r7, #28]
 800b9e6:	895a      	ldrh	r2, [r3, #10]
 800b9e8:	88bb      	ldrh	r3, [r7, #4]
 800b9ea:	1ad3      	subs	r3, r2, r3
 800b9ec:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800b9ee:	8b3a      	ldrh	r2, [r7, #24]
 800b9f0:	88fb      	ldrh	r3, [r7, #6]
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d901      	bls.n	800b9fa <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800b9f6:	88fb      	ldrh	r3, [r7, #6]
 800b9f8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800b9fa:	8b7b      	ldrh	r3, [r7, #26]
 800b9fc:	68ba      	ldr	r2, [r7, #8]
 800b9fe:	18d0      	adds	r0, r2, r3
 800ba00:	69fb      	ldr	r3, [r7, #28]
 800ba02:	685a      	ldr	r2, [r3, #4]
 800ba04:	88bb      	ldrh	r3, [r7, #4]
 800ba06:	4413      	add	r3, r2
 800ba08:	8b3a      	ldrh	r2, [r7, #24]
 800ba0a:	4619      	mov	r1, r3
 800ba0c:	f00b fa8b 	bl	8016f26 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ba10:	8afa      	ldrh	r2, [r7, #22]
 800ba12:	8b3b      	ldrh	r3, [r7, #24]
 800ba14:	4413      	add	r3, r2
 800ba16:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ba18:	8b7a      	ldrh	r2, [r7, #26]
 800ba1a:	8b3b      	ldrh	r3, [r7, #24]
 800ba1c:	4413      	add	r3, r2
 800ba1e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ba20:	88fa      	ldrh	r2, [r7, #6]
 800ba22:	8b3b      	ldrh	r3, [r7, #24]
 800ba24:	1ad3      	subs	r3, r2, r3
 800ba26:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ba2c:	69fb      	ldr	r3, [r7, #28]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	61fb      	str	r3, [r7, #28]
 800ba32:	88fb      	ldrh	r3, [r7, #6]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d002      	beq.n	800ba3e <pbuf_copy_partial+0xca>
 800ba38:	69fb      	ldr	r3, [r7, #28]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d1c4      	bne.n	800b9c8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ba3e:	8afb      	ldrh	r3, [r7, #22]
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3720      	adds	r7, #32
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}
 800ba48:	08018d90 	.word	0x08018d90
 800ba4c:	080190d8 	.word	0x080190d8
 800ba50:	08018df0 	.word	0x08018df0
 800ba54:	080190f8 	.word	0x080190f8

0800ba58 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	4603      	mov	r3, r0
 800ba60:	603a      	str	r2, [r7, #0]
 800ba62:	71fb      	strb	r3, [r7, #7]
 800ba64:	460b      	mov	r3, r1
 800ba66:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	8919      	ldrh	r1, [r3, #8]
 800ba6c:	88ba      	ldrh	r2, [r7, #4]
 800ba6e:	79fb      	ldrb	r3, [r7, #7]
 800ba70:	4618      	mov	r0, r3
 800ba72:	f7ff fa99 	bl	800afa8 <pbuf_alloc>
 800ba76:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d101      	bne.n	800ba82 <pbuf_clone+0x2a>
    return NULL;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	e011      	b.n	800baa6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ba82:	6839      	ldr	r1, [r7, #0]
 800ba84:	68f8      	ldr	r0, [r7, #12]
 800ba86:	f7ff fea3 	bl	800b7d0 <pbuf_copy>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ba8e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d006      	beq.n	800baa4 <pbuf_clone+0x4c>
 800ba96:	4b06      	ldr	r3, [pc, #24]	; (800bab0 <pbuf_clone+0x58>)
 800ba98:	f240 5224 	movw	r2, #1316	; 0x524
 800ba9c:	4905      	ldr	r1, [pc, #20]	; (800bab4 <pbuf_clone+0x5c>)
 800ba9e:	4806      	ldr	r0, [pc, #24]	; (800bab8 <pbuf_clone+0x60>)
 800baa0:	f00b fa54 	bl	8016f4c <iprintf>
  return q;
 800baa4:	68fb      	ldr	r3, [r7, #12]
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3710      	adds	r7, #16
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}
 800baae:	bf00      	nop
 800bab0:	08018d90 	.word	0x08018d90
 800bab4:	08019204 	.word	0x08019204
 800bab8:	08018df0 	.word	0x08018df0

0800babc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bac0:	f00b fa5c 	bl	8016f7c <rand>
 800bac4:	4603      	mov	r3, r0
 800bac6:	b29b      	uxth	r3, r3
 800bac8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bacc:	b29b      	uxth	r3, r3
 800bace:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800bad2:	b29a      	uxth	r2, r3
 800bad4:	4b01      	ldr	r3, [pc, #4]	; (800badc <tcp_init+0x20>)
 800bad6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bad8:	bf00      	nop
 800bada:	bd80      	pop	{r7, pc}
 800badc:	20000030 	.word	0x20000030

0800bae0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b082      	sub	sp, #8
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	7d1b      	ldrb	r3, [r3, #20]
 800baec:	2b01      	cmp	r3, #1
 800baee:	d105      	bne.n	800bafc <tcp_free+0x1c>
 800baf0:	4b06      	ldr	r3, [pc, #24]	; (800bb0c <tcp_free+0x2c>)
 800baf2:	22d4      	movs	r2, #212	; 0xd4
 800baf4:	4906      	ldr	r1, [pc, #24]	; (800bb10 <tcp_free+0x30>)
 800baf6:	4807      	ldr	r0, [pc, #28]	; (800bb14 <tcp_free+0x34>)
 800baf8:	f00b fa28 	bl	8016f4c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800bafc:	6879      	ldr	r1, [r7, #4]
 800bafe:	2001      	movs	r0, #1
 800bb00:	f7fe ff04 	bl	800a90c <memp_free>
}
 800bb04:	bf00      	nop
 800bb06:	3708      	adds	r7, #8
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}
 800bb0c:	08019290 	.word	0x08019290
 800bb10:	080192c0 	.word	0x080192c0
 800bb14:	080192d4 	.word	0x080192d4

0800bb18 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b082      	sub	sp, #8
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	7d1b      	ldrb	r3, [r3, #20]
 800bb24:	2b01      	cmp	r3, #1
 800bb26:	d105      	bne.n	800bb34 <tcp_free_listen+0x1c>
 800bb28:	4b06      	ldr	r3, [pc, #24]	; (800bb44 <tcp_free_listen+0x2c>)
 800bb2a:	22df      	movs	r2, #223	; 0xdf
 800bb2c:	4906      	ldr	r1, [pc, #24]	; (800bb48 <tcp_free_listen+0x30>)
 800bb2e:	4807      	ldr	r0, [pc, #28]	; (800bb4c <tcp_free_listen+0x34>)
 800bb30:	f00b fa0c 	bl	8016f4c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800bb34:	6879      	ldr	r1, [r7, #4]
 800bb36:	2002      	movs	r0, #2
 800bb38:	f7fe fee8 	bl	800a90c <memp_free>
}
 800bb3c:	bf00      	nop
 800bb3e:	3708      	adds	r7, #8
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}
 800bb44:	08019290 	.word	0x08019290
 800bb48:	080192fc 	.word	0x080192fc
 800bb4c:	080192d4 	.word	0x080192d4

0800bb50 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800bb54:	f001 f89a 	bl	800cc8c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800bb58:	4b07      	ldr	r3, [pc, #28]	; (800bb78 <tcp_tmr+0x28>)
 800bb5a:	781b      	ldrb	r3, [r3, #0]
 800bb5c:	3301      	adds	r3, #1
 800bb5e:	b2da      	uxtb	r2, r3
 800bb60:	4b05      	ldr	r3, [pc, #20]	; (800bb78 <tcp_tmr+0x28>)
 800bb62:	701a      	strb	r2, [r3, #0]
 800bb64:	4b04      	ldr	r3, [pc, #16]	; (800bb78 <tcp_tmr+0x28>)
 800bb66:	781b      	ldrb	r3, [r3, #0]
 800bb68:	f003 0301 	and.w	r3, r3, #1
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d001      	beq.n	800bb74 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800bb70:	f000 fd4e 	bl	800c610 <tcp_slowtmr>
  }
}
 800bb74:	bf00      	nop
 800bb76:	bd80      	pop	{r7, pc}
 800bb78:	200081b9 	.word	0x200081b9

0800bb7c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b084      	sub	sp, #16
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d105      	bne.n	800bb98 <tcp_remove_listener+0x1c>
 800bb8c:	4b0d      	ldr	r3, [pc, #52]	; (800bbc4 <tcp_remove_listener+0x48>)
 800bb8e:	22ff      	movs	r2, #255	; 0xff
 800bb90:	490d      	ldr	r1, [pc, #52]	; (800bbc8 <tcp_remove_listener+0x4c>)
 800bb92:	480e      	ldr	r0, [pc, #56]	; (800bbcc <tcp_remove_listener+0x50>)
 800bb94:	f00b f9da 	bl	8016f4c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	60fb      	str	r3, [r7, #12]
 800bb9c:	e00a      	b.n	800bbb4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bba2:	683a      	ldr	r2, [r7, #0]
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d102      	bne.n	800bbae <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	68db      	ldr	r3, [r3, #12]
 800bbb2:	60fb      	str	r3, [r7, #12]
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d1f1      	bne.n	800bb9e <tcp_remove_listener+0x22>
    }
  }
}
 800bbba:	bf00      	nop
 800bbbc:	3710      	adds	r7, #16
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
 800bbc2:	bf00      	nop
 800bbc4:	08019290 	.word	0x08019290
 800bbc8:	08019318 	.word	0x08019318
 800bbcc:	080192d4 	.word	0x080192d4

0800bbd0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b084      	sub	sp, #16
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d106      	bne.n	800bbec <tcp_listen_closed+0x1c>
 800bbde:	4b14      	ldr	r3, [pc, #80]	; (800bc30 <tcp_listen_closed+0x60>)
 800bbe0:	f240 1211 	movw	r2, #273	; 0x111
 800bbe4:	4913      	ldr	r1, [pc, #76]	; (800bc34 <tcp_listen_closed+0x64>)
 800bbe6:	4814      	ldr	r0, [pc, #80]	; (800bc38 <tcp_listen_closed+0x68>)
 800bbe8:	f00b f9b0 	bl	8016f4c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	7d1b      	ldrb	r3, [r3, #20]
 800bbf0:	2b01      	cmp	r3, #1
 800bbf2:	d006      	beq.n	800bc02 <tcp_listen_closed+0x32>
 800bbf4:	4b0e      	ldr	r3, [pc, #56]	; (800bc30 <tcp_listen_closed+0x60>)
 800bbf6:	f44f 7289 	mov.w	r2, #274	; 0x112
 800bbfa:	4910      	ldr	r1, [pc, #64]	; (800bc3c <tcp_listen_closed+0x6c>)
 800bbfc:	480e      	ldr	r0, [pc, #56]	; (800bc38 <tcp_listen_closed+0x68>)
 800bbfe:	f00b f9a5 	bl	8016f4c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bc02:	2301      	movs	r3, #1
 800bc04:	60fb      	str	r3, [r7, #12]
 800bc06:	e00b      	b.n	800bc20 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800bc08:	4a0d      	ldr	r2, [pc, #52]	; (800bc40 <tcp_listen_closed+0x70>)
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	6879      	ldr	r1, [r7, #4]
 800bc14:	4618      	mov	r0, r3
 800bc16:	f7ff ffb1 	bl	800bb7c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	3301      	adds	r3, #1
 800bc1e:	60fb      	str	r3, [r7, #12]
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	2b03      	cmp	r3, #3
 800bc24:	d9f0      	bls.n	800bc08 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800bc26:	bf00      	nop
 800bc28:	3710      	adds	r7, #16
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}
 800bc2e:	bf00      	nop
 800bc30:	08019290 	.word	0x08019290
 800bc34:	08019340 	.word	0x08019340
 800bc38:	080192d4 	.word	0x080192d4
 800bc3c:	0801934c 	.word	0x0801934c
 800bc40:	0801fa70 	.word	0x0801fa70

0800bc44 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800bc44:	b5b0      	push	{r4, r5, r7, lr}
 800bc46:	b088      	sub	sp, #32
 800bc48:	af04      	add	r7, sp, #16
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	460b      	mov	r3, r1
 800bc4e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d106      	bne.n	800bc64 <tcp_close_shutdown+0x20>
 800bc56:	4b61      	ldr	r3, [pc, #388]	; (800bddc <tcp_close_shutdown+0x198>)
 800bc58:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800bc5c:	4960      	ldr	r1, [pc, #384]	; (800bde0 <tcp_close_shutdown+0x19c>)
 800bc5e:	4861      	ldr	r0, [pc, #388]	; (800bde4 <tcp_close_shutdown+0x1a0>)
 800bc60:	f00b f974 	bl	8016f4c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800bc64:	78fb      	ldrb	r3, [r7, #3]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d066      	beq.n	800bd38 <tcp_close_shutdown+0xf4>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	7d1b      	ldrb	r3, [r3, #20]
 800bc6e:	2b04      	cmp	r3, #4
 800bc70:	d003      	beq.n	800bc7a <tcp_close_shutdown+0x36>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	7d1b      	ldrb	r3, [r3, #20]
 800bc76:	2b07      	cmp	r3, #7
 800bc78:	d15e      	bne.n	800bd38 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d104      	bne.n	800bc8c <tcp_close_shutdown+0x48>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc8a:	d055      	beq.n	800bd38 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	8b5b      	ldrh	r3, [r3, #26]
 800bc90:	f003 0310 	and.w	r3, r3, #16
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d106      	bne.n	800bca6 <tcp_close_shutdown+0x62>
 800bc98:	4b50      	ldr	r3, [pc, #320]	; (800bddc <tcp_close_shutdown+0x198>)
 800bc9a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800bc9e:	4952      	ldr	r1, [pc, #328]	; (800bde8 <tcp_close_shutdown+0x1a4>)
 800bca0:	4850      	ldr	r0, [pc, #320]	; (800bde4 <tcp_close_shutdown+0x1a0>)
 800bca2:	f00b f953 	bl	8016f4c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800bcae:	687d      	ldr	r5, [r7, #4]
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	3304      	adds	r3, #4
 800bcb4:	687a      	ldr	r2, [r7, #4]
 800bcb6:	8ad2      	ldrh	r2, [r2, #22]
 800bcb8:	6879      	ldr	r1, [r7, #4]
 800bcba:	8b09      	ldrh	r1, [r1, #24]
 800bcbc:	9102      	str	r1, [sp, #8]
 800bcbe:	9201      	str	r2, [sp, #4]
 800bcc0:	9300      	str	r3, [sp, #0]
 800bcc2:	462b      	mov	r3, r5
 800bcc4:	4622      	mov	r2, r4
 800bcc6:	4601      	mov	r1, r0
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f005 fdb9 	bl	8011840 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f001 fb8a 	bl	800d3e8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800bcd4:	4b45      	ldr	r3, [pc, #276]	; (800bdec <tcp_close_shutdown+0x1a8>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	687a      	ldr	r2, [r7, #4]
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	d105      	bne.n	800bcea <tcp_close_shutdown+0xa6>
 800bcde:	4b43      	ldr	r3, [pc, #268]	; (800bdec <tcp_close_shutdown+0x1a8>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	68db      	ldr	r3, [r3, #12]
 800bce4:	4a41      	ldr	r2, [pc, #260]	; (800bdec <tcp_close_shutdown+0x1a8>)
 800bce6:	6013      	str	r3, [r2, #0]
 800bce8:	e013      	b.n	800bd12 <tcp_close_shutdown+0xce>
 800bcea:	4b40      	ldr	r3, [pc, #256]	; (800bdec <tcp_close_shutdown+0x1a8>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	60fb      	str	r3, [r7, #12]
 800bcf0:	e00c      	b.n	800bd0c <tcp_close_shutdown+0xc8>
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	68db      	ldr	r3, [r3, #12]
 800bcf6:	687a      	ldr	r2, [r7, #4]
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d104      	bne.n	800bd06 <tcp_close_shutdown+0xc2>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	68da      	ldr	r2, [r3, #12]
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	60da      	str	r2, [r3, #12]
 800bd04:	e005      	b.n	800bd12 <tcp_close_shutdown+0xce>
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	68db      	ldr	r3, [r3, #12]
 800bd0a:	60fb      	str	r3, [r7, #12]
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d1ef      	bne.n	800bcf2 <tcp_close_shutdown+0xae>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2200      	movs	r2, #0
 800bd16:	60da      	str	r2, [r3, #12]
 800bd18:	4b35      	ldr	r3, [pc, #212]	; (800bdf0 <tcp_close_shutdown+0x1ac>)
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800bd1e:	4b35      	ldr	r3, [pc, #212]	; (800bdf4 <tcp_close_shutdown+0x1b0>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	687a      	ldr	r2, [r7, #4]
 800bd24:	429a      	cmp	r2, r3
 800bd26:	d102      	bne.n	800bd2e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800bd28:	f004 f81c 	bl	800fd64 <tcp_trigger_input_pcb_close>
 800bd2c:	e002      	b.n	800bd34 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f7ff fed6 	bl	800bae0 <tcp_free>
      }
      return ERR_OK;
 800bd34:	2300      	movs	r3, #0
 800bd36:	e04d      	b.n	800bdd4 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	7d1b      	ldrb	r3, [r3, #20]
 800bd3c:	2b01      	cmp	r3, #1
 800bd3e:	d02d      	beq.n	800bd9c <tcp_close_shutdown+0x158>
 800bd40:	2b02      	cmp	r3, #2
 800bd42:	d036      	beq.n	800bdb2 <tcp_close_shutdown+0x16e>
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d13f      	bne.n	800bdc8 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	8adb      	ldrh	r3, [r3, #22]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d021      	beq.n	800bd94 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bd50:	4b29      	ldr	r3, [pc, #164]	; (800bdf8 <tcp_close_shutdown+0x1b4>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	687a      	ldr	r2, [r7, #4]
 800bd56:	429a      	cmp	r2, r3
 800bd58:	d105      	bne.n	800bd66 <tcp_close_shutdown+0x122>
 800bd5a:	4b27      	ldr	r3, [pc, #156]	; (800bdf8 <tcp_close_shutdown+0x1b4>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	68db      	ldr	r3, [r3, #12]
 800bd60:	4a25      	ldr	r2, [pc, #148]	; (800bdf8 <tcp_close_shutdown+0x1b4>)
 800bd62:	6013      	str	r3, [r2, #0]
 800bd64:	e013      	b.n	800bd8e <tcp_close_shutdown+0x14a>
 800bd66:	4b24      	ldr	r3, [pc, #144]	; (800bdf8 <tcp_close_shutdown+0x1b4>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	60bb      	str	r3, [r7, #8]
 800bd6c:	e00c      	b.n	800bd88 <tcp_close_shutdown+0x144>
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	68db      	ldr	r3, [r3, #12]
 800bd72:	687a      	ldr	r2, [r7, #4]
 800bd74:	429a      	cmp	r2, r3
 800bd76:	d104      	bne.n	800bd82 <tcp_close_shutdown+0x13e>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	68da      	ldr	r2, [r3, #12]
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	60da      	str	r2, [r3, #12]
 800bd80:	e005      	b.n	800bd8e <tcp_close_shutdown+0x14a>
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	68db      	ldr	r3, [r3, #12]
 800bd86:	60bb      	str	r3, [r7, #8]
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d1ef      	bne.n	800bd6e <tcp_close_shutdown+0x12a>
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2200      	movs	r2, #0
 800bd92:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f7ff fea3 	bl	800bae0 <tcp_free>
      break;
 800bd9a:	e01a      	b.n	800bdd2 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f7ff ff17 	bl	800bbd0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800bda2:	6879      	ldr	r1, [r7, #4]
 800bda4:	4815      	ldr	r0, [pc, #84]	; (800bdfc <tcp_close_shutdown+0x1b8>)
 800bda6:	f001 fb6f 	bl	800d488 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f7ff feb4 	bl	800bb18 <tcp_free_listen>
      break;
 800bdb0:	e00f      	b.n	800bdd2 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800bdb2:	6879      	ldr	r1, [r7, #4]
 800bdb4:	480d      	ldr	r0, [pc, #52]	; (800bdec <tcp_close_shutdown+0x1a8>)
 800bdb6:	f001 fb67 	bl	800d488 <tcp_pcb_remove>
 800bdba:	4b0d      	ldr	r3, [pc, #52]	; (800bdf0 <tcp_close_shutdown+0x1ac>)
 800bdbc:	2201      	movs	r2, #1
 800bdbe:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f7ff fe8d 	bl	800bae0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800bdc6:	e004      	b.n	800bdd2 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f000 f819 	bl	800be00 <tcp_close_shutdown_fin>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	e000      	b.n	800bdd4 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800bdd2:	2300      	movs	r3, #0
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3710      	adds	r7, #16
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bdb0      	pop	{r4, r5, r7, pc}
 800bddc:	08019290 	.word	0x08019290
 800bde0:	08019364 	.word	0x08019364
 800bde4:	080192d4 	.word	0x080192d4
 800bde8:	08019384 	.word	0x08019384
 800bdec:	20010e78 	.word	0x20010e78
 800bdf0:	20010e74 	.word	0x20010e74
 800bdf4:	20010e8c 	.word	0x20010e8c
 800bdf8:	20010e84 	.word	0x20010e84
 800bdfc:	20010e80 	.word	0x20010e80

0800be00 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b084      	sub	sp, #16
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d106      	bne.n	800be1c <tcp_close_shutdown_fin+0x1c>
 800be0e:	4b2c      	ldr	r3, [pc, #176]	; (800bec0 <tcp_close_shutdown_fin+0xc0>)
 800be10:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800be14:	492b      	ldr	r1, [pc, #172]	; (800bec4 <tcp_close_shutdown_fin+0xc4>)
 800be16:	482c      	ldr	r0, [pc, #176]	; (800bec8 <tcp_close_shutdown_fin+0xc8>)
 800be18:	f00b f898 	bl	8016f4c <iprintf>

  switch (pcb->state) {
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	7d1b      	ldrb	r3, [r3, #20]
 800be20:	2b04      	cmp	r3, #4
 800be22:	d010      	beq.n	800be46 <tcp_close_shutdown_fin+0x46>
 800be24:	2b07      	cmp	r3, #7
 800be26:	d01b      	beq.n	800be60 <tcp_close_shutdown_fin+0x60>
 800be28:	2b03      	cmp	r3, #3
 800be2a:	d126      	bne.n	800be7a <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f004 fe05 	bl	8010a3c <tcp_send_fin>
 800be32:	4603      	mov	r3, r0
 800be34:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800be36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d11f      	bne.n	800be7e <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2205      	movs	r2, #5
 800be42:	751a      	strb	r2, [r3, #20]
      }
      break;
 800be44:	e01b      	b.n	800be7e <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f004 fdf8 	bl	8010a3c <tcp_send_fin>
 800be4c:	4603      	mov	r3, r0
 800be4e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800be50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d114      	bne.n	800be82 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2205      	movs	r2, #5
 800be5c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800be5e:	e010      	b.n	800be82 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f004 fdeb 	bl	8010a3c <tcp_send_fin>
 800be66:	4603      	mov	r3, r0
 800be68:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800be6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d109      	bne.n	800be86 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2209      	movs	r2, #9
 800be76:	751a      	strb	r2, [r3, #20]
      }
      break;
 800be78:	e005      	b.n	800be86 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800be7a:	2300      	movs	r3, #0
 800be7c:	e01c      	b.n	800beb8 <tcp_close_shutdown_fin+0xb8>
      break;
 800be7e:	bf00      	nop
 800be80:	e002      	b.n	800be88 <tcp_close_shutdown_fin+0x88>
      break;
 800be82:	bf00      	nop
 800be84:	e000      	b.n	800be88 <tcp_close_shutdown_fin+0x88>
      break;
 800be86:	bf00      	nop
  }

  if (err == ERR_OK) {
 800be88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d103      	bne.n	800be98 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f004 ff11 	bl	8010cb8 <tcp_output>
 800be96:	e00d      	b.n	800beb4 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800be98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bea0:	d108      	bne.n	800beb4 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	8b5b      	ldrh	r3, [r3, #26]
 800bea6:	f043 0308 	orr.w	r3, r3, #8
 800beaa:	b29a      	uxth	r2, r3
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800beb0:	2300      	movs	r3, #0
 800beb2:	e001      	b.n	800beb8 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800beb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3710      	adds	r7, #16
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}
 800bec0:	08019290 	.word	0x08019290
 800bec4:	08019340 	.word	0x08019340
 800bec8:	080192d4 	.word	0x080192d4

0800becc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b082      	sub	sp, #8
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d109      	bne.n	800beee <tcp_close+0x22>
 800beda:	4b0f      	ldr	r3, [pc, #60]	; (800bf18 <tcp_close+0x4c>)
 800bedc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800bee0:	490e      	ldr	r1, [pc, #56]	; (800bf1c <tcp_close+0x50>)
 800bee2:	480f      	ldr	r0, [pc, #60]	; (800bf20 <tcp_close+0x54>)
 800bee4:	f00b f832 	bl	8016f4c <iprintf>
 800bee8:	f06f 030f 	mvn.w	r3, #15
 800beec:	e00f      	b.n	800bf0e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	7d1b      	ldrb	r3, [r3, #20]
 800bef2:	2b01      	cmp	r3, #1
 800bef4:	d006      	beq.n	800bf04 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	8b5b      	ldrh	r3, [r3, #26]
 800befa:	f043 0310 	orr.w	r3, r3, #16
 800befe:	b29a      	uxth	r2, r3
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800bf04:	2101      	movs	r1, #1
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f7ff fe9c 	bl	800bc44 <tcp_close_shutdown>
 800bf0c:	4603      	mov	r3, r0
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	3708      	adds	r7, #8
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}
 800bf16:	bf00      	nop
 800bf18:	08019290 	.word	0x08019290
 800bf1c:	080193a0 	.word	0x080193a0
 800bf20:	080192d4 	.word	0x080192d4

0800bf24 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b084      	sub	sp, #16
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	60f8      	str	r0, [r7, #12]
 800bf2c:	60b9      	str	r1, [r7, #8]
 800bf2e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d109      	bne.n	800bf4a <tcp_shutdown+0x26>
 800bf36:	4b25      	ldr	r3, [pc, #148]	; (800bfcc <tcp_shutdown+0xa8>)
 800bf38:	f240 2207 	movw	r2, #519	; 0x207
 800bf3c:	4924      	ldr	r1, [pc, #144]	; (800bfd0 <tcp_shutdown+0xac>)
 800bf3e:	4825      	ldr	r0, [pc, #148]	; (800bfd4 <tcp_shutdown+0xb0>)
 800bf40:	f00b f804 	bl	8016f4c <iprintf>
 800bf44:	f06f 030f 	mvn.w	r3, #15
 800bf48:	e03c      	b.n	800bfc4 <tcp_shutdown+0xa0>

  if (pcb->state == LISTEN) {
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	7d1b      	ldrb	r3, [r3, #20]
 800bf4e:	2b01      	cmp	r3, #1
 800bf50:	d102      	bne.n	800bf58 <tcp_shutdown+0x34>
    return ERR_CONN;
 800bf52:	f06f 030a 	mvn.w	r3, #10
 800bf56:	e035      	b.n	800bfc4 <tcp_shutdown+0xa0>
  }
  if (shut_rx) {
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d01b      	beq.n	800bf96 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	8b5b      	ldrh	r3, [r3, #26]
 800bf62:	f043 0310 	orr.w	r3, r3, #16
 800bf66:	b29a      	uxth	r2, r3
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d005      	beq.n	800bf7e <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800bf72:	2101      	movs	r1, #1
 800bf74:	68f8      	ldr	r0, [r7, #12]
 800bf76:	f7ff fe65 	bl	800bc44 <tcp_close_shutdown>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	e022      	b.n	800bfc4 <tcp_shutdown+0xa0>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d007      	beq.n	800bf96 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f7ff faec 	bl	800b568 <pbuf_free>
      pcb->refused_data = NULL;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2200      	movs	r2, #0
 800bf94:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d012      	beq.n	800bfc2 <tcp_shutdown+0x9e>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	7d1b      	ldrb	r3, [r3, #20]
 800bfa0:	2b03      	cmp	r3, #3
 800bfa2:	db0b      	blt.n	800bfbc <tcp_shutdown+0x98>
 800bfa4:	2b04      	cmp	r3, #4
 800bfa6:	dd01      	ble.n	800bfac <tcp_shutdown+0x88>
 800bfa8:	2b07      	cmp	r3, #7
 800bfaa:	d107      	bne.n	800bfbc <tcp_shutdown+0x98>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	b2db      	uxtb	r3, r3
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	68f8      	ldr	r0, [r7, #12]
 800bfb4:	f7ff fe46 	bl	800bc44 <tcp_close_shutdown>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	e003      	b.n	800bfc4 <tcp_shutdown+0xa0>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800bfbc:	f06f 030a 	mvn.w	r3, #10
 800bfc0:	e000      	b.n	800bfc4 <tcp_shutdown+0xa0>
    }
  }
  return ERR_OK;
 800bfc2:	2300      	movs	r3, #0
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3710      	adds	r7, #16
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}
 800bfcc:	08019290 	.word	0x08019290
 800bfd0:	080193b8 	.word	0x080193b8
 800bfd4:	080192d4 	.word	0x080192d4

0800bfd8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b08e      	sub	sp, #56	; 0x38
 800bfdc:	af04      	add	r7, sp, #16
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d107      	bne.n	800bff8 <tcp_abandon+0x20>
 800bfe8:	4b52      	ldr	r3, [pc, #328]	; (800c134 <tcp_abandon+0x15c>)
 800bfea:	f240 223d 	movw	r2, #573	; 0x23d
 800bfee:	4952      	ldr	r1, [pc, #328]	; (800c138 <tcp_abandon+0x160>)
 800bff0:	4852      	ldr	r0, [pc, #328]	; (800c13c <tcp_abandon+0x164>)
 800bff2:	f00a ffab 	bl	8016f4c <iprintf>
 800bff6:	e099      	b.n	800c12c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	7d1b      	ldrb	r3, [r3, #20]
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	d106      	bne.n	800c00e <tcp_abandon+0x36>
 800c000:	4b4c      	ldr	r3, [pc, #304]	; (800c134 <tcp_abandon+0x15c>)
 800c002:	f240 2241 	movw	r2, #577	; 0x241
 800c006:	494e      	ldr	r1, [pc, #312]	; (800c140 <tcp_abandon+0x168>)
 800c008:	484c      	ldr	r0, [pc, #304]	; (800c13c <tcp_abandon+0x164>)
 800c00a:	f00a ff9f 	bl	8016f4c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	7d1b      	ldrb	r3, [r3, #20]
 800c012:	2b0a      	cmp	r3, #10
 800c014:	d107      	bne.n	800c026 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c016:	6879      	ldr	r1, [r7, #4]
 800c018:	484a      	ldr	r0, [pc, #296]	; (800c144 <tcp_abandon+0x16c>)
 800c01a:	f001 fa35 	bl	800d488 <tcp_pcb_remove>
    tcp_free(pcb);
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f7ff fd5e 	bl	800bae0 <tcp_free>
 800c024:	e082      	b.n	800c12c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c026:	2300      	movs	r3, #0
 800c028:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c02a:	2300      	movs	r3, #0
 800c02c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c032:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c038:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c040:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	691b      	ldr	r3, [r3, #16]
 800c046:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	7d1b      	ldrb	r3, [r3, #20]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d126      	bne.n	800c09e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	8adb      	ldrh	r3, [r3, #22]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d02e      	beq.n	800c0b6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c058:	4b3b      	ldr	r3, [pc, #236]	; (800c148 <tcp_abandon+0x170>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	687a      	ldr	r2, [r7, #4]
 800c05e:	429a      	cmp	r2, r3
 800c060:	d105      	bne.n	800c06e <tcp_abandon+0x96>
 800c062:	4b39      	ldr	r3, [pc, #228]	; (800c148 <tcp_abandon+0x170>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	68db      	ldr	r3, [r3, #12]
 800c068:	4a37      	ldr	r2, [pc, #220]	; (800c148 <tcp_abandon+0x170>)
 800c06a:	6013      	str	r3, [r2, #0]
 800c06c:	e013      	b.n	800c096 <tcp_abandon+0xbe>
 800c06e:	4b36      	ldr	r3, [pc, #216]	; (800c148 <tcp_abandon+0x170>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	61fb      	str	r3, [r7, #28]
 800c074:	e00c      	b.n	800c090 <tcp_abandon+0xb8>
 800c076:	69fb      	ldr	r3, [r7, #28]
 800c078:	68db      	ldr	r3, [r3, #12]
 800c07a:	687a      	ldr	r2, [r7, #4]
 800c07c:	429a      	cmp	r2, r3
 800c07e:	d104      	bne.n	800c08a <tcp_abandon+0xb2>
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	68da      	ldr	r2, [r3, #12]
 800c084:	69fb      	ldr	r3, [r7, #28]
 800c086:	60da      	str	r2, [r3, #12]
 800c088:	e005      	b.n	800c096 <tcp_abandon+0xbe>
 800c08a:	69fb      	ldr	r3, [r7, #28]
 800c08c:	68db      	ldr	r3, [r3, #12]
 800c08e:	61fb      	str	r3, [r7, #28]
 800c090:	69fb      	ldr	r3, [r7, #28]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d1ef      	bne.n	800c076 <tcp_abandon+0x9e>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2200      	movs	r2, #0
 800c09a:	60da      	str	r2, [r3, #12]
 800c09c:	e00b      	b.n	800c0b6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	8adb      	ldrh	r3, [r3, #22]
 800c0a6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c0a8:	6879      	ldr	r1, [r7, #4]
 800c0aa:	4828      	ldr	r0, [pc, #160]	; (800c14c <tcp_abandon+0x174>)
 800c0ac:	f001 f9ec 	bl	800d488 <tcp_pcb_remove>
 800c0b0:	4b27      	ldr	r3, [pc, #156]	; (800c150 <tcp_abandon+0x178>)
 800c0b2:	2201      	movs	r2, #1
 800c0b4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d004      	beq.n	800c0c8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f000 fec2 	bl	800ce4c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d004      	beq.n	800c0da <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	f000 feb9 	bl	800ce4c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d004      	beq.n	800c0ec <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f000 feb0 	bl	800ce4c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d00e      	beq.n	800c110 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c0f2:	6879      	ldr	r1, [r7, #4]
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	3304      	adds	r3, #4
 800c0f8:	687a      	ldr	r2, [r7, #4]
 800c0fa:	8b12      	ldrh	r2, [r2, #24]
 800c0fc:	9202      	str	r2, [sp, #8]
 800c0fe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c100:	9201      	str	r2, [sp, #4]
 800c102:	9300      	str	r3, [sp, #0]
 800c104:	460b      	mov	r3, r1
 800c106:	697a      	ldr	r2, [r7, #20]
 800c108:	69b9      	ldr	r1, [r7, #24]
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f005 fb98 	bl	8011840 <tcp_rst>
    }
    last_state = pcb->state;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	7d1b      	ldrb	r3, [r3, #20]
 800c114:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f7ff fce2 	bl	800bae0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d004      	beq.n	800c12c <tcp_abandon+0x154>
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	f06f 010c 	mvn.w	r1, #12
 800c128:	68f8      	ldr	r0, [r7, #12]
 800c12a:	4798      	blx	r3
  }
}
 800c12c:	3728      	adds	r7, #40	; 0x28
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}
 800c132:	bf00      	nop
 800c134:	08019290 	.word	0x08019290
 800c138:	080193d4 	.word	0x080193d4
 800c13c:	080192d4 	.word	0x080192d4
 800c140:	080193f0 	.word	0x080193f0
 800c144:	20010e88 	.word	0x20010e88
 800c148:	20010e84 	.word	0x20010e84
 800c14c:	20010e78 	.word	0x20010e78
 800c150:	20010e74 	.word	0x20010e74

0800c154 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b082      	sub	sp, #8
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c15c:	2101      	movs	r1, #1
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f7ff ff3a 	bl	800bfd8 <tcp_abandon>
}
 800c164:	bf00      	nop
 800c166:	3708      	adds	r7, #8
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}

0800c16c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b088      	sub	sp, #32
 800c170:	af00      	add	r7, sp, #0
 800c172:	60f8      	str	r0, [r7, #12]
 800c174:	60b9      	str	r1, [r7, #8]
 800c176:	4613      	mov	r3, r2
 800c178:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800c17a:	2304      	movs	r3, #4
 800c17c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d101      	bne.n	800c188 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800c184:	4b3e      	ldr	r3, [pc, #248]	; (800c280 <tcp_bind+0x114>)
 800c186:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d109      	bne.n	800c1a2 <tcp_bind+0x36>
 800c18e:	4b3d      	ldr	r3, [pc, #244]	; (800c284 <tcp_bind+0x118>)
 800c190:	f240 22a9 	movw	r2, #681	; 0x2a9
 800c194:	493c      	ldr	r1, [pc, #240]	; (800c288 <tcp_bind+0x11c>)
 800c196:	483d      	ldr	r0, [pc, #244]	; (800c28c <tcp_bind+0x120>)
 800c198:	f00a fed8 	bl	8016f4c <iprintf>
 800c19c:	f06f 030f 	mvn.w	r3, #15
 800c1a0:	e06a      	b.n	800c278 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	7d1b      	ldrb	r3, [r3, #20]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d009      	beq.n	800c1be <tcp_bind+0x52>
 800c1aa:	4b36      	ldr	r3, [pc, #216]	; (800c284 <tcp_bind+0x118>)
 800c1ac:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c1b0:	4937      	ldr	r1, [pc, #220]	; (800c290 <tcp_bind+0x124>)
 800c1b2:	4836      	ldr	r0, [pc, #216]	; (800c28c <tcp_bind+0x120>)
 800c1b4:	f00a feca 	bl	8016f4c <iprintf>
 800c1b8:	f06f 0305 	mvn.w	r3, #5
 800c1bc:	e05c      	b.n	800c278 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800c1be:	88fb      	ldrh	r3, [r7, #6]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d109      	bne.n	800c1d8 <tcp_bind+0x6c>
    port = tcp_new_port();
 800c1c4:	f000 f9de 	bl	800c584 <tcp_new_port>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c1cc:	88fb      	ldrh	r3, [r7, #6]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d135      	bne.n	800c23e <tcp_bind+0xd2>
      return ERR_BUF;
 800c1d2:	f06f 0301 	mvn.w	r3, #1
 800c1d6:	e04f      	b.n	800c278 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800c1d8:	2300      	movs	r3, #0
 800c1da:	61fb      	str	r3, [r7, #28]
 800c1dc:	e02b      	b.n	800c236 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c1de:	4a2d      	ldr	r2, [pc, #180]	; (800c294 <tcp_bind+0x128>)
 800c1e0:	69fb      	ldr	r3, [r7, #28]
 800c1e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	61bb      	str	r3, [r7, #24]
 800c1ea:	e01e      	b.n	800c22a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800c1ec:	69bb      	ldr	r3, [r7, #24]
 800c1ee:	8adb      	ldrh	r3, [r3, #22]
 800c1f0:	88fa      	ldrh	r2, [r7, #6]
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d116      	bne.n	800c224 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800c1f6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d010      	beq.n	800c21e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800c1fc:	69bb      	ldr	r3, [r7, #24]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d00c      	beq.n	800c21e <tcp_bind+0xb2>
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d009      	beq.n	800c21e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d005      	beq.n	800c21e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800c212:	69bb      	ldr	r3, [r7, #24]
 800c214:	681a      	ldr	r2, [r3, #0]
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d102      	bne.n	800c224 <tcp_bind+0xb8>
              return ERR_USE;
 800c21e:	f06f 0307 	mvn.w	r3, #7
 800c222:	e029      	b.n	800c278 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c224:	69bb      	ldr	r3, [r7, #24]
 800c226:	68db      	ldr	r3, [r3, #12]
 800c228:	61bb      	str	r3, [r7, #24]
 800c22a:	69bb      	ldr	r3, [r7, #24]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d1dd      	bne.n	800c1ec <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800c230:	69fb      	ldr	r3, [r7, #28]
 800c232:	3301      	adds	r3, #1
 800c234:	61fb      	str	r3, [r7, #28]
 800c236:	69fa      	ldr	r2, [r7, #28]
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	429a      	cmp	r2, r3
 800c23c:	dbcf      	blt.n	800c1de <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d00c      	beq.n	800c25e <tcp_bind+0xf2>
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d008      	beq.n	800c25e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d002      	beq.n	800c258 <tcp_bind+0xec>
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	e000      	b.n	800c25a <tcp_bind+0xee>
 800c258:	2300      	movs	r3, #0
 800c25a:	68fa      	ldr	r2, [r7, #12]
 800c25c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	88fa      	ldrh	r2, [r7, #6]
 800c262:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800c264:	4b0c      	ldr	r3, [pc, #48]	; (800c298 <tcp_bind+0x12c>)
 800c266:	681a      	ldr	r2, [r3, #0]
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	60da      	str	r2, [r3, #12]
 800c26c:	4a0a      	ldr	r2, [pc, #40]	; (800c298 <tcp_bind+0x12c>)
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	6013      	str	r3, [r2, #0]
 800c272:	f005 fca5 	bl	8011bc0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800c276:	2300      	movs	r3, #0
}
 800c278:	4618      	mov	r0, r3
 800c27a:	3720      	adds	r7, #32
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}
 800c280:	0801faa8 	.word	0x0801faa8
 800c284:	08019290 	.word	0x08019290
 800c288:	08019424 	.word	0x08019424
 800c28c:	080192d4 	.word	0x080192d4
 800c290:	0801943c 	.word	0x0801943c
 800c294:	0801fa70 	.word	0x0801fa70
 800c298:	20010e84 	.word	0x20010e84

0800c29c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b084      	sub	sp, #16
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	60f8      	str	r0, [r7, #12]
 800c2a4:	60b9      	str	r1, [r7, #8]
 800c2a6:	4613      	mov	r3, r2
 800c2a8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d106      	bne.n	800c2be <tcp_accept_null+0x22>
 800c2b0:	4b07      	ldr	r3, [pc, #28]	; (800c2d0 <tcp_accept_null+0x34>)
 800c2b2:	f240 320f 	movw	r2, #783	; 0x30f
 800c2b6:	4907      	ldr	r1, [pc, #28]	; (800c2d4 <tcp_accept_null+0x38>)
 800c2b8:	4807      	ldr	r0, [pc, #28]	; (800c2d8 <tcp_accept_null+0x3c>)
 800c2ba:	f00a fe47 	bl	8016f4c <iprintf>

  tcp_abort(pcb);
 800c2be:	68b8      	ldr	r0, [r7, #8]
 800c2c0:	f7ff ff48 	bl	800c154 <tcp_abort>

  return ERR_ABRT;
 800c2c4:	f06f 030c 	mvn.w	r3, #12
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3710      	adds	r7, #16
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}
 800c2d0:	08019290 	.word	0x08019290
 800c2d4:	08019464 	.word	0x08019464
 800c2d8:	080192d4 	.word	0x080192d4

0800c2dc <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b088      	sub	sp, #32
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	60f8      	str	r0, [r7, #12]
 800c2e4:	460b      	mov	r3, r1
 800c2e6:	607a      	str	r2, [r7, #4]
 800c2e8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d109      	bne.n	800c308 <tcp_listen_with_backlog_and_err+0x2c>
 800c2f4:	4b47      	ldr	r3, [pc, #284]	; (800c414 <tcp_listen_with_backlog_and_err+0x138>)
 800c2f6:	f240 3259 	movw	r2, #857	; 0x359
 800c2fa:	4947      	ldr	r1, [pc, #284]	; (800c418 <tcp_listen_with_backlog_and_err+0x13c>)
 800c2fc:	4847      	ldr	r0, [pc, #284]	; (800c41c <tcp_listen_with_backlog_and_err+0x140>)
 800c2fe:	f00a fe25 	bl	8016f4c <iprintf>
 800c302:	23f0      	movs	r3, #240	; 0xf0
 800c304:	76fb      	strb	r3, [r7, #27]
 800c306:	e079      	b.n	800c3fc <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	7d1b      	ldrb	r3, [r3, #20]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d009      	beq.n	800c324 <tcp_listen_with_backlog_and_err+0x48>
 800c310:	4b40      	ldr	r3, [pc, #256]	; (800c414 <tcp_listen_with_backlog_and_err+0x138>)
 800c312:	f240 325a 	movw	r2, #858	; 0x35a
 800c316:	4942      	ldr	r1, [pc, #264]	; (800c420 <tcp_listen_with_backlog_and_err+0x144>)
 800c318:	4840      	ldr	r0, [pc, #256]	; (800c41c <tcp_listen_with_backlog_and_err+0x140>)
 800c31a:	f00a fe17 	bl	8016f4c <iprintf>
 800c31e:	23f1      	movs	r3, #241	; 0xf1
 800c320:	76fb      	strb	r3, [r7, #27]
 800c322:	e06b      	b.n	800c3fc <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	7d1b      	ldrb	r3, [r3, #20]
 800c328:	2b01      	cmp	r3, #1
 800c32a:	d104      	bne.n	800c336 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800c330:	23f7      	movs	r3, #247	; 0xf7
 800c332:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c334:	e062      	b.n	800c3fc <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800c336:	2002      	movs	r0, #2
 800c338:	f7fe fa96 	bl	800a868 <memp_malloc>
 800c33c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800c33e:	69fb      	ldr	r3, [r7, #28]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d102      	bne.n	800c34a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800c344:	23ff      	movs	r3, #255	; 0xff
 800c346:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c348:	e058      	b.n	800c3fc <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	691a      	ldr	r2, [r3, #16]
 800c34e:	69fb      	ldr	r3, [r7, #28]
 800c350:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	8ada      	ldrh	r2, [r3, #22]
 800c356:	69fb      	ldr	r3, [r7, #28]
 800c358:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800c35a:	69fb      	ldr	r3, [r7, #28]
 800c35c:	2201      	movs	r2, #1
 800c35e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	7d5a      	ldrb	r2, [r3, #21]
 800c364:	69fb      	ldr	r3, [r7, #28]
 800c366:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	7a5a      	ldrb	r2, [r3, #9]
 800c36c:	69fb      	ldr	r3, [r7, #28]
 800c36e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800c370:	69fb      	ldr	r3, [r7, #28]
 800c372:	2200      	movs	r2, #0
 800c374:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	7ada      	ldrb	r2, [r3, #11]
 800c37a:	69fb      	ldr	r3, [r7, #28]
 800c37c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	7a9a      	ldrb	r2, [r3, #10]
 800c382:	69fb      	ldr	r3, [r7, #28]
 800c384:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681a      	ldr	r2, [r3, #0]
 800c38a:	69fb      	ldr	r3, [r7, #28]
 800c38c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	8adb      	ldrh	r3, [r3, #22]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d021      	beq.n	800c3da <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800c396:	4b23      	ldr	r3, [pc, #140]	; (800c424 <tcp_listen_with_backlog_and_err+0x148>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	68fa      	ldr	r2, [r7, #12]
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d105      	bne.n	800c3ac <tcp_listen_with_backlog_and_err+0xd0>
 800c3a0:	4b20      	ldr	r3, [pc, #128]	; (800c424 <tcp_listen_with_backlog_and_err+0x148>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	68db      	ldr	r3, [r3, #12]
 800c3a6:	4a1f      	ldr	r2, [pc, #124]	; (800c424 <tcp_listen_with_backlog_and_err+0x148>)
 800c3a8:	6013      	str	r3, [r2, #0]
 800c3aa:	e013      	b.n	800c3d4 <tcp_listen_with_backlog_and_err+0xf8>
 800c3ac:	4b1d      	ldr	r3, [pc, #116]	; (800c424 <tcp_listen_with_backlog_and_err+0x148>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	617b      	str	r3, [r7, #20]
 800c3b2:	e00c      	b.n	800c3ce <tcp_listen_with_backlog_and_err+0xf2>
 800c3b4:	697b      	ldr	r3, [r7, #20]
 800c3b6:	68db      	ldr	r3, [r3, #12]
 800c3b8:	68fa      	ldr	r2, [r7, #12]
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	d104      	bne.n	800c3c8 <tcp_listen_with_backlog_and_err+0xec>
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	68da      	ldr	r2, [r3, #12]
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	60da      	str	r2, [r3, #12]
 800c3c6:	e005      	b.n	800c3d4 <tcp_listen_with_backlog_and_err+0xf8>
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	68db      	ldr	r3, [r3, #12]
 800c3cc:	617b      	str	r3, [r7, #20]
 800c3ce:	697b      	ldr	r3, [r7, #20]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d1ef      	bne.n	800c3b4 <tcp_listen_with_backlog_and_err+0xd8>
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800c3da:	68f8      	ldr	r0, [r7, #12]
 800c3dc:	f7ff fb80 	bl	800bae0 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800c3e0:	69fb      	ldr	r3, [r7, #28]
 800c3e2:	4a11      	ldr	r2, [pc, #68]	; (800c428 <tcp_listen_with_backlog_and_err+0x14c>)
 800c3e4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800c3e6:	4b11      	ldr	r3, [pc, #68]	; (800c42c <tcp_listen_with_backlog_and_err+0x150>)
 800c3e8:	681a      	ldr	r2, [r3, #0]
 800c3ea:	69fb      	ldr	r3, [r7, #28]
 800c3ec:	60da      	str	r2, [r3, #12]
 800c3ee:	4a0f      	ldr	r2, [pc, #60]	; (800c42c <tcp_listen_with_backlog_and_err+0x150>)
 800c3f0:	69fb      	ldr	r3, [r7, #28]
 800c3f2:	6013      	str	r3, [r2, #0]
 800c3f4:	f005 fbe4 	bl	8011bc0 <tcp_timer_needed>
  res = ERR_OK;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d002      	beq.n	800c408 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	7efa      	ldrb	r2, [r7, #27]
 800c406:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800c408:	69fb      	ldr	r3, [r7, #28]
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3720      	adds	r7, #32
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}
 800c412:	bf00      	nop
 800c414:	08019290 	.word	0x08019290
 800c418:	08019484 	.word	0x08019484
 800c41c:	080192d4 	.word	0x080192d4
 800c420:	080194b4 	.word	0x080194b4
 800c424:	20010e84 	.word	0x20010e84
 800c428:	0800c29d 	.word	0x0800c29d
 800c42c:	20010e80 	.word	0x20010e80

0800c430 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b084      	sub	sp, #16
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d106      	bne.n	800c44c <tcp_update_rcv_ann_wnd+0x1c>
 800c43e:	4b25      	ldr	r3, [pc, #148]	; (800c4d4 <tcp_update_rcv_ann_wnd+0xa4>)
 800c440:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c444:	4924      	ldr	r1, [pc, #144]	; (800c4d8 <tcp_update_rcv_ann_wnd+0xa8>)
 800c446:	4825      	ldr	r0, [pc, #148]	; (800c4dc <tcp_update_rcv_ann_wnd+0xac>)
 800c448:	f00a fd80 	bl	8016f4c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c450:	687a      	ldr	r2, [r7, #4]
 800c452:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c454:	4413      	add	r3, r2
 800c456:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c45c:	687a      	ldr	r2, [r7, #4]
 800c45e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c460:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800c464:	bf28      	it	cs
 800c466:	f44f 6200 	movcs.w	r2, #2048	; 0x800
 800c46a:	b292      	uxth	r2, r2
 800c46c:	4413      	add	r3, r2
 800c46e:	68fa      	ldr	r2, [r7, #12]
 800c470:	1ad3      	subs	r3, r2, r3
 800c472:	2b00      	cmp	r3, #0
 800c474:	db08      	blt.n	800c488 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c482:	68fa      	ldr	r2, [r7, #12]
 800c484:	1ad3      	subs	r3, r2, r3
 800c486:	e020      	b.n	800c4ca <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c490:	1ad3      	subs	r3, r2, r3
 800c492:	2b00      	cmp	r3, #0
 800c494:	dd03      	ble.n	800c49e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2200      	movs	r2, #0
 800c49a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c49c:	e014      	b.n	800c4c8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4a6:	1ad3      	subs	r3, r2, r3
 800c4a8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4b0:	d306      	bcc.n	800c4c0 <tcp_update_rcv_ann_wnd+0x90>
 800c4b2:	4b08      	ldr	r3, [pc, #32]	; (800c4d4 <tcp_update_rcv_ann_wnd+0xa4>)
 800c4b4:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c4b8:	4909      	ldr	r1, [pc, #36]	; (800c4e0 <tcp_update_rcv_ann_wnd+0xb0>)
 800c4ba:	4808      	ldr	r0, [pc, #32]	; (800c4dc <tcp_update_rcv_ann_wnd+0xac>)
 800c4bc:	f00a fd46 	bl	8016f4c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	b29a      	uxth	r2, r3
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c4c8:	2300      	movs	r3, #0
  }
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3710      	adds	r7, #16
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
 800c4d2:	bf00      	nop
 800c4d4:	08019290 	.word	0x08019290
 800c4d8:	080194ec 	.word	0x080194ec
 800c4dc:	080192d4 	.word	0x080192d4
 800c4e0:	08019510 	.word	0x08019510

0800c4e4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b084      	sub	sp, #16
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
 800c4ec:	460b      	mov	r3, r1
 800c4ee:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d107      	bne.n	800c506 <tcp_recved+0x22>
 800c4f6:	4b1f      	ldr	r3, [pc, #124]	; (800c574 <tcp_recved+0x90>)
 800c4f8:	f240 32cf 	movw	r2, #975	; 0x3cf
 800c4fc:	491e      	ldr	r1, [pc, #120]	; (800c578 <tcp_recved+0x94>)
 800c4fe:	481f      	ldr	r0, [pc, #124]	; (800c57c <tcp_recved+0x98>)
 800c500:	f00a fd24 	bl	8016f4c <iprintf>
 800c504:	e032      	b.n	800c56c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	7d1b      	ldrb	r3, [r3, #20]
 800c50a:	2b01      	cmp	r3, #1
 800c50c:	d106      	bne.n	800c51c <tcp_recved+0x38>
 800c50e:	4b19      	ldr	r3, [pc, #100]	; (800c574 <tcp_recved+0x90>)
 800c510:	f240 32d3 	movw	r2, #979	; 0x3d3
 800c514:	491a      	ldr	r1, [pc, #104]	; (800c580 <tcp_recved+0x9c>)
 800c516:	4819      	ldr	r0, [pc, #100]	; (800c57c <tcp_recved+0x98>)
 800c518:	f00a fd18 	bl	8016f4c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c520:	887b      	ldrh	r3, [r7, #2]
 800c522:	4413      	add	r3, r2
 800c524:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c526:	89fb      	ldrh	r3, [r7, #14]
 800c528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c52c:	d804      	bhi.n	800c538 <tcp_recved+0x54>
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c532:	89fa      	ldrh	r2, [r7, #14]
 800c534:	429a      	cmp	r2, r3
 800c536:	d204      	bcs.n	800c542 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c53e:	851a      	strh	r2, [r3, #40]	; 0x28
 800c540:	e002      	b.n	800c548 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	89fa      	ldrh	r2, [r7, #14]
 800c546:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f7ff ff71 	bl	800c430 <tcp_update_rcv_ann_wnd>
 800c54e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c556:	d309      	bcc.n	800c56c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	8b5b      	ldrh	r3, [r3, #26]
 800c55c:	f043 0302 	orr.w	r3, r3, #2
 800c560:	b29a      	uxth	r2, r3
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f004 fba6 	bl	8010cb8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c56c:	3710      	adds	r7, #16
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}
 800c572:	bf00      	nop
 800c574:	08019290 	.word	0x08019290
 800c578:	0801952c 	.word	0x0801952c
 800c57c:	080192d4 	.word	0x080192d4
 800c580:	08019544 	.word	0x08019544

0800c584 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800c584:	b480      	push	{r7}
 800c586:	b083      	sub	sp, #12
 800c588:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800c58a:	2300      	movs	r3, #0
 800c58c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800c58e:	4b1e      	ldr	r3, [pc, #120]	; (800c608 <tcp_new_port+0x84>)
 800c590:	881b      	ldrh	r3, [r3, #0]
 800c592:	3301      	adds	r3, #1
 800c594:	b29a      	uxth	r2, r3
 800c596:	4b1c      	ldr	r3, [pc, #112]	; (800c608 <tcp_new_port+0x84>)
 800c598:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800c59a:	4b1b      	ldr	r3, [pc, #108]	; (800c608 <tcp_new_port+0x84>)
 800c59c:	881b      	ldrh	r3, [r3, #0]
 800c59e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d103      	bne.n	800c5ae <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800c5a6:	4b18      	ldr	r3, [pc, #96]	; (800c608 <tcp_new_port+0x84>)
 800c5a8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800c5ac:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	71fb      	strb	r3, [r7, #7]
 800c5b2:	e01e      	b.n	800c5f2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c5b4:	79fb      	ldrb	r3, [r7, #7]
 800c5b6:	4a15      	ldr	r2, [pc, #84]	; (800c60c <tcp_new_port+0x88>)
 800c5b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	603b      	str	r3, [r7, #0]
 800c5c0:	e011      	b.n	800c5e6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	8ada      	ldrh	r2, [r3, #22]
 800c5c6:	4b10      	ldr	r3, [pc, #64]	; (800c608 <tcp_new_port+0x84>)
 800c5c8:	881b      	ldrh	r3, [r3, #0]
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d108      	bne.n	800c5e0 <tcp_new_port+0x5c>
        n++;
 800c5ce:	88bb      	ldrh	r3, [r7, #4]
 800c5d0:	3301      	adds	r3, #1
 800c5d2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800c5d4:	88bb      	ldrh	r3, [r7, #4]
 800c5d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c5da:	d3d8      	bcc.n	800c58e <tcp_new_port+0xa>
          return 0;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	e00d      	b.n	800c5fc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	68db      	ldr	r3, [r3, #12]
 800c5e4:	603b      	str	r3, [r7, #0]
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d1ea      	bne.n	800c5c2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c5ec:	79fb      	ldrb	r3, [r7, #7]
 800c5ee:	3301      	adds	r3, #1
 800c5f0:	71fb      	strb	r3, [r7, #7]
 800c5f2:	79fb      	ldrb	r3, [r7, #7]
 800c5f4:	2b03      	cmp	r3, #3
 800c5f6:	d9dd      	bls.n	800c5b4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800c5f8:	4b03      	ldr	r3, [pc, #12]	; (800c608 <tcp_new_port+0x84>)
 800c5fa:	881b      	ldrh	r3, [r3, #0]
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	370c      	adds	r7, #12
 800c600:	46bd      	mov	sp, r7
 800c602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c606:	4770      	bx	lr
 800c608:	20000030 	.word	0x20000030
 800c60c:	0801fa70 	.word	0x0801fa70

0800c610 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c610:	b5b0      	push	{r4, r5, r7, lr}
 800c612:	b090      	sub	sp, #64	; 0x40
 800c614:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c616:	2300      	movs	r3, #0
 800c618:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800c61c:	4b94      	ldr	r3, [pc, #592]	; (800c870 <tcp_slowtmr+0x260>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	3301      	adds	r3, #1
 800c622:	4a93      	ldr	r2, [pc, #588]	; (800c870 <tcp_slowtmr+0x260>)
 800c624:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c626:	4b93      	ldr	r3, [pc, #588]	; (800c874 <tcp_slowtmr+0x264>)
 800c628:	781b      	ldrb	r3, [r3, #0]
 800c62a:	3301      	adds	r3, #1
 800c62c:	b2da      	uxtb	r2, r3
 800c62e:	4b91      	ldr	r3, [pc, #580]	; (800c874 <tcp_slowtmr+0x264>)
 800c630:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800c632:	2300      	movs	r3, #0
 800c634:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800c636:	4b90      	ldr	r3, [pc, #576]	; (800c878 <tcp_slowtmr+0x268>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800c63c:	e29f      	b.n	800cb7e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c640:	7d1b      	ldrb	r3, [r3, #20]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d106      	bne.n	800c654 <tcp_slowtmr+0x44>
 800c646:	4b8d      	ldr	r3, [pc, #564]	; (800c87c <tcp_slowtmr+0x26c>)
 800c648:	f240 42be 	movw	r2, #1214	; 0x4be
 800c64c:	498c      	ldr	r1, [pc, #560]	; (800c880 <tcp_slowtmr+0x270>)
 800c64e:	488d      	ldr	r0, [pc, #564]	; (800c884 <tcp_slowtmr+0x274>)
 800c650:	f00a fc7c 	bl	8016f4c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c656:	7d1b      	ldrb	r3, [r3, #20]
 800c658:	2b01      	cmp	r3, #1
 800c65a:	d106      	bne.n	800c66a <tcp_slowtmr+0x5a>
 800c65c:	4b87      	ldr	r3, [pc, #540]	; (800c87c <tcp_slowtmr+0x26c>)
 800c65e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800c662:	4989      	ldr	r1, [pc, #548]	; (800c888 <tcp_slowtmr+0x278>)
 800c664:	4887      	ldr	r0, [pc, #540]	; (800c884 <tcp_slowtmr+0x274>)
 800c666:	f00a fc71 	bl	8016f4c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c66c:	7d1b      	ldrb	r3, [r3, #20]
 800c66e:	2b0a      	cmp	r3, #10
 800c670:	d106      	bne.n	800c680 <tcp_slowtmr+0x70>
 800c672:	4b82      	ldr	r3, [pc, #520]	; (800c87c <tcp_slowtmr+0x26c>)
 800c674:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800c678:	4984      	ldr	r1, [pc, #528]	; (800c88c <tcp_slowtmr+0x27c>)
 800c67a:	4882      	ldr	r0, [pc, #520]	; (800c884 <tcp_slowtmr+0x274>)
 800c67c:	f00a fc66 	bl	8016f4c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c682:	7f9a      	ldrb	r2, [r3, #30]
 800c684:	4b7b      	ldr	r3, [pc, #492]	; (800c874 <tcp_slowtmr+0x264>)
 800c686:	781b      	ldrb	r3, [r3, #0]
 800c688:	429a      	cmp	r2, r3
 800c68a:	d105      	bne.n	800c698 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800c68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c68e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c692:	68db      	ldr	r3, [r3, #12]
 800c694:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800c696:	e272      	b.n	800cb7e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800c698:	4b76      	ldr	r3, [pc, #472]	; (800c874 <tcp_slowtmr+0x264>)
 800c69a:	781a      	ldrb	r2, [r3, #0]
 800c69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c69e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ae:	7d1b      	ldrb	r3, [r3, #20]
 800c6b0:	2b02      	cmp	r3, #2
 800c6b2:	d10a      	bne.n	800c6ca <tcp_slowtmr+0xba>
 800c6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c6ba:	2b05      	cmp	r3, #5
 800c6bc:	d905      	bls.n	800c6ca <tcp_slowtmr+0xba>
      ++pcb_remove;
 800c6be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6c2:	3301      	adds	r3, #1
 800c6c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c6c8:	e11e      	b.n	800c908 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c6d0:	2b0b      	cmp	r3, #11
 800c6d2:	d905      	bls.n	800c6e0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800c6d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6d8:	3301      	adds	r3, #1
 800c6da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c6de:	e113      	b.n	800c908 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800c6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6e2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d075      	beq.n	800c7d6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c6ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d006      	beq.n	800c700 <tcp_slowtmr+0xf0>
 800c6f2:	4b62      	ldr	r3, [pc, #392]	; (800c87c <tcp_slowtmr+0x26c>)
 800c6f4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800c6f8:	4965      	ldr	r1, [pc, #404]	; (800c890 <tcp_slowtmr+0x280>)
 800c6fa:	4862      	ldr	r0, [pc, #392]	; (800c884 <tcp_slowtmr+0x274>)
 800c6fc:	f00a fc26 	bl	8016f4c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c704:	2b00      	cmp	r3, #0
 800c706:	d106      	bne.n	800c716 <tcp_slowtmr+0x106>
 800c708:	4b5c      	ldr	r3, [pc, #368]	; (800c87c <tcp_slowtmr+0x26c>)
 800c70a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800c70e:	4961      	ldr	r1, [pc, #388]	; (800c894 <tcp_slowtmr+0x284>)
 800c710:	485c      	ldr	r0, [pc, #368]	; (800c884 <tcp_slowtmr+0x274>)
 800c712:	f00a fc1b 	bl	8016f4c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c718:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c71c:	2b0b      	cmp	r3, #11
 800c71e:	d905      	bls.n	800c72c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800c720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c724:	3301      	adds	r3, #1
 800c726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c72a:	e0ed      	b.n	800c908 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c72e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c732:	3b01      	subs	r3, #1
 800c734:	4a58      	ldr	r2, [pc, #352]	; (800c898 <tcp_slowtmr+0x288>)
 800c736:	5cd3      	ldrb	r3, [r2, r3]
 800c738:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c73c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c740:	7c7a      	ldrb	r2, [r7, #17]
 800c742:	429a      	cmp	r2, r3
 800c744:	d907      	bls.n	800c756 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800c746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c748:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c74c:	3301      	adds	r3, #1
 800c74e:	b2da      	uxtb	r2, r3
 800c750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c752:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800c756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c758:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c75c:	7c7a      	ldrb	r2, [r7, #17]
 800c75e:	429a      	cmp	r2, r3
 800c760:	f200 80d2 	bhi.w	800c908 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800c764:	2301      	movs	r3, #1
 800c766:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800c768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c76a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d108      	bne.n	800c784 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c772:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c774:	f005 f956 	bl	8011a24 <tcp_zero_window_probe>
 800c778:	4603      	mov	r3, r0
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d014      	beq.n	800c7a8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800c77e:	2300      	movs	r3, #0
 800c780:	623b      	str	r3, [r7, #32]
 800c782:	e011      	b.n	800c7a8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c786:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c78a:	4619      	mov	r1, r3
 800c78c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c78e:	f004 f80d 	bl	80107ac <tcp_split_unsent_seg>
 800c792:	4603      	mov	r3, r0
 800c794:	2b00      	cmp	r3, #0
 800c796:	d107      	bne.n	800c7a8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800c798:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c79a:	f004 fa8d 	bl	8010cb8 <tcp_output>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d101      	bne.n	800c7a8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800c7a8:	6a3b      	ldr	r3, [r7, #32]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	f000 80ac 	beq.w	800c908 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800c7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c7be:	2b06      	cmp	r3, #6
 800c7c0:	f200 80a2 	bhi.w	800c908 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800c7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7c6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c7ca:	3301      	adds	r3, #1
 800c7cc:	b2da      	uxtb	r2, r3
 800c7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800c7d4:	e098      	b.n	800c908 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	db0f      	blt.n	800c800 <tcp_slowtmr+0x1f0>
 800c7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c7e6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	d008      	beq.n	800c800 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800c7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c7f4:	b29b      	uxth	r3, r3
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	b29b      	uxth	r3, r3
 800c7fa:	b21a      	sxth	r2, r3
 800c7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7fe:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800c800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c802:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800c806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c808:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c80c:	429a      	cmp	r2, r3
 800c80e:	db7b      	blt.n	800c908 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c810:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c812:	f004 fd49 	bl	80112a8 <tcp_rexmit_rto_prepare>
 800c816:	4603      	mov	r3, r0
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d007      	beq.n	800c82c <tcp_slowtmr+0x21c>
 800c81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c81e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c820:	2b00      	cmp	r3, #0
 800c822:	d171      	bne.n	800c908 <tcp_slowtmr+0x2f8>
 800c824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d06d      	beq.n	800c908 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800c82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c82e:	7d1b      	ldrb	r3, [r3, #20]
 800c830:	2b02      	cmp	r3, #2
 800c832:	d03a      	beq.n	800c8aa <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c836:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c83a:	2b0c      	cmp	r3, #12
 800c83c:	bf28      	it	cs
 800c83e:	230c      	movcs	r3, #12
 800c840:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c844:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c848:	10db      	asrs	r3, r3, #3
 800c84a:	b21b      	sxth	r3, r3
 800c84c:	461a      	mov	r2, r3
 800c84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c850:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c854:	4413      	add	r3, r2
 800c856:	7efa      	ldrb	r2, [r7, #27]
 800c858:	4910      	ldr	r1, [pc, #64]	; (800c89c <tcp_slowtmr+0x28c>)
 800c85a:	5c8a      	ldrb	r2, [r1, r2]
 800c85c:	4093      	lsls	r3, r2
 800c85e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800c866:	4293      	cmp	r3, r2
 800c868:	dc1a      	bgt.n	800c8a0 <tcp_slowtmr+0x290>
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	b21a      	sxth	r2, r3
 800c86e:	e019      	b.n	800c8a4 <tcp_slowtmr+0x294>
 800c870:	20010e7c 	.word	0x20010e7c
 800c874:	200081ba 	.word	0x200081ba
 800c878:	20010e78 	.word	0x20010e78
 800c87c:	08019290 	.word	0x08019290
 800c880:	080195d4 	.word	0x080195d4
 800c884:	080192d4 	.word	0x080192d4
 800c888:	08019600 	.word	0x08019600
 800c88c:	0801962c 	.word	0x0801962c
 800c890:	0801965c 	.word	0x0801965c
 800c894:	08019690 	.word	0x08019690
 800c898:	0801fa68 	.word	0x0801fa68
 800c89c:	0801fa58 	.word	0x0801fa58
 800c8a0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800c8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8b2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8b8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	bf28      	it	cs
 800c8c0:	4613      	movcs	r3, r2
 800c8c2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800c8c4:	8a7b      	ldrh	r3, [r7, #18]
 800c8c6:	085b      	lsrs	r3, r3, #1
 800c8c8:	b29a      	uxth	r2, r3
 800c8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c8da:	005b      	lsls	r3, r3, #1
 800c8dc:	b29b      	uxth	r3, r3
 800c8de:	429a      	cmp	r2, r3
 800c8e0:	d206      	bcs.n	800c8f0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800c8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c8e6:	005b      	lsls	r3, r3, #1
 800c8e8:	b29a      	uxth	r2, r3
 800c8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800c8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800c8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800c902:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c904:	f004 fd40 	bl	8011388 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800c908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c90a:	7d1b      	ldrb	r3, [r3, #20]
 800c90c:	2b06      	cmp	r3, #6
 800c90e:	d111      	bne.n	800c934 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800c910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c912:	8b5b      	ldrh	r3, [r3, #26]
 800c914:	f003 0310 	and.w	r3, r3, #16
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d00b      	beq.n	800c934 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c91c:	4b9d      	ldr	r3, [pc, #628]	; (800cb94 <tcp_slowtmr+0x584>)
 800c91e:	681a      	ldr	r2, [r3, #0]
 800c920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c922:	6a1b      	ldr	r3, [r3, #32]
 800c924:	1ad3      	subs	r3, r2, r3
 800c926:	2b28      	cmp	r3, #40	; 0x28
 800c928:	d904      	bls.n	800c934 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800c92a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c92e:	3301      	adds	r3, #1
 800c930:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c936:	7a5b      	ldrb	r3, [r3, #9]
 800c938:	f003 0308 	and.w	r3, r3, #8
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d04c      	beq.n	800c9da <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800c940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c942:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c944:	2b04      	cmp	r3, #4
 800c946:	d003      	beq.n	800c950 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800c948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c94a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800c94c:	2b07      	cmp	r3, #7
 800c94e:	d144      	bne.n	800c9da <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c950:	4b90      	ldr	r3, [pc, #576]	; (800cb94 <tcp_slowtmr+0x584>)
 800c952:	681a      	ldr	r2, [r3, #0]
 800c954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c956:	6a1b      	ldr	r3, [r3, #32]
 800c958:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800c95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c95c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c960:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800c964:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800c968:	498b      	ldr	r1, [pc, #556]	; (800cb98 <tcp_slowtmr+0x588>)
 800c96a:	fba1 1303 	umull	r1, r3, r1, r3
 800c96e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c970:	429a      	cmp	r2, r3
 800c972:	d90a      	bls.n	800c98a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800c974:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c978:	3301      	adds	r3, #1
 800c97a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800c97e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c982:	3301      	adds	r3, #1
 800c984:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c988:	e027      	b.n	800c9da <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c98a:	4b82      	ldr	r3, [pc, #520]	; (800cb94 <tcp_slowtmr+0x584>)
 800c98c:	681a      	ldr	r2, [r3, #0]
 800c98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c990:	6a1b      	ldr	r3, [r3, #32]
 800c992:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800c994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c996:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c99c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	4b7e      	ldr	r3, [pc, #504]	; (800cb9c <tcp_slowtmr+0x58c>)
 800c9a4:	fb03 f300 	mul.w	r3, r3, r0
 800c9a8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800c9aa:	497b      	ldr	r1, [pc, #492]	; (800cb98 <tcp_slowtmr+0x588>)
 800c9ac:	fba1 1303 	umull	r1, r3, r1, r3
 800c9b0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c9b2:	429a      	cmp	r2, r3
 800c9b4:	d911      	bls.n	800c9da <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800c9b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c9b8:	f004 fff4 	bl	80119a4 <tcp_keepalive>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800c9c2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d107      	bne.n	800c9da <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800c9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9cc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c9d0:	3301      	adds	r3, #1
 800c9d2:	b2da      	uxtb	r2, r3
 800c9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800c9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d011      	beq.n	800ca06 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800c9e2:	4b6c      	ldr	r3, [pc, #432]	; (800cb94 <tcp_slowtmr+0x584>)
 800c9e4:	681a      	ldr	r2, [r3, #0]
 800c9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e8:	6a1b      	ldr	r3, [r3, #32]
 800c9ea:	1ad2      	subs	r2, r2, r3
 800c9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ee:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c9f2:	4619      	mov	r1, r3
 800c9f4:	460b      	mov	r3, r1
 800c9f6:	005b      	lsls	r3, r3, #1
 800c9f8:	440b      	add	r3, r1
 800c9fa:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	d302      	bcc.n	800ca06 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800ca00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca02:	f000 fea5 	bl	800d750 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800ca06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca08:	7d1b      	ldrb	r3, [r3, #20]
 800ca0a:	2b03      	cmp	r3, #3
 800ca0c:	d10b      	bne.n	800ca26 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ca0e:	4b61      	ldr	r3, [pc, #388]	; (800cb94 <tcp_slowtmr+0x584>)
 800ca10:	681a      	ldr	r2, [r3, #0]
 800ca12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca14:	6a1b      	ldr	r3, [r3, #32]
 800ca16:	1ad3      	subs	r3, r2, r3
 800ca18:	2b28      	cmp	r3, #40	; 0x28
 800ca1a:	d904      	bls.n	800ca26 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800ca1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca20:	3301      	adds	r3, #1
 800ca22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800ca26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca28:	7d1b      	ldrb	r3, [r3, #20]
 800ca2a:	2b09      	cmp	r3, #9
 800ca2c:	d10b      	bne.n	800ca46 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ca2e:	4b59      	ldr	r3, [pc, #356]	; (800cb94 <tcp_slowtmr+0x584>)
 800ca30:	681a      	ldr	r2, [r3, #0]
 800ca32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca34:	6a1b      	ldr	r3, [r3, #32]
 800ca36:	1ad3      	subs	r3, r2, r3
 800ca38:	2bf0      	cmp	r3, #240	; 0xf0
 800ca3a:	d904      	bls.n	800ca46 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800ca3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca40:	3301      	adds	r3, #1
 800ca42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ca46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d060      	beq.n	800cb10 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800ca4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca54:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800ca56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca58:	f000 fcc6 	bl	800d3e8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800ca5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d010      	beq.n	800ca84 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ca62:	4b4f      	ldr	r3, [pc, #316]	; (800cba0 <tcp_slowtmr+0x590>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca68:	429a      	cmp	r2, r3
 800ca6a:	d106      	bne.n	800ca7a <tcp_slowtmr+0x46a>
 800ca6c:	4b4d      	ldr	r3, [pc, #308]	; (800cba4 <tcp_slowtmr+0x594>)
 800ca6e:	f240 526d 	movw	r2, #1389	; 0x56d
 800ca72:	494d      	ldr	r1, [pc, #308]	; (800cba8 <tcp_slowtmr+0x598>)
 800ca74:	484d      	ldr	r0, [pc, #308]	; (800cbac <tcp_slowtmr+0x59c>)
 800ca76:	f00a fa69 	bl	8016f4c <iprintf>
        prev->next = pcb->next;
 800ca7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca7c:	68da      	ldr	r2, [r3, #12]
 800ca7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca80:	60da      	str	r2, [r3, #12]
 800ca82:	e00f      	b.n	800caa4 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ca84:	4b46      	ldr	r3, [pc, #280]	; (800cba0 <tcp_slowtmr+0x590>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d006      	beq.n	800ca9c <tcp_slowtmr+0x48c>
 800ca8e:	4b45      	ldr	r3, [pc, #276]	; (800cba4 <tcp_slowtmr+0x594>)
 800ca90:	f240 5271 	movw	r2, #1393	; 0x571
 800ca94:	4946      	ldr	r1, [pc, #280]	; (800cbb0 <tcp_slowtmr+0x5a0>)
 800ca96:	4845      	ldr	r0, [pc, #276]	; (800cbac <tcp_slowtmr+0x59c>)
 800ca98:	f00a fa58 	bl	8016f4c <iprintf>
        tcp_active_pcbs = pcb->next;
 800ca9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca9e:	68db      	ldr	r3, [r3, #12]
 800caa0:	4a3f      	ldr	r2, [pc, #252]	; (800cba0 <tcp_slowtmr+0x590>)
 800caa2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800caa4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d013      	beq.n	800cad4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800caac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caae:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800cab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800cab4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800cab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab8:	3304      	adds	r3, #4
 800caba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cabc:	8ad2      	ldrh	r2, [r2, #22]
 800cabe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cac0:	8b09      	ldrh	r1, [r1, #24]
 800cac2:	9102      	str	r1, [sp, #8]
 800cac4:	9201      	str	r2, [sp, #4]
 800cac6:	9300      	str	r3, [sp, #0]
 800cac8:	462b      	mov	r3, r5
 800caca:	4622      	mov	r2, r4
 800cacc:	4601      	mov	r1, r0
 800cace:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cad0:	f004 feb6 	bl	8011840 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800cad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad6:	691b      	ldr	r3, [r3, #16]
 800cad8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800cada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cadc:	7d1b      	ldrb	r3, [r3, #20]
 800cade:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800cae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800cae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae6:	68db      	ldr	r3, [r3, #12]
 800cae8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800caea:	6838      	ldr	r0, [r7, #0]
 800caec:	f7fe fff8 	bl	800bae0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800caf0:	4b30      	ldr	r3, [pc, #192]	; (800cbb4 <tcp_slowtmr+0x5a4>)
 800caf2:	2200      	movs	r2, #0
 800caf4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d004      	beq.n	800cb06 <tcp_slowtmr+0x4f6>
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	f06f 010c 	mvn.w	r1, #12
 800cb02:	68b8      	ldr	r0, [r7, #8]
 800cb04:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800cb06:	4b2b      	ldr	r3, [pc, #172]	; (800cbb4 <tcp_slowtmr+0x5a4>)
 800cb08:	781b      	ldrb	r3, [r3, #0]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d037      	beq.n	800cb7e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800cb0e:	e590      	b.n	800c632 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800cb10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb12:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cb14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb16:	68db      	ldr	r3, [r3, #12]
 800cb18:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800cb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb1c:	7f1b      	ldrb	r3, [r3, #28]
 800cb1e:	3301      	adds	r3, #1
 800cb20:	b2da      	uxtb	r2, r3
 800cb22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb24:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800cb26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb28:	7f1a      	ldrb	r2, [r3, #28]
 800cb2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb2c:	7f5b      	ldrb	r3, [r3, #29]
 800cb2e:	429a      	cmp	r2, r3
 800cb30:	d325      	bcc.n	800cb7e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800cb32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb34:	2200      	movs	r2, #0
 800cb36:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800cb38:	4b1e      	ldr	r3, [pc, #120]	; (800cbb4 <tcp_slowtmr+0x5a4>)
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800cb3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d00b      	beq.n	800cb60 <tcp_slowtmr+0x550>
 800cb48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb50:	6912      	ldr	r2, [r2, #16]
 800cb52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb54:	4610      	mov	r0, r2
 800cb56:	4798      	blx	r3
 800cb58:	4603      	mov	r3, r0
 800cb5a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800cb5e:	e002      	b.n	800cb66 <tcp_slowtmr+0x556>
 800cb60:	2300      	movs	r3, #0
 800cb62:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800cb66:	4b13      	ldr	r3, [pc, #76]	; (800cbb4 <tcp_slowtmr+0x5a4>)
 800cb68:	781b      	ldrb	r3, [r3, #0]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d000      	beq.n	800cb70 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800cb6e:	e560      	b.n	800c632 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800cb70:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d102      	bne.n	800cb7e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800cb78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb7a:	f004 f89d 	bl	8010cb8 <tcp_output>
  while (pcb != NULL) {
 800cb7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	f47f ad5c 	bne.w	800c63e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800cb86:	2300      	movs	r3, #0
 800cb88:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800cb8a:	4b0b      	ldr	r3, [pc, #44]	; (800cbb8 <tcp_slowtmr+0x5a8>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800cb90:	e067      	b.n	800cc62 <tcp_slowtmr+0x652>
 800cb92:	bf00      	nop
 800cb94:	20010e7c 	.word	0x20010e7c
 800cb98:	10624dd3 	.word	0x10624dd3
 800cb9c:	000124f8 	.word	0x000124f8
 800cba0:	20010e78 	.word	0x20010e78
 800cba4:	08019290 	.word	0x08019290
 800cba8:	080196c8 	.word	0x080196c8
 800cbac:	080192d4 	.word	0x080192d4
 800cbb0:	080196f4 	.word	0x080196f4
 800cbb4:	20010e74 	.word	0x20010e74
 800cbb8:	20010e88 	.word	0x20010e88
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbbe:	7d1b      	ldrb	r3, [r3, #20]
 800cbc0:	2b0a      	cmp	r3, #10
 800cbc2:	d006      	beq.n	800cbd2 <tcp_slowtmr+0x5c2>
 800cbc4:	4b2a      	ldr	r3, [pc, #168]	; (800cc70 <tcp_slowtmr+0x660>)
 800cbc6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800cbca:	492a      	ldr	r1, [pc, #168]	; (800cc74 <tcp_slowtmr+0x664>)
 800cbcc:	482a      	ldr	r0, [pc, #168]	; (800cc78 <tcp_slowtmr+0x668>)
 800cbce:	f00a f9bd 	bl	8016f4c <iprintf>
    pcb_remove = 0;
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cbd8:	4b28      	ldr	r3, [pc, #160]	; (800cc7c <tcp_slowtmr+0x66c>)
 800cbda:	681a      	ldr	r2, [r3, #0]
 800cbdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbde:	6a1b      	ldr	r3, [r3, #32]
 800cbe0:	1ad3      	subs	r3, r2, r3
 800cbe2:	2bf0      	cmp	r3, #240	; 0xf0
 800cbe4:	d904      	bls.n	800cbf0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800cbe6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbea:	3301      	adds	r3, #1
 800cbec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cbf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d02f      	beq.n	800cc58 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800cbf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cbfa:	f000 fbf5 	bl	800d3e8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800cbfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d010      	beq.n	800cc26 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800cc04:	4b1e      	ldr	r3, [pc, #120]	; (800cc80 <tcp_slowtmr+0x670>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	d106      	bne.n	800cc1c <tcp_slowtmr+0x60c>
 800cc0e:	4b18      	ldr	r3, [pc, #96]	; (800cc70 <tcp_slowtmr+0x660>)
 800cc10:	f240 52af 	movw	r2, #1455	; 0x5af
 800cc14:	491b      	ldr	r1, [pc, #108]	; (800cc84 <tcp_slowtmr+0x674>)
 800cc16:	4818      	ldr	r0, [pc, #96]	; (800cc78 <tcp_slowtmr+0x668>)
 800cc18:	f00a f998 	bl	8016f4c <iprintf>
        prev->next = pcb->next;
 800cc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc1e:	68da      	ldr	r2, [r3, #12]
 800cc20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc22:	60da      	str	r2, [r3, #12]
 800cc24:	e00f      	b.n	800cc46 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800cc26:	4b16      	ldr	r3, [pc, #88]	; (800cc80 <tcp_slowtmr+0x670>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	d006      	beq.n	800cc3e <tcp_slowtmr+0x62e>
 800cc30:	4b0f      	ldr	r3, [pc, #60]	; (800cc70 <tcp_slowtmr+0x660>)
 800cc32:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800cc36:	4914      	ldr	r1, [pc, #80]	; (800cc88 <tcp_slowtmr+0x678>)
 800cc38:	480f      	ldr	r0, [pc, #60]	; (800cc78 <tcp_slowtmr+0x668>)
 800cc3a:	f00a f987 	bl	8016f4c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800cc3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc40:	68db      	ldr	r3, [r3, #12]
 800cc42:	4a0f      	ldr	r2, [pc, #60]	; (800cc80 <tcp_slowtmr+0x670>)
 800cc44:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800cc46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc48:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800cc4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc4c:	68db      	ldr	r3, [r3, #12]
 800cc4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800cc50:	69f8      	ldr	r0, [r7, #28]
 800cc52:	f7fe ff45 	bl	800bae0 <tcp_free>
 800cc56:	e004      	b.n	800cc62 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800cc58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc5a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cc5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc5e:	68db      	ldr	r3, [r3, #12]
 800cc60:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800cc62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d1a9      	bne.n	800cbbc <tcp_slowtmr+0x5ac>
    }
  }
}
 800cc68:	bf00      	nop
 800cc6a:	3730      	adds	r7, #48	; 0x30
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bdb0      	pop	{r4, r5, r7, pc}
 800cc70:	08019290 	.word	0x08019290
 800cc74:	08019720 	.word	0x08019720
 800cc78:	080192d4 	.word	0x080192d4
 800cc7c:	20010e7c 	.word	0x20010e7c
 800cc80:	20010e88 	.word	0x20010e88
 800cc84:	08019750 	.word	0x08019750
 800cc88:	08019778 	.word	0x08019778

0800cc8c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b082      	sub	sp, #8
 800cc90:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800cc92:	4b2d      	ldr	r3, [pc, #180]	; (800cd48 <tcp_fasttmr+0xbc>)
 800cc94:	781b      	ldrb	r3, [r3, #0]
 800cc96:	3301      	adds	r3, #1
 800cc98:	b2da      	uxtb	r2, r3
 800cc9a:	4b2b      	ldr	r3, [pc, #172]	; (800cd48 <tcp_fasttmr+0xbc>)
 800cc9c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800cc9e:	4b2b      	ldr	r3, [pc, #172]	; (800cd4c <tcp_fasttmr+0xc0>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cca4:	e048      	b.n	800cd38 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	7f9a      	ldrb	r2, [r3, #30]
 800ccaa:	4b27      	ldr	r3, [pc, #156]	; (800cd48 <tcp_fasttmr+0xbc>)
 800ccac:	781b      	ldrb	r3, [r3, #0]
 800ccae:	429a      	cmp	r2, r3
 800ccb0:	d03f      	beq.n	800cd32 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ccb2:	4b25      	ldr	r3, [pc, #148]	; (800cd48 <tcp_fasttmr+0xbc>)
 800ccb4:	781a      	ldrb	r2, [r3, #0]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	8b5b      	ldrh	r3, [r3, #26]
 800ccbe:	f003 0301 	and.w	r3, r3, #1
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d010      	beq.n	800cce8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	8b5b      	ldrh	r3, [r3, #26]
 800ccca:	f043 0302 	orr.w	r3, r3, #2
 800ccce:	b29a      	uxth	r2, r3
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f003 ffef 	bl	8010cb8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	8b5b      	ldrh	r3, [r3, #26]
 800ccde:	f023 0303 	bic.w	r3, r3, #3
 800cce2:	b29a      	uxth	r2, r3
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	8b5b      	ldrh	r3, [r3, #26]
 800ccec:	f003 0308 	and.w	r3, r3, #8
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d009      	beq.n	800cd08 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	8b5b      	ldrh	r3, [r3, #26]
 800ccf8:	f023 0308 	bic.w	r3, r3, #8
 800ccfc:	b29a      	uxth	r2, r3
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f7ff f87c 	bl	800be00 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	68db      	ldr	r3, [r3, #12]
 800cd0c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d00a      	beq.n	800cd2c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800cd16:	4b0e      	ldr	r3, [pc, #56]	; (800cd50 <tcp_fasttmr+0xc4>)
 800cd18:	2200      	movs	r2, #0
 800cd1a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f000 f819 	bl	800cd54 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800cd22:	4b0b      	ldr	r3, [pc, #44]	; (800cd50 <tcp_fasttmr+0xc4>)
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d000      	beq.n	800cd2c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800cd2a:	e7b8      	b.n	800cc9e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	607b      	str	r3, [r7, #4]
 800cd30:	e002      	b.n	800cd38 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	68db      	ldr	r3, [r3, #12]
 800cd36:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d1b3      	bne.n	800cca6 <tcp_fasttmr+0x1a>
    }
  }
}
 800cd3e:	bf00      	nop
 800cd40:	3708      	adds	r7, #8
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}
 800cd46:	bf00      	nop
 800cd48:	200081ba 	.word	0x200081ba
 800cd4c:	20010e78 	.word	0x20010e78
 800cd50:	20010e74 	.word	0x20010e74

0800cd54 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800cd54:	b590      	push	{r4, r7, lr}
 800cd56:	b085      	sub	sp, #20
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d109      	bne.n	800cd76 <tcp_process_refused_data+0x22>
 800cd62:	4b37      	ldr	r3, [pc, #220]	; (800ce40 <tcp_process_refused_data+0xec>)
 800cd64:	f240 6209 	movw	r2, #1545	; 0x609
 800cd68:	4936      	ldr	r1, [pc, #216]	; (800ce44 <tcp_process_refused_data+0xf0>)
 800cd6a:	4837      	ldr	r0, [pc, #220]	; (800ce48 <tcp_process_refused_data+0xf4>)
 800cd6c:	f00a f8ee 	bl	8016f4c <iprintf>
 800cd70:	f06f 030f 	mvn.w	r3, #15
 800cd74:	e060      	b.n	800ce38 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd7a:	7b5b      	ldrb	r3, [r3, #13]
 800cd7c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd82:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2200      	movs	r2, #0
 800cd88:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d00b      	beq.n	800cdac <tcp_process_refused_data+0x58>
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	6918      	ldr	r0, [r3, #16]
 800cd9e:	2300      	movs	r3, #0
 800cda0:	68ba      	ldr	r2, [r7, #8]
 800cda2:	6879      	ldr	r1, [r7, #4]
 800cda4:	47a0      	blx	r4
 800cda6:	4603      	mov	r3, r0
 800cda8:	73fb      	strb	r3, [r7, #15]
 800cdaa:	e007      	b.n	800cdbc <tcp_process_refused_data+0x68>
 800cdac:	2300      	movs	r3, #0
 800cdae:	68ba      	ldr	r2, [r7, #8]
 800cdb0:	6879      	ldr	r1, [r7, #4]
 800cdb2:	2000      	movs	r0, #0
 800cdb4:	f000 f8a2 	bl	800cefc <tcp_recv_null>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800cdbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d12a      	bne.n	800ce1a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800cdc4:	7bbb      	ldrb	r3, [r7, #14]
 800cdc6:	f003 0320 	and.w	r3, r3, #32
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d033      	beq.n	800ce36 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cdd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdd6:	d005      	beq.n	800cde4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cddc:	3301      	adds	r3, #1
 800cdde:	b29a      	uxth	r2, r3
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d00b      	beq.n	800ce06 <tcp_process_refused_data+0xb2>
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	6918      	ldr	r0, [r3, #16]
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	6879      	ldr	r1, [r7, #4]
 800cdfe:	47a0      	blx	r4
 800ce00:	4603      	mov	r3, r0
 800ce02:	73fb      	strb	r3, [r7, #15]
 800ce04:	e001      	b.n	800ce0a <tcp_process_refused_data+0xb6>
 800ce06:	2300      	movs	r3, #0
 800ce08:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ce0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce0e:	f113 0f0d 	cmn.w	r3, #13
 800ce12:	d110      	bne.n	800ce36 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ce14:	f06f 030c 	mvn.w	r3, #12
 800ce18:	e00e      	b.n	800ce38 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ce1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce1e:	f113 0f0d 	cmn.w	r3, #13
 800ce22:	d102      	bne.n	800ce2a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ce24:	f06f 030c 	mvn.w	r3, #12
 800ce28:	e006      	b.n	800ce38 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	68ba      	ldr	r2, [r7, #8]
 800ce2e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ce30:	f06f 0304 	mvn.w	r3, #4
 800ce34:	e000      	b.n	800ce38 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ce36:	2300      	movs	r3, #0
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3714      	adds	r7, #20
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd90      	pop	{r4, r7, pc}
 800ce40:	08019290 	.word	0x08019290
 800ce44:	080197a0 	.word	0x080197a0
 800ce48:	080192d4 	.word	0x080192d4

0800ce4c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b084      	sub	sp, #16
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ce54:	e007      	b.n	800ce66 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f000 f809 	bl	800ce74 <tcp_seg_free>
    seg = next;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d1f4      	bne.n	800ce56 <tcp_segs_free+0xa>
  }
}
 800ce6c:	bf00      	nop
 800ce6e:	3710      	adds	r7, #16
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}

0800ce74 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b082      	sub	sp, #8
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d00c      	beq.n	800ce9c <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	685b      	ldr	r3, [r3, #4]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d004      	beq.n	800ce94 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	685b      	ldr	r3, [r3, #4]
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f7fe fb6a 	bl	800b568 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ce94:	6879      	ldr	r1, [r7, #4]
 800ce96:	2003      	movs	r0, #3
 800ce98:	f7fd fd38 	bl	800a90c <memp_free>
  }
}
 800ce9c:	bf00      	nop
 800ce9e:	3708      	adds	r7, #8
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}

0800cea4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b084      	sub	sp, #16
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d106      	bne.n	800cec0 <tcp_seg_copy+0x1c>
 800ceb2:	4b0f      	ldr	r3, [pc, #60]	; (800cef0 <tcp_seg_copy+0x4c>)
 800ceb4:	f240 6282 	movw	r2, #1666	; 0x682
 800ceb8:	490e      	ldr	r1, [pc, #56]	; (800cef4 <tcp_seg_copy+0x50>)
 800ceba:	480f      	ldr	r0, [pc, #60]	; (800cef8 <tcp_seg_copy+0x54>)
 800cebc:	f00a f846 	bl	8016f4c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800cec0:	2003      	movs	r0, #3
 800cec2:	f7fd fcd1 	bl	800a868 <memp_malloc>
 800cec6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d101      	bne.n	800ced2 <tcp_seg_copy+0x2e>
    return NULL;
 800cece:	2300      	movs	r3, #0
 800ced0:	e00a      	b.n	800cee8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ced2:	2210      	movs	r2, #16
 800ced4:	6879      	ldr	r1, [r7, #4]
 800ced6:	68f8      	ldr	r0, [r7, #12]
 800ced8:	f00a f825 	bl	8016f26 <memcpy>
  pbuf_ref(cseg->p);
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	685b      	ldr	r3, [r3, #4]
 800cee0:	4618      	mov	r0, r3
 800cee2:	f7fe fbe7 	bl	800b6b4 <pbuf_ref>
  return cseg;
 800cee6:	68fb      	ldr	r3, [r7, #12]
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	3710      	adds	r7, #16
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}
 800cef0:	08019290 	.word	0x08019290
 800cef4:	080197e4 	.word	0x080197e4
 800cef8:	080192d4 	.word	0x080192d4

0800cefc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b084      	sub	sp, #16
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	60f8      	str	r0, [r7, #12]
 800cf04:	60b9      	str	r1, [r7, #8]
 800cf06:	607a      	str	r2, [r7, #4]
 800cf08:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d109      	bne.n	800cf24 <tcp_recv_null+0x28>
 800cf10:	4b12      	ldr	r3, [pc, #72]	; (800cf5c <tcp_recv_null+0x60>)
 800cf12:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800cf16:	4912      	ldr	r1, [pc, #72]	; (800cf60 <tcp_recv_null+0x64>)
 800cf18:	4812      	ldr	r0, [pc, #72]	; (800cf64 <tcp_recv_null+0x68>)
 800cf1a:	f00a f817 	bl	8016f4c <iprintf>
 800cf1e:	f06f 030f 	mvn.w	r3, #15
 800cf22:	e016      	b.n	800cf52 <tcp_recv_null+0x56>

  if (p != NULL) {
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d009      	beq.n	800cf3e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	891b      	ldrh	r3, [r3, #8]
 800cf2e:	4619      	mov	r1, r3
 800cf30:	68b8      	ldr	r0, [r7, #8]
 800cf32:	f7ff fad7 	bl	800c4e4 <tcp_recved>
    pbuf_free(p);
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	f7fe fb16 	bl	800b568 <pbuf_free>
 800cf3c:	e008      	b.n	800cf50 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800cf3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d104      	bne.n	800cf50 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800cf46:	68b8      	ldr	r0, [r7, #8]
 800cf48:	f7fe ffc0 	bl	800becc <tcp_close>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	e000      	b.n	800cf52 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800cf50:	2300      	movs	r3, #0
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3710      	adds	r7, #16
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}
 800cf5a:	bf00      	nop
 800cf5c:	08019290 	.word	0x08019290
 800cf60:	08019800 	.word	0x08019800
 800cf64:	080192d4 	.word	0x080192d4

0800cf68 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b086      	sub	sp, #24
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	4603      	mov	r3, r0
 800cf70:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800cf72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	db01      	blt.n	800cf7e <tcp_kill_prio+0x16>
 800cf7a:	79fb      	ldrb	r3, [r7, #7]
 800cf7c:	e000      	b.n	800cf80 <tcp_kill_prio+0x18>
 800cf7e:	237f      	movs	r3, #127	; 0x7f
 800cf80:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800cf82:	7afb      	ldrb	r3, [r7, #11]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d034      	beq.n	800cff2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800cf88:	7afb      	ldrb	r3, [r7, #11]
 800cf8a:	3b01      	subs	r3, #1
 800cf8c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800cf92:	2300      	movs	r3, #0
 800cf94:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cf96:	4b19      	ldr	r3, [pc, #100]	; (800cffc <tcp_kill_prio+0x94>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	617b      	str	r3, [r7, #20]
 800cf9c:	e01f      	b.n	800cfde <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	7d5b      	ldrb	r3, [r3, #21]
 800cfa2:	7afa      	ldrb	r2, [r7, #11]
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	d80c      	bhi.n	800cfc2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800cfa8:	697b      	ldr	r3, [r7, #20]
 800cfaa:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800cfac:	7afa      	ldrb	r2, [r7, #11]
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	d112      	bne.n	800cfd8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800cfb2:	4b13      	ldr	r3, [pc, #76]	; (800d000 <tcp_kill_prio+0x98>)
 800cfb4:	681a      	ldr	r2, [r3, #0]
 800cfb6:	697b      	ldr	r3, [r7, #20]
 800cfb8:	6a1b      	ldr	r3, [r3, #32]
 800cfba:	1ad3      	subs	r3, r2, r3
 800cfbc:	68fa      	ldr	r2, [r7, #12]
 800cfbe:	429a      	cmp	r2, r3
 800cfc0:	d80a      	bhi.n	800cfd8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800cfc2:	4b0f      	ldr	r3, [pc, #60]	; (800d000 <tcp_kill_prio+0x98>)
 800cfc4:	681a      	ldr	r2, [r3, #0]
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	6a1b      	ldr	r3, [r3, #32]
 800cfca:	1ad3      	subs	r3, r2, r3
 800cfcc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800cfce:	697b      	ldr	r3, [r7, #20]
 800cfd0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	7d5b      	ldrb	r3, [r3, #21]
 800cfd6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	68db      	ldr	r3, [r3, #12]
 800cfdc:	617b      	str	r3, [r7, #20]
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d1dc      	bne.n	800cf9e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800cfe4:	693b      	ldr	r3, [r7, #16]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d004      	beq.n	800cff4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800cfea:	6938      	ldr	r0, [r7, #16]
 800cfec:	f7ff f8b2 	bl	800c154 <tcp_abort>
 800cff0:	e000      	b.n	800cff4 <tcp_kill_prio+0x8c>
    return;
 800cff2:	bf00      	nop
  }
}
 800cff4:	3718      	adds	r7, #24
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}
 800cffa:	bf00      	nop
 800cffc:	20010e78 	.word	0x20010e78
 800d000:	20010e7c 	.word	0x20010e7c

0800d004 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b086      	sub	sp, #24
 800d008:	af00      	add	r7, sp, #0
 800d00a:	4603      	mov	r3, r0
 800d00c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d00e:	79fb      	ldrb	r3, [r7, #7]
 800d010:	2b08      	cmp	r3, #8
 800d012:	d009      	beq.n	800d028 <tcp_kill_state+0x24>
 800d014:	79fb      	ldrb	r3, [r7, #7]
 800d016:	2b09      	cmp	r3, #9
 800d018:	d006      	beq.n	800d028 <tcp_kill_state+0x24>
 800d01a:	4b1a      	ldr	r3, [pc, #104]	; (800d084 <tcp_kill_state+0x80>)
 800d01c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d020:	4919      	ldr	r1, [pc, #100]	; (800d088 <tcp_kill_state+0x84>)
 800d022:	481a      	ldr	r0, [pc, #104]	; (800d08c <tcp_kill_state+0x88>)
 800d024:	f009 ff92 	bl	8016f4c <iprintf>

  inactivity = 0;
 800d028:	2300      	movs	r3, #0
 800d02a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d02c:	2300      	movs	r3, #0
 800d02e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d030:	4b17      	ldr	r3, [pc, #92]	; (800d090 <tcp_kill_state+0x8c>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	617b      	str	r3, [r7, #20]
 800d036:	e017      	b.n	800d068 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	7d1b      	ldrb	r3, [r3, #20]
 800d03c:	79fa      	ldrb	r2, [r7, #7]
 800d03e:	429a      	cmp	r2, r3
 800d040:	d10f      	bne.n	800d062 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d042:	4b14      	ldr	r3, [pc, #80]	; (800d094 <tcp_kill_state+0x90>)
 800d044:	681a      	ldr	r2, [r3, #0]
 800d046:	697b      	ldr	r3, [r7, #20]
 800d048:	6a1b      	ldr	r3, [r3, #32]
 800d04a:	1ad3      	subs	r3, r2, r3
 800d04c:	68fa      	ldr	r2, [r7, #12]
 800d04e:	429a      	cmp	r2, r3
 800d050:	d807      	bhi.n	800d062 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d052:	4b10      	ldr	r3, [pc, #64]	; (800d094 <tcp_kill_state+0x90>)
 800d054:	681a      	ldr	r2, [r3, #0]
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	6a1b      	ldr	r3, [r3, #32]
 800d05a:	1ad3      	subs	r3, r2, r3
 800d05c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d05e:	697b      	ldr	r3, [r7, #20]
 800d060:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	68db      	ldr	r3, [r3, #12]
 800d066:	617b      	str	r3, [r7, #20]
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d1e4      	bne.n	800d038 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d06e:	693b      	ldr	r3, [r7, #16]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d003      	beq.n	800d07c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d074:	2100      	movs	r1, #0
 800d076:	6938      	ldr	r0, [r7, #16]
 800d078:	f7fe ffae 	bl	800bfd8 <tcp_abandon>
  }
}
 800d07c:	bf00      	nop
 800d07e:	3718      	adds	r7, #24
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}
 800d084:	08019290 	.word	0x08019290
 800d088:	0801981c 	.word	0x0801981c
 800d08c:	080192d4 	.word	0x080192d4
 800d090:	20010e78 	.word	0x20010e78
 800d094:	20010e7c 	.word	0x20010e7c

0800d098 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b084      	sub	sp, #16
 800d09c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d0a6:	4b12      	ldr	r3, [pc, #72]	; (800d0f0 <tcp_kill_timewait+0x58>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	60fb      	str	r3, [r7, #12]
 800d0ac:	e012      	b.n	800d0d4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d0ae:	4b11      	ldr	r3, [pc, #68]	; (800d0f4 <tcp_kill_timewait+0x5c>)
 800d0b0:	681a      	ldr	r2, [r3, #0]
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	6a1b      	ldr	r3, [r3, #32]
 800d0b6:	1ad3      	subs	r3, r2, r3
 800d0b8:	687a      	ldr	r2, [r7, #4]
 800d0ba:	429a      	cmp	r2, r3
 800d0bc:	d807      	bhi.n	800d0ce <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d0be:	4b0d      	ldr	r3, [pc, #52]	; (800d0f4 <tcp_kill_timewait+0x5c>)
 800d0c0:	681a      	ldr	r2, [r3, #0]
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	6a1b      	ldr	r3, [r3, #32]
 800d0c6:	1ad3      	subs	r3, r2, r3
 800d0c8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	68db      	ldr	r3, [r3, #12]
 800d0d2:	60fb      	str	r3, [r7, #12]
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d1e9      	bne.n	800d0ae <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d002      	beq.n	800d0e6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d0e0:	68b8      	ldr	r0, [r7, #8]
 800d0e2:	f7ff f837 	bl	800c154 <tcp_abort>
  }
}
 800d0e6:	bf00      	nop
 800d0e8:	3710      	adds	r7, #16
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bd80      	pop	{r7, pc}
 800d0ee:	bf00      	nop
 800d0f0:	20010e88 	.word	0x20010e88
 800d0f4:	20010e7c 	.word	0x20010e7c

0800d0f8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b082      	sub	sp, #8
 800d0fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d0fe:	4b10      	ldr	r3, [pc, #64]	; (800d140 <tcp_handle_closepend+0x48>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d104:	e014      	b.n	800d130 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	68db      	ldr	r3, [r3, #12]
 800d10a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	8b5b      	ldrh	r3, [r3, #26]
 800d110:	f003 0308 	and.w	r3, r3, #8
 800d114:	2b00      	cmp	r3, #0
 800d116:	d009      	beq.n	800d12c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	8b5b      	ldrh	r3, [r3, #26]
 800d11c:	f023 0308 	bic.w	r3, r3, #8
 800d120:	b29a      	uxth	r2, r3
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f7fe fe6a 	bl	800be00 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d1e7      	bne.n	800d106 <tcp_handle_closepend+0xe>
  }
}
 800d136:	bf00      	nop
 800d138:	3708      	adds	r7, #8
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}
 800d13e:	bf00      	nop
 800d140:	20010e78 	.word	0x20010e78

0800d144 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b084      	sub	sp, #16
 800d148:	af00      	add	r7, sp, #0
 800d14a:	4603      	mov	r3, r0
 800d14c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d14e:	2001      	movs	r0, #1
 800d150:	f7fd fb8a 	bl	800a868 <memp_malloc>
 800d154:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d126      	bne.n	800d1aa <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d15c:	f7ff ffcc 	bl	800d0f8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d160:	f7ff ff9a 	bl	800d098 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d164:	2001      	movs	r0, #1
 800d166:	f7fd fb7f 	bl	800a868 <memp_malloc>
 800d16a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d11b      	bne.n	800d1aa <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d172:	2009      	movs	r0, #9
 800d174:	f7ff ff46 	bl	800d004 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d178:	2001      	movs	r0, #1
 800d17a:	f7fd fb75 	bl	800a868 <memp_malloc>
 800d17e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d111      	bne.n	800d1aa <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d186:	2008      	movs	r0, #8
 800d188:	f7ff ff3c 	bl	800d004 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d18c:	2001      	movs	r0, #1
 800d18e:	f7fd fb6b 	bl	800a868 <memp_malloc>
 800d192:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d107      	bne.n	800d1aa <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d19a:	79fb      	ldrb	r3, [r7, #7]
 800d19c:	4618      	mov	r0, r3
 800d19e:	f7ff fee3 	bl	800cf68 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d1a2:	2001      	movs	r0, #1
 800d1a4:	f7fd fb60 	bl	800a868 <memp_malloc>
 800d1a8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d03f      	beq.n	800d230 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d1b0:	229c      	movs	r2, #156	; 0x9c
 800d1b2:	2100      	movs	r1, #0
 800d1b4:	68f8      	ldr	r0, [r7, #12]
 800d1b6:	f009 fec1 	bl	8016f3c <memset>
    pcb->prio = prio;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	79fa      	ldrb	r2, [r7, #7]
 800d1be:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d1c6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d1d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	22ff      	movs	r2, #255	; 0xff
 800d1de:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d1e6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	2206      	movs	r2, #6
 800d1ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	2206      	movs	r2, #6
 800d1f4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d1fc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	2201      	movs	r2, #1
 800d202:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d206:	4b0d      	ldr	r3, [pc, #52]	; (800d23c <tcp_alloc+0xf8>)
 800d208:	681a      	ldr	r2, [r3, #0]
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d20e:	4b0c      	ldr	r3, [pc, #48]	; (800d240 <tcp_alloc+0xfc>)
 800d210:	781a      	ldrb	r2, [r3, #0]
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d21c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	4a08      	ldr	r2, [pc, #32]	; (800d244 <tcp_alloc+0x100>)
 800d224:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	4a07      	ldr	r2, [pc, #28]	; (800d248 <tcp_alloc+0x104>)
 800d22c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d230:	68fb      	ldr	r3, [r7, #12]
}
 800d232:	4618      	mov	r0, r3
 800d234:	3710      	adds	r7, #16
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
 800d23a:	bf00      	nop
 800d23c:	20010e7c 	.word	0x20010e7c
 800d240:	200081ba 	.word	0x200081ba
 800d244:	0800cefd 	.word	0x0800cefd
 800d248:	006ddd00 	.word	0x006ddd00

0800d24c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b084      	sub	sp, #16
 800d250:	af00      	add	r7, sp, #0
 800d252:	4603      	mov	r3, r0
 800d254:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800d256:	2040      	movs	r0, #64	; 0x40
 800d258:	f7ff ff74 	bl	800d144 <tcp_alloc>
 800d25c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800d25e:	68fb      	ldr	r3, [r7, #12]
}
 800d260:	4618      	mov	r0, r3
 800d262:	3710      	adds	r7, #16
 800d264:	46bd      	mov	sp, r7
 800d266:	bd80      	pop	{r7, pc}

0800d268 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800d268:	b480      	push	{r7}
 800d26a:	b083      	sub	sp, #12
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
 800d270:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d002      	beq.n	800d27e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	683a      	ldr	r2, [r7, #0]
 800d27c:	611a      	str	r2, [r3, #16]
  }
}
 800d27e:	bf00      	nop
 800d280:	370c      	adds	r7, #12
 800d282:	46bd      	mov	sp, r7
 800d284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d288:	4770      	bx	lr
	...

0800d28c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b082      	sub	sp, #8
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d00e      	beq.n	800d2ba <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	7d1b      	ldrb	r3, [r3, #20]
 800d2a0:	2b01      	cmp	r3, #1
 800d2a2:	d106      	bne.n	800d2b2 <tcp_recv+0x26>
 800d2a4:	4b07      	ldr	r3, [pc, #28]	; (800d2c4 <tcp_recv+0x38>)
 800d2a6:	f240 72df 	movw	r2, #2015	; 0x7df
 800d2aa:	4907      	ldr	r1, [pc, #28]	; (800d2c8 <tcp_recv+0x3c>)
 800d2ac:	4807      	ldr	r0, [pc, #28]	; (800d2cc <tcp_recv+0x40>)
 800d2ae:	f009 fe4d 	bl	8016f4c <iprintf>
    pcb->recv = recv;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	683a      	ldr	r2, [r7, #0]
 800d2b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800d2ba:	bf00      	nop
 800d2bc:	3708      	adds	r7, #8
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}
 800d2c2:	bf00      	nop
 800d2c4:	08019290 	.word	0x08019290
 800d2c8:	0801982c 	.word	0x0801982c
 800d2cc:	080192d4 	.word	0x080192d4

0800d2d0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b082      	sub	sp, #8
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
 800d2d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d00e      	beq.n	800d2fe <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	7d1b      	ldrb	r3, [r3, #20]
 800d2e4:	2b01      	cmp	r3, #1
 800d2e6:	d106      	bne.n	800d2f6 <tcp_sent+0x26>
 800d2e8:	4b07      	ldr	r3, [pc, #28]	; (800d308 <tcp_sent+0x38>)
 800d2ea:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800d2ee:	4907      	ldr	r1, [pc, #28]	; (800d30c <tcp_sent+0x3c>)
 800d2f0:	4807      	ldr	r0, [pc, #28]	; (800d310 <tcp_sent+0x40>)
 800d2f2:	f009 fe2b 	bl	8016f4c <iprintf>
    pcb->sent = sent;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	683a      	ldr	r2, [r7, #0]
 800d2fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800d2fe:	bf00      	nop
 800d300:	3708      	adds	r7, #8
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}
 800d306:	bf00      	nop
 800d308:	08019290 	.word	0x08019290
 800d30c:	08019854 	.word	0x08019854
 800d310:	080192d4 	.word	0x080192d4

0800d314 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b082      	sub	sp, #8
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
 800d31c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d00e      	beq.n	800d342 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	7d1b      	ldrb	r3, [r3, #20]
 800d328:	2b01      	cmp	r3, #1
 800d32a:	d106      	bne.n	800d33a <tcp_err+0x26>
 800d32c:	4b07      	ldr	r3, [pc, #28]	; (800d34c <tcp_err+0x38>)
 800d32e:	f640 020d 	movw	r2, #2061	; 0x80d
 800d332:	4907      	ldr	r1, [pc, #28]	; (800d350 <tcp_err+0x3c>)
 800d334:	4807      	ldr	r0, [pc, #28]	; (800d354 <tcp_err+0x40>)
 800d336:	f009 fe09 	bl	8016f4c <iprintf>
    pcb->errf = err;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	683a      	ldr	r2, [r7, #0]
 800d33e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800d342:	bf00      	nop
 800d344:	3708      	adds	r7, #8
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}
 800d34a:	bf00      	nop
 800d34c:	08019290 	.word	0x08019290
 800d350:	0801987c 	.word	0x0801987c
 800d354:	080192d4 	.word	0x080192d4

0800d358 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800d358:	b480      	push	{r7}
 800d35a:	b085      	sub	sp, #20
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d008      	beq.n	800d37a <tcp_accept+0x22>
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	7d1b      	ldrb	r3, [r3, #20]
 800d36c:	2b01      	cmp	r3, #1
 800d36e:	d104      	bne.n	800d37a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	683a      	ldr	r2, [r7, #0]
 800d378:	619a      	str	r2, [r3, #24]
  }
}
 800d37a:	bf00      	nop
 800d37c:	3714      	adds	r7, #20
 800d37e:	46bd      	mov	sp, r7
 800d380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d384:	4770      	bx	lr
	...

0800d388 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b084      	sub	sp, #16
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	60f8      	str	r0, [r7, #12]
 800d390:	60b9      	str	r1, [r7, #8]
 800d392:	4613      	mov	r3, r2
 800d394:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d107      	bne.n	800d3ac <tcp_poll+0x24>
 800d39c:	4b0e      	ldr	r3, [pc, #56]	; (800d3d8 <tcp_poll+0x50>)
 800d39e:	f640 023d 	movw	r2, #2109	; 0x83d
 800d3a2:	490e      	ldr	r1, [pc, #56]	; (800d3dc <tcp_poll+0x54>)
 800d3a4:	480e      	ldr	r0, [pc, #56]	; (800d3e0 <tcp_poll+0x58>)
 800d3a6:	f009 fdd1 	bl	8016f4c <iprintf>
 800d3aa:	e011      	b.n	800d3d0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	7d1b      	ldrb	r3, [r3, #20]
 800d3b0:	2b01      	cmp	r3, #1
 800d3b2:	d106      	bne.n	800d3c2 <tcp_poll+0x3a>
 800d3b4:	4b08      	ldr	r3, [pc, #32]	; (800d3d8 <tcp_poll+0x50>)
 800d3b6:	f640 023e 	movw	r2, #2110	; 0x83e
 800d3ba:	490a      	ldr	r1, [pc, #40]	; (800d3e4 <tcp_poll+0x5c>)
 800d3bc:	4808      	ldr	r0, [pc, #32]	; (800d3e0 <tcp_poll+0x58>)
 800d3be:	f009 fdc5 	bl	8016f4c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	68ba      	ldr	r2, [r7, #8]
 800d3c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	79fa      	ldrb	r2, [r7, #7]
 800d3ce:	775a      	strb	r2, [r3, #29]
}
 800d3d0:	3710      	adds	r7, #16
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bd80      	pop	{r7, pc}
 800d3d6:	bf00      	nop
 800d3d8:	08019290 	.word	0x08019290
 800d3dc:	080198a4 	.word	0x080198a4
 800d3e0:	080192d4 	.word	0x080192d4
 800d3e4:	080198bc 	.word	0x080198bc

0800d3e8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b082      	sub	sp, #8
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d107      	bne.n	800d406 <tcp_pcb_purge+0x1e>
 800d3f6:	4b21      	ldr	r3, [pc, #132]	; (800d47c <tcp_pcb_purge+0x94>)
 800d3f8:	f640 0251 	movw	r2, #2129	; 0x851
 800d3fc:	4920      	ldr	r1, [pc, #128]	; (800d480 <tcp_pcb_purge+0x98>)
 800d3fe:	4821      	ldr	r0, [pc, #132]	; (800d484 <tcp_pcb_purge+0x9c>)
 800d400:	f009 fda4 	bl	8016f4c <iprintf>
 800d404:	e037      	b.n	800d476 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	7d1b      	ldrb	r3, [r3, #20]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d033      	beq.n	800d476 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d412:	2b0a      	cmp	r3, #10
 800d414:	d02f      	beq.n	800d476 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d41a:	2b01      	cmp	r3, #1
 800d41c:	d02b      	beq.n	800d476 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d422:	2b00      	cmp	r3, #0
 800d424:	d007      	beq.n	800d436 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d42a:	4618      	mov	r0, r3
 800d42c:	f7fe f89c 	bl	800b568 <pbuf_free>
      pcb->refused_data = NULL;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2200      	movs	r2, #0
 800d434:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d002      	beq.n	800d444 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f000 f986 	bl	800d750 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d44a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d450:	4618      	mov	r0, r3
 800d452:	f7ff fcfb 	bl	800ce4c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d45a:	4618      	mov	r0, r3
 800d45c:	f7ff fcf6 	bl	800ce4c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2200      	movs	r2, #0
 800d464:	66da      	str	r2, [r3, #108]	; 0x6c
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2200      	movs	r2, #0
 800d472:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d476:	3708      	adds	r7, #8
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}
 800d47c:	08019290 	.word	0x08019290
 800d480:	080198dc 	.word	0x080198dc
 800d484:	080192d4 	.word	0x080192d4

0800d488 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b084      	sub	sp, #16
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d106      	bne.n	800d4a6 <tcp_pcb_remove+0x1e>
 800d498:	4b3e      	ldr	r3, [pc, #248]	; (800d594 <tcp_pcb_remove+0x10c>)
 800d49a:	f640 0283 	movw	r2, #2179	; 0x883
 800d49e:	493e      	ldr	r1, [pc, #248]	; (800d598 <tcp_pcb_remove+0x110>)
 800d4a0:	483e      	ldr	r0, [pc, #248]	; (800d59c <tcp_pcb_remove+0x114>)
 800d4a2:	f009 fd53 	bl	8016f4c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d106      	bne.n	800d4ba <tcp_pcb_remove+0x32>
 800d4ac:	4b39      	ldr	r3, [pc, #228]	; (800d594 <tcp_pcb_remove+0x10c>)
 800d4ae:	f640 0284 	movw	r2, #2180	; 0x884
 800d4b2:	493b      	ldr	r1, [pc, #236]	; (800d5a0 <tcp_pcb_remove+0x118>)
 800d4b4:	4839      	ldr	r0, [pc, #228]	; (800d59c <tcp_pcb_remove+0x114>)
 800d4b6:	f009 fd49 	bl	8016f4c <iprintf>

  TCP_RMV(pcblist, pcb);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	683a      	ldr	r2, [r7, #0]
 800d4c0:	429a      	cmp	r2, r3
 800d4c2:	d105      	bne.n	800d4d0 <tcp_pcb_remove+0x48>
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	68da      	ldr	r2, [r3, #12]
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	601a      	str	r2, [r3, #0]
 800d4ce:	e013      	b.n	800d4f8 <tcp_pcb_remove+0x70>
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	60fb      	str	r3, [r7, #12]
 800d4d6:	e00c      	b.n	800d4f2 <tcp_pcb_remove+0x6a>
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	68db      	ldr	r3, [r3, #12]
 800d4dc:	683a      	ldr	r2, [r7, #0]
 800d4de:	429a      	cmp	r2, r3
 800d4e0:	d104      	bne.n	800d4ec <tcp_pcb_remove+0x64>
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	68da      	ldr	r2, [r3, #12]
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	60da      	str	r2, [r3, #12]
 800d4ea:	e005      	b.n	800d4f8 <tcp_pcb_remove+0x70>
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	68db      	ldr	r3, [r3, #12]
 800d4f0:	60fb      	str	r3, [r7, #12]
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d1ef      	bne.n	800d4d8 <tcp_pcb_remove+0x50>
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d4fe:	6838      	ldr	r0, [r7, #0]
 800d500:	f7ff ff72 	bl	800d3e8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	7d1b      	ldrb	r3, [r3, #20]
 800d508:	2b0a      	cmp	r3, #10
 800d50a:	d013      	beq.n	800d534 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d510:	2b01      	cmp	r3, #1
 800d512:	d00f      	beq.n	800d534 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	8b5b      	ldrh	r3, [r3, #26]
 800d518:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d009      	beq.n	800d534 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	8b5b      	ldrh	r3, [r3, #26]
 800d524:	f043 0302 	orr.w	r3, r3, #2
 800d528:	b29a      	uxth	r2, r3
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d52e:	6838      	ldr	r0, [r7, #0]
 800d530:	f003 fbc2 	bl	8010cb8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	7d1b      	ldrb	r3, [r3, #20]
 800d538:	2b01      	cmp	r3, #1
 800d53a:	d020      	beq.n	800d57e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d540:	2b00      	cmp	r3, #0
 800d542:	d006      	beq.n	800d552 <tcp_pcb_remove+0xca>
 800d544:	4b13      	ldr	r3, [pc, #76]	; (800d594 <tcp_pcb_remove+0x10c>)
 800d546:	f640 0293 	movw	r2, #2195	; 0x893
 800d54a:	4916      	ldr	r1, [pc, #88]	; (800d5a4 <tcp_pcb_remove+0x11c>)
 800d54c:	4813      	ldr	r0, [pc, #76]	; (800d59c <tcp_pcb_remove+0x114>)
 800d54e:	f009 fcfd 	bl	8016f4c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d556:	2b00      	cmp	r3, #0
 800d558:	d006      	beq.n	800d568 <tcp_pcb_remove+0xe0>
 800d55a:	4b0e      	ldr	r3, [pc, #56]	; (800d594 <tcp_pcb_remove+0x10c>)
 800d55c:	f640 0294 	movw	r2, #2196	; 0x894
 800d560:	4911      	ldr	r1, [pc, #68]	; (800d5a8 <tcp_pcb_remove+0x120>)
 800d562:	480e      	ldr	r0, [pc, #56]	; (800d59c <tcp_pcb_remove+0x114>)
 800d564:	f009 fcf2 	bl	8016f4c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d006      	beq.n	800d57e <tcp_pcb_remove+0xf6>
 800d570:	4b08      	ldr	r3, [pc, #32]	; (800d594 <tcp_pcb_remove+0x10c>)
 800d572:	f640 0296 	movw	r2, #2198	; 0x896
 800d576:	490d      	ldr	r1, [pc, #52]	; (800d5ac <tcp_pcb_remove+0x124>)
 800d578:	4808      	ldr	r0, [pc, #32]	; (800d59c <tcp_pcb_remove+0x114>)
 800d57a:	f009 fce7 	bl	8016f4c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	2200      	movs	r2, #0
 800d582:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	2200      	movs	r2, #0
 800d588:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d58a:	bf00      	nop
 800d58c:	3710      	adds	r7, #16
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}
 800d592:	bf00      	nop
 800d594:	08019290 	.word	0x08019290
 800d598:	080198f8 	.word	0x080198f8
 800d59c:	080192d4 	.word	0x080192d4
 800d5a0:	08019914 	.word	0x08019914
 800d5a4:	08019934 	.word	0x08019934
 800d5a8:	0801994c 	.word	0x0801994c
 800d5ac:	08019968 	.word	0x08019968

0800d5b0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b082      	sub	sp, #8
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d106      	bne.n	800d5cc <tcp_next_iss+0x1c>
 800d5be:	4b0a      	ldr	r3, [pc, #40]	; (800d5e8 <tcp_next_iss+0x38>)
 800d5c0:	f640 02af 	movw	r2, #2223	; 0x8af
 800d5c4:	4909      	ldr	r1, [pc, #36]	; (800d5ec <tcp_next_iss+0x3c>)
 800d5c6:	480a      	ldr	r0, [pc, #40]	; (800d5f0 <tcp_next_iss+0x40>)
 800d5c8:	f009 fcc0 	bl	8016f4c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d5cc:	4b09      	ldr	r3, [pc, #36]	; (800d5f4 <tcp_next_iss+0x44>)
 800d5ce:	681a      	ldr	r2, [r3, #0]
 800d5d0:	4b09      	ldr	r3, [pc, #36]	; (800d5f8 <tcp_next_iss+0x48>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	4413      	add	r3, r2
 800d5d6:	4a07      	ldr	r2, [pc, #28]	; (800d5f4 <tcp_next_iss+0x44>)
 800d5d8:	6013      	str	r3, [r2, #0]
  return iss;
 800d5da:	4b06      	ldr	r3, [pc, #24]	; (800d5f4 <tcp_next_iss+0x44>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	3708      	adds	r7, #8
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}
 800d5e6:	bf00      	nop
 800d5e8:	08019290 	.word	0x08019290
 800d5ec:	08019980 	.word	0x08019980
 800d5f0:	080192d4 	.word	0x080192d4
 800d5f4:	20000034 	.word	0x20000034
 800d5f8:	20010e7c 	.word	0x20010e7c

0800d5fc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b086      	sub	sp, #24
 800d600:	af00      	add	r7, sp, #0
 800d602:	4603      	mov	r3, r0
 800d604:	60b9      	str	r1, [r7, #8]
 800d606:	607a      	str	r2, [r7, #4]
 800d608:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d106      	bne.n	800d61e <tcp_eff_send_mss_netif+0x22>
 800d610:	4b14      	ldr	r3, [pc, #80]	; (800d664 <tcp_eff_send_mss_netif+0x68>)
 800d612:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800d616:	4914      	ldr	r1, [pc, #80]	; (800d668 <tcp_eff_send_mss_netif+0x6c>)
 800d618:	4814      	ldr	r0, [pc, #80]	; (800d66c <tcp_eff_send_mss_netif+0x70>)
 800d61a:	f009 fc97 	bl	8016f4c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d101      	bne.n	800d628 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d624:	89fb      	ldrh	r3, [r7, #14]
 800d626:	e019      	b.n	800d65c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d62c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d62e:	8afb      	ldrh	r3, [r7, #22]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d012      	beq.n	800d65a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d634:	2328      	movs	r3, #40	; 0x28
 800d636:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d638:	8afa      	ldrh	r2, [r7, #22]
 800d63a:	8abb      	ldrh	r3, [r7, #20]
 800d63c:	429a      	cmp	r2, r3
 800d63e:	d904      	bls.n	800d64a <tcp_eff_send_mss_netif+0x4e>
 800d640:	8afa      	ldrh	r2, [r7, #22]
 800d642:	8abb      	ldrh	r3, [r7, #20]
 800d644:	1ad3      	subs	r3, r2, r3
 800d646:	b29b      	uxth	r3, r3
 800d648:	e000      	b.n	800d64c <tcp_eff_send_mss_netif+0x50>
 800d64a:	2300      	movs	r3, #0
 800d64c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d64e:	8a7a      	ldrh	r2, [r7, #18]
 800d650:	89fb      	ldrh	r3, [r7, #14]
 800d652:	4293      	cmp	r3, r2
 800d654:	bf28      	it	cs
 800d656:	4613      	movcs	r3, r2
 800d658:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d65a:	89fb      	ldrh	r3, [r7, #14]
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3718      	adds	r7, #24
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}
 800d664:	08019290 	.word	0x08019290
 800d668:	0801999c 	.word	0x0801999c
 800d66c:	080192d4 	.word	0x080192d4

0800d670 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b084      	sub	sp, #16
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
 800d678:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d119      	bne.n	800d6b8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d684:	4b10      	ldr	r3, [pc, #64]	; (800d6c8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d686:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800d68a:	4910      	ldr	r1, [pc, #64]	; (800d6cc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d68c:	4810      	ldr	r0, [pc, #64]	; (800d6d0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d68e:	f009 fc5d 	bl	8016f4c <iprintf>

  while (pcb != NULL) {
 800d692:	e011      	b.n	800d6b8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	681a      	ldr	r2, [r3, #0]
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	429a      	cmp	r2, r3
 800d69e:	d108      	bne.n	800d6b2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	68db      	ldr	r3, [r3, #12]
 800d6a4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d6a6:	68f8      	ldr	r0, [r7, #12]
 800d6a8:	f7fe fd54 	bl	800c154 <tcp_abort>
      pcb = next;
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	60fb      	str	r3, [r7, #12]
 800d6b0:	e002      	b.n	800d6b8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	68db      	ldr	r3, [r3, #12]
 800d6b6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d1ea      	bne.n	800d694 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d6be:	bf00      	nop
 800d6c0:	3710      	adds	r7, #16
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}
 800d6c6:	bf00      	nop
 800d6c8:	08019290 	.word	0x08019290
 800d6cc:	080199c4 	.word	0x080199c4
 800d6d0:	080192d4 	.word	0x080192d4

0800d6d4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b084      	sub	sp, #16
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
 800d6dc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d02a      	beq.n	800d73a <tcp_netif_ip_addr_changed+0x66>
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d026      	beq.n	800d73a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d6ec:	4b15      	ldr	r3, [pc, #84]	; (800d744 <tcp_netif_ip_addr_changed+0x70>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	4619      	mov	r1, r3
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f7ff ffbc 	bl	800d670 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d6f8:	4b13      	ldr	r3, [pc, #76]	; (800d748 <tcp_netif_ip_addr_changed+0x74>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	4619      	mov	r1, r3
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	f7ff ffb6 	bl	800d670 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d017      	beq.n	800d73a <tcp_netif_ip_addr_changed+0x66>
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d013      	beq.n	800d73a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d712:	4b0e      	ldr	r3, [pc, #56]	; (800d74c <tcp_netif_ip_addr_changed+0x78>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	60fb      	str	r3, [r7, #12]
 800d718:	e00c      	b.n	800d734 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	681a      	ldr	r2, [r3, #0]
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	429a      	cmp	r2, r3
 800d724:	d103      	bne.n	800d72e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	681a      	ldr	r2, [r3, #0]
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	68db      	ldr	r3, [r3, #12]
 800d732:	60fb      	str	r3, [r7, #12]
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d1ef      	bne.n	800d71a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d73a:	bf00      	nop
 800d73c:	3710      	adds	r7, #16
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}
 800d742:	bf00      	nop
 800d744:	20010e78 	.word	0x20010e78
 800d748:	20010e84 	.word	0x20010e84
 800d74c:	20010e80 	.word	0x20010e80

0800d750 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b082      	sub	sp, #8
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d007      	beq.n	800d770 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d764:	4618      	mov	r0, r3
 800d766:	f7ff fb71 	bl	800ce4c <tcp_segs_free>
    pcb->ooseq = NULL;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2200      	movs	r2, #0
 800d76e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d770:	bf00      	nop
 800d772:	3708      	adds	r7, #8
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}

0800d778 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d778:	b590      	push	{r4, r7, lr}
 800d77a:	b08d      	sub	sp, #52	; 0x34
 800d77c:	af04      	add	r7, sp, #16
 800d77e:	6078      	str	r0, [r7, #4]
 800d780:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d105      	bne.n	800d794 <tcp_input+0x1c>
 800d788:	4b9b      	ldr	r3, [pc, #620]	; (800d9f8 <tcp_input+0x280>)
 800d78a:	2283      	movs	r2, #131	; 0x83
 800d78c:	499b      	ldr	r1, [pc, #620]	; (800d9fc <tcp_input+0x284>)
 800d78e:	489c      	ldr	r0, [pc, #624]	; (800da00 <tcp_input+0x288>)
 800d790:	f009 fbdc 	bl	8016f4c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	685b      	ldr	r3, [r3, #4]
 800d798:	4a9a      	ldr	r2, [pc, #616]	; (800da04 <tcp_input+0x28c>)
 800d79a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	895b      	ldrh	r3, [r3, #10]
 800d7a0:	2b13      	cmp	r3, #19
 800d7a2:	f240 83c4 	bls.w	800df2e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d7a6:	4b98      	ldr	r3, [pc, #608]	; (800da08 <tcp_input+0x290>)
 800d7a8:	695a      	ldr	r2, [r3, #20]
 800d7aa:	4b97      	ldr	r3, [pc, #604]	; (800da08 <tcp_input+0x290>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	4619      	mov	r1, r3
 800d7b0:	4610      	mov	r0, r2
 800d7b2:	f008 fa29 	bl	8015c08 <ip4_addr_isbroadcast_u32>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	f040 83ba 	bne.w	800df32 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d7be:	4b92      	ldr	r3, [pc, #584]	; (800da08 <tcp_input+0x290>)
 800d7c0:	695b      	ldr	r3, [r3, #20]
 800d7c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d7c6:	2be0      	cmp	r3, #224	; 0xe0
 800d7c8:	f000 83b3 	beq.w	800df32 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d7cc:	4b8d      	ldr	r3, [pc, #564]	; (800da04 <tcp_input+0x28c>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	899b      	ldrh	r3, [r3, #12]
 800d7d2:	b29b      	uxth	r3, r3
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	f7fc fb91 	bl	8009efc <lwip_htons>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	0b1b      	lsrs	r3, r3, #12
 800d7de:	b29b      	uxth	r3, r3
 800d7e0:	b2db      	uxtb	r3, r3
 800d7e2:	009b      	lsls	r3, r3, #2
 800d7e4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d7e6:	7cbb      	ldrb	r3, [r7, #18]
 800d7e8:	2b13      	cmp	r3, #19
 800d7ea:	f240 83a2 	bls.w	800df32 <tcp_input+0x7ba>
 800d7ee:	7cbb      	ldrb	r3, [r7, #18]
 800d7f0:	b29a      	uxth	r2, r3
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	891b      	ldrh	r3, [r3, #8]
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	f200 839b 	bhi.w	800df32 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d7fc:	7cbb      	ldrb	r3, [r7, #18]
 800d7fe:	b29b      	uxth	r3, r3
 800d800:	3b14      	subs	r3, #20
 800d802:	b29a      	uxth	r2, r3
 800d804:	4b81      	ldr	r3, [pc, #516]	; (800da0c <tcp_input+0x294>)
 800d806:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d808:	4b81      	ldr	r3, [pc, #516]	; (800da10 <tcp_input+0x298>)
 800d80a:	2200      	movs	r2, #0
 800d80c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	895a      	ldrh	r2, [r3, #10]
 800d812:	7cbb      	ldrb	r3, [r7, #18]
 800d814:	b29b      	uxth	r3, r3
 800d816:	429a      	cmp	r2, r3
 800d818:	d309      	bcc.n	800d82e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d81a:	4b7c      	ldr	r3, [pc, #496]	; (800da0c <tcp_input+0x294>)
 800d81c:	881a      	ldrh	r2, [r3, #0]
 800d81e:	4b7d      	ldr	r3, [pc, #500]	; (800da14 <tcp_input+0x29c>)
 800d820:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d822:	7cbb      	ldrb	r3, [r7, #18]
 800d824:	4619      	mov	r1, r3
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f7fd fe18 	bl	800b45c <pbuf_remove_header>
 800d82c:	e04e      	b.n	800d8cc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d105      	bne.n	800d842 <tcp_input+0xca>
 800d836:	4b70      	ldr	r3, [pc, #448]	; (800d9f8 <tcp_input+0x280>)
 800d838:	22c2      	movs	r2, #194	; 0xc2
 800d83a:	4977      	ldr	r1, [pc, #476]	; (800da18 <tcp_input+0x2a0>)
 800d83c:	4870      	ldr	r0, [pc, #448]	; (800da00 <tcp_input+0x288>)
 800d83e:	f009 fb85 	bl	8016f4c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d842:	2114      	movs	r1, #20
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f7fd fe09 	bl	800b45c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	895a      	ldrh	r2, [r3, #10]
 800d84e:	4b71      	ldr	r3, [pc, #452]	; (800da14 <tcp_input+0x29c>)
 800d850:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d852:	4b6e      	ldr	r3, [pc, #440]	; (800da0c <tcp_input+0x294>)
 800d854:	881a      	ldrh	r2, [r3, #0]
 800d856:	4b6f      	ldr	r3, [pc, #444]	; (800da14 <tcp_input+0x29c>)
 800d858:	881b      	ldrh	r3, [r3, #0]
 800d85a:	1ad3      	subs	r3, r2, r3
 800d85c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d85e:	4b6d      	ldr	r3, [pc, #436]	; (800da14 <tcp_input+0x29c>)
 800d860:	881b      	ldrh	r3, [r3, #0]
 800d862:	4619      	mov	r1, r3
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f7fd fdf9 	bl	800b45c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	895b      	ldrh	r3, [r3, #10]
 800d870:	8a3a      	ldrh	r2, [r7, #16]
 800d872:	429a      	cmp	r2, r3
 800d874:	f200 835f 	bhi.w	800df36 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	685b      	ldr	r3, [r3, #4]
 800d87e:	4a64      	ldr	r2, [pc, #400]	; (800da10 <tcp_input+0x298>)
 800d880:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	8a3a      	ldrh	r2, [r7, #16]
 800d888:	4611      	mov	r1, r2
 800d88a:	4618      	mov	r0, r3
 800d88c:	f7fd fde6 	bl	800b45c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	891a      	ldrh	r2, [r3, #8]
 800d894:	8a3b      	ldrh	r3, [r7, #16]
 800d896:	1ad3      	subs	r3, r2, r3
 800d898:	b29a      	uxth	r2, r3
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	895b      	ldrh	r3, [r3, #10]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d005      	beq.n	800d8b2 <tcp_input+0x13a>
 800d8a6:	4b54      	ldr	r3, [pc, #336]	; (800d9f8 <tcp_input+0x280>)
 800d8a8:	22df      	movs	r2, #223	; 0xdf
 800d8aa:	495c      	ldr	r1, [pc, #368]	; (800da1c <tcp_input+0x2a4>)
 800d8ac:	4854      	ldr	r0, [pc, #336]	; (800da00 <tcp_input+0x288>)
 800d8ae:	f009 fb4d 	bl	8016f4c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	891a      	ldrh	r2, [r3, #8]
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	891b      	ldrh	r3, [r3, #8]
 800d8bc:	429a      	cmp	r2, r3
 800d8be:	d005      	beq.n	800d8cc <tcp_input+0x154>
 800d8c0:	4b4d      	ldr	r3, [pc, #308]	; (800d9f8 <tcp_input+0x280>)
 800d8c2:	22e0      	movs	r2, #224	; 0xe0
 800d8c4:	4956      	ldr	r1, [pc, #344]	; (800da20 <tcp_input+0x2a8>)
 800d8c6:	484e      	ldr	r0, [pc, #312]	; (800da00 <tcp_input+0x288>)
 800d8c8:	f009 fb40 	bl	8016f4c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d8cc:	4b4d      	ldr	r3, [pc, #308]	; (800da04 <tcp_input+0x28c>)
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	881b      	ldrh	r3, [r3, #0]
 800d8d2:	b29a      	uxth	r2, r3
 800d8d4:	4b4b      	ldr	r3, [pc, #300]	; (800da04 <tcp_input+0x28c>)
 800d8d6:	681c      	ldr	r4, [r3, #0]
 800d8d8:	4610      	mov	r0, r2
 800d8da:	f7fc fb0f 	bl	8009efc <lwip_htons>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d8e2:	4b48      	ldr	r3, [pc, #288]	; (800da04 <tcp_input+0x28c>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	885b      	ldrh	r3, [r3, #2]
 800d8e8:	b29a      	uxth	r2, r3
 800d8ea:	4b46      	ldr	r3, [pc, #280]	; (800da04 <tcp_input+0x28c>)
 800d8ec:	681c      	ldr	r4, [r3, #0]
 800d8ee:	4610      	mov	r0, r2
 800d8f0:	f7fc fb04 	bl	8009efc <lwip_htons>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d8f8:	4b42      	ldr	r3, [pc, #264]	; (800da04 <tcp_input+0x28c>)
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	685a      	ldr	r2, [r3, #4]
 800d8fe:	4b41      	ldr	r3, [pc, #260]	; (800da04 <tcp_input+0x28c>)
 800d900:	681c      	ldr	r4, [r3, #0]
 800d902:	4610      	mov	r0, r2
 800d904:	f7fc fb0f 	bl	8009f26 <lwip_htonl>
 800d908:	4603      	mov	r3, r0
 800d90a:	6063      	str	r3, [r4, #4]
 800d90c:	6863      	ldr	r3, [r4, #4]
 800d90e:	4a45      	ldr	r2, [pc, #276]	; (800da24 <tcp_input+0x2ac>)
 800d910:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d912:	4b3c      	ldr	r3, [pc, #240]	; (800da04 <tcp_input+0x28c>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	689a      	ldr	r2, [r3, #8]
 800d918:	4b3a      	ldr	r3, [pc, #232]	; (800da04 <tcp_input+0x28c>)
 800d91a:	681c      	ldr	r4, [r3, #0]
 800d91c:	4610      	mov	r0, r2
 800d91e:	f7fc fb02 	bl	8009f26 <lwip_htonl>
 800d922:	4603      	mov	r3, r0
 800d924:	60a3      	str	r3, [r4, #8]
 800d926:	68a3      	ldr	r3, [r4, #8]
 800d928:	4a3f      	ldr	r2, [pc, #252]	; (800da28 <tcp_input+0x2b0>)
 800d92a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d92c:	4b35      	ldr	r3, [pc, #212]	; (800da04 <tcp_input+0x28c>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	89db      	ldrh	r3, [r3, #14]
 800d932:	b29a      	uxth	r2, r3
 800d934:	4b33      	ldr	r3, [pc, #204]	; (800da04 <tcp_input+0x28c>)
 800d936:	681c      	ldr	r4, [r3, #0]
 800d938:	4610      	mov	r0, r2
 800d93a:	f7fc fadf 	bl	8009efc <lwip_htons>
 800d93e:	4603      	mov	r3, r0
 800d940:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d942:	4b30      	ldr	r3, [pc, #192]	; (800da04 <tcp_input+0x28c>)
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	899b      	ldrh	r3, [r3, #12]
 800d948:	b29b      	uxth	r3, r3
 800d94a:	4618      	mov	r0, r3
 800d94c:	f7fc fad6 	bl	8009efc <lwip_htons>
 800d950:	4603      	mov	r3, r0
 800d952:	b2db      	uxtb	r3, r3
 800d954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d958:	b2da      	uxtb	r2, r3
 800d95a:	4b34      	ldr	r3, [pc, #208]	; (800da2c <tcp_input+0x2b4>)
 800d95c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	891a      	ldrh	r2, [r3, #8]
 800d962:	4b33      	ldr	r3, [pc, #204]	; (800da30 <tcp_input+0x2b8>)
 800d964:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d966:	4b31      	ldr	r3, [pc, #196]	; (800da2c <tcp_input+0x2b4>)
 800d968:	781b      	ldrb	r3, [r3, #0]
 800d96a:	f003 0303 	and.w	r3, r3, #3
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d00c      	beq.n	800d98c <tcp_input+0x214>
    tcplen++;
 800d972:	4b2f      	ldr	r3, [pc, #188]	; (800da30 <tcp_input+0x2b8>)
 800d974:	881b      	ldrh	r3, [r3, #0]
 800d976:	3301      	adds	r3, #1
 800d978:	b29a      	uxth	r2, r3
 800d97a:	4b2d      	ldr	r3, [pc, #180]	; (800da30 <tcp_input+0x2b8>)
 800d97c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	891a      	ldrh	r2, [r3, #8]
 800d982:	4b2b      	ldr	r3, [pc, #172]	; (800da30 <tcp_input+0x2b8>)
 800d984:	881b      	ldrh	r3, [r3, #0]
 800d986:	429a      	cmp	r2, r3
 800d988:	f200 82d7 	bhi.w	800df3a <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d98c:	2300      	movs	r3, #0
 800d98e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d990:	4b28      	ldr	r3, [pc, #160]	; (800da34 <tcp_input+0x2bc>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	61fb      	str	r3, [r7, #28]
 800d996:	e09d      	b.n	800dad4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d998:	69fb      	ldr	r3, [r7, #28]
 800d99a:	7d1b      	ldrb	r3, [r3, #20]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d105      	bne.n	800d9ac <tcp_input+0x234>
 800d9a0:	4b15      	ldr	r3, [pc, #84]	; (800d9f8 <tcp_input+0x280>)
 800d9a2:	22fb      	movs	r2, #251	; 0xfb
 800d9a4:	4924      	ldr	r1, [pc, #144]	; (800da38 <tcp_input+0x2c0>)
 800d9a6:	4816      	ldr	r0, [pc, #88]	; (800da00 <tcp_input+0x288>)
 800d9a8:	f009 fad0 	bl	8016f4c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d9ac:	69fb      	ldr	r3, [r7, #28]
 800d9ae:	7d1b      	ldrb	r3, [r3, #20]
 800d9b0:	2b0a      	cmp	r3, #10
 800d9b2:	d105      	bne.n	800d9c0 <tcp_input+0x248>
 800d9b4:	4b10      	ldr	r3, [pc, #64]	; (800d9f8 <tcp_input+0x280>)
 800d9b6:	22fc      	movs	r2, #252	; 0xfc
 800d9b8:	4920      	ldr	r1, [pc, #128]	; (800da3c <tcp_input+0x2c4>)
 800d9ba:	4811      	ldr	r0, [pc, #68]	; (800da00 <tcp_input+0x288>)
 800d9bc:	f009 fac6 	bl	8016f4c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d9c0:	69fb      	ldr	r3, [r7, #28]
 800d9c2:	7d1b      	ldrb	r3, [r3, #20]
 800d9c4:	2b01      	cmp	r3, #1
 800d9c6:	d105      	bne.n	800d9d4 <tcp_input+0x25c>
 800d9c8:	4b0b      	ldr	r3, [pc, #44]	; (800d9f8 <tcp_input+0x280>)
 800d9ca:	22fd      	movs	r2, #253	; 0xfd
 800d9cc:	491c      	ldr	r1, [pc, #112]	; (800da40 <tcp_input+0x2c8>)
 800d9ce:	480c      	ldr	r0, [pc, #48]	; (800da00 <tcp_input+0x288>)
 800d9d0:	f009 fabc 	bl	8016f4c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d9d4:	69fb      	ldr	r3, [r7, #28]
 800d9d6:	7a1b      	ldrb	r3, [r3, #8]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d033      	beq.n	800da44 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d9dc:	69fb      	ldr	r3, [r7, #28]
 800d9de:	7a1a      	ldrb	r2, [r3, #8]
 800d9e0:	4b09      	ldr	r3, [pc, #36]	; (800da08 <tcp_input+0x290>)
 800d9e2:	685b      	ldr	r3, [r3, #4]
 800d9e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d9e8:	3301      	adds	r3, #1
 800d9ea:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d9ec:	429a      	cmp	r2, r3
 800d9ee:	d029      	beq.n	800da44 <tcp_input+0x2cc>
      prev = pcb;
 800d9f0:	69fb      	ldr	r3, [r7, #28]
 800d9f2:	61bb      	str	r3, [r7, #24]
      continue;
 800d9f4:	e06b      	b.n	800dace <tcp_input+0x356>
 800d9f6:	bf00      	nop
 800d9f8:	080199f8 	.word	0x080199f8
 800d9fc:	08019a2c 	.word	0x08019a2c
 800da00:	08019a44 	.word	0x08019a44
 800da04:	200081cc 	.word	0x200081cc
 800da08:	2000b8c4 	.word	0x2000b8c4
 800da0c:	200081d0 	.word	0x200081d0
 800da10:	200081d4 	.word	0x200081d4
 800da14:	200081d2 	.word	0x200081d2
 800da18:	08019a6c 	.word	0x08019a6c
 800da1c:	08019a7c 	.word	0x08019a7c
 800da20:	08019a88 	.word	0x08019a88
 800da24:	200081dc 	.word	0x200081dc
 800da28:	200081e0 	.word	0x200081e0
 800da2c:	200081e8 	.word	0x200081e8
 800da30:	200081e6 	.word	0x200081e6
 800da34:	20010e78 	.word	0x20010e78
 800da38:	08019aa8 	.word	0x08019aa8
 800da3c:	08019ad0 	.word	0x08019ad0
 800da40:	08019afc 	.word	0x08019afc
    }

    if (pcb->remote_port == tcphdr->src &&
 800da44:	69fb      	ldr	r3, [r7, #28]
 800da46:	8b1a      	ldrh	r2, [r3, #24]
 800da48:	4b94      	ldr	r3, [pc, #592]	; (800dc9c <tcp_input+0x524>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	881b      	ldrh	r3, [r3, #0]
 800da4e:	b29b      	uxth	r3, r3
 800da50:	429a      	cmp	r2, r3
 800da52:	d13a      	bne.n	800daca <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800da54:	69fb      	ldr	r3, [r7, #28]
 800da56:	8ada      	ldrh	r2, [r3, #22]
 800da58:	4b90      	ldr	r3, [pc, #576]	; (800dc9c <tcp_input+0x524>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	885b      	ldrh	r3, [r3, #2]
 800da5e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800da60:	429a      	cmp	r2, r3
 800da62:	d132      	bne.n	800daca <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800da64:	69fb      	ldr	r3, [r7, #28]
 800da66:	685a      	ldr	r2, [r3, #4]
 800da68:	4b8d      	ldr	r3, [pc, #564]	; (800dca0 <tcp_input+0x528>)
 800da6a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800da6c:	429a      	cmp	r2, r3
 800da6e:	d12c      	bne.n	800daca <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800da70:	69fb      	ldr	r3, [r7, #28]
 800da72:	681a      	ldr	r2, [r3, #0]
 800da74:	4b8a      	ldr	r3, [pc, #552]	; (800dca0 <tcp_input+0x528>)
 800da76:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800da78:	429a      	cmp	r2, r3
 800da7a:	d126      	bne.n	800daca <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800da7c:	69fb      	ldr	r3, [r7, #28]
 800da7e:	68db      	ldr	r3, [r3, #12]
 800da80:	69fa      	ldr	r2, [r7, #28]
 800da82:	429a      	cmp	r2, r3
 800da84:	d106      	bne.n	800da94 <tcp_input+0x31c>
 800da86:	4b87      	ldr	r3, [pc, #540]	; (800dca4 <tcp_input+0x52c>)
 800da88:	f240 120d 	movw	r2, #269	; 0x10d
 800da8c:	4986      	ldr	r1, [pc, #536]	; (800dca8 <tcp_input+0x530>)
 800da8e:	4887      	ldr	r0, [pc, #540]	; (800dcac <tcp_input+0x534>)
 800da90:	f009 fa5c 	bl	8016f4c <iprintf>
      if (prev != NULL) {
 800da94:	69bb      	ldr	r3, [r7, #24]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d00a      	beq.n	800dab0 <tcp_input+0x338>
        prev->next = pcb->next;
 800da9a:	69fb      	ldr	r3, [r7, #28]
 800da9c:	68da      	ldr	r2, [r3, #12]
 800da9e:	69bb      	ldr	r3, [r7, #24]
 800daa0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800daa2:	4b83      	ldr	r3, [pc, #524]	; (800dcb0 <tcp_input+0x538>)
 800daa4:	681a      	ldr	r2, [r3, #0]
 800daa6:	69fb      	ldr	r3, [r7, #28]
 800daa8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800daaa:	4a81      	ldr	r2, [pc, #516]	; (800dcb0 <tcp_input+0x538>)
 800daac:	69fb      	ldr	r3, [r7, #28]
 800daae:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800dab0:	69fb      	ldr	r3, [r7, #28]
 800dab2:	68db      	ldr	r3, [r3, #12]
 800dab4:	69fa      	ldr	r2, [r7, #28]
 800dab6:	429a      	cmp	r2, r3
 800dab8:	d111      	bne.n	800dade <tcp_input+0x366>
 800daba:	4b7a      	ldr	r3, [pc, #488]	; (800dca4 <tcp_input+0x52c>)
 800dabc:	f240 1215 	movw	r2, #277	; 0x115
 800dac0:	497c      	ldr	r1, [pc, #496]	; (800dcb4 <tcp_input+0x53c>)
 800dac2:	487a      	ldr	r0, [pc, #488]	; (800dcac <tcp_input+0x534>)
 800dac4:	f009 fa42 	bl	8016f4c <iprintf>
      break;
 800dac8:	e009      	b.n	800dade <tcp_input+0x366>
    }
    prev = pcb;
 800daca:	69fb      	ldr	r3, [r7, #28]
 800dacc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dace:	69fb      	ldr	r3, [r7, #28]
 800dad0:	68db      	ldr	r3, [r3, #12]
 800dad2:	61fb      	str	r3, [r7, #28]
 800dad4:	69fb      	ldr	r3, [r7, #28]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	f47f af5e 	bne.w	800d998 <tcp_input+0x220>
 800dadc:	e000      	b.n	800dae0 <tcp_input+0x368>
      break;
 800dade:	bf00      	nop
  }

  if (pcb == NULL) {
 800dae0:	69fb      	ldr	r3, [r7, #28]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	f040 8095 	bne.w	800dc12 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dae8:	4b73      	ldr	r3, [pc, #460]	; (800dcb8 <tcp_input+0x540>)
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	61fb      	str	r3, [r7, #28]
 800daee:	e03f      	b.n	800db70 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800daf0:	69fb      	ldr	r3, [r7, #28]
 800daf2:	7d1b      	ldrb	r3, [r3, #20]
 800daf4:	2b0a      	cmp	r3, #10
 800daf6:	d006      	beq.n	800db06 <tcp_input+0x38e>
 800daf8:	4b6a      	ldr	r3, [pc, #424]	; (800dca4 <tcp_input+0x52c>)
 800dafa:	f240 121f 	movw	r2, #287	; 0x11f
 800dafe:	496f      	ldr	r1, [pc, #444]	; (800dcbc <tcp_input+0x544>)
 800db00:	486a      	ldr	r0, [pc, #424]	; (800dcac <tcp_input+0x534>)
 800db02:	f009 fa23 	bl	8016f4c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800db06:	69fb      	ldr	r3, [r7, #28]
 800db08:	7a1b      	ldrb	r3, [r3, #8]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d009      	beq.n	800db22 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800db0e:	69fb      	ldr	r3, [r7, #28]
 800db10:	7a1a      	ldrb	r2, [r3, #8]
 800db12:	4b63      	ldr	r3, [pc, #396]	; (800dca0 <tcp_input+0x528>)
 800db14:	685b      	ldr	r3, [r3, #4]
 800db16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800db1a:	3301      	adds	r3, #1
 800db1c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800db1e:	429a      	cmp	r2, r3
 800db20:	d122      	bne.n	800db68 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800db22:	69fb      	ldr	r3, [r7, #28]
 800db24:	8b1a      	ldrh	r2, [r3, #24]
 800db26:	4b5d      	ldr	r3, [pc, #372]	; (800dc9c <tcp_input+0x524>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	881b      	ldrh	r3, [r3, #0]
 800db2c:	b29b      	uxth	r3, r3
 800db2e:	429a      	cmp	r2, r3
 800db30:	d11b      	bne.n	800db6a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800db32:	69fb      	ldr	r3, [r7, #28]
 800db34:	8ada      	ldrh	r2, [r3, #22]
 800db36:	4b59      	ldr	r3, [pc, #356]	; (800dc9c <tcp_input+0x524>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	885b      	ldrh	r3, [r3, #2]
 800db3c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800db3e:	429a      	cmp	r2, r3
 800db40:	d113      	bne.n	800db6a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800db42:	69fb      	ldr	r3, [r7, #28]
 800db44:	685a      	ldr	r2, [r3, #4]
 800db46:	4b56      	ldr	r3, [pc, #344]	; (800dca0 <tcp_input+0x528>)
 800db48:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800db4a:	429a      	cmp	r2, r3
 800db4c:	d10d      	bne.n	800db6a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800db4e:	69fb      	ldr	r3, [r7, #28]
 800db50:	681a      	ldr	r2, [r3, #0]
 800db52:	4b53      	ldr	r3, [pc, #332]	; (800dca0 <tcp_input+0x528>)
 800db54:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800db56:	429a      	cmp	r2, r3
 800db58:	d107      	bne.n	800db6a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800db5a:	69f8      	ldr	r0, [r7, #28]
 800db5c:	f000 fb52 	bl	800e204 <tcp_timewait_input>
        }
        pbuf_free(p);
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f7fd fd01 	bl	800b568 <pbuf_free>
        return;
 800db66:	e1ee      	b.n	800df46 <tcp_input+0x7ce>
        continue;
 800db68:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800db6a:	69fb      	ldr	r3, [r7, #28]
 800db6c:	68db      	ldr	r3, [r3, #12]
 800db6e:	61fb      	str	r3, [r7, #28]
 800db70:	69fb      	ldr	r3, [r7, #28]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d1bc      	bne.n	800daf0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800db76:	2300      	movs	r3, #0
 800db78:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800db7a:	4b51      	ldr	r3, [pc, #324]	; (800dcc0 <tcp_input+0x548>)
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	617b      	str	r3, [r7, #20]
 800db80:	e02a      	b.n	800dbd8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800db82:	697b      	ldr	r3, [r7, #20]
 800db84:	7a1b      	ldrb	r3, [r3, #8]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d00c      	beq.n	800dba4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	7a1a      	ldrb	r2, [r3, #8]
 800db8e:	4b44      	ldr	r3, [pc, #272]	; (800dca0 <tcp_input+0x528>)
 800db90:	685b      	ldr	r3, [r3, #4]
 800db92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800db96:	3301      	adds	r3, #1
 800db98:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800db9a:	429a      	cmp	r2, r3
 800db9c:	d002      	beq.n	800dba4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	61bb      	str	r3, [r7, #24]
        continue;
 800dba2:	e016      	b.n	800dbd2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800dba4:	697b      	ldr	r3, [r7, #20]
 800dba6:	8ada      	ldrh	r2, [r3, #22]
 800dba8:	4b3c      	ldr	r3, [pc, #240]	; (800dc9c <tcp_input+0x524>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	885b      	ldrh	r3, [r3, #2]
 800dbae:	b29b      	uxth	r3, r3
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	d10c      	bne.n	800dbce <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	681a      	ldr	r2, [r3, #0]
 800dbb8:	4b39      	ldr	r3, [pc, #228]	; (800dca0 <tcp_input+0x528>)
 800dbba:	695b      	ldr	r3, [r3, #20]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d00f      	beq.n	800dbe0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800dbc0:	697b      	ldr	r3, [r7, #20]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d00d      	beq.n	800dbe2 <tcp_input+0x46a>
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d009      	beq.n	800dbe2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800dbce:	697b      	ldr	r3, [r7, #20]
 800dbd0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	68db      	ldr	r3, [r3, #12]
 800dbd6:	617b      	str	r3, [r7, #20]
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d1d1      	bne.n	800db82 <tcp_input+0x40a>
 800dbde:	e000      	b.n	800dbe2 <tcp_input+0x46a>
            break;
 800dbe0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800dbe2:	697b      	ldr	r3, [r7, #20]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d014      	beq.n	800dc12 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800dbe8:	69bb      	ldr	r3, [r7, #24]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d00a      	beq.n	800dc04 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	68da      	ldr	r2, [r3, #12]
 800dbf2:	69bb      	ldr	r3, [r7, #24]
 800dbf4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800dbf6:	4b32      	ldr	r3, [pc, #200]	; (800dcc0 <tcp_input+0x548>)
 800dbf8:	681a      	ldr	r2, [r3, #0]
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800dbfe:	4a30      	ldr	r2, [pc, #192]	; (800dcc0 <tcp_input+0x548>)
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800dc04:	6978      	ldr	r0, [r7, #20]
 800dc06:	f000 f9ff 	bl	800e008 <tcp_listen_input>
      }
      pbuf_free(p);
 800dc0a:	6878      	ldr	r0, [r7, #4]
 800dc0c:	f7fd fcac 	bl	800b568 <pbuf_free>
      return;
 800dc10:	e199      	b.n	800df46 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800dc12:	69fb      	ldr	r3, [r7, #28]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	f000 8160 	beq.w	800deda <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800dc1a:	4b2a      	ldr	r3, [pc, #168]	; (800dcc4 <tcp_input+0x54c>)
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	891a      	ldrh	r2, [r3, #8]
 800dc24:	4b27      	ldr	r3, [pc, #156]	; (800dcc4 <tcp_input+0x54c>)
 800dc26:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800dc28:	4a26      	ldr	r2, [pc, #152]	; (800dcc4 <tcp_input+0x54c>)
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800dc2e:	4b1b      	ldr	r3, [pc, #108]	; (800dc9c <tcp_input+0x524>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	4a24      	ldr	r2, [pc, #144]	; (800dcc4 <tcp_input+0x54c>)
 800dc34:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800dc36:	4b24      	ldr	r3, [pc, #144]	; (800dcc8 <tcp_input+0x550>)
 800dc38:	2200      	movs	r2, #0
 800dc3a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800dc3c:	4b23      	ldr	r3, [pc, #140]	; (800dccc <tcp_input+0x554>)
 800dc3e:	2200      	movs	r2, #0
 800dc40:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800dc42:	4b23      	ldr	r3, [pc, #140]	; (800dcd0 <tcp_input+0x558>)
 800dc44:	2200      	movs	r2, #0
 800dc46:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800dc48:	4b22      	ldr	r3, [pc, #136]	; (800dcd4 <tcp_input+0x55c>)
 800dc4a:	781b      	ldrb	r3, [r3, #0]
 800dc4c:	f003 0308 	and.w	r3, r3, #8
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d006      	beq.n	800dc62 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	7b5b      	ldrb	r3, [r3, #13]
 800dc58:	f043 0301 	orr.w	r3, r3, #1
 800dc5c:	b2da      	uxtb	r2, r3
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800dc62:	69fb      	ldr	r3, [r7, #28]
 800dc64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d038      	beq.n	800dcdc <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800dc6a:	69f8      	ldr	r0, [r7, #28]
 800dc6c:	f7ff f872 	bl	800cd54 <tcp_process_refused_data>
 800dc70:	4603      	mov	r3, r0
 800dc72:	f113 0f0d 	cmn.w	r3, #13
 800dc76:	d007      	beq.n	800dc88 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800dc78:	69fb      	ldr	r3, [r7, #28]
 800dc7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d02d      	beq.n	800dcdc <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800dc80:	4b15      	ldr	r3, [pc, #84]	; (800dcd8 <tcp_input+0x560>)
 800dc82:	881b      	ldrh	r3, [r3, #0]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d029      	beq.n	800dcdc <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800dc88:	69fb      	ldr	r3, [r7, #28]
 800dc8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	f040 8104 	bne.w	800de9a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800dc92:	69f8      	ldr	r0, [r7, #28]
 800dc94:	f003 fe24 	bl	80118e0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800dc98:	e0ff      	b.n	800de9a <tcp_input+0x722>
 800dc9a:	bf00      	nop
 800dc9c:	200081cc 	.word	0x200081cc
 800dca0:	2000b8c4 	.word	0x2000b8c4
 800dca4:	080199f8 	.word	0x080199f8
 800dca8:	08019b24 	.word	0x08019b24
 800dcac:	08019a44 	.word	0x08019a44
 800dcb0:	20010e78 	.word	0x20010e78
 800dcb4:	08019b50 	.word	0x08019b50
 800dcb8:	20010e88 	.word	0x20010e88
 800dcbc:	08019b7c 	.word	0x08019b7c
 800dcc0:	20010e80 	.word	0x20010e80
 800dcc4:	200081bc 	.word	0x200081bc
 800dcc8:	200081ec 	.word	0x200081ec
 800dccc:	200081e9 	.word	0x200081e9
 800dcd0:	200081e4 	.word	0x200081e4
 800dcd4:	200081e8 	.word	0x200081e8
 800dcd8:	200081e6 	.word	0x200081e6
      }
    }
    tcp_input_pcb = pcb;
 800dcdc:	4a9b      	ldr	r2, [pc, #620]	; (800df4c <tcp_input+0x7d4>)
 800dcde:	69fb      	ldr	r3, [r7, #28]
 800dce0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800dce2:	69f8      	ldr	r0, [r7, #28]
 800dce4:	f000 fb0a 	bl	800e2fc <tcp_process>
 800dce8:	4603      	mov	r3, r0
 800dcea:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800dcec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dcf0:	f113 0f0d 	cmn.w	r3, #13
 800dcf4:	f000 80d3 	beq.w	800de9e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800dcf8:	4b95      	ldr	r3, [pc, #596]	; (800df50 <tcp_input+0x7d8>)
 800dcfa:	781b      	ldrb	r3, [r3, #0]
 800dcfc:	f003 0308 	and.w	r3, r3, #8
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d015      	beq.n	800dd30 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800dd04:	69fb      	ldr	r3, [r7, #28]
 800dd06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d008      	beq.n	800dd20 <tcp_input+0x5a8>
 800dd0e:	69fb      	ldr	r3, [r7, #28]
 800dd10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd14:	69fa      	ldr	r2, [r7, #28]
 800dd16:	6912      	ldr	r2, [r2, #16]
 800dd18:	f06f 010d 	mvn.w	r1, #13
 800dd1c:	4610      	mov	r0, r2
 800dd1e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800dd20:	69f9      	ldr	r1, [r7, #28]
 800dd22:	488c      	ldr	r0, [pc, #560]	; (800df54 <tcp_input+0x7dc>)
 800dd24:	f7ff fbb0 	bl	800d488 <tcp_pcb_remove>
        tcp_free(pcb);
 800dd28:	69f8      	ldr	r0, [r7, #28]
 800dd2a:	f7fd fed9 	bl	800bae0 <tcp_free>
 800dd2e:	e0c1      	b.n	800deb4 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800dd30:	2300      	movs	r3, #0
 800dd32:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800dd34:	4b88      	ldr	r3, [pc, #544]	; (800df58 <tcp_input+0x7e0>)
 800dd36:	881b      	ldrh	r3, [r3, #0]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d01d      	beq.n	800dd78 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800dd3c:	4b86      	ldr	r3, [pc, #536]	; (800df58 <tcp_input+0x7e0>)
 800dd3e:	881b      	ldrh	r3, [r3, #0]
 800dd40:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800dd42:	69fb      	ldr	r3, [r7, #28]
 800dd44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d00a      	beq.n	800dd62 <tcp_input+0x5ea>
 800dd4c:	69fb      	ldr	r3, [r7, #28]
 800dd4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd52:	69fa      	ldr	r2, [r7, #28]
 800dd54:	6910      	ldr	r0, [r2, #16]
 800dd56:	89fa      	ldrh	r2, [r7, #14]
 800dd58:	69f9      	ldr	r1, [r7, #28]
 800dd5a:	4798      	blx	r3
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	74fb      	strb	r3, [r7, #19]
 800dd60:	e001      	b.n	800dd66 <tcp_input+0x5ee>
 800dd62:	2300      	movs	r3, #0
 800dd64:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800dd66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dd6a:	f113 0f0d 	cmn.w	r3, #13
 800dd6e:	f000 8098 	beq.w	800dea2 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800dd72:	4b79      	ldr	r3, [pc, #484]	; (800df58 <tcp_input+0x7e0>)
 800dd74:	2200      	movs	r2, #0
 800dd76:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800dd78:	69f8      	ldr	r0, [r7, #28]
 800dd7a:	f000 f905 	bl	800df88 <tcp_input_delayed_close>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	f040 8090 	bne.w	800dea6 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800dd86:	4b75      	ldr	r3, [pc, #468]	; (800df5c <tcp_input+0x7e4>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d041      	beq.n	800de12 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800dd8e:	69fb      	ldr	r3, [r7, #28]
 800dd90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d006      	beq.n	800dda4 <tcp_input+0x62c>
 800dd96:	4b72      	ldr	r3, [pc, #456]	; (800df60 <tcp_input+0x7e8>)
 800dd98:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800dd9c:	4971      	ldr	r1, [pc, #452]	; (800df64 <tcp_input+0x7ec>)
 800dd9e:	4872      	ldr	r0, [pc, #456]	; (800df68 <tcp_input+0x7f0>)
 800dda0:	f009 f8d4 	bl	8016f4c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800dda4:	69fb      	ldr	r3, [r7, #28]
 800dda6:	8b5b      	ldrh	r3, [r3, #26]
 800dda8:	f003 0310 	and.w	r3, r3, #16
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d008      	beq.n	800ddc2 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ddb0:	4b6a      	ldr	r3, [pc, #424]	; (800df5c <tcp_input+0x7e4>)
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	f7fd fbd7 	bl	800b568 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ddba:	69f8      	ldr	r0, [r7, #28]
 800ddbc:	f7fe f9ca 	bl	800c154 <tcp_abort>
            goto aborted;
 800ddc0:	e078      	b.n	800deb4 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ddc2:	69fb      	ldr	r3, [r7, #28]
 800ddc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d00c      	beq.n	800dde6 <tcp_input+0x66e>
 800ddcc:	69fb      	ldr	r3, [r7, #28]
 800ddce:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ddd2:	69fb      	ldr	r3, [r7, #28]
 800ddd4:	6918      	ldr	r0, [r3, #16]
 800ddd6:	4b61      	ldr	r3, [pc, #388]	; (800df5c <tcp_input+0x7e4>)
 800ddd8:	681a      	ldr	r2, [r3, #0]
 800ddda:	2300      	movs	r3, #0
 800dddc:	69f9      	ldr	r1, [r7, #28]
 800ddde:	47a0      	blx	r4
 800dde0:	4603      	mov	r3, r0
 800dde2:	74fb      	strb	r3, [r7, #19]
 800dde4:	e008      	b.n	800ddf8 <tcp_input+0x680>
 800dde6:	4b5d      	ldr	r3, [pc, #372]	; (800df5c <tcp_input+0x7e4>)
 800dde8:	681a      	ldr	r2, [r3, #0]
 800ddea:	2300      	movs	r3, #0
 800ddec:	69f9      	ldr	r1, [r7, #28]
 800ddee:	2000      	movs	r0, #0
 800ddf0:	f7ff f884 	bl	800cefc <tcp_recv_null>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ddf8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ddfc:	f113 0f0d 	cmn.w	r3, #13
 800de00:	d053      	beq.n	800deaa <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800de02:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d003      	beq.n	800de12 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800de0a:	4b54      	ldr	r3, [pc, #336]	; (800df5c <tcp_input+0x7e4>)
 800de0c:	681a      	ldr	r2, [r3, #0]
 800de0e:	69fb      	ldr	r3, [r7, #28]
 800de10:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800de12:	4b4f      	ldr	r3, [pc, #316]	; (800df50 <tcp_input+0x7d8>)
 800de14:	781b      	ldrb	r3, [r3, #0]
 800de16:	f003 0320 	and.w	r3, r3, #32
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d030      	beq.n	800de80 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800de1e:	69fb      	ldr	r3, [r7, #28]
 800de20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de22:	2b00      	cmp	r3, #0
 800de24:	d009      	beq.n	800de3a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800de26:	69fb      	ldr	r3, [r7, #28]
 800de28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de2a:	7b5a      	ldrb	r2, [r3, #13]
 800de2c:	69fb      	ldr	r3, [r7, #28]
 800de2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de30:	f042 0220 	orr.w	r2, r2, #32
 800de34:	b2d2      	uxtb	r2, r2
 800de36:	735a      	strb	r2, [r3, #13]
 800de38:	e022      	b.n	800de80 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800de3a:	69fb      	ldr	r3, [r7, #28]
 800de3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de42:	d005      	beq.n	800de50 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800de44:	69fb      	ldr	r3, [r7, #28]
 800de46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de48:	3301      	adds	r3, #1
 800de4a:	b29a      	uxth	r2, r3
 800de4c:	69fb      	ldr	r3, [r7, #28]
 800de4e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800de50:	69fb      	ldr	r3, [r7, #28]
 800de52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de56:	2b00      	cmp	r3, #0
 800de58:	d00b      	beq.n	800de72 <tcp_input+0x6fa>
 800de5a:	69fb      	ldr	r3, [r7, #28]
 800de5c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800de60:	69fb      	ldr	r3, [r7, #28]
 800de62:	6918      	ldr	r0, [r3, #16]
 800de64:	2300      	movs	r3, #0
 800de66:	2200      	movs	r2, #0
 800de68:	69f9      	ldr	r1, [r7, #28]
 800de6a:	47a0      	blx	r4
 800de6c:	4603      	mov	r3, r0
 800de6e:	74fb      	strb	r3, [r7, #19]
 800de70:	e001      	b.n	800de76 <tcp_input+0x6fe>
 800de72:	2300      	movs	r3, #0
 800de74:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800de76:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800de7a:	f113 0f0d 	cmn.w	r3, #13
 800de7e:	d016      	beq.n	800deae <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800de80:	4b32      	ldr	r3, [pc, #200]	; (800df4c <tcp_input+0x7d4>)
 800de82:	2200      	movs	r2, #0
 800de84:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800de86:	69f8      	ldr	r0, [r7, #28]
 800de88:	f000 f87e 	bl	800df88 <tcp_input_delayed_close>
 800de8c:	4603      	mov	r3, r0
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d10f      	bne.n	800deb2 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800de92:	69f8      	ldr	r0, [r7, #28]
 800de94:	f002 ff10 	bl	8010cb8 <tcp_output>
 800de98:	e00c      	b.n	800deb4 <tcp_input+0x73c>
        goto aborted;
 800de9a:	bf00      	nop
 800de9c:	e00a      	b.n	800deb4 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800de9e:	bf00      	nop
 800dea0:	e008      	b.n	800deb4 <tcp_input+0x73c>
              goto aborted;
 800dea2:	bf00      	nop
 800dea4:	e006      	b.n	800deb4 <tcp_input+0x73c>
          goto aborted;
 800dea6:	bf00      	nop
 800dea8:	e004      	b.n	800deb4 <tcp_input+0x73c>
            goto aborted;
 800deaa:	bf00      	nop
 800deac:	e002      	b.n	800deb4 <tcp_input+0x73c>
              goto aborted;
 800deae:	bf00      	nop
 800deb0:	e000      	b.n	800deb4 <tcp_input+0x73c>
          goto aborted;
 800deb2:	bf00      	nop
    tcp_input_pcb = NULL;
 800deb4:	4b25      	ldr	r3, [pc, #148]	; (800df4c <tcp_input+0x7d4>)
 800deb6:	2200      	movs	r2, #0
 800deb8:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800deba:	4b28      	ldr	r3, [pc, #160]	; (800df5c <tcp_input+0x7e4>)
 800debc:	2200      	movs	r2, #0
 800debe:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800dec0:	4b2a      	ldr	r3, [pc, #168]	; (800df6c <tcp_input+0x7f4>)
 800dec2:	685b      	ldr	r3, [r3, #4]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d03d      	beq.n	800df44 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 800dec8:	4b28      	ldr	r3, [pc, #160]	; (800df6c <tcp_input+0x7f4>)
 800deca:	685b      	ldr	r3, [r3, #4]
 800decc:	4618      	mov	r0, r3
 800dece:	f7fd fb4b 	bl	800b568 <pbuf_free>
      inseg.p = NULL;
 800ded2:	4b26      	ldr	r3, [pc, #152]	; (800df6c <tcp_input+0x7f4>)
 800ded4:	2200      	movs	r2, #0
 800ded6:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ded8:	e034      	b.n	800df44 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800deda:	4b25      	ldr	r3, [pc, #148]	; (800df70 <tcp_input+0x7f8>)
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	899b      	ldrh	r3, [r3, #12]
 800dee0:	b29b      	uxth	r3, r3
 800dee2:	4618      	mov	r0, r3
 800dee4:	f7fc f80a 	bl	8009efc <lwip_htons>
 800dee8:	4603      	mov	r3, r0
 800deea:	b2db      	uxtb	r3, r3
 800deec:	f003 0304 	and.w	r3, r3, #4
 800def0:	2b00      	cmp	r3, #0
 800def2:	d118      	bne.n	800df26 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800def4:	4b1f      	ldr	r3, [pc, #124]	; (800df74 <tcp_input+0x7fc>)
 800def6:	6819      	ldr	r1, [r3, #0]
 800def8:	4b1f      	ldr	r3, [pc, #124]	; (800df78 <tcp_input+0x800>)
 800defa:	881b      	ldrh	r3, [r3, #0]
 800defc:	461a      	mov	r2, r3
 800defe:	4b1f      	ldr	r3, [pc, #124]	; (800df7c <tcp_input+0x804>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800df04:	4b1a      	ldr	r3, [pc, #104]	; (800df70 <tcp_input+0x7f8>)
 800df06:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df08:	885b      	ldrh	r3, [r3, #2]
 800df0a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800df0c:	4a18      	ldr	r2, [pc, #96]	; (800df70 <tcp_input+0x7f8>)
 800df0e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df10:	8812      	ldrh	r2, [r2, #0]
 800df12:	b292      	uxth	r2, r2
 800df14:	9202      	str	r2, [sp, #8]
 800df16:	9301      	str	r3, [sp, #4]
 800df18:	4b19      	ldr	r3, [pc, #100]	; (800df80 <tcp_input+0x808>)
 800df1a:	9300      	str	r3, [sp, #0]
 800df1c:	4b19      	ldr	r3, [pc, #100]	; (800df84 <tcp_input+0x80c>)
 800df1e:	4602      	mov	r2, r0
 800df20:	2000      	movs	r0, #0
 800df22:	f003 fc8d 	bl	8011840 <tcp_rst>
    pbuf_free(p);
 800df26:	6878      	ldr	r0, [r7, #4]
 800df28:	f7fd fb1e 	bl	800b568 <pbuf_free>
  return;
 800df2c:	e00a      	b.n	800df44 <tcp_input+0x7cc>
    goto dropped;
 800df2e:	bf00      	nop
 800df30:	e004      	b.n	800df3c <tcp_input+0x7c4>
dropped:
 800df32:	bf00      	nop
 800df34:	e002      	b.n	800df3c <tcp_input+0x7c4>
      goto dropped;
 800df36:	bf00      	nop
 800df38:	e000      	b.n	800df3c <tcp_input+0x7c4>
      goto dropped;
 800df3a:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800df3c:	6878      	ldr	r0, [r7, #4]
 800df3e:	f7fd fb13 	bl	800b568 <pbuf_free>
 800df42:	e000      	b.n	800df46 <tcp_input+0x7ce>
  return;
 800df44:	bf00      	nop
}
 800df46:	3724      	adds	r7, #36	; 0x24
 800df48:	46bd      	mov	sp, r7
 800df4a:	bd90      	pop	{r4, r7, pc}
 800df4c:	20010e8c 	.word	0x20010e8c
 800df50:	200081e9 	.word	0x200081e9
 800df54:	20010e78 	.word	0x20010e78
 800df58:	200081e4 	.word	0x200081e4
 800df5c:	200081ec 	.word	0x200081ec
 800df60:	080199f8 	.word	0x080199f8
 800df64:	08019bac 	.word	0x08019bac
 800df68:	08019a44 	.word	0x08019a44
 800df6c:	200081bc 	.word	0x200081bc
 800df70:	200081cc 	.word	0x200081cc
 800df74:	200081e0 	.word	0x200081e0
 800df78:	200081e6 	.word	0x200081e6
 800df7c:	200081dc 	.word	0x200081dc
 800df80:	2000b8d4 	.word	0x2000b8d4
 800df84:	2000b8d8 	.word	0x2000b8d8

0800df88 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b082      	sub	sp, #8
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d106      	bne.n	800dfa4 <tcp_input_delayed_close+0x1c>
 800df96:	4b17      	ldr	r3, [pc, #92]	; (800dff4 <tcp_input_delayed_close+0x6c>)
 800df98:	f240 225a 	movw	r2, #602	; 0x25a
 800df9c:	4916      	ldr	r1, [pc, #88]	; (800dff8 <tcp_input_delayed_close+0x70>)
 800df9e:	4817      	ldr	r0, [pc, #92]	; (800dffc <tcp_input_delayed_close+0x74>)
 800dfa0:	f008 ffd4 	bl	8016f4c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800dfa4:	4b16      	ldr	r3, [pc, #88]	; (800e000 <tcp_input_delayed_close+0x78>)
 800dfa6:	781b      	ldrb	r3, [r3, #0]
 800dfa8:	f003 0310 	and.w	r3, r3, #16
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d01c      	beq.n	800dfea <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	8b5b      	ldrh	r3, [r3, #26]
 800dfb4:	f003 0310 	and.w	r3, r3, #16
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d10d      	bne.n	800dfd8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d008      	beq.n	800dfd8 <tcp_input_delayed_close+0x50>
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dfcc:	687a      	ldr	r2, [r7, #4]
 800dfce:	6912      	ldr	r2, [r2, #16]
 800dfd0:	f06f 010e 	mvn.w	r1, #14
 800dfd4:	4610      	mov	r0, r2
 800dfd6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800dfd8:	6879      	ldr	r1, [r7, #4]
 800dfda:	480a      	ldr	r0, [pc, #40]	; (800e004 <tcp_input_delayed_close+0x7c>)
 800dfdc:	f7ff fa54 	bl	800d488 <tcp_pcb_remove>
    tcp_free(pcb);
 800dfe0:	6878      	ldr	r0, [r7, #4]
 800dfe2:	f7fd fd7d 	bl	800bae0 <tcp_free>
    return 1;
 800dfe6:	2301      	movs	r3, #1
 800dfe8:	e000      	b.n	800dfec <tcp_input_delayed_close+0x64>
  }
  return 0;
 800dfea:	2300      	movs	r3, #0
}
 800dfec:	4618      	mov	r0, r3
 800dfee:	3708      	adds	r7, #8
 800dff0:	46bd      	mov	sp, r7
 800dff2:	bd80      	pop	{r7, pc}
 800dff4:	080199f8 	.word	0x080199f8
 800dff8:	08019bc8 	.word	0x08019bc8
 800dffc:	08019a44 	.word	0x08019a44
 800e000:	200081e9 	.word	0x200081e9
 800e004:	20010e78 	.word	0x20010e78

0800e008 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e008:	b590      	push	{r4, r7, lr}
 800e00a:	b08b      	sub	sp, #44	; 0x2c
 800e00c:	af04      	add	r7, sp, #16
 800e00e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e010:	4b6f      	ldr	r3, [pc, #444]	; (800e1d0 <tcp_listen_input+0x1c8>)
 800e012:	781b      	ldrb	r3, [r3, #0]
 800e014:	f003 0304 	and.w	r3, r3, #4
 800e018:	2b00      	cmp	r3, #0
 800e01a:	f040 80d3 	bne.w	800e1c4 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d106      	bne.n	800e032 <tcp_listen_input+0x2a>
 800e024:	4b6b      	ldr	r3, [pc, #428]	; (800e1d4 <tcp_listen_input+0x1cc>)
 800e026:	f240 2281 	movw	r2, #641	; 0x281
 800e02a:	496b      	ldr	r1, [pc, #428]	; (800e1d8 <tcp_listen_input+0x1d0>)
 800e02c:	486b      	ldr	r0, [pc, #428]	; (800e1dc <tcp_listen_input+0x1d4>)
 800e02e:	f008 ff8d 	bl	8016f4c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e032:	4b67      	ldr	r3, [pc, #412]	; (800e1d0 <tcp_listen_input+0x1c8>)
 800e034:	781b      	ldrb	r3, [r3, #0]
 800e036:	f003 0310 	and.w	r3, r3, #16
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d019      	beq.n	800e072 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e03e:	4b68      	ldr	r3, [pc, #416]	; (800e1e0 <tcp_listen_input+0x1d8>)
 800e040:	6819      	ldr	r1, [r3, #0]
 800e042:	4b68      	ldr	r3, [pc, #416]	; (800e1e4 <tcp_listen_input+0x1dc>)
 800e044:	881b      	ldrh	r3, [r3, #0]
 800e046:	461a      	mov	r2, r3
 800e048:	4b67      	ldr	r3, [pc, #412]	; (800e1e8 <tcp_listen_input+0x1e0>)
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e04e:	4b67      	ldr	r3, [pc, #412]	; (800e1ec <tcp_listen_input+0x1e4>)
 800e050:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e052:	885b      	ldrh	r3, [r3, #2]
 800e054:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e056:	4a65      	ldr	r2, [pc, #404]	; (800e1ec <tcp_listen_input+0x1e4>)
 800e058:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e05a:	8812      	ldrh	r2, [r2, #0]
 800e05c:	b292      	uxth	r2, r2
 800e05e:	9202      	str	r2, [sp, #8]
 800e060:	9301      	str	r3, [sp, #4]
 800e062:	4b63      	ldr	r3, [pc, #396]	; (800e1f0 <tcp_listen_input+0x1e8>)
 800e064:	9300      	str	r3, [sp, #0]
 800e066:	4b63      	ldr	r3, [pc, #396]	; (800e1f4 <tcp_listen_input+0x1ec>)
 800e068:	4602      	mov	r2, r0
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f003 fbe8 	bl	8011840 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e070:	e0aa      	b.n	800e1c8 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800e072:	4b57      	ldr	r3, [pc, #348]	; (800e1d0 <tcp_listen_input+0x1c8>)
 800e074:	781b      	ldrb	r3, [r3, #0]
 800e076:	f003 0302 	and.w	r3, r3, #2
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	f000 80a4 	beq.w	800e1c8 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	7d5b      	ldrb	r3, [r3, #21]
 800e084:	4618      	mov	r0, r3
 800e086:	f7ff f85d 	bl	800d144 <tcp_alloc>
 800e08a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d111      	bne.n	800e0b6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	699b      	ldr	r3, [r3, #24]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d00a      	beq.n	800e0b0 <tcp_listen_input+0xa8>
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	699b      	ldr	r3, [r3, #24]
 800e09e:	687a      	ldr	r2, [r7, #4]
 800e0a0:	6910      	ldr	r0, [r2, #16]
 800e0a2:	f04f 32ff 	mov.w	r2, #4294967295
 800e0a6:	2100      	movs	r1, #0
 800e0a8:	4798      	blx	r3
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	73bb      	strb	r3, [r7, #14]
      return;
 800e0ae:	e08c      	b.n	800e1ca <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e0b0:	23f0      	movs	r3, #240	; 0xf0
 800e0b2:	73bb      	strb	r3, [r7, #14]
      return;
 800e0b4:	e089      	b.n	800e1ca <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e0b6:	4b50      	ldr	r3, [pc, #320]	; (800e1f8 <tcp_listen_input+0x1f0>)
 800e0b8:	695a      	ldr	r2, [r3, #20]
 800e0ba:	697b      	ldr	r3, [r7, #20]
 800e0bc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e0be:	4b4e      	ldr	r3, [pc, #312]	; (800e1f8 <tcp_listen_input+0x1f0>)
 800e0c0:	691a      	ldr	r2, [r3, #16]
 800e0c2:	697b      	ldr	r3, [r7, #20]
 800e0c4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	8ada      	ldrh	r2, [r3, #22]
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e0ce:	4b47      	ldr	r3, [pc, #284]	; (800e1ec <tcp_listen_input+0x1e4>)
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	881b      	ldrh	r3, [r3, #0]
 800e0d4:	b29a      	uxth	r2, r3
 800e0d6:	697b      	ldr	r3, [r7, #20]
 800e0d8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e0da:	697b      	ldr	r3, [r7, #20]
 800e0dc:	2203      	movs	r2, #3
 800e0de:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e0e0:	4b41      	ldr	r3, [pc, #260]	; (800e1e8 <tcp_listen_input+0x1e0>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	1c5a      	adds	r2, r3, #1
 800e0e6:	697b      	ldr	r3, [r7, #20]
 800e0e8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e0ea:	697b      	ldr	r3, [r7, #20]
 800e0ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e0ee:	697b      	ldr	r3, [r7, #20]
 800e0f0:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e0f2:	6978      	ldr	r0, [r7, #20]
 800e0f4:	f7ff fa5c 	bl	800d5b0 <tcp_next_iss>
 800e0f8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e0fa:	697b      	ldr	r3, [r7, #20]
 800e0fc:	693a      	ldr	r2, [r7, #16]
 800e0fe:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e100:	697b      	ldr	r3, [r7, #20]
 800e102:	693a      	ldr	r2, [r7, #16]
 800e104:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	693a      	ldr	r2, [r7, #16]
 800e10a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e10c:	697b      	ldr	r3, [r7, #20]
 800e10e:	693a      	ldr	r2, [r7, #16]
 800e110:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e112:	4b35      	ldr	r3, [pc, #212]	; (800e1e8 <tcp_listen_input+0x1e0>)
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	1e5a      	subs	r2, r3, #1
 800e118:	697b      	ldr	r3, [r7, #20]
 800e11a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	691a      	ldr	r2, [r3, #16]
 800e120:	697b      	ldr	r3, [r7, #20]
 800e122:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e124:	697b      	ldr	r3, [r7, #20]
 800e126:	687a      	ldr	r2, [r7, #4]
 800e128:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	7a5b      	ldrb	r3, [r3, #9]
 800e12e:	f003 030c 	and.w	r3, r3, #12
 800e132:	b2da      	uxtb	r2, r3
 800e134:	697b      	ldr	r3, [r7, #20]
 800e136:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	7a1a      	ldrb	r2, [r3, #8]
 800e13c:	697b      	ldr	r3, [r7, #20]
 800e13e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e140:	4b2e      	ldr	r3, [pc, #184]	; (800e1fc <tcp_listen_input+0x1f4>)
 800e142:	681a      	ldr	r2, [r3, #0]
 800e144:	697b      	ldr	r3, [r7, #20]
 800e146:	60da      	str	r2, [r3, #12]
 800e148:	4a2c      	ldr	r2, [pc, #176]	; (800e1fc <tcp_listen_input+0x1f4>)
 800e14a:	697b      	ldr	r3, [r7, #20]
 800e14c:	6013      	str	r3, [r2, #0]
 800e14e:	f003 fd37 	bl	8011bc0 <tcp_timer_needed>
 800e152:	4b2b      	ldr	r3, [pc, #172]	; (800e200 <tcp_listen_input+0x1f8>)
 800e154:	2201      	movs	r2, #1
 800e156:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e158:	6978      	ldr	r0, [r7, #20]
 800e15a:	f001 fd8f 	bl	800fc7c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e15e:	4b23      	ldr	r3, [pc, #140]	; (800e1ec <tcp_listen_input+0x1e4>)
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	89db      	ldrh	r3, [r3, #14]
 800e164:	b29a      	uxth	r2, r3
 800e166:	697b      	ldr	r3, [r7, #20]
 800e168:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e16c:	697b      	ldr	r3, [r7, #20]
 800e16e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e178:	697b      	ldr	r3, [r7, #20]
 800e17a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e17c:	697b      	ldr	r3, [r7, #20]
 800e17e:	3304      	adds	r3, #4
 800e180:	4618      	mov	r0, r3
 800e182:	f007 fa8f 	bl	80156a4 <ip4_route>
 800e186:	4601      	mov	r1, r0
 800e188:	697b      	ldr	r3, [r7, #20]
 800e18a:	3304      	adds	r3, #4
 800e18c:	461a      	mov	r2, r3
 800e18e:	4620      	mov	r0, r4
 800e190:	f7ff fa34 	bl	800d5fc <tcp_eff_send_mss_netif>
 800e194:	4603      	mov	r3, r0
 800e196:	461a      	mov	r2, r3
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e19c:	2112      	movs	r1, #18
 800e19e:	6978      	ldr	r0, [r7, #20]
 800e1a0:	f002 fc9c 	bl	8010adc <tcp_enqueue_flags>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e1a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d004      	beq.n	800e1ba <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e1b0:	2100      	movs	r1, #0
 800e1b2:	6978      	ldr	r0, [r7, #20]
 800e1b4:	f7fd ff10 	bl	800bfd8 <tcp_abandon>
      return;
 800e1b8:	e007      	b.n	800e1ca <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 800e1ba:	6978      	ldr	r0, [r7, #20]
 800e1bc:	f002 fd7c 	bl	8010cb8 <tcp_output>
  return;
 800e1c0:	bf00      	nop
 800e1c2:	e001      	b.n	800e1c8 <tcp_listen_input+0x1c0>
    return;
 800e1c4:	bf00      	nop
 800e1c6:	e000      	b.n	800e1ca <tcp_listen_input+0x1c2>
  return;
 800e1c8:	bf00      	nop
}
 800e1ca:	371c      	adds	r7, #28
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd90      	pop	{r4, r7, pc}
 800e1d0:	200081e8 	.word	0x200081e8
 800e1d4:	080199f8 	.word	0x080199f8
 800e1d8:	08019bf0 	.word	0x08019bf0
 800e1dc:	08019a44 	.word	0x08019a44
 800e1e0:	200081e0 	.word	0x200081e0
 800e1e4:	200081e6 	.word	0x200081e6
 800e1e8:	200081dc 	.word	0x200081dc
 800e1ec:	200081cc 	.word	0x200081cc
 800e1f0:	2000b8d4 	.word	0x2000b8d4
 800e1f4:	2000b8d8 	.word	0x2000b8d8
 800e1f8:	2000b8c4 	.word	0x2000b8c4
 800e1fc:	20010e78 	.word	0x20010e78
 800e200:	20010e74 	.word	0x20010e74

0800e204 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b086      	sub	sp, #24
 800e208:	af04      	add	r7, sp, #16
 800e20a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e20c:	4b30      	ldr	r3, [pc, #192]	; (800e2d0 <tcp_timewait_input+0xcc>)
 800e20e:	781b      	ldrb	r3, [r3, #0]
 800e210:	f003 0304 	and.w	r3, r3, #4
 800e214:	2b00      	cmp	r3, #0
 800e216:	d154      	bne.n	800e2c2 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d106      	bne.n	800e22c <tcp_timewait_input+0x28>
 800e21e:	4b2d      	ldr	r3, [pc, #180]	; (800e2d4 <tcp_timewait_input+0xd0>)
 800e220:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e224:	492c      	ldr	r1, [pc, #176]	; (800e2d8 <tcp_timewait_input+0xd4>)
 800e226:	482d      	ldr	r0, [pc, #180]	; (800e2dc <tcp_timewait_input+0xd8>)
 800e228:	f008 fe90 	bl	8016f4c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e22c:	4b28      	ldr	r3, [pc, #160]	; (800e2d0 <tcp_timewait_input+0xcc>)
 800e22e:	781b      	ldrb	r3, [r3, #0]
 800e230:	f003 0302 	and.w	r3, r3, #2
 800e234:	2b00      	cmp	r3, #0
 800e236:	d02a      	beq.n	800e28e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e238:	4b29      	ldr	r3, [pc, #164]	; (800e2e0 <tcp_timewait_input+0xdc>)
 800e23a:	681a      	ldr	r2, [r3, #0]
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e240:	1ad3      	subs	r3, r2, r3
 800e242:	2b00      	cmp	r3, #0
 800e244:	db2d      	blt.n	800e2a2 <tcp_timewait_input+0x9e>
 800e246:	4b26      	ldr	r3, [pc, #152]	; (800e2e0 <tcp_timewait_input+0xdc>)
 800e248:	681a      	ldr	r2, [r3, #0]
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e24e:	6879      	ldr	r1, [r7, #4]
 800e250:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e252:	440b      	add	r3, r1
 800e254:	1ad3      	subs	r3, r2, r3
 800e256:	2b00      	cmp	r3, #0
 800e258:	dc23      	bgt.n	800e2a2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e25a:	4b22      	ldr	r3, [pc, #136]	; (800e2e4 <tcp_timewait_input+0xe0>)
 800e25c:	6819      	ldr	r1, [r3, #0]
 800e25e:	4b22      	ldr	r3, [pc, #136]	; (800e2e8 <tcp_timewait_input+0xe4>)
 800e260:	881b      	ldrh	r3, [r3, #0]
 800e262:	461a      	mov	r2, r3
 800e264:	4b1e      	ldr	r3, [pc, #120]	; (800e2e0 <tcp_timewait_input+0xdc>)
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e26a:	4b20      	ldr	r3, [pc, #128]	; (800e2ec <tcp_timewait_input+0xe8>)
 800e26c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e26e:	885b      	ldrh	r3, [r3, #2]
 800e270:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e272:	4a1e      	ldr	r2, [pc, #120]	; (800e2ec <tcp_timewait_input+0xe8>)
 800e274:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e276:	8812      	ldrh	r2, [r2, #0]
 800e278:	b292      	uxth	r2, r2
 800e27a:	9202      	str	r2, [sp, #8]
 800e27c:	9301      	str	r3, [sp, #4]
 800e27e:	4b1c      	ldr	r3, [pc, #112]	; (800e2f0 <tcp_timewait_input+0xec>)
 800e280:	9300      	str	r3, [sp, #0]
 800e282:	4b1c      	ldr	r3, [pc, #112]	; (800e2f4 <tcp_timewait_input+0xf0>)
 800e284:	4602      	mov	r2, r0
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	f003 fada 	bl	8011840 <tcp_rst>
      return;
 800e28c:	e01c      	b.n	800e2c8 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 800e28e:	4b10      	ldr	r3, [pc, #64]	; (800e2d0 <tcp_timewait_input+0xcc>)
 800e290:	781b      	ldrb	r3, [r3, #0]
 800e292:	f003 0301 	and.w	r3, r3, #1
 800e296:	2b00      	cmp	r3, #0
 800e298:	d003      	beq.n	800e2a2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e29a:	4b17      	ldr	r3, [pc, #92]	; (800e2f8 <tcp_timewait_input+0xf4>)
 800e29c:	681a      	ldr	r2, [r3, #0]
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e2a2:	4b11      	ldr	r3, [pc, #68]	; (800e2e8 <tcp_timewait_input+0xe4>)
 800e2a4:	881b      	ldrh	r3, [r3, #0]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d00d      	beq.n	800e2c6 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	8b5b      	ldrh	r3, [r3, #26]
 800e2ae:	f043 0302 	orr.w	r3, r3, #2
 800e2b2:	b29a      	uxth	r2, r3
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	f002 fcfd 	bl	8010cb8 <tcp_output>
  }
  return;
 800e2be:	bf00      	nop
 800e2c0:	e001      	b.n	800e2c6 <tcp_timewait_input+0xc2>
    return;
 800e2c2:	bf00      	nop
 800e2c4:	e000      	b.n	800e2c8 <tcp_timewait_input+0xc4>
  return;
 800e2c6:	bf00      	nop
}
 800e2c8:	3708      	adds	r7, #8
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}
 800e2ce:	bf00      	nop
 800e2d0:	200081e8 	.word	0x200081e8
 800e2d4:	080199f8 	.word	0x080199f8
 800e2d8:	08019c10 	.word	0x08019c10
 800e2dc:	08019a44 	.word	0x08019a44
 800e2e0:	200081dc 	.word	0x200081dc
 800e2e4:	200081e0 	.word	0x200081e0
 800e2e8:	200081e6 	.word	0x200081e6
 800e2ec:	200081cc 	.word	0x200081cc
 800e2f0:	2000b8d4 	.word	0x2000b8d4
 800e2f4:	2000b8d8 	.word	0x2000b8d8
 800e2f8:	20010e7c 	.word	0x20010e7c

0800e2fc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e2fc:	b590      	push	{r4, r7, lr}
 800e2fe:	b08d      	sub	sp, #52	; 0x34
 800e300:	af04      	add	r7, sp, #16
 800e302:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e304:	2300      	movs	r3, #0
 800e306:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e308:	2300      	movs	r3, #0
 800e30a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d106      	bne.n	800e320 <tcp_process+0x24>
 800e312:	4ba5      	ldr	r3, [pc, #660]	; (800e5a8 <tcp_process+0x2ac>)
 800e314:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e318:	49a4      	ldr	r1, [pc, #656]	; (800e5ac <tcp_process+0x2b0>)
 800e31a:	48a5      	ldr	r0, [pc, #660]	; (800e5b0 <tcp_process+0x2b4>)
 800e31c:	f008 fe16 	bl	8016f4c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e320:	4ba4      	ldr	r3, [pc, #656]	; (800e5b4 <tcp_process+0x2b8>)
 800e322:	781b      	ldrb	r3, [r3, #0]
 800e324:	f003 0304 	and.w	r3, r3, #4
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d04e      	beq.n	800e3ca <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	7d1b      	ldrb	r3, [r3, #20]
 800e330:	2b02      	cmp	r3, #2
 800e332:	d108      	bne.n	800e346 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e338:	4b9f      	ldr	r3, [pc, #636]	; (800e5b8 <tcp_process+0x2bc>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	429a      	cmp	r2, r3
 800e33e:	d123      	bne.n	800e388 <tcp_process+0x8c>
        acceptable = 1;
 800e340:	2301      	movs	r3, #1
 800e342:	76fb      	strb	r3, [r7, #27]
 800e344:	e020      	b.n	800e388 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e34a:	4b9c      	ldr	r3, [pc, #624]	; (800e5bc <tcp_process+0x2c0>)
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	429a      	cmp	r2, r3
 800e350:	d102      	bne.n	800e358 <tcp_process+0x5c>
        acceptable = 1;
 800e352:	2301      	movs	r3, #1
 800e354:	76fb      	strb	r3, [r7, #27]
 800e356:	e017      	b.n	800e388 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e358:	4b98      	ldr	r3, [pc, #608]	; (800e5bc <tcp_process+0x2c0>)
 800e35a:	681a      	ldr	r2, [r3, #0]
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e360:	1ad3      	subs	r3, r2, r3
 800e362:	2b00      	cmp	r3, #0
 800e364:	db10      	blt.n	800e388 <tcp_process+0x8c>
 800e366:	4b95      	ldr	r3, [pc, #596]	; (800e5bc <tcp_process+0x2c0>)
 800e368:	681a      	ldr	r2, [r3, #0]
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e36e:	6879      	ldr	r1, [r7, #4]
 800e370:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e372:	440b      	add	r3, r1
 800e374:	1ad3      	subs	r3, r2, r3
 800e376:	2b00      	cmp	r3, #0
 800e378:	dc06      	bgt.n	800e388 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	8b5b      	ldrh	r3, [r3, #26]
 800e37e:	f043 0302 	orr.w	r3, r3, #2
 800e382:	b29a      	uxth	r2, r3
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e388:	7efb      	ldrb	r3, [r7, #27]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d01b      	beq.n	800e3c6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	7d1b      	ldrb	r3, [r3, #20]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d106      	bne.n	800e3a4 <tcp_process+0xa8>
 800e396:	4b84      	ldr	r3, [pc, #528]	; (800e5a8 <tcp_process+0x2ac>)
 800e398:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e39c:	4988      	ldr	r1, [pc, #544]	; (800e5c0 <tcp_process+0x2c4>)
 800e39e:	4884      	ldr	r0, [pc, #528]	; (800e5b0 <tcp_process+0x2b4>)
 800e3a0:	f008 fdd4 	bl	8016f4c <iprintf>
      recv_flags |= TF_RESET;
 800e3a4:	4b87      	ldr	r3, [pc, #540]	; (800e5c4 <tcp_process+0x2c8>)
 800e3a6:	781b      	ldrb	r3, [r3, #0]
 800e3a8:	f043 0308 	orr.w	r3, r3, #8
 800e3ac:	b2da      	uxtb	r2, r3
 800e3ae:	4b85      	ldr	r3, [pc, #532]	; (800e5c4 <tcp_process+0x2c8>)
 800e3b0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	8b5b      	ldrh	r3, [r3, #26]
 800e3b6:	f023 0301 	bic.w	r3, r3, #1
 800e3ba:	b29a      	uxth	r2, r3
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e3c0:	f06f 030d 	mvn.w	r3, #13
 800e3c4:	e37a      	b.n	800eabc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	e378      	b.n	800eabc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e3ca:	4b7a      	ldr	r3, [pc, #488]	; (800e5b4 <tcp_process+0x2b8>)
 800e3cc:	781b      	ldrb	r3, [r3, #0]
 800e3ce:	f003 0302 	and.w	r3, r3, #2
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d010      	beq.n	800e3f8 <tcp_process+0xfc>
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	7d1b      	ldrb	r3, [r3, #20]
 800e3da:	2b02      	cmp	r3, #2
 800e3dc:	d00c      	beq.n	800e3f8 <tcp_process+0xfc>
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	7d1b      	ldrb	r3, [r3, #20]
 800e3e2:	2b03      	cmp	r3, #3
 800e3e4:	d008      	beq.n	800e3f8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	8b5b      	ldrh	r3, [r3, #26]
 800e3ea:	f043 0302 	orr.w	r3, r3, #2
 800e3ee:	b29a      	uxth	r2, r3
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	e361      	b.n	800eabc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	8b5b      	ldrh	r3, [r3, #26]
 800e3fc:	f003 0310 	and.w	r3, r3, #16
 800e400:	2b00      	cmp	r3, #0
 800e402:	d103      	bne.n	800e40c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e404:	4b70      	ldr	r3, [pc, #448]	; (800e5c8 <tcp_process+0x2cc>)
 800e406:	681a      	ldr	r2, [r3, #0]
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	2200      	movs	r2, #0
 800e410:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	2200      	movs	r2, #0
 800e418:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800e41c:	6878      	ldr	r0, [r7, #4]
 800e41e:	f001 fc2d 	bl	800fc7c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	7d1b      	ldrb	r3, [r3, #20]
 800e426:	3b02      	subs	r3, #2
 800e428:	2b07      	cmp	r3, #7
 800e42a:	f200 8337 	bhi.w	800ea9c <tcp_process+0x7a0>
 800e42e:	a201      	add	r2, pc, #4	; (adr r2, 800e434 <tcp_process+0x138>)
 800e430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e434:	0800e455 	.word	0x0800e455
 800e438:	0800e685 	.word	0x0800e685
 800e43c:	0800e7fd 	.word	0x0800e7fd
 800e440:	0800e827 	.word	0x0800e827
 800e444:	0800e94b 	.word	0x0800e94b
 800e448:	0800e7fd 	.word	0x0800e7fd
 800e44c:	0800e9d7 	.word	0x0800e9d7
 800e450:	0800ea67 	.word	0x0800ea67
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e454:	4b57      	ldr	r3, [pc, #348]	; (800e5b4 <tcp_process+0x2b8>)
 800e456:	781b      	ldrb	r3, [r3, #0]
 800e458:	f003 0310 	and.w	r3, r3, #16
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	f000 80e4 	beq.w	800e62a <tcp_process+0x32e>
 800e462:	4b54      	ldr	r3, [pc, #336]	; (800e5b4 <tcp_process+0x2b8>)
 800e464:	781b      	ldrb	r3, [r3, #0]
 800e466:	f003 0302 	and.w	r3, r3, #2
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	f000 80dd 	beq.w	800e62a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e474:	1c5a      	adds	r2, r3, #1
 800e476:	4b50      	ldr	r3, [pc, #320]	; (800e5b8 <tcp_process+0x2bc>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	429a      	cmp	r2, r3
 800e47c:	f040 80d5 	bne.w	800e62a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e480:	4b4e      	ldr	r3, [pc, #312]	; (800e5bc <tcp_process+0x2c0>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	1c5a      	adds	r2, r3, #1
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800e492:	4b49      	ldr	r3, [pc, #292]	; (800e5b8 <tcp_process+0x2bc>)
 800e494:	681a      	ldr	r2, [r3, #0]
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e49a:	4b4c      	ldr	r3, [pc, #304]	; (800e5cc <tcp_process+0x2d0>)
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	89db      	ldrh	r3, [r3, #14]
 800e4a0:	b29a      	uxth	r2, r3
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e4b4:	4b41      	ldr	r3, [pc, #260]	; (800e5bc <tcp_process+0x2c0>)
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	1e5a      	subs	r2, r3, #1
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	2204      	movs	r2, #4
 800e4c2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	3304      	adds	r3, #4
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f007 f8e9 	bl	80156a4 <ip4_route>
 800e4d2:	4601      	mov	r1, r0
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	3304      	adds	r3, #4
 800e4d8:	461a      	mov	r2, r3
 800e4da:	4620      	mov	r0, r4
 800e4dc:	f7ff f88e 	bl	800d5fc <tcp_eff_send_mss_netif>
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	461a      	mov	r2, r3
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e4ec:	009a      	lsls	r2, r3, #2
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e4f2:	005b      	lsls	r3, r3, #1
 800e4f4:	f241 111c 	movw	r1, #4380	; 0x111c
 800e4f8:	428b      	cmp	r3, r1
 800e4fa:	bf38      	it	cc
 800e4fc:	460b      	movcc	r3, r1
 800e4fe:	429a      	cmp	r2, r3
 800e500:	d204      	bcs.n	800e50c <tcp_process+0x210>
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e506:	009b      	lsls	r3, r3, #2
 800e508:	b29b      	uxth	r3, r3
 800e50a:	e00d      	b.n	800e528 <tcp_process+0x22c>
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e510:	005b      	lsls	r3, r3, #1
 800e512:	f241 121c 	movw	r2, #4380	; 0x111c
 800e516:	4293      	cmp	r3, r2
 800e518:	d904      	bls.n	800e524 <tcp_process+0x228>
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e51e:	005b      	lsls	r3, r3, #1
 800e520:	b29b      	uxth	r3, r3
 800e522:	e001      	b.n	800e528 <tcp_process+0x22c>
 800e524:	f241 131c 	movw	r3, #4380	; 0x111c
 800e528:	687a      	ldr	r2, [r7, #4]
 800e52a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e534:	2b00      	cmp	r3, #0
 800e536:	d106      	bne.n	800e546 <tcp_process+0x24a>
 800e538:	4b1b      	ldr	r3, [pc, #108]	; (800e5a8 <tcp_process+0x2ac>)
 800e53a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800e53e:	4924      	ldr	r1, [pc, #144]	; (800e5d0 <tcp_process+0x2d4>)
 800e540:	481b      	ldr	r0, [pc, #108]	; (800e5b0 <tcp_process+0x2b4>)
 800e542:	f008 fd03 	bl	8016f4c <iprintf>
        --pcb->snd_queuelen;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e54c:	3b01      	subs	r3, #1
 800e54e:	b29a      	uxth	r2, r3
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e55a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e55c:	69fb      	ldr	r3, [r7, #28]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d111      	bne.n	800e586 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e566:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e568:	69fb      	ldr	r3, [r7, #28]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d106      	bne.n	800e57c <tcp_process+0x280>
 800e56e:	4b0e      	ldr	r3, [pc, #56]	; (800e5a8 <tcp_process+0x2ac>)
 800e570:	f44f 725d 	mov.w	r2, #884	; 0x374
 800e574:	4917      	ldr	r1, [pc, #92]	; (800e5d4 <tcp_process+0x2d8>)
 800e576:	480e      	ldr	r0, [pc, #56]	; (800e5b0 <tcp_process+0x2b4>)
 800e578:	f008 fce8 	bl	8016f4c <iprintf>
          pcb->unsent = rseg->next;
 800e57c:	69fb      	ldr	r3, [r7, #28]
 800e57e:	681a      	ldr	r2, [r3, #0]
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	66da      	str	r2, [r3, #108]	; 0x6c
 800e584:	e003      	b.n	800e58e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800e586:	69fb      	ldr	r3, [r7, #28]
 800e588:	681a      	ldr	r2, [r3, #0]
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800e58e:	69f8      	ldr	r0, [r7, #28]
 800e590:	f7fe fc70 	bl	800ce74 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d11d      	bne.n	800e5d8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e5a2:	861a      	strh	r2, [r3, #48]	; 0x30
 800e5a4:	e01f      	b.n	800e5e6 <tcp_process+0x2ea>
 800e5a6:	bf00      	nop
 800e5a8:	080199f8 	.word	0x080199f8
 800e5ac:	08019c30 	.word	0x08019c30
 800e5b0:	08019a44 	.word	0x08019a44
 800e5b4:	200081e8 	.word	0x200081e8
 800e5b8:	200081e0 	.word	0x200081e0
 800e5bc:	200081dc 	.word	0x200081dc
 800e5c0:	08019c4c 	.word	0x08019c4c
 800e5c4:	200081e9 	.word	0x200081e9
 800e5c8:	20010e7c 	.word	0x20010e7c
 800e5cc:	200081cc 	.word	0x200081cc
 800e5d0:	08019c6c 	.word	0x08019c6c
 800e5d4:	08019c84 	.word	0x08019c84
        } else {
          pcb->rtime = 0;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2200      	movs	r2, #0
 800e5dc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d00a      	beq.n	800e606 <tcp_process+0x30a>
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e5f6:	687a      	ldr	r2, [r7, #4]
 800e5f8:	6910      	ldr	r0, [r2, #16]
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	6879      	ldr	r1, [r7, #4]
 800e5fe:	4798      	blx	r3
 800e600:	4603      	mov	r3, r0
 800e602:	76bb      	strb	r3, [r7, #26]
 800e604:	e001      	b.n	800e60a <tcp_process+0x30e>
 800e606:	2300      	movs	r3, #0
 800e608:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e60a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e60e:	f113 0f0d 	cmn.w	r3, #13
 800e612:	d102      	bne.n	800e61a <tcp_process+0x31e>
          return ERR_ABRT;
 800e614:	f06f 030c 	mvn.w	r3, #12
 800e618:	e250      	b.n	800eabc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	8b5b      	ldrh	r3, [r3, #26]
 800e61e:	f043 0302 	orr.w	r3, r3, #2
 800e622:	b29a      	uxth	r2, r3
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e628:	e23a      	b.n	800eaa0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e62a:	4b9d      	ldr	r3, [pc, #628]	; (800e8a0 <tcp_process+0x5a4>)
 800e62c:	781b      	ldrb	r3, [r3, #0]
 800e62e:	f003 0310 	and.w	r3, r3, #16
 800e632:	2b00      	cmp	r3, #0
 800e634:	f000 8234 	beq.w	800eaa0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e638:	4b9a      	ldr	r3, [pc, #616]	; (800e8a4 <tcp_process+0x5a8>)
 800e63a:	6819      	ldr	r1, [r3, #0]
 800e63c:	4b9a      	ldr	r3, [pc, #616]	; (800e8a8 <tcp_process+0x5ac>)
 800e63e:	881b      	ldrh	r3, [r3, #0]
 800e640:	461a      	mov	r2, r3
 800e642:	4b9a      	ldr	r3, [pc, #616]	; (800e8ac <tcp_process+0x5b0>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e648:	4b99      	ldr	r3, [pc, #612]	; (800e8b0 <tcp_process+0x5b4>)
 800e64a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e64c:	885b      	ldrh	r3, [r3, #2]
 800e64e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e650:	4a97      	ldr	r2, [pc, #604]	; (800e8b0 <tcp_process+0x5b4>)
 800e652:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e654:	8812      	ldrh	r2, [r2, #0]
 800e656:	b292      	uxth	r2, r2
 800e658:	9202      	str	r2, [sp, #8]
 800e65a:	9301      	str	r3, [sp, #4]
 800e65c:	4b95      	ldr	r3, [pc, #596]	; (800e8b4 <tcp_process+0x5b8>)
 800e65e:	9300      	str	r3, [sp, #0]
 800e660:	4b95      	ldr	r3, [pc, #596]	; (800e8b8 <tcp_process+0x5bc>)
 800e662:	4602      	mov	r2, r0
 800e664:	6878      	ldr	r0, [r7, #4]
 800e666:	f003 f8eb 	bl	8011840 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e670:	2b05      	cmp	r3, #5
 800e672:	f200 8215 	bhi.w	800eaa0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2200      	movs	r2, #0
 800e67a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f002 feab 	bl	80113d8 <tcp_rexmit_rto>
      break;
 800e682:	e20d      	b.n	800eaa0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e684:	4b86      	ldr	r3, [pc, #536]	; (800e8a0 <tcp_process+0x5a4>)
 800e686:	781b      	ldrb	r3, [r3, #0]
 800e688:	f003 0310 	and.w	r3, r3, #16
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	f000 80a1 	beq.w	800e7d4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e692:	4b84      	ldr	r3, [pc, #528]	; (800e8a4 <tcp_process+0x5a8>)
 800e694:	681a      	ldr	r2, [r3, #0]
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e69a:	1ad3      	subs	r3, r2, r3
 800e69c:	3b01      	subs	r3, #1
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	db7e      	blt.n	800e7a0 <tcp_process+0x4a4>
 800e6a2:	4b80      	ldr	r3, [pc, #512]	; (800e8a4 <tcp_process+0x5a8>)
 800e6a4:	681a      	ldr	r2, [r3, #0]
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6aa:	1ad3      	subs	r3, r2, r3
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	dc77      	bgt.n	800e7a0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2204      	movs	r2, #4
 800e6b4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d102      	bne.n	800e6c4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e6be:	23fa      	movs	r3, #250	; 0xfa
 800e6c0:	76bb      	strb	r3, [r7, #26]
 800e6c2:	e01d      	b.n	800e700 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6c8:	699b      	ldr	r3, [r3, #24]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d106      	bne.n	800e6dc <tcp_process+0x3e0>
 800e6ce:	4b7b      	ldr	r3, [pc, #492]	; (800e8bc <tcp_process+0x5c0>)
 800e6d0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800e6d4:	497a      	ldr	r1, [pc, #488]	; (800e8c0 <tcp_process+0x5c4>)
 800e6d6:	487b      	ldr	r0, [pc, #492]	; (800e8c4 <tcp_process+0x5c8>)
 800e6d8:	f008 fc38 	bl	8016f4c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6e0:	699b      	ldr	r3, [r3, #24]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d00a      	beq.n	800e6fc <tcp_process+0x400>
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6ea:	699b      	ldr	r3, [r3, #24]
 800e6ec:	687a      	ldr	r2, [r7, #4]
 800e6ee:	6910      	ldr	r0, [r2, #16]
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	6879      	ldr	r1, [r7, #4]
 800e6f4:	4798      	blx	r3
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	76bb      	strb	r3, [r7, #26]
 800e6fa:	e001      	b.n	800e700 <tcp_process+0x404>
 800e6fc:	23f0      	movs	r3, #240	; 0xf0
 800e6fe:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e700:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d00a      	beq.n	800e71e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e708:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e70c:	f113 0f0d 	cmn.w	r3, #13
 800e710:	d002      	beq.n	800e718 <tcp_process+0x41c>
              tcp_abort(pcb);
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	f7fd fd1e 	bl	800c154 <tcp_abort>
            }
            return ERR_ABRT;
 800e718:	f06f 030c 	mvn.w	r3, #12
 800e71c:	e1ce      	b.n	800eabc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f000 fae0 	bl	800ece4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e724:	4b68      	ldr	r3, [pc, #416]	; (800e8c8 <tcp_process+0x5cc>)
 800e726:	881b      	ldrh	r3, [r3, #0]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d005      	beq.n	800e738 <tcp_process+0x43c>
            recv_acked--;
 800e72c:	4b66      	ldr	r3, [pc, #408]	; (800e8c8 <tcp_process+0x5cc>)
 800e72e:	881b      	ldrh	r3, [r3, #0]
 800e730:	3b01      	subs	r3, #1
 800e732:	b29a      	uxth	r2, r3
 800e734:	4b64      	ldr	r3, [pc, #400]	; (800e8c8 <tcp_process+0x5cc>)
 800e736:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e73c:	009a      	lsls	r2, r3, #2
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e742:	005b      	lsls	r3, r3, #1
 800e744:	f241 111c 	movw	r1, #4380	; 0x111c
 800e748:	428b      	cmp	r3, r1
 800e74a:	bf38      	it	cc
 800e74c:	460b      	movcc	r3, r1
 800e74e:	429a      	cmp	r2, r3
 800e750:	d204      	bcs.n	800e75c <tcp_process+0x460>
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e756:	009b      	lsls	r3, r3, #2
 800e758:	b29b      	uxth	r3, r3
 800e75a:	e00d      	b.n	800e778 <tcp_process+0x47c>
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e760:	005b      	lsls	r3, r3, #1
 800e762:	f241 121c 	movw	r2, #4380	; 0x111c
 800e766:	4293      	cmp	r3, r2
 800e768:	d904      	bls.n	800e774 <tcp_process+0x478>
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e76e:	005b      	lsls	r3, r3, #1
 800e770:	b29b      	uxth	r3, r3
 800e772:	e001      	b.n	800e778 <tcp_process+0x47c>
 800e774:	f241 131c 	movw	r3, #4380	; 0x111c
 800e778:	687a      	ldr	r2, [r7, #4]
 800e77a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e77e:	4b53      	ldr	r3, [pc, #332]	; (800e8cc <tcp_process+0x5d0>)
 800e780:	781b      	ldrb	r3, [r3, #0]
 800e782:	f003 0320 	and.w	r3, r3, #32
 800e786:	2b00      	cmp	r3, #0
 800e788:	d037      	beq.n	800e7fa <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	8b5b      	ldrh	r3, [r3, #26]
 800e78e:	f043 0302 	orr.w	r3, r3, #2
 800e792:	b29a      	uxth	r2, r3
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	2207      	movs	r2, #7
 800e79c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e79e:	e02c      	b.n	800e7fa <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7a0:	4b40      	ldr	r3, [pc, #256]	; (800e8a4 <tcp_process+0x5a8>)
 800e7a2:	6819      	ldr	r1, [r3, #0]
 800e7a4:	4b40      	ldr	r3, [pc, #256]	; (800e8a8 <tcp_process+0x5ac>)
 800e7a6:	881b      	ldrh	r3, [r3, #0]
 800e7a8:	461a      	mov	r2, r3
 800e7aa:	4b40      	ldr	r3, [pc, #256]	; (800e8ac <tcp_process+0x5b0>)
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e7b0:	4b3f      	ldr	r3, [pc, #252]	; (800e8b0 <tcp_process+0x5b4>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7b4:	885b      	ldrh	r3, [r3, #2]
 800e7b6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e7b8:	4a3d      	ldr	r2, [pc, #244]	; (800e8b0 <tcp_process+0x5b4>)
 800e7ba:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7bc:	8812      	ldrh	r2, [r2, #0]
 800e7be:	b292      	uxth	r2, r2
 800e7c0:	9202      	str	r2, [sp, #8]
 800e7c2:	9301      	str	r3, [sp, #4]
 800e7c4:	4b3b      	ldr	r3, [pc, #236]	; (800e8b4 <tcp_process+0x5b8>)
 800e7c6:	9300      	str	r3, [sp, #0]
 800e7c8:	4b3b      	ldr	r3, [pc, #236]	; (800e8b8 <tcp_process+0x5bc>)
 800e7ca:	4602      	mov	r2, r0
 800e7cc:	6878      	ldr	r0, [r7, #4]
 800e7ce:	f003 f837 	bl	8011840 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e7d2:	e167      	b.n	800eaa4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e7d4:	4b32      	ldr	r3, [pc, #200]	; (800e8a0 <tcp_process+0x5a4>)
 800e7d6:	781b      	ldrb	r3, [r3, #0]
 800e7d8:	f003 0302 	and.w	r3, r3, #2
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	f000 8161 	beq.w	800eaa4 <tcp_process+0x7a8>
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7e6:	1e5a      	subs	r2, r3, #1
 800e7e8:	4b30      	ldr	r3, [pc, #192]	; (800e8ac <tcp_process+0x5b0>)
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	429a      	cmp	r2, r3
 800e7ee:	f040 8159 	bne.w	800eaa4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e7f2:	6878      	ldr	r0, [r7, #4]
 800e7f4:	f002 fe12 	bl	801141c <tcp_rexmit>
      break;
 800e7f8:	e154      	b.n	800eaa4 <tcp_process+0x7a8>
 800e7fa:	e153      	b.n	800eaa4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f000 fa71 	bl	800ece4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e802:	4b32      	ldr	r3, [pc, #200]	; (800e8cc <tcp_process+0x5d0>)
 800e804:	781b      	ldrb	r3, [r3, #0]
 800e806:	f003 0320 	and.w	r3, r3, #32
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	f000 814c 	beq.w	800eaa8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	8b5b      	ldrh	r3, [r3, #26]
 800e814:	f043 0302 	orr.w	r3, r3, #2
 800e818:	b29a      	uxth	r2, r3
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2207      	movs	r2, #7
 800e822:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e824:	e140      	b.n	800eaa8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e826:	6878      	ldr	r0, [r7, #4]
 800e828:	f000 fa5c 	bl	800ece4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e82c:	4b27      	ldr	r3, [pc, #156]	; (800e8cc <tcp_process+0x5d0>)
 800e82e:	781b      	ldrb	r3, [r3, #0]
 800e830:	f003 0320 	and.w	r3, r3, #32
 800e834:	2b00      	cmp	r3, #0
 800e836:	d071      	beq.n	800e91c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e838:	4b19      	ldr	r3, [pc, #100]	; (800e8a0 <tcp_process+0x5a4>)
 800e83a:	781b      	ldrb	r3, [r3, #0]
 800e83c:	f003 0310 	and.w	r3, r3, #16
 800e840:	2b00      	cmp	r3, #0
 800e842:	d060      	beq.n	800e906 <tcp_process+0x60a>
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e848:	4b16      	ldr	r3, [pc, #88]	; (800e8a4 <tcp_process+0x5a8>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	429a      	cmp	r2, r3
 800e84e:	d15a      	bne.n	800e906 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e854:	2b00      	cmp	r3, #0
 800e856:	d156      	bne.n	800e906 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	8b5b      	ldrh	r3, [r3, #26]
 800e85c:	f043 0302 	orr.w	r3, r3, #2
 800e860:	b29a      	uxth	r2, r3
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e866:	6878      	ldr	r0, [r7, #4]
 800e868:	f7fe fdbe 	bl	800d3e8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e86c:	4b18      	ldr	r3, [pc, #96]	; (800e8d0 <tcp_process+0x5d4>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	687a      	ldr	r2, [r7, #4]
 800e872:	429a      	cmp	r2, r3
 800e874:	d105      	bne.n	800e882 <tcp_process+0x586>
 800e876:	4b16      	ldr	r3, [pc, #88]	; (800e8d0 <tcp_process+0x5d4>)
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	68db      	ldr	r3, [r3, #12]
 800e87c:	4a14      	ldr	r2, [pc, #80]	; (800e8d0 <tcp_process+0x5d4>)
 800e87e:	6013      	str	r3, [r2, #0]
 800e880:	e02e      	b.n	800e8e0 <tcp_process+0x5e4>
 800e882:	4b13      	ldr	r3, [pc, #76]	; (800e8d0 <tcp_process+0x5d4>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	617b      	str	r3, [r7, #20]
 800e888:	e027      	b.n	800e8da <tcp_process+0x5de>
 800e88a:	697b      	ldr	r3, [r7, #20]
 800e88c:	68db      	ldr	r3, [r3, #12]
 800e88e:	687a      	ldr	r2, [r7, #4]
 800e890:	429a      	cmp	r2, r3
 800e892:	d11f      	bne.n	800e8d4 <tcp_process+0x5d8>
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	68da      	ldr	r2, [r3, #12]
 800e898:	697b      	ldr	r3, [r7, #20]
 800e89a:	60da      	str	r2, [r3, #12]
 800e89c:	e020      	b.n	800e8e0 <tcp_process+0x5e4>
 800e89e:	bf00      	nop
 800e8a0:	200081e8 	.word	0x200081e8
 800e8a4:	200081e0 	.word	0x200081e0
 800e8a8:	200081e6 	.word	0x200081e6
 800e8ac:	200081dc 	.word	0x200081dc
 800e8b0:	200081cc 	.word	0x200081cc
 800e8b4:	2000b8d4 	.word	0x2000b8d4
 800e8b8:	2000b8d8 	.word	0x2000b8d8
 800e8bc:	080199f8 	.word	0x080199f8
 800e8c0:	08019c98 	.word	0x08019c98
 800e8c4:	08019a44 	.word	0x08019a44
 800e8c8:	200081e4 	.word	0x200081e4
 800e8cc:	200081e9 	.word	0x200081e9
 800e8d0:	20010e78 	.word	0x20010e78
 800e8d4:	697b      	ldr	r3, [r7, #20]
 800e8d6:	68db      	ldr	r3, [r3, #12]
 800e8d8:	617b      	str	r3, [r7, #20]
 800e8da:	697b      	ldr	r3, [r7, #20]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d1d4      	bne.n	800e88a <tcp_process+0x58e>
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	60da      	str	r2, [r3, #12]
 800e8e6:	4b77      	ldr	r3, [pc, #476]	; (800eac4 <tcp_process+0x7c8>)
 800e8e8:	2201      	movs	r2, #1
 800e8ea:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	220a      	movs	r2, #10
 800e8f0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800e8f2:	4b75      	ldr	r3, [pc, #468]	; (800eac8 <tcp_process+0x7cc>)
 800e8f4:	681a      	ldr	r2, [r3, #0]
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	60da      	str	r2, [r3, #12]
 800e8fa:	4a73      	ldr	r2, [pc, #460]	; (800eac8 <tcp_process+0x7cc>)
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	6013      	str	r3, [r2, #0]
 800e900:	f003 f95e 	bl	8011bc0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800e904:	e0d2      	b.n	800eaac <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	8b5b      	ldrh	r3, [r3, #26]
 800e90a:	f043 0302 	orr.w	r3, r3, #2
 800e90e:	b29a      	uxth	r2, r3
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2208      	movs	r2, #8
 800e918:	751a      	strb	r2, [r3, #20]
      break;
 800e91a:	e0c7      	b.n	800eaac <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e91c:	4b6b      	ldr	r3, [pc, #428]	; (800eacc <tcp_process+0x7d0>)
 800e91e:	781b      	ldrb	r3, [r3, #0]
 800e920:	f003 0310 	and.w	r3, r3, #16
 800e924:	2b00      	cmp	r3, #0
 800e926:	f000 80c1 	beq.w	800eaac <tcp_process+0x7b0>
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e92e:	4b68      	ldr	r3, [pc, #416]	; (800ead0 <tcp_process+0x7d4>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	429a      	cmp	r2, r3
 800e934:	f040 80ba 	bne.w	800eaac <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	f040 80b5 	bne.w	800eaac <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	2206      	movs	r2, #6
 800e946:	751a      	strb	r2, [r3, #20]
      break;
 800e948:	e0b0      	b.n	800eaac <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e94a:	6878      	ldr	r0, [r7, #4]
 800e94c:	f000 f9ca 	bl	800ece4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e950:	4b60      	ldr	r3, [pc, #384]	; (800ead4 <tcp_process+0x7d8>)
 800e952:	781b      	ldrb	r3, [r3, #0]
 800e954:	f003 0320 	and.w	r3, r3, #32
 800e958:	2b00      	cmp	r3, #0
 800e95a:	f000 80a9 	beq.w	800eab0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	8b5b      	ldrh	r3, [r3, #26]
 800e962:	f043 0302 	orr.w	r3, r3, #2
 800e966:	b29a      	uxth	r2, r3
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e96c:	6878      	ldr	r0, [r7, #4]
 800e96e:	f7fe fd3b 	bl	800d3e8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e972:	4b59      	ldr	r3, [pc, #356]	; (800ead8 <tcp_process+0x7dc>)
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	687a      	ldr	r2, [r7, #4]
 800e978:	429a      	cmp	r2, r3
 800e97a:	d105      	bne.n	800e988 <tcp_process+0x68c>
 800e97c:	4b56      	ldr	r3, [pc, #344]	; (800ead8 <tcp_process+0x7dc>)
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	68db      	ldr	r3, [r3, #12]
 800e982:	4a55      	ldr	r2, [pc, #340]	; (800ead8 <tcp_process+0x7dc>)
 800e984:	6013      	str	r3, [r2, #0]
 800e986:	e013      	b.n	800e9b0 <tcp_process+0x6b4>
 800e988:	4b53      	ldr	r3, [pc, #332]	; (800ead8 <tcp_process+0x7dc>)
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	613b      	str	r3, [r7, #16]
 800e98e:	e00c      	b.n	800e9aa <tcp_process+0x6ae>
 800e990:	693b      	ldr	r3, [r7, #16]
 800e992:	68db      	ldr	r3, [r3, #12]
 800e994:	687a      	ldr	r2, [r7, #4]
 800e996:	429a      	cmp	r2, r3
 800e998:	d104      	bne.n	800e9a4 <tcp_process+0x6a8>
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	68da      	ldr	r2, [r3, #12]
 800e99e:	693b      	ldr	r3, [r7, #16]
 800e9a0:	60da      	str	r2, [r3, #12]
 800e9a2:	e005      	b.n	800e9b0 <tcp_process+0x6b4>
 800e9a4:	693b      	ldr	r3, [r7, #16]
 800e9a6:	68db      	ldr	r3, [r3, #12]
 800e9a8:	613b      	str	r3, [r7, #16]
 800e9aa:	693b      	ldr	r3, [r7, #16]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d1ef      	bne.n	800e990 <tcp_process+0x694>
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	60da      	str	r2, [r3, #12]
 800e9b6:	4b43      	ldr	r3, [pc, #268]	; (800eac4 <tcp_process+0x7c8>)
 800e9b8:	2201      	movs	r2, #1
 800e9ba:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	220a      	movs	r2, #10
 800e9c0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e9c2:	4b41      	ldr	r3, [pc, #260]	; (800eac8 <tcp_process+0x7cc>)
 800e9c4:	681a      	ldr	r2, [r3, #0]
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	60da      	str	r2, [r3, #12]
 800e9ca:	4a3f      	ldr	r2, [pc, #252]	; (800eac8 <tcp_process+0x7cc>)
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	6013      	str	r3, [r2, #0]
 800e9d0:	f003 f8f6 	bl	8011bc0 <tcp_timer_needed>
      }
      break;
 800e9d4:	e06c      	b.n	800eab0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800e9d6:	6878      	ldr	r0, [r7, #4]
 800e9d8:	f000 f984 	bl	800ece4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e9dc:	4b3b      	ldr	r3, [pc, #236]	; (800eacc <tcp_process+0x7d0>)
 800e9de:	781b      	ldrb	r3, [r3, #0]
 800e9e0:	f003 0310 	and.w	r3, r3, #16
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d065      	beq.n	800eab4 <tcp_process+0x7b8>
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e9ec:	4b38      	ldr	r3, [pc, #224]	; (800ead0 <tcp_process+0x7d4>)
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	429a      	cmp	r2, r3
 800e9f2:	d15f      	bne.n	800eab4 <tcp_process+0x7b8>
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d15b      	bne.n	800eab4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800e9fc:	6878      	ldr	r0, [r7, #4]
 800e9fe:	f7fe fcf3 	bl	800d3e8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ea02:	4b35      	ldr	r3, [pc, #212]	; (800ead8 <tcp_process+0x7dc>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	687a      	ldr	r2, [r7, #4]
 800ea08:	429a      	cmp	r2, r3
 800ea0a:	d105      	bne.n	800ea18 <tcp_process+0x71c>
 800ea0c:	4b32      	ldr	r3, [pc, #200]	; (800ead8 <tcp_process+0x7dc>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	68db      	ldr	r3, [r3, #12]
 800ea12:	4a31      	ldr	r2, [pc, #196]	; (800ead8 <tcp_process+0x7dc>)
 800ea14:	6013      	str	r3, [r2, #0]
 800ea16:	e013      	b.n	800ea40 <tcp_process+0x744>
 800ea18:	4b2f      	ldr	r3, [pc, #188]	; (800ead8 <tcp_process+0x7dc>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	60fb      	str	r3, [r7, #12]
 800ea1e:	e00c      	b.n	800ea3a <tcp_process+0x73e>
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	68db      	ldr	r3, [r3, #12]
 800ea24:	687a      	ldr	r2, [r7, #4]
 800ea26:	429a      	cmp	r2, r3
 800ea28:	d104      	bne.n	800ea34 <tcp_process+0x738>
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	68da      	ldr	r2, [r3, #12]
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	60da      	str	r2, [r3, #12]
 800ea32:	e005      	b.n	800ea40 <tcp_process+0x744>
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	68db      	ldr	r3, [r3, #12]
 800ea38:	60fb      	str	r3, [r7, #12]
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d1ef      	bne.n	800ea20 <tcp_process+0x724>
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2200      	movs	r2, #0
 800ea44:	60da      	str	r2, [r3, #12]
 800ea46:	4b1f      	ldr	r3, [pc, #124]	; (800eac4 <tcp_process+0x7c8>)
 800ea48:	2201      	movs	r2, #1
 800ea4a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	220a      	movs	r2, #10
 800ea50:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ea52:	4b1d      	ldr	r3, [pc, #116]	; (800eac8 <tcp_process+0x7cc>)
 800ea54:	681a      	ldr	r2, [r3, #0]
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	60da      	str	r2, [r3, #12]
 800ea5a:	4a1b      	ldr	r2, [pc, #108]	; (800eac8 <tcp_process+0x7cc>)
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	6013      	str	r3, [r2, #0]
 800ea60:	f003 f8ae 	bl	8011bc0 <tcp_timer_needed>
      }
      break;
 800ea64:	e026      	b.n	800eab4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ea66:	6878      	ldr	r0, [r7, #4]
 800ea68:	f000 f93c 	bl	800ece4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ea6c:	4b17      	ldr	r3, [pc, #92]	; (800eacc <tcp_process+0x7d0>)
 800ea6e:	781b      	ldrb	r3, [r3, #0]
 800ea70:	f003 0310 	and.w	r3, r3, #16
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d01f      	beq.n	800eab8 <tcp_process+0x7bc>
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea7c:	4b14      	ldr	r3, [pc, #80]	; (800ead0 <tcp_process+0x7d4>)
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	429a      	cmp	r2, r3
 800ea82:	d119      	bne.n	800eab8 <tcp_process+0x7bc>
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d115      	bne.n	800eab8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ea8c:	4b11      	ldr	r3, [pc, #68]	; (800ead4 <tcp_process+0x7d8>)
 800ea8e:	781b      	ldrb	r3, [r3, #0]
 800ea90:	f043 0310 	orr.w	r3, r3, #16
 800ea94:	b2da      	uxtb	r2, r3
 800ea96:	4b0f      	ldr	r3, [pc, #60]	; (800ead4 <tcp_process+0x7d8>)
 800ea98:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ea9a:	e00d      	b.n	800eab8 <tcp_process+0x7bc>
    default:
      break;
 800ea9c:	bf00      	nop
 800ea9e:	e00c      	b.n	800eaba <tcp_process+0x7be>
      break;
 800eaa0:	bf00      	nop
 800eaa2:	e00a      	b.n	800eaba <tcp_process+0x7be>
      break;
 800eaa4:	bf00      	nop
 800eaa6:	e008      	b.n	800eaba <tcp_process+0x7be>
      break;
 800eaa8:	bf00      	nop
 800eaaa:	e006      	b.n	800eaba <tcp_process+0x7be>
      break;
 800eaac:	bf00      	nop
 800eaae:	e004      	b.n	800eaba <tcp_process+0x7be>
      break;
 800eab0:	bf00      	nop
 800eab2:	e002      	b.n	800eaba <tcp_process+0x7be>
      break;
 800eab4:	bf00      	nop
 800eab6:	e000      	b.n	800eaba <tcp_process+0x7be>
      break;
 800eab8:	bf00      	nop
  }
  return ERR_OK;
 800eaba:	2300      	movs	r3, #0
}
 800eabc:	4618      	mov	r0, r3
 800eabe:	3724      	adds	r7, #36	; 0x24
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bd90      	pop	{r4, r7, pc}
 800eac4:	20010e74 	.word	0x20010e74
 800eac8:	20010e88 	.word	0x20010e88
 800eacc:	200081e8 	.word	0x200081e8
 800ead0:	200081e0 	.word	0x200081e0
 800ead4:	200081e9 	.word	0x200081e9
 800ead8:	20010e78 	.word	0x20010e78

0800eadc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800eadc:	b590      	push	{r4, r7, lr}
 800eade:	b085      	sub	sp, #20
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
 800eae4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d106      	bne.n	800eafa <tcp_oos_insert_segment+0x1e>
 800eaec:	4b3b      	ldr	r3, [pc, #236]	; (800ebdc <tcp_oos_insert_segment+0x100>)
 800eaee:	f240 421f 	movw	r2, #1055	; 0x41f
 800eaf2:	493b      	ldr	r1, [pc, #236]	; (800ebe0 <tcp_oos_insert_segment+0x104>)
 800eaf4:	483b      	ldr	r0, [pc, #236]	; (800ebe4 <tcp_oos_insert_segment+0x108>)
 800eaf6:	f008 fa29 	bl	8016f4c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	68db      	ldr	r3, [r3, #12]
 800eafe:	899b      	ldrh	r3, [r3, #12]
 800eb00:	b29b      	uxth	r3, r3
 800eb02:	4618      	mov	r0, r3
 800eb04:	f7fb f9fa 	bl	8009efc <lwip_htons>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	b2db      	uxtb	r3, r3
 800eb0c:	f003 0301 	and.w	r3, r3, #1
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d028      	beq.n	800eb66 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800eb14:	6838      	ldr	r0, [r7, #0]
 800eb16:	f7fe f999 	bl	800ce4c <tcp_segs_free>
    next = NULL;
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	603b      	str	r3, [r7, #0]
 800eb1e:	e056      	b.n	800ebce <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800eb20:	683b      	ldr	r3, [r7, #0]
 800eb22:	68db      	ldr	r3, [r3, #12]
 800eb24:	899b      	ldrh	r3, [r3, #12]
 800eb26:	b29b      	uxth	r3, r3
 800eb28:	4618      	mov	r0, r3
 800eb2a:	f7fb f9e7 	bl	8009efc <lwip_htons>
 800eb2e:	4603      	mov	r3, r0
 800eb30:	b2db      	uxtb	r3, r3
 800eb32:	f003 0301 	and.w	r3, r3, #1
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d00d      	beq.n	800eb56 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	68db      	ldr	r3, [r3, #12]
 800eb3e:	899b      	ldrh	r3, [r3, #12]
 800eb40:	b29c      	uxth	r4, r3
 800eb42:	2001      	movs	r0, #1
 800eb44:	f7fb f9da 	bl	8009efc <lwip_htons>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	461a      	mov	r2, r3
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	68db      	ldr	r3, [r3, #12]
 800eb50:	4322      	orrs	r2, r4
 800eb52:	b292      	uxth	r2, r2
 800eb54:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800eb5a:	683b      	ldr	r3, [r7, #0]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800eb60:	68f8      	ldr	r0, [r7, #12]
 800eb62:	f7fe f987 	bl	800ce74 <tcp_seg_free>
    while (next &&
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d00e      	beq.n	800eb8a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	891b      	ldrh	r3, [r3, #8]
 800eb70:	461a      	mov	r2, r3
 800eb72:	4b1d      	ldr	r3, [pc, #116]	; (800ebe8 <tcp_oos_insert_segment+0x10c>)
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	441a      	add	r2, r3
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	68db      	ldr	r3, [r3, #12]
 800eb7c:	685b      	ldr	r3, [r3, #4]
 800eb7e:	6839      	ldr	r1, [r7, #0]
 800eb80:	8909      	ldrh	r1, [r1, #8]
 800eb82:	440b      	add	r3, r1
 800eb84:	1ad3      	subs	r3, r2, r3
    while (next &&
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	daca      	bge.n	800eb20 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d01e      	beq.n	800ebce <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	891b      	ldrh	r3, [r3, #8]
 800eb94:	461a      	mov	r2, r3
 800eb96:	4b14      	ldr	r3, [pc, #80]	; (800ebe8 <tcp_oos_insert_segment+0x10c>)
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	441a      	add	r2, r3
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	68db      	ldr	r3, [r3, #12]
 800eba0:	685b      	ldr	r3, [r3, #4]
 800eba2:	1ad3      	subs	r3, r2, r3
    if (next &&
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	dd12      	ble.n	800ebce <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	68db      	ldr	r3, [r3, #12]
 800ebac:	685b      	ldr	r3, [r3, #4]
 800ebae:	b29a      	uxth	r2, r3
 800ebb0:	4b0d      	ldr	r3, [pc, #52]	; (800ebe8 <tcp_oos_insert_segment+0x10c>)
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	b29b      	uxth	r3, r3
 800ebb6:	1ad3      	subs	r3, r2, r3
 800ebb8:	b29a      	uxth	r2, r3
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	685a      	ldr	r2, [r3, #4]
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	891b      	ldrh	r3, [r3, #8]
 800ebc6:	4619      	mov	r1, r3
 800ebc8:	4610      	mov	r0, r2
 800ebca:	f7fc fb47 	bl	800b25c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	683a      	ldr	r2, [r7, #0]
 800ebd2:	601a      	str	r2, [r3, #0]
}
 800ebd4:	bf00      	nop
 800ebd6:	3714      	adds	r7, #20
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd90      	pop	{r4, r7, pc}
 800ebdc:	080199f8 	.word	0x080199f8
 800ebe0:	08019cb8 	.word	0x08019cb8
 800ebe4:	08019a44 	.word	0x08019a44
 800ebe8:	200081dc 	.word	0x200081dc

0800ebec <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ebec:	b5b0      	push	{r4, r5, r7, lr}
 800ebee:	b086      	sub	sp, #24
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	60f8      	str	r0, [r7, #12]
 800ebf4:	60b9      	str	r1, [r7, #8]
 800ebf6:	607a      	str	r2, [r7, #4]
 800ebf8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ebfa:	e03e      	b.n	800ec7a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ebfc:	68bb      	ldr	r3, [r7, #8]
 800ebfe:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ec06:	697b      	ldr	r3, [r7, #20]
 800ec08:	685b      	ldr	r3, [r3, #4]
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f7fc fd3a 	bl	800b684 <pbuf_clen>
 800ec10:	4603      	mov	r3, r0
 800ec12:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ec1a:	8a7a      	ldrh	r2, [r7, #18]
 800ec1c:	429a      	cmp	r2, r3
 800ec1e:	d906      	bls.n	800ec2e <tcp_free_acked_segments+0x42>
 800ec20:	4b2a      	ldr	r3, [pc, #168]	; (800eccc <tcp_free_acked_segments+0xe0>)
 800ec22:	f240 4257 	movw	r2, #1111	; 0x457
 800ec26:	492a      	ldr	r1, [pc, #168]	; (800ecd0 <tcp_free_acked_segments+0xe4>)
 800ec28:	482a      	ldr	r0, [pc, #168]	; (800ecd4 <tcp_free_acked_segments+0xe8>)
 800ec2a:	f008 f98f 	bl	8016f4c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800ec34:	8a7b      	ldrh	r3, [r7, #18]
 800ec36:	1ad3      	subs	r3, r2, r3
 800ec38:	b29a      	uxth	r2, r3
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ec40:	697b      	ldr	r3, [r7, #20]
 800ec42:	891a      	ldrh	r2, [r3, #8]
 800ec44:	4b24      	ldr	r3, [pc, #144]	; (800ecd8 <tcp_free_acked_segments+0xec>)
 800ec46:	881b      	ldrh	r3, [r3, #0]
 800ec48:	4413      	add	r3, r2
 800ec4a:	b29a      	uxth	r2, r3
 800ec4c:	4b22      	ldr	r3, [pc, #136]	; (800ecd8 <tcp_free_acked_segments+0xec>)
 800ec4e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800ec50:	6978      	ldr	r0, [r7, #20]
 800ec52:	f7fe f90f 	bl	800ce74 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d00c      	beq.n	800ec7a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d109      	bne.n	800ec7a <tcp_free_acked_segments+0x8e>
 800ec66:	683b      	ldr	r3, [r7, #0]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d106      	bne.n	800ec7a <tcp_free_acked_segments+0x8e>
 800ec6c:	4b17      	ldr	r3, [pc, #92]	; (800eccc <tcp_free_acked_segments+0xe0>)
 800ec6e:	f240 4262 	movw	r2, #1122	; 0x462
 800ec72:	491a      	ldr	r1, [pc, #104]	; (800ecdc <tcp_free_acked_segments+0xf0>)
 800ec74:	4817      	ldr	r0, [pc, #92]	; (800ecd4 <tcp_free_acked_segments+0xe8>)
 800ec76:	f008 f969 	bl	8016f4c <iprintf>
  while (seg_list != NULL &&
 800ec7a:	68bb      	ldr	r3, [r7, #8]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d020      	beq.n	800ecc2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ec80:	68bb      	ldr	r3, [r7, #8]
 800ec82:	68db      	ldr	r3, [r3, #12]
 800ec84:	685b      	ldr	r3, [r3, #4]
 800ec86:	4618      	mov	r0, r3
 800ec88:	f7fb f94d 	bl	8009f26 <lwip_htonl>
 800ec8c:	4604      	mov	r4, r0
 800ec8e:	68bb      	ldr	r3, [r7, #8]
 800ec90:	891b      	ldrh	r3, [r3, #8]
 800ec92:	461d      	mov	r5, r3
 800ec94:	68bb      	ldr	r3, [r7, #8]
 800ec96:	68db      	ldr	r3, [r3, #12]
 800ec98:	899b      	ldrh	r3, [r3, #12]
 800ec9a:	b29b      	uxth	r3, r3
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	f7fb f92d 	bl	8009efc <lwip_htons>
 800eca2:	4603      	mov	r3, r0
 800eca4:	b2db      	uxtb	r3, r3
 800eca6:	f003 0303 	and.w	r3, r3, #3
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d001      	beq.n	800ecb2 <tcp_free_acked_segments+0xc6>
 800ecae:	2301      	movs	r3, #1
 800ecb0:	e000      	b.n	800ecb4 <tcp_free_acked_segments+0xc8>
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	442b      	add	r3, r5
 800ecb6:	18e2      	adds	r2, r4, r3
 800ecb8:	4b09      	ldr	r3, [pc, #36]	; (800ece0 <tcp_free_acked_segments+0xf4>)
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	dd9c      	ble.n	800ebfc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ecc2:	68bb      	ldr	r3, [r7, #8]
}
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	3718      	adds	r7, #24
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	bdb0      	pop	{r4, r5, r7, pc}
 800eccc:	080199f8 	.word	0x080199f8
 800ecd0:	08019ce0 	.word	0x08019ce0
 800ecd4:	08019a44 	.word	0x08019a44
 800ecd8:	200081e4 	.word	0x200081e4
 800ecdc:	08019d08 	.word	0x08019d08
 800ece0:	200081e0 	.word	0x200081e0

0800ece4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ece4:	b5b0      	push	{r4, r5, r7, lr}
 800ece6:	b094      	sub	sp, #80	; 0x50
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ecec:	2300      	movs	r3, #0
 800ecee:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d106      	bne.n	800ed04 <tcp_receive+0x20>
 800ecf6:	4ba6      	ldr	r3, [pc, #664]	; (800ef90 <tcp_receive+0x2ac>)
 800ecf8:	f240 427b 	movw	r2, #1147	; 0x47b
 800ecfc:	49a5      	ldr	r1, [pc, #660]	; (800ef94 <tcp_receive+0x2b0>)
 800ecfe:	48a6      	ldr	r0, [pc, #664]	; (800ef98 <tcp_receive+0x2b4>)
 800ed00:	f008 f924 	bl	8016f4c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	7d1b      	ldrb	r3, [r3, #20]
 800ed08:	2b03      	cmp	r3, #3
 800ed0a:	d806      	bhi.n	800ed1a <tcp_receive+0x36>
 800ed0c:	4ba0      	ldr	r3, [pc, #640]	; (800ef90 <tcp_receive+0x2ac>)
 800ed0e:	f240 427c 	movw	r2, #1148	; 0x47c
 800ed12:	49a2      	ldr	r1, [pc, #648]	; (800ef9c <tcp_receive+0x2b8>)
 800ed14:	48a0      	ldr	r0, [pc, #640]	; (800ef98 <tcp_receive+0x2b4>)
 800ed16:	f008 f919 	bl	8016f4c <iprintf>

  if (flags & TCP_ACK) {
 800ed1a:	4ba1      	ldr	r3, [pc, #644]	; (800efa0 <tcp_receive+0x2bc>)
 800ed1c:	781b      	ldrb	r3, [r3, #0]
 800ed1e:	f003 0310 	and.w	r3, r3, #16
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	f000 8263 	beq.w	800f1ee <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ed2e:	461a      	mov	r2, r3
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed34:	4413      	add	r3, r2
 800ed36:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed3c:	4b99      	ldr	r3, [pc, #612]	; (800efa4 <tcp_receive+0x2c0>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	1ad3      	subs	r3, r2, r3
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	db1b      	blt.n	800ed7e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed4a:	4b96      	ldr	r3, [pc, #600]	; (800efa4 <tcp_receive+0x2c0>)
 800ed4c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	d106      	bne.n	800ed60 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ed56:	4b94      	ldr	r3, [pc, #592]	; (800efa8 <tcp_receive+0x2c4>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	1ad3      	subs	r3, r2, r3
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	db0e      	blt.n	800ed7e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ed64:	4b90      	ldr	r3, [pc, #576]	; (800efa8 <tcp_receive+0x2c4>)
 800ed66:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ed68:	429a      	cmp	r2, r3
 800ed6a:	d125      	bne.n	800edb8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ed6c:	4b8f      	ldr	r3, [pc, #572]	; (800efac <tcp_receive+0x2c8>)
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	89db      	ldrh	r3, [r3, #14]
 800ed72:	b29a      	uxth	r2, r3
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ed7a:	429a      	cmp	r2, r3
 800ed7c:	d91c      	bls.n	800edb8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ed7e:	4b8b      	ldr	r3, [pc, #556]	; (800efac <tcp_receive+0x2c8>)
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	89db      	ldrh	r3, [r3, #14]
 800ed84:	b29a      	uxth	r2, r3
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ed98:	429a      	cmp	r2, r3
 800ed9a:	d205      	bcs.n	800eda8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800eda8:	4b7e      	ldr	r3, [pc, #504]	; (800efa4 <tcp_receive+0x2c0>)
 800edaa:	681a      	ldr	r2, [r3, #0]
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800edb0:	4b7d      	ldr	r3, [pc, #500]	; (800efa8 <tcp_receive+0x2c4>)
 800edb2:	681a      	ldr	r2, [r3, #0]
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800edb8:	4b7b      	ldr	r3, [pc, #492]	; (800efa8 <tcp_receive+0x2c4>)
 800edba:	681a      	ldr	r2, [r3, #0]
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edc0:	1ad3      	subs	r3, r2, r3
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	dc58      	bgt.n	800ee78 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800edc6:	4b7a      	ldr	r3, [pc, #488]	; (800efb0 <tcp_receive+0x2cc>)
 800edc8:	881b      	ldrh	r3, [r3, #0]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d14b      	bne.n	800ee66 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800edd2:	687a      	ldr	r2, [r7, #4]
 800edd4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800edd8:	4413      	add	r3, r2
 800edda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eddc:	429a      	cmp	r2, r3
 800edde:	d142      	bne.n	800ee66 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	db3d      	blt.n	800ee66 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800edee:	4b6e      	ldr	r3, [pc, #440]	; (800efa8 <tcp_receive+0x2c4>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	429a      	cmp	r2, r3
 800edf4:	d137      	bne.n	800ee66 <tcp_receive+0x182>
              found_dupack = 1;
 800edf6:	2301      	movs	r3, #1
 800edf8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ee00:	2bff      	cmp	r3, #255	; 0xff
 800ee02:	d007      	beq.n	800ee14 <tcp_receive+0x130>
                ++pcb->dupacks;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ee0a:	3301      	adds	r3, #1
 800ee0c:	b2da      	uxtb	r2, r3
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ee1a:	2b03      	cmp	r3, #3
 800ee1c:	d91b      	bls.n	800ee56 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee28:	4413      	add	r3, r2
 800ee2a:	b29a      	uxth	r2, r3
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ee32:	429a      	cmp	r2, r3
 800ee34:	d30a      	bcc.n	800ee4c <tcp_receive+0x168>
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee40:	4413      	add	r3, r2
 800ee42:	b29a      	uxth	r2, r3
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ee4a:	e004      	b.n	800ee56 <tcp_receive+0x172>
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee52:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ee5c:	2b02      	cmp	r3, #2
 800ee5e:	d902      	bls.n	800ee66 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800ee60:	6878      	ldr	r0, [r7, #4]
 800ee62:	f002 fb47 	bl	80114f4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800ee66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	f040 8160 	bne.w	800f12e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	2200      	movs	r2, #0
 800ee72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ee76:	e15a      	b.n	800f12e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ee78:	4b4b      	ldr	r3, [pc, #300]	; (800efa8 <tcp_receive+0x2c4>)
 800ee7a:	681a      	ldr	r2, [r3, #0]
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee80:	1ad3      	subs	r3, r2, r3
 800ee82:	3b01      	subs	r3, #1
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	f2c0 814d 	blt.w	800f124 <tcp_receive+0x440>
 800ee8a:	4b47      	ldr	r3, [pc, #284]	; (800efa8 <tcp_receive+0x2c4>)
 800ee8c:	681a      	ldr	r2, [r3, #0]
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee92:	1ad3      	subs	r3, r2, r3
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	f300 8145 	bgt.w	800f124 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	8b5b      	ldrh	r3, [r3, #26]
 800ee9e:	f003 0304 	and.w	r3, r3, #4
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d010      	beq.n	800eec8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	8b5b      	ldrh	r3, [r3, #26]
 800eeaa:	f023 0304 	bic.w	r3, r3, #4
 800eeae:	b29a      	uxth	r2, r3
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2200      	movs	r2, #0
 800eec4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2200      	movs	r2, #0
 800eecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800eed6:	10db      	asrs	r3, r3, #3
 800eed8:	b21b      	sxth	r3, r3
 800eeda:	b29a      	uxth	r2, r3
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800eee2:	b29b      	uxth	r3, r3
 800eee4:	4413      	add	r3, r2
 800eee6:	b29b      	uxth	r3, r3
 800eee8:	b21a      	sxth	r2, r3
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800eef0:	4b2d      	ldr	r3, [pc, #180]	; (800efa8 <tcp_receive+0x2c4>)
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	b29a      	uxth	r2, r3
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eefa:	b29b      	uxth	r3, r3
 800eefc:	1ad3      	subs	r3, r2, r3
 800eefe:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	2200      	movs	r2, #0
 800ef04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800ef08:	4b27      	ldr	r3, [pc, #156]	; (800efa8 <tcp_receive+0x2c4>)
 800ef0a:	681a      	ldr	r2, [r3, #0]
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	7d1b      	ldrb	r3, [r3, #20]
 800ef14:	2b03      	cmp	r3, #3
 800ef16:	f240 8096 	bls.w	800f046 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ef26:	429a      	cmp	r2, r3
 800ef28:	d244      	bcs.n	800efb4 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	8b5b      	ldrh	r3, [r3, #26]
 800ef2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d001      	beq.n	800ef3a <tcp_receive+0x256>
 800ef36:	2301      	movs	r3, #1
 800ef38:	e000      	b.n	800ef3c <tcp_receive+0x258>
 800ef3a:	2302      	movs	r3, #2
 800ef3c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800ef40:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ef44:	b29a      	uxth	r2, r3
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ef4a:	fb12 f303 	smulbb	r3, r2, r3
 800ef4e:	b29b      	uxth	r3, r3
 800ef50:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ef52:	4293      	cmp	r3, r2
 800ef54:	bf28      	it	cs
 800ef56:	4613      	movcs	r3, r2
 800ef58:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ef60:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ef62:	4413      	add	r3, r2
 800ef64:	b29a      	uxth	r2, r3
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ef6c:	429a      	cmp	r2, r3
 800ef6e:	d309      	bcc.n	800ef84 <tcp_receive+0x2a0>
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ef76:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ef78:	4413      	add	r3, r2
 800ef7a:	b29a      	uxth	r2, r3
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ef82:	e060      	b.n	800f046 <tcp_receive+0x362>
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef8a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ef8e:	e05a      	b.n	800f046 <tcp_receive+0x362>
 800ef90:	080199f8 	.word	0x080199f8
 800ef94:	08019d28 	.word	0x08019d28
 800ef98:	08019a44 	.word	0x08019a44
 800ef9c:	08019d44 	.word	0x08019d44
 800efa0:	200081e8 	.word	0x200081e8
 800efa4:	200081dc 	.word	0x200081dc
 800efa8:	200081e0 	.word	0x200081e0
 800efac:	200081cc 	.word	0x200081cc
 800efb0:	200081e6 	.word	0x200081e6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800efba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800efbc:	4413      	add	r3, r2
 800efbe:	b29a      	uxth	r2, r3
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800efc6:	429a      	cmp	r2, r3
 800efc8:	d309      	bcc.n	800efde <tcp_receive+0x2fa>
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800efd0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800efd2:	4413      	add	r3, r2
 800efd4:	b29a      	uxth	r2, r3
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800efdc:	e004      	b.n	800efe8 <tcp_receive+0x304>
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800efe4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eff4:	429a      	cmp	r2, r3
 800eff6:	d326      	bcc.n	800f046 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f004:	1ad3      	subs	r3, r2, r3
 800f006:	b29a      	uxth	r2, r3
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f018:	4413      	add	r3, r2
 800f01a:	b29a      	uxth	r2, r3
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f022:	429a      	cmp	r2, r3
 800f024:	d30a      	bcc.n	800f03c <tcp_receive+0x358>
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f030:	4413      	add	r3, r2
 800f032:	b29a      	uxth	r2, r3
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f03a:	e004      	b.n	800f046 <tcp_receive+0x362>
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f042:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f04e:	4a98      	ldr	r2, [pc, #608]	; (800f2b0 <tcp_receive+0x5cc>)
 800f050:	6878      	ldr	r0, [r7, #4]
 800f052:	f7ff fdcb 	bl	800ebec <tcp_free_acked_segments>
 800f056:	4602      	mov	r2, r0
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f064:	4a93      	ldr	r2, [pc, #588]	; (800f2b4 <tcp_receive+0x5d0>)
 800f066:	6878      	ldr	r0, [r7, #4]
 800f068:	f7ff fdc0 	bl	800ebec <tcp_free_acked_segments>
 800f06c:	4602      	mov	r2, r0
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f076:	2b00      	cmp	r3, #0
 800f078:	d104      	bne.n	800f084 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f080:	861a      	strh	r2, [r3, #48]	; 0x30
 800f082:	e002      	b.n	800f08a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2200      	movs	r2, #0
 800f088:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	2200      	movs	r2, #0
 800f08e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f094:	2b00      	cmp	r3, #0
 800f096:	d103      	bne.n	800f0a0 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	2200      	movs	r2, #0
 800f09c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f0a6:	4b84      	ldr	r3, [pc, #528]	; (800f2b8 <tcp_receive+0x5d4>)
 800f0a8:	881b      	ldrh	r3, [r3, #0]
 800f0aa:	4413      	add	r3, r2
 800f0ac:	b29a      	uxth	r2, r3
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	8b5b      	ldrh	r3, [r3, #26]
 800f0b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d035      	beq.n	800f12c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d118      	bne.n	800f0fa <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d00c      	beq.n	800f0ea <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0d8:	68db      	ldr	r3, [r3, #12]
 800f0da:	685b      	ldr	r3, [r3, #4]
 800f0dc:	4618      	mov	r0, r3
 800f0de:	f7fa ff22 	bl	8009f26 <lwip_htonl>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	dc20      	bgt.n	800f12c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	8b5b      	ldrh	r3, [r3, #26]
 800f0ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f0f2:	b29a      	uxth	r2, r3
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f0f8:	e018      	b.n	800f12c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f102:	68db      	ldr	r3, [r3, #12]
 800f104:	685b      	ldr	r3, [r3, #4]
 800f106:	4618      	mov	r0, r3
 800f108:	f7fa ff0d 	bl	8009f26 <lwip_htonl>
 800f10c:	4603      	mov	r3, r0
 800f10e:	1ae3      	subs	r3, r4, r3
 800f110:	2b00      	cmp	r3, #0
 800f112:	dc0b      	bgt.n	800f12c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	8b5b      	ldrh	r3, [r3, #26]
 800f118:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f11c:	b29a      	uxth	r2, r3
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f122:	e003      	b.n	800f12c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f124:	6878      	ldr	r0, [r7, #4]
 800f126:	f002 fbdb 	bl	80118e0 <tcp_send_empty_ack>
 800f12a:	e000      	b.n	800f12e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f12c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f132:	2b00      	cmp	r3, #0
 800f134:	d05b      	beq.n	800f1ee <tcp_receive+0x50a>
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f13a:	4b60      	ldr	r3, [pc, #384]	; (800f2bc <tcp_receive+0x5d8>)
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	1ad3      	subs	r3, r2, r3
 800f140:	2b00      	cmp	r3, #0
 800f142:	da54      	bge.n	800f1ee <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f144:	4b5e      	ldr	r3, [pc, #376]	; (800f2c0 <tcp_receive+0x5dc>)
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	b29a      	uxth	r2, r3
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f14e:	b29b      	uxth	r3, r3
 800f150:	1ad3      	subs	r3, r2, r3
 800f152:	b29b      	uxth	r3, r3
 800f154:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f158:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f162:	10db      	asrs	r3, r3, #3
 800f164:	b21b      	sxth	r3, r3
 800f166:	b29b      	uxth	r3, r3
 800f168:	1ad3      	subs	r3, r2, r3
 800f16a:	b29b      	uxth	r3, r3
 800f16c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f176:	b29a      	uxth	r2, r3
 800f178:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f17c:	4413      	add	r3, r2
 800f17e:	b29b      	uxth	r3, r3
 800f180:	b21a      	sxth	r2, r3
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f186:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	da05      	bge.n	800f19a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800f18e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f192:	425b      	negs	r3, r3
 800f194:	b29b      	uxth	r3, r3
 800f196:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f19a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f1a4:	109b      	asrs	r3, r3, #2
 800f1a6:	b21b      	sxth	r3, r3
 800f1a8:	b29b      	uxth	r3, r3
 800f1aa:	1ad3      	subs	r3, r2, r3
 800f1ac:	b29b      	uxth	r3, r3
 800f1ae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f1b8:	b29a      	uxth	r2, r3
 800f1ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f1be:	4413      	add	r3, r2
 800f1c0:	b29b      	uxth	r3, r3
 800f1c2:	b21a      	sxth	r2, r3
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f1ce:	10db      	asrs	r3, r3, #3
 800f1d0:	b21b      	sxth	r3, r3
 800f1d2:	b29a      	uxth	r2, r3
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f1da:	b29b      	uxth	r3, r3
 800f1dc:	4413      	add	r3, r2
 800f1de:	b29b      	uxth	r3, r3
 800f1e0:	b21a      	sxth	r2, r3
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f1ee:	4b35      	ldr	r3, [pc, #212]	; (800f2c4 <tcp_receive+0x5e0>)
 800f1f0:	881b      	ldrh	r3, [r3, #0]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	f000 84e1 	beq.w	800fbba <tcp_receive+0xed6>
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	7d1b      	ldrb	r3, [r3, #20]
 800f1fc:	2b06      	cmp	r3, #6
 800f1fe:	f200 84dc 	bhi.w	800fbba <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f206:	4b30      	ldr	r3, [pc, #192]	; (800f2c8 <tcp_receive+0x5e4>)
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	1ad3      	subs	r3, r2, r3
 800f20c:	3b01      	subs	r3, #1
 800f20e:	2b00      	cmp	r3, #0
 800f210:	f2c0 808e 	blt.w	800f330 <tcp_receive+0x64c>
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f218:	4b2a      	ldr	r3, [pc, #168]	; (800f2c4 <tcp_receive+0x5e0>)
 800f21a:	881b      	ldrh	r3, [r3, #0]
 800f21c:	4619      	mov	r1, r3
 800f21e:	4b2a      	ldr	r3, [pc, #168]	; (800f2c8 <tcp_receive+0x5e4>)
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	440b      	add	r3, r1
 800f224:	1ad3      	subs	r3, r2, r3
 800f226:	3301      	adds	r3, #1
 800f228:	2b00      	cmp	r3, #0
 800f22a:	f300 8081 	bgt.w	800f330 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f22e:	4b27      	ldr	r3, [pc, #156]	; (800f2cc <tcp_receive+0x5e8>)
 800f230:	685b      	ldr	r3, [r3, #4]
 800f232:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f238:	4b23      	ldr	r3, [pc, #140]	; (800f2c8 <tcp_receive+0x5e4>)
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	1ad3      	subs	r3, r2, r3
 800f23e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f240:	4b22      	ldr	r3, [pc, #136]	; (800f2cc <tcp_receive+0x5e8>)
 800f242:	685b      	ldr	r3, [r3, #4]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d106      	bne.n	800f256 <tcp_receive+0x572>
 800f248:	4b21      	ldr	r3, [pc, #132]	; (800f2d0 <tcp_receive+0x5ec>)
 800f24a:	f240 5294 	movw	r2, #1428	; 0x594
 800f24e:	4921      	ldr	r1, [pc, #132]	; (800f2d4 <tcp_receive+0x5f0>)
 800f250:	4821      	ldr	r0, [pc, #132]	; (800f2d8 <tcp_receive+0x5f4>)
 800f252:	f007 fe7b 	bl	8016f4c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f258:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f25c:	4293      	cmp	r3, r2
 800f25e:	d906      	bls.n	800f26e <tcp_receive+0x58a>
 800f260:	4b1b      	ldr	r3, [pc, #108]	; (800f2d0 <tcp_receive+0x5ec>)
 800f262:	f240 5295 	movw	r2, #1429	; 0x595
 800f266:	491d      	ldr	r1, [pc, #116]	; (800f2dc <tcp_receive+0x5f8>)
 800f268:	481b      	ldr	r0, [pc, #108]	; (800f2d8 <tcp_receive+0x5f4>)
 800f26a:	f007 fe6f 	bl	8016f4c <iprintf>
      off = (u16_t)off32;
 800f26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f270:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f274:	4b15      	ldr	r3, [pc, #84]	; (800f2cc <tcp_receive+0x5e8>)
 800f276:	685b      	ldr	r3, [r3, #4]
 800f278:	891b      	ldrh	r3, [r3, #8]
 800f27a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f27e:	429a      	cmp	r2, r3
 800f280:	d906      	bls.n	800f290 <tcp_receive+0x5ac>
 800f282:	4b13      	ldr	r3, [pc, #76]	; (800f2d0 <tcp_receive+0x5ec>)
 800f284:	f240 5297 	movw	r2, #1431	; 0x597
 800f288:	4915      	ldr	r1, [pc, #84]	; (800f2e0 <tcp_receive+0x5fc>)
 800f28a:	4813      	ldr	r0, [pc, #76]	; (800f2d8 <tcp_receive+0x5f4>)
 800f28c:	f007 fe5e 	bl	8016f4c <iprintf>
      inseg.len -= off;
 800f290:	4b0e      	ldr	r3, [pc, #56]	; (800f2cc <tcp_receive+0x5e8>)
 800f292:	891a      	ldrh	r2, [r3, #8]
 800f294:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f298:	1ad3      	subs	r3, r2, r3
 800f29a:	b29a      	uxth	r2, r3
 800f29c:	4b0b      	ldr	r3, [pc, #44]	; (800f2cc <tcp_receive+0x5e8>)
 800f29e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f2a0:	4b0a      	ldr	r3, [pc, #40]	; (800f2cc <tcp_receive+0x5e8>)
 800f2a2:	685b      	ldr	r3, [r3, #4]
 800f2a4:	891a      	ldrh	r2, [r3, #8]
 800f2a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f2aa:	1ad3      	subs	r3, r2, r3
 800f2ac:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f2ae:	e029      	b.n	800f304 <tcp_receive+0x620>
 800f2b0:	08019d60 	.word	0x08019d60
 800f2b4:	08019d68 	.word	0x08019d68
 800f2b8:	200081e4 	.word	0x200081e4
 800f2bc:	200081e0 	.word	0x200081e0
 800f2c0:	20010e7c 	.word	0x20010e7c
 800f2c4:	200081e6 	.word	0x200081e6
 800f2c8:	200081dc 	.word	0x200081dc
 800f2cc:	200081bc 	.word	0x200081bc
 800f2d0:	080199f8 	.word	0x080199f8
 800f2d4:	08019d70 	.word	0x08019d70
 800f2d8:	08019a44 	.word	0x08019a44
 800f2dc:	08019d80 	.word	0x08019d80
 800f2e0:	08019d90 	.word	0x08019d90
        off -= p->len;
 800f2e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2e6:	895b      	ldrh	r3, [r3, #10]
 800f2e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f2ec:	1ad3      	subs	r3, r2, r3
 800f2ee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f2f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2f4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f2f6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f2f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f2fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f306:	895b      	ldrh	r3, [r3, #10]
 800f308:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f30c:	429a      	cmp	r2, r3
 800f30e:	d8e9      	bhi.n	800f2e4 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f310:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f314:	4619      	mov	r1, r3
 800f316:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f318:	f7fc f8a0 	bl	800b45c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f320:	4a91      	ldr	r2, [pc, #580]	; (800f568 <tcp_receive+0x884>)
 800f322:	6013      	str	r3, [r2, #0]
 800f324:	4b91      	ldr	r3, [pc, #580]	; (800f56c <tcp_receive+0x888>)
 800f326:	68db      	ldr	r3, [r3, #12]
 800f328:	4a8f      	ldr	r2, [pc, #572]	; (800f568 <tcp_receive+0x884>)
 800f32a:	6812      	ldr	r2, [r2, #0]
 800f32c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f32e:	e00d      	b.n	800f34c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f330:	4b8d      	ldr	r3, [pc, #564]	; (800f568 <tcp_receive+0x884>)
 800f332:	681a      	ldr	r2, [r3, #0]
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f338:	1ad3      	subs	r3, r2, r3
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	da06      	bge.n	800f34c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	8b5b      	ldrh	r3, [r3, #26]
 800f342:	f043 0302 	orr.w	r3, r3, #2
 800f346:	b29a      	uxth	r2, r3
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f34c:	4b86      	ldr	r3, [pc, #536]	; (800f568 <tcp_receive+0x884>)
 800f34e:	681a      	ldr	r2, [r3, #0]
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f354:	1ad3      	subs	r3, r2, r3
 800f356:	2b00      	cmp	r3, #0
 800f358:	f2c0 842a 	blt.w	800fbb0 <tcp_receive+0xecc>
 800f35c:	4b82      	ldr	r3, [pc, #520]	; (800f568 <tcp_receive+0x884>)
 800f35e:	681a      	ldr	r2, [r3, #0]
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f364:	6879      	ldr	r1, [r7, #4]
 800f366:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f368:	440b      	add	r3, r1
 800f36a:	1ad3      	subs	r3, r2, r3
 800f36c:	3301      	adds	r3, #1
 800f36e:	2b00      	cmp	r3, #0
 800f370:	f300 841e 	bgt.w	800fbb0 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f378:	4b7b      	ldr	r3, [pc, #492]	; (800f568 <tcp_receive+0x884>)
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	429a      	cmp	r2, r3
 800f37e:	f040 829a 	bne.w	800f8b6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f382:	4b7a      	ldr	r3, [pc, #488]	; (800f56c <tcp_receive+0x888>)
 800f384:	891c      	ldrh	r4, [r3, #8]
 800f386:	4b79      	ldr	r3, [pc, #484]	; (800f56c <tcp_receive+0x888>)
 800f388:	68db      	ldr	r3, [r3, #12]
 800f38a:	899b      	ldrh	r3, [r3, #12]
 800f38c:	b29b      	uxth	r3, r3
 800f38e:	4618      	mov	r0, r3
 800f390:	f7fa fdb4 	bl	8009efc <lwip_htons>
 800f394:	4603      	mov	r3, r0
 800f396:	b2db      	uxtb	r3, r3
 800f398:	f003 0303 	and.w	r3, r3, #3
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d001      	beq.n	800f3a4 <tcp_receive+0x6c0>
 800f3a0:	2301      	movs	r3, #1
 800f3a2:	e000      	b.n	800f3a6 <tcp_receive+0x6c2>
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	4423      	add	r3, r4
 800f3a8:	b29a      	uxth	r2, r3
 800f3aa:	4b71      	ldr	r3, [pc, #452]	; (800f570 <tcp_receive+0x88c>)
 800f3ac:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f3b2:	4b6f      	ldr	r3, [pc, #444]	; (800f570 <tcp_receive+0x88c>)
 800f3b4:	881b      	ldrh	r3, [r3, #0]
 800f3b6:	429a      	cmp	r2, r3
 800f3b8:	d275      	bcs.n	800f4a6 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f3ba:	4b6c      	ldr	r3, [pc, #432]	; (800f56c <tcp_receive+0x888>)
 800f3bc:	68db      	ldr	r3, [r3, #12]
 800f3be:	899b      	ldrh	r3, [r3, #12]
 800f3c0:	b29b      	uxth	r3, r3
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	f7fa fd9a 	bl	8009efc <lwip_htons>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	b2db      	uxtb	r3, r3
 800f3cc:	f003 0301 	and.w	r3, r3, #1
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d01f      	beq.n	800f414 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f3d4:	4b65      	ldr	r3, [pc, #404]	; (800f56c <tcp_receive+0x888>)
 800f3d6:	68db      	ldr	r3, [r3, #12]
 800f3d8:	899b      	ldrh	r3, [r3, #12]
 800f3da:	b29b      	uxth	r3, r3
 800f3dc:	b21b      	sxth	r3, r3
 800f3de:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f3e2:	b21c      	sxth	r4, r3
 800f3e4:	4b61      	ldr	r3, [pc, #388]	; (800f56c <tcp_receive+0x888>)
 800f3e6:	68db      	ldr	r3, [r3, #12]
 800f3e8:	899b      	ldrh	r3, [r3, #12]
 800f3ea:	b29b      	uxth	r3, r3
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	f7fa fd85 	bl	8009efc <lwip_htons>
 800f3f2:	4603      	mov	r3, r0
 800f3f4:	b2db      	uxtb	r3, r3
 800f3f6:	b29b      	uxth	r3, r3
 800f3f8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f3fc:	b29b      	uxth	r3, r3
 800f3fe:	4618      	mov	r0, r3
 800f400:	f7fa fd7c 	bl	8009efc <lwip_htons>
 800f404:	4603      	mov	r3, r0
 800f406:	b21b      	sxth	r3, r3
 800f408:	4323      	orrs	r3, r4
 800f40a:	b21a      	sxth	r2, r3
 800f40c:	4b57      	ldr	r3, [pc, #348]	; (800f56c <tcp_receive+0x888>)
 800f40e:	68db      	ldr	r3, [r3, #12]
 800f410:	b292      	uxth	r2, r2
 800f412:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f418:	4b54      	ldr	r3, [pc, #336]	; (800f56c <tcp_receive+0x888>)
 800f41a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f41c:	4b53      	ldr	r3, [pc, #332]	; (800f56c <tcp_receive+0x888>)
 800f41e:	68db      	ldr	r3, [r3, #12]
 800f420:	899b      	ldrh	r3, [r3, #12]
 800f422:	b29b      	uxth	r3, r3
 800f424:	4618      	mov	r0, r3
 800f426:	f7fa fd69 	bl	8009efc <lwip_htons>
 800f42a:	4603      	mov	r3, r0
 800f42c:	b2db      	uxtb	r3, r3
 800f42e:	f003 0302 	and.w	r3, r3, #2
 800f432:	2b00      	cmp	r3, #0
 800f434:	d005      	beq.n	800f442 <tcp_receive+0x75e>
            inseg.len -= 1;
 800f436:	4b4d      	ldr	r3, [pc, #308]	; (800f56c <tcp_receive+0x888>)
 800f438:	891b      	ldrh	r3, [r3, #8]
 800f43a:	3b01      	subs	r3, #1
 800f43c:	b29a      	uxth	r2, r3
 800f43e:	4b4b      	ldr	r3, [pc, #300]	; (800f56c <tcp_receive+0x888>)
 800f440:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f442:	4b4a      	ldr	r3, [pc, #296]	; (800f56c <tcp_receive+0x888>)
 800f444:	685a      	ldr	r2, [r3, #4]
 800f446:	4b49      	ldr	r3, [pc, #292]	; (800f56c <tcp_receive+0x888>)
 800f448:	891b      	ldrh	r3, [r3, #8]
 800f44a:	4619      	mov	r1, r3
 800f44c:	4610      	mov	r0, r2
 800f44e:	f7fb ff05 	bl	800b25c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f452:	4b46      	ldr	r3, [pc, #280]	; (800f56c <tcp_receive+0x888>)
 800f454:	891c      	ldrh	r4, [r3, #8]
 800f456:	4b45      	ldr	r3, [pc, #276]	; (800f56c <tcp_receive+0x888>)
 800f458:	68db      	ldr	r3, [r3, #12]
 800f45a:	899b      	ldrh	r3, [r3, #12]
 800f45c:	b29b      	uxth	r3, r3
 800f45e:	4618      	mov	r0, r3
 800f460:	f7fa fd4c 	bl	8009efc <lwip_htons>
 800f464:	4603      	mov	r3, r0
 800f466:	b2db      	uxtb	r3, r3
 800f468:	f003 0303 	and.w	r3, r3, #3
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d001      	beq.n	800f474 <tcp_receive+0x790>
 800f470:	2301      	movs	r3, #1
 800f472:	e000      	b.n	800f476 <tcp_receive+0x792>
 800f474:	2300      	movs	r3, #0
 800f476:	4423      	add	r3, r4
 800f478:	b29a      	uxth	r2, r3
 800f47a:	4b3d      	ldr	r3, [pc, #244]	; (800f570 <tcp_receive+0x88c>)
 800f47c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f47e:	4b3c      	ldr	r3, [pc, #240]	; (800f570 <tcp_receive+0x88c>)
 800f480:	881b      	ldrh	r3, [r3, #0]
 800f482:	461a      	mov	r2, r3
 800f484:	4b38      	ldr	r3, [pc, #224]	; (800f568 <tcp_receive+0x884>)
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	441a      	add	r2, r3
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f48e:	6879      	ldr	r1, [r7, #4]
 800f490:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f492:	440b      	add	r3, r1
 800f494:	429a      	cmp	r2, r3
 800f496:	d006      	beq.n	800f4a6 <tcp_receive+0x7c2>
 800f498:	4b36      	ldr	r3, [pc, #216]	; (800f574 <tcp_receive+0x890>)
 800f49a:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800f49e:	4936      	ldr	r1, [pc, #216]	; (800f578 <tcp_receive+0x894>)
 800f4a0:	4836      	ldr	r0, [pc, #216]	; (800f57c <tcp_receive+0x898>)
 800f4a2:	f007 fd53 	bl	8016f4c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	f000 80e7 	beq.w	800f67e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f4b0:	4b2e      	ldr	r3, [pc, #184]	; (800f56c <tcp_receive+0x888>)
 800f4b2:	68db      	ldr	r3, [r3, #12]
 800f4b4:	899b      	ldrh	r3, [r3, #12]
 800f4b6:	b29b      	uxth	r3, r3
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	f7fa fd1f 	bl	8009efc <lwip_htons>
 800f4be:	4603      	mov	r3, r0
 800f4c0:	b2db      	uxtb	r3, r3
 800f4c2:	f003 0301 	and.w	r3, r3, #1
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d010      	beq.n	800f4ec <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f4ca:	e00a      	b.n	800f4e2 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4d0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4d6:	681a      	ldr	r2, [r3, #0]
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800f4dc:	68f8      	ldr	r0, [r7, #12]
 800f4de:	f7fd fcc9 	bl	800ce74 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d1f0      	bne.n	800f4cc <tcp_receive+0x7e8>
 800f4ea:	e0c8      	b.n	800f67e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4f0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f4f2:	e052      	b.n	800f59a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f4f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4f6:	68db      	ldr	r3, [r3, #12]
 800f4f8:	899b      	ldrh	r3, [r3, #12]
 800f4fa:	b29b      	uxth	r3, r3
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	f7fa fcfd 	bl	8009efc <lwip_htons>
 800f502:	4603      	mov	r3, r0
 800f504:	b2db      	uxtb	r3, r3
 800f506:	f003 0301 	and.w	r3, r3, #1
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d03d      	beq.n	800f58a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f50e:	4b17      	ldr	r3, [pc, #92]	; (800f56c <tcp_receive+0x888>)
 800f510:	68db      	ldr	r3, [r3, #12]
 800f512:	899b      	ldrh	r3, [r3, #12]
 800f514:	b29b      	uxth	r3, r3
 800f516:	4618      	mov	r0, r3
 800f518:	f7fa fcf0 	bl	8009efc <lwip_htons>
 800f51c:	4603      	mov	r3, r0
 800f51e:	b2db      	uxtb	r3, r3
 800f520:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f524:	2b00      	cmp	r3, #0
 800f526:	d130      	bne.n	800f58a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f528:	4b10      	ldr	r3, [pc, #64]	; (800f56c <tcp_receive+0x888>)
 800f52a:	68db      	ldr	r3, [r3, #12]
 800f52c:	899b      	ldrh	r3, [r3, #12]
 800f52e:	b29c      	uxth	r4, r3
 800f530:	2001      	movs	r0, #1
 800f532:	f7fa fce3 	bl	8009efc <lwip_htons>
 800f536:	4603      	mov	r3, r0
 800f538:	461a      	mov	r2, r3
 800f53a:	4b0c      	ldr	r3, [pc, #48]	; (800f56c <tcp_receive+0x888>)
 800f53c:	68db      	ldr	r3, [r3, #12]
 800f53e:	4322      	orrs	r2, r4
 800f540:	b292      	uxth	r2, r2
 800f542:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f544:	4b09      	ldr	r3, [pc, #36]	; (800f56c <tcp_receive+0x888>)
 800f546:	891c      	ldrh	r4, [r3, #8]
 800f548:	4b08      	ldr	r3, [pc, #32]	; (800f56c <tcp_receive+0x888>)
 800f54a:	68db      	ldr	r3, [r3, #12]
 800f54c:	899b      	ldrh	r3, [r3, #12]
 800f54e:	b29b      	uxth	r3, r3
 800f550:	4618      	mov	r0, r3
 800f552:	f7fa fcd3 	bl	8009efc <lwip_htons>
 800f556:	4603      	mov	r3, r0
 800f558:	b2db      	uxtb	r3, r3
 800f55a:	f003 0303 	and.w	r3, r3, #3
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d00e      	beq.n	800f580 <tcp_receive+0x89c>
 800f562:	2301      	movs	r3, #1
 800f564:	e00d      	b.n	800f582 <tcp_receive+0x89e>
 800f566:	bf00      	nop
 800f568:	200081dc 	.word	0x200081dc
 800f56c:	200081bc 	.word	0x200081bc
 800f570:	200081e6 	.word	0x200081e6
 800f574:	080199f8 	.word	0x080199f8
 800f578:	08019da0 	.word	0x08019da0
 800f57c:	08019a44 	.word	0x08019a44
 800f580:	2300      	movs	r3, #0
 800f582:	4423      	add	r3, r4
 800f584:	b29a      	uxth	r2, r3
 800f586:	4b98      	ldr	r3, [pc, #608]	; (800f7e8 <tcp_receive+0xb04>)
 800f588:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f58a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f58c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f58e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800f594:	6938      	ldr	r0, [r7, #16]
 800f596:	f7fd fc6d 	bl	800ce74 <tcp_seg_free>
            while (next &&
 800f59a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d00e      	beq.n	800f5be <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f5a0:	4b91      	ldr	r3, [pc, #580]	; (800f7e8 <tcp_receive+0xb04>)
 800f5a2:	881b      	ldrh	r3, [r3, #0]
 800f5a4:	461a      	mov	r2, r3
 800f5a6:	4b91      	ldr	r3, [pc, #580]	; (800f7ec <tcp_receive+0xb08>)
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	441a      	add	r2, r3
 800f5ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5ae:	68db      	ldr	r3, [r3, #12]
 800f5b0:	685b      	ldr	r3, [r3, #4]
 800f5b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f5b4:	8909      	ldrh	r1, [r1, #8]
 800f5b6:	440b      	add	r3, r1
 800f5b8:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	da9a      	bge.n	800f4f4 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f5be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d059      	beq.n	800f678 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800f5c4:	4b88      	ldr	r3, [pc, #544]	; (800f7e8 <tcp_receive+0xb04>)
 800f5c6:	881b      	ldrh	r3, [r3, #0]
 800f5c8:	461a      	mov	r2, r3
 800f5ca:	4b88      	ldr	r3, [pc, #544]	; (800f7ec <tcp_receive+0xb08>)
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	441a      	add	r2, r3
 800f5d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5d2:	68db      	ldr	r3, [r3, #12]
 800f5d4:	685b      	ldr	r3, [r3, #4]
 800f5d6:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	dd4d      	ble.n	800f678 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f5dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5de:	68db      	ldr	r3, [r3, #12]
 800f5e0:	685b      	ldr	r3, [r3, #4]
 800f5e2:	b29a      	uxth	r2, r3
 800f5e4:	4b81      	ldr	r3, [pc, #516]	; (800f7ec <tcp_receive+0xb08>)
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	b29b      	uxth	r3, r3
 800f5ea:	1ad3      	subs	r3, r2, r3
 800f5ec:	b29a      	uxth	r2, r3
 800f5ee:	4b80      	ldr	r3, [pc, #512]	; (800f7f0 <tcp_receive+0xb0c>)
 800f5f0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f5f2:	4b7f      	ldr	r3, [pc, #508]	; (800f7f0 <tcp_receive+0xb0c>)
 800f5f4:	68db      	ldr	r3, [r3, #12]
 800f5f6:	899b      	ldrh	r3, [r3, #12]
 800f5f8:	b29b      	uxth	r3, r3
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f7fa fc7e 	bl	8009efc <lwip_htons>
 800f600:	4603      	mov	r3, r0
 800f602:	b2db      	uxtb	r3, r3
 800f604:	f003 0302 	and.w	r3, r3, #2
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d005      	beq.n	800f618 <tcp_receive+0x934>
                inseg.len -= 1;
 800f60c:	4b78      	ldr	r3, [pc, #480]	; (800f7f0 <tcp_receive+0xb0c>)
 800f60e:	891b      	ldrh	r3, [r3, #8]
 800f610:	3b01      	subs	r3, #1
 800f612:	b29a      	uxth	r2, r3
 800f614:	4b76      	ldr	r3, [pc, #472]	; (800f7f0 <tcp_receive+0xb0c>)
 800f616:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f618:	4b75      	ldr	r3, [pc, #468]	; (800f7f0 <tcp_receive+0xb0c>)
 800f61a:	685a      	ldr	r2, [r3, #4]
 800f61c:	4b74      	ldr	r3, [pc, #464]	; (800f7f0 <tcp_receive+0xb0c>)
 800f61e:	891b      	ldrh	r3, [r3, #8]
 800f620:	4619      	mov	r1, r3
 800f622:	4610      	mov	r0, r2
 800f624:	f7fb fe1a 	bl	800b25c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f628:	4b71      	ldr	r3, [pc, #452]	; (800f7f0 <tcp_receive+0xb0c>)
 800f62a:	891c      	ldrh	r4, [r3, #8]
 800f62c:	4b70      	ldr	r3, [pc, #448]	; (800f7f0 <tcp_receive+0xb0c>)
 800f62e:	68db      	ldr	r3, [r3, #12]
 800f630:	899b      	ldrh	r3, [r3, #12]
 800f632:	b29b      	uxth	r3, r3
 800f634:	4618      	mov	r0, r3
 800f636:	f7fa fc61 	bl	8009efc <lwip_htons>
 800f63a:	4603      	mov	r3, r0
 800f63c:	b2db      	uxtb	r3, r3
 800f63e:	f003 0303 	and.w	r3, r3, #3
 800f642:	2b00      	cmp	r3, #0
 800f644:	d001      	beq.n	800f64a <tcp_receive+0x966>
 800f646:	2301      	movs	r3, #1
 800f648:	e000      	b.n	800f64c <tcp_receive+0x968>
 800f64a:	2300      	movs	r3, #0
 800f64c:	4423      	add	r3, r4
 800f64e:	b29a      	uxth	r2, r3
 800f650:	4b65      	ldr	r3, [pc, #404]	; (800f7e8 <tcp_receive+0xb04>)
 800f652:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f654:	4b64      	ldr	r3, [pc, #400]	; (800f7e8 <tcp_receive+0xb04>)
 800f656:	881b      	ldrh	r3, [r3, #0]
 800f658:	461a      	mov	r2, r3
 800f65a:	4b64      	ldr	r3, [pc, #400]	; (800f7ec <tcp_receive+0xb08>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	441a      	add	r2, r3
 800f660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f662:	68db      	ldr	r3, [r3, #12]
 800f664:	685b      	ldr	r3, [r3, #4]
 800f666:	429a      	cmp	r2, r3
 800f668:	d006      	beq.n	800f678 <tcp_receive+0x994>
 800f66a:	4b62      	ldr	r3, [pc, #392]	; (800f7f4 <tcp_receive+0xb10>)
 800f66c:	f240 52fd 	movw	r2, #1533	; 0x5fd
 800f670:	4961      	ldr	r1, [pc, #388]	; (800f7f8 <tcp_receive+0xb14>)
 800f672:	4862      	ldr	r0, [pc, #392]	; (800f7fc <tcp_receive+0xb18>)
 800f674:	f007 fc6a 	bl	8016f4c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f67c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f67e:	4b5a      	ldr	r3, [pc, #360]	; (800f7e8 <tcp_receive+0xb04>)
 800f680:	881b      	ldrh	r3, [r3, #0]
 800f682:	461a      	mov	r2, r3
 800f684:	4b59      	ldr	r3, [pc, #356]	; (800f7ec <tcp_receive+0xb08>)
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	441a      	add	r2, r3
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f692:	4b55      	ldr	r3, [pc, #340]	; (800f7e8 <tcp_receive+0xb04>)
 800f694:	881b      	ldrh	r3, [r3, #0]
 800f696:	429a      	cmp	r2, r3
 800f698:	d206      	bcs.n	800f6a8 <tcp_receive+0x9c4>
 800f69a:	4b56      	ldr	r3, [pc, #344]	; (800f7f4 <tcp_receive+0xb10>)
 800f69c:	f240 6207 	movw	r2, #1543	; 0x607
 800f6a0:	4957      	ldr	r1, [pc, #348]	; (800f800 <tcp_receive+0xb1c>)
 800f6a2:	4856      	ldr	r0, [pc, #344]	; (800f7fc <tcp_receive+0xb18>)
 800f6a4:	f007 fc52 	bl	8016f4c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f6ac:	4b4e      	ldr	r3, [pc, #312]	; (800f7e8 <tcp_receive+0xb04>)
 800f6ae:	881b      	ldrh	r3, [r3, #0]
 800f6b0:	1ad3      	subs	r3, r2, r3
 800f6b2:	b29a      	uxth	r2, r3
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f6b8:	6878      	ldr	r0, [r7, #4]
 800f6ba:	f7fc feb9 	bl	800c430 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f6be:	4b4c      	ldr	r3, [pc, #304]	; (800f7f0 <tcp_receive+0xb0c>)
 800f6c0:	685b      	ldr	r3, [r3, #4]
 800f6c2:	891b      	ldrh	r3, [r3, #8]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d006      	beq.n	800f6d6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800f6c8:	4b49      	ldr	r3, [pc, #292]	; (800f7f0 <tcp_receive+0xb0c>)
 800f6ca:	685b      	ldr	r3, [r3, #4]
 800f6cc:	4a4d      	ldr	r2, [pc, #308]	; (800f804 <tcp_receive+0xb20>)
 800f6ce:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f6d0:	4b47      	ldr	r3, [pc, #284]	; (800f7f0 <tcp_receive+0xb0c>)
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f6d6:	4b46      	ldr	r3, [pc, #280]	; (800f7f0 <tcp_receive+0xb0c>)
 800f6d8:	68db      	ldr	r3, [r3, #12]
 800f6da:	899b      	ldrh	r3, [r3, #12]
 800f6dc:	b29b      	uxth	r3, r3
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f7fa fc0c 	bl	8009efc <lwip_htons>
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	b2db      	uxtb	r3, r3
 800f6e8:	f003 0301 	and.w	r3, r3, #1
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	f000 80b8 	beq.w	800f862 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f6f2:	4b45      	ldr	r3, [pc, #276]	; (800f808 <tcp_receive+0xb24>)
 800f6f4:	781b      	ldrb	r3, [r3, #0]
 800f6f6:	f043 0320 	orr.w	r3, r3, #32
 800f6fa:	b2da      	uxtb	r2, r3
 800f6fc:	4b42      	ldr	r3, [pc, #264]	; (800f808 <tcp_receive+0xb24>)
 800f6fe:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f700:	e0af      	b.n	800f862 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f706:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f70c:	68db      	ldr	r3, [r3, #12]
 800f70e:	685b      	ldr	r3, [r3, #4]
 800f710:	4a36      	ldr	r2, [pc, #216]	; (800f7ec <tcp_receive+0xb08>)
 800f712:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f714:	68bb      	ldr	r3, [r7, #8]
 800f716:	891b      	ldrh	r3, [r3, #8]
 800f718:	461c      	mov	r4, r3
 800f71a:	68bb      	ldr	r3, [r7, #8]
 800f71c:	68db      	ldr	r3, [r3, #12]
 800f71e:	899b      	ldrh	r3, [r3, #12]
 800f720:	b29b      	uxth	r3, r3
 800f722:	4618      	mov	r0, r3
 800f724:	f7fa fbea 	bl	8009efc <lwip_htons>
 800f728:	4603      	mov	r3, r0
 800f72a:	b2db      	uxtb	r3, r3
 800f72c:	f003 0303 	and.w	r3, r3, #3
 800f730:	2b00      	cmp	r3, #0
 800f732:	d001      	beq.n	800f738 <tcp_receive+0xa54>
 800f734:	2301      	movs	r3, #1
 800f736:	e000      	b.n	800f73a <tcp_receive+0xa56>
 800f738:	2300      	movs	r3, #0
 800f73a:	191a      	adds	r2, r3, r4
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f740:	441a      	add	r2, r3
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f74a:	461c      	mov	r4, r3
 800f74c:	68bb      	ldr	r3, [r7, #8]
 800f74e:	891b      	ldrh	r3, [r3, #8]
 800f750:	461d      	mov	r5, r3
 800f752:	68bb      	ldr	r3, [r7, #8]
 800f754:	68db      	ldr	r3, [r3, #12]
 800f756:	899b      	ldrh	r3, [r3, #12]
 800f758:	b29b      	uxth	r3, r3
 800f75a:	4618      	mov	r0, r3
 800f75c:	f7fa fbce 	bl	8009efc <lwip_htons>
 800f760:	4603      	mov	r3, r0
 800f762:	b2db      	uxtb	r3, r3
 800f764:	f003 0303 	and.w	r3, r3, #3
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d001      	beq.n	800f770 <tcp_receive+0xa8c>
 800f76c:	2301      	movs	r3, #1
 800f76e:	e000      	b.n	800f772 <tcp_receive+0xa8e>
 800f770:	2300      	movs	r3, #0
 800f772:	442b      	add	r3, r5
 800f774:	429c      	cmp	r4, r3
 800f776:	d206      	bcs.n	800f786 <tcp_receive+0xaa2>
 800f778:	4b1e      	ldr	r3, [pc, #120]	; (800f7f4 <tcp_receive+0xb10>)
 800f77a:	f240 622c 	movw	r2, #1580	; 0x62c
 800f77e:	4923      	ldr	r1, [pc, #140]	; (800f80c <tcp_receive+0xb28>)
 800f780:	481e      	ldr	r0, [pc, #120]	; (800f7fc <tcp_receive+0xb18>)
 800f782:	f007 fbe3 	bl	8016f4c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f786:	68bb      	ldr	r3, [r7, #8]
 800f788:	891b      	ldrh	r3, [r3, #8]
 800f78a:	461c      	mov	r4, r3
 800f78c:	68bb      	ldr	r3, [r7, #8]
 800f78e:	68db      	ldr	r3, [r3, #12]
 800f790:	899b      	ldrh	r3, [r3, #12]
 800f792:	b29b      	uxth	r3, r3
 800f794:	4618      	mov	r0, r3
 800f796:	f7fa fbb1 	bl	8009efc <lwip_htons>
 800f79a:	4603      	mov	r3, r0
 800f79c:	b2db      	uxtb	r3, r3
 800f79e:	f003 0303 	and.w	r3, r3, #3
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d001      	beq.n	800f7aa <tcp_receive+0xac6>
 800f7a6:	2301      	movs	r3, #1
 800f7a8:	e000      	b.n	800f7ac <tcp_receive+0xac8>
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	1919      	adds	r1, r3, r4
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f7b2:	b28b      	uxth	r3, r1
 800f7b4:	1ad3      	subs	r3, r2, r3
 800f7b6:	b29a      	uxth	r2, r3
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f7bc:	6878      	ldr	r0, [r7, #4]
 800f7be:	f7fc fe37 	bl	800c430 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f7c2:	68bb      	ldr	r3, [r7, #8]
 800f7c4:	685b      	ldr	r3, [r3, #4]
 800f7c6:	891b      	ldrh	r3, [r3, #8]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d028      	beq.n	800f81e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f7cc:	4b0d      	ldr	r3, [pc, #52]	; (800f804 <tcp_receive+0xb20>)
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d01d      	beq.n	800f810 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800f7d4:	4b0b      	ldr	r3, [pc, #44]	; (800f804 <tcp_receive+0xb20>)
 800f7d6:	681a      	ldr	r2, [r3, #0]
 800f7d8:	68bb      	ldr	r3, [r7, #8]
 800f7da:	685b      	ldr	r3, [r3, #4]
 800f7dc:	4619      	mov	r1, r3
 800f7de:	4610      	mov	r0, r2
 800f7e0:	f7fb ff90 	bl	800b704 <pbuf_cat>
 800f7e4:	e018      	b.n	800f818 <tcp_receive+0xb34>
 800f7e6:	bf00      	nop
 800f7e8:	200081e6 	.word	0x200081e6
 800f7ec:	200081dc 	.word	0x200081dc
 800f7f0:	200081bc 	.word	0x200081bc
 800f7f4:	080199f8 	.word	0x080199f8
 800f7f8:	08019dd8 	.word	0x08019dd8
 800f7fc:	08019a44 	.word	0x08019a44
 800f800:	08019e14 	.word	0x08019e14
 800f804:	200081ec 	.word	0x200081ec
 800f808:	200081e9 	.word	0x200081e9
 800f80c:	08019e34 	.word	0x08019e34
            } else {
              recv_data = cseg->p;
 800f810:	68bb      	ldr	r3, [r7, #8]
 800f812:	685b      	ldr	r3, [r3, #4]
 800f814:	4a70      	ldr	r2, [pc, #448]	; (800f9d8 <tcp_receive+0xcf4>)
 800f816:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f818:	68bb      	ldr	r3, [r7, #8]
 800f81a:	2200      	movs	r2, #0
 800f81c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f81e:	68bb      	ldr	r3, [r7, #8]
 800f820:	68db      	ldr	r3, [r3, #12]
 800f822:	899b      	ldrh	r3, [r3, #12]
 800f824:	b29b      	uxth	r3, r3
 800f826:	4618      	mov	r0, r3
 800f828:	f7fa fb68 	bl	8009efc <lwip_htons>
 800f82c:	4603      	mov	r3, r0
 800f82e:	b2db      	uxtb	r3, r3
 800f830:	f003 0301 	and.w	r3, r3, #1
 800f834:	2b00      	cmp	r3, #0
 800f836:	d00d      	beq.n	800f854 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f838:	4b68      	ldr	r3, [pc, #416]	; (800f9dc <tcp_receive+0xcf8>)
 800f83a:	781b      	ldrb	r3, [r3, #0]
 800f83c:	f043 0320 	orr.w	r3, r3, #32
 800f840:	b2da      	uxtb	r2, r3
 800f842:	4b66      	ldr	r3, [pc, #408]	; (800f9dc <tcp_receive+0xcf8>)
 800f844:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	7d1b      	ldrb	r3, [r3, #20]
 800f84a:	2b04      	cmp	r3, #4
 800f84c:	d102      	bne.n	800f854 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	2207      	movs	r2, #7
 800f852:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f854:	68bb      	ldr	r3, [r7, #8]
 800f856:	681a      	ldr	r2, [r3, #0]
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800f85c:	68b8      	ldr	r0, [r7, #8]
 800f85e:	f7fd fb09 	bl	800ce74 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f866:	2b00      	cmp	r3, #0
 800f868:	d008      	beq.n	800f87c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f86e:	68db      	ldr	r3, [r3, #12]
 800f870:	685a      	ldr	r2, [r3, #4]
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800f876:	429a      	cmp	r2, r3
 800f878:	f43f af43 	beq.w	800f702 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	8b5b      	ldrh	r3, [r3, #26]
 800f880:	f003 0301 	and.w	r3, r3, #1
 800f884:	2b00      	cmp	r3, #0
 800f886:	d00e      	beq.n	800f8a6 <tcp_receive+0xbc2>
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	8b5b      	ldrh	r3, [r3, #26]
 800f88c:	f023 0301 	bic.w	r3, r3, #1
 800f890:	b29a      	uxth	r2, r3
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	835a      	strh	r2, [r3, #26]
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	8b5b      	ldrh	r3, [r3, #26]
 800f89a:	f043 0302 	orr.w	r3, r3, #2
 800f89e:	b29a      	uxth	r2, r3
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f8a4:	e188      	b.n	800fbb8 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	8b5b      	ldrh	r3, [r3, #26]
 800f8aa:	f043 0301 	orr.w	r3, r3, #1
 800f8ae:	b29a      	uxth	r2, r3
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f8b4:	e180      	b.n	800fbb8 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d106      	bne.n	800f8cc <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f8be:	4848      	ldr	r0, [pc, #288]	; (800f9e0 <tcp_receive+0xcfc>)
 800f8c0:	f7fd faf0 	bl	800cea4 <tcp_seg_copy>
 800f8c4:	4602      	mov	r2, r0
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	675a      	str	r2, [r3, #116]	; 0x74
 800f8ca:	e16d      	b.n	800fba8 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f8d4:	63bb      	str	r3, [r7, #56]	; 0x38
 800f8d6:	e157      	b.n	800fb88 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800f8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8da:	68db      	ldr	r3, [r3, #12]
 800f8dc:	685a      	ldr	r2, [r3, #4]
 800f8de:	4b41      	ldr	r3, [pc, #260]	; (800f9e4 <tcp_receive+0xd00>)
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	429a      	cmp	r2, r3
 800f8e4:	d11d      	bne.n	800f922 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f8e6:	4b3e      	ldr	r3, [pc, #248]	; (800f9e0 <tcp_receive+0xcfc>)
 800f8e8:	891a      	ldrh	r2, [r3, #8]
 800f8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ec:	891b      	ldrh	r3, [r3, #8]
 800f8ee:	429a      	cmp	r2, r3
 800f8f0:	f240 814f 	bls.w	800fb92 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f8f4:	483a      	ldr	r0, [pc, #232]	; (800f9e0 <tcp_receive+0xcfc>)
 800f8f6:	f7fd fad5 	bl	800cea4 <tcp_seg_copy>
 800f8fa:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800f8fc:	697b      	ldr	r3, [r7, #20]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	f000 8149 	beq.w	800fb96 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800f904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f906:	2b00      	cmp	r3, #0
 800f908:	d003      	beq.n	800f912 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800f90a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f90c:	697a      	ldr	r2, [r7, #20]
 800f90e:	601a      	str	r2, [r3, #0]
 800f910:	e002      	b.n	800f918 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	697a      	ldr	r2, [r7, #20]
 800f916:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f918:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f91a:	6978      	ldr	r0, [r7, #20]
 800f91c:	f7ff f8de 	bl	800eadc <tcp_oos_insert_segment>
                }
                break;
 800f920:	e139      	b.n	800fb96 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f924:	2b00      	cmp	r3, #0
 800f926:	d117      	bne.n	800f958 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f928:	4b2e      	ldr	r3, [pc, #184]	; (800f9e4 <tcp_receive+0xd00>)
 800f92a:	681a      	ldr	r2, [r3, #0]
 800f92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f92e:	68db      	ldr	r3, [r3, #12]
 800f930:	685b      	ldr	r3, [r3, #4]
 800f932:	1ad3      	subs	r3, r2, r3
 800f934:	2b00      	cmp	r3, #0
 800f936:	da57      	bge.n	800f9e8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f938:	4829      	ldr	r0, [pc, #164]	; (800f9e0 <tcp_receive+0xcfc>)
 800f93a:	f7fd fab3 	bl	800cea4 <tcp_seg_copy>
 800f93e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800f940:	69bb      	ldr	r3, [r7, #24]
 800f942:	2b00      	cmp	r3, #0
 800f944:	f000 8129 	beq.w	800fb9a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	69ba      	ldr	r2, [r7, #24]
 800f94c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f94e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f950:	69b8      	ldr	r0, [r7, #24]
 800f952:	f7ff f8c3 	bl	800eadc <tcp_oos_insert_segment>
                  }
                  break;
 800f956:	e120      	b.n	800fb9a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f958:	4b22      	ldr	r3, [pc, #136]	; (800f9e4 <tcp_receive+0xd00>)
 800f95a:	681a      	ldr	r2, [r3, #0]
 800f95c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f95e:	68db      	ldr	r3, [r3, #12]
 800f960:	685b      	ldr	r3, [r3, #4]
 800f962:	1ad3      	subs	r3, r2, r3
 800f964:	3b01      	subs	r3, #1
 800f966:	2b00      	cmp	r3, #0
 800f968:	db3e      	blt.n	800f9e8 <tcp_receive+0xd04>
 800f96a:	4b1e      	ldr	r3, [pc, #120]	; (800f9e4 <tcp_receive+0xd00>)
 800f96c:	681a      	ldr	r2, [r3, #0]
 800f96e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f970:	68db      	ldr	r3, [r3, #12]
 800f972:	685b      	ldr	r3, [r3, #4]
 800f974:	1ad3      	subs	r3, r2, r3
 800f976:	3301      	adds	r3, #1
 800f978:	2b00      	cmp	r3, #0
 800f97a:	dc35      	bgt.n	800f9e8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f97c:	4818      	ldr	r0, [pc, #96]	; (800f9e0 <tcp_receive+0xcfc>)
 800f97e:	f7fd fa91 	bl	800cea4 <tcp_seg_copy>
 800f982:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800f984:	69fb      	ldr	r3, [r7, #28]
 800f986:	2b00      	cmp	r3, #0
 800f988:	f000 8109 	beq.w	800fb9e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f98c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f98e:	68db      	ldr	r3, [r3, #12]
 800f990:	685b      	ldr	r3, [r3, #4]
 800f992:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f994:	8912      	ldrh	r2, [r2, #8]
 800f996:	441a      	add	r2, r3
 800f998:	4b12      	ldr	r3, [pc, #72]	; (800f9e4 <tcp_receive+0xd00>)
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	1ad3      	subs	r3, r2, r3
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	dd12      	ble.n	800f9c8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f9a2:	4b10      	ldr	r3, [pc, #64]	; (800f9e4 <tcp_receive+0xd00>)
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	b29a      	uxth	r2, r3
 800f9a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9aa:	68db      	ldr	r3, [r3, #12]
 800f9ac:	685b      	ldr	r3, [r3, #4]
 800f9ae:	b29b      	uxth	r3, r3
 800f9b0:	1ad3      	subs	r3, r2, r3
 800f9b2:	b29a      	uxth	r2, r3
 800f9b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9b6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f9b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9ba:	685a      	ldr	r2, [r3, #4]
 800f9bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9be:	891b      	ldrh	r3, [r3, #8]
 800f9c0:	4619      	mov	r1, r3
 800f9c2:	4610      	mov	r0, r2
 800f9c4:	f7fb fc4a 	bl	800b25c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f9c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9ca:	69fa      	ldr	r2, [r7, #28]
 800f9cc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f9ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f9d0:	69f8      	ldr	r0, [r7, #28]
 800f9d2:	f7ff f883 	bl	800eadc <tcp_oos_insert_segment>
                  }
                  break;
 800f9d6:	e0e2      	b.n	800fb9e <tcp_receive+0xeba>
 800f9d8:	200081ec 	.word	0x200081ec
 800f9dc:	200081e9 	.word	0x200081e9
 800f9e0:	200081bc 	.word	0x200081bc
 800f9e4:	200081dc 	.word	0x200081dc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800f9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ea:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	f040 80c6 	bne.w	800fb82 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f9f6:	4b80      	ldr	r3, [pc, #512]	; (800fbf8 <tcp_receive+0xf14>)
 800f9f8:	681a      	ldr	r2, [r3, #0]
 800f9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9fc:	68db      	ldr	r3, [r3, #12]
 800f9fe:	685b      	ldr	r3, [r3, #4]
 800fa00:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	f340 80bd 	ble.w	800fb82 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fa08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa0a:	68db      	ldr	r3, [r3, #12]
 800fa0c:	899b      	ldrh	r3, [r3, #12]
 800fa0e:	b29b      	uxth	r3, r3
 800fa10:	4618      	mov	r0, r3
 800fa12:	f7fa fa73 	bl	8009efc <lwip_htons>
 800fa16:	4603      	mov	r3, r0
 800fa18:	b2db      	uxtb	r3, r3
 800fa1a:	f003 0301 	and.w	r3, r3, #1
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	f040 80bf 	bne.w	800fba2 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800fa24:	4875      	ldr	r0, [pc, #468]	; (800fbfc <tcp_receive+0xf18>)
 800fa26:	f7fd fa3d 	bl	800cea4 <tcp_seg_copy>
 800fa2a:	4602      	mov	r2, r0
 800fa2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa2e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800fa30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	f000 80b6 	beq.w	800fba6 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800fa3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa3c:	68db      	ldr	r3, [r3, #12]
 800fa3e:	685b      	ldr	r3, [r3, #4]
 800fa40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa42:	8912      	ldrh	r2, [r2, #8]
 800fa44:	441a      	add	r2, r3
 800fa46:	4b6c      	ldr	r3, [pc, #432]	; (800fbf8 <tcp_receive+0xf14>)
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	1ad3      	subs	r3, r2, r3
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	dd12      	ble.n	800fa76 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800fa50:	4b69      	ldr	r3, [pc, #420]	; (800fbf8 <tcp_receive+0xf14>)
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	b29a      	uxth	r2, r3
 800fa56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa58:	68db      	ldr	r3, [r3, #12]
 800fa5a:	685b      	ldr	r3, [r3, #4]
 800fa5c:	b29b      	uxth	r3, r3
 800fa5e:	1ad3      	subs	r3, r2, r3
 800fa60:	b29a      	uxth	r2, r3
 800fa62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa64:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800fa66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa68:	685a      	ldr	r2, [r3, #4]
 800fa6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa6c:	891b      	ldrh	r3, [r3, #8]
 800fa6e:	4619      	mov	r1, r3
 800fa70:	4610      	mov	r0, r2
 800fa72:	f7fb fbf3 	bl	800b25c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800fa76:	4b62      	ldr	r3, [pc, #392]	; (800fc00 <tcp_receive+0xf1c>)
 800fa78:	881b      	ldrh	r3, [r3, #0]
 800fa7a:	461a      	mov	r2, r3
 800fa7c:	4b5e      	ldr	r3, [pc, #376]	; (800fbf8 <tcp_receive+0xf14>)
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	441a      	add	r2, r3
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa86:	6879      	ldr	r1, [r7, #4]
 800fa88:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fa8a:	440b      	add	r3, r1
 800fa8c:	1ad3      	subs	r3, r2, r3
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	f340 8089 	ble.w	800fba6 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800fa94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	68db      	ldr	r3, [r3, #12]
 800fa9a:	899b      	ldrh	r3, [r3, #12]
 800fa9c:	b29b      	uxth	r3, r3
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7fa fa2c 	bl	8009efc <lwip_htons>
 800faa4:	4603      	mov	r3, r0
 800faa6:	b2db      	uxtb	r3, r3
 800faa8:	f003 0301 	and.w	r3, r3, #1
 800faac:	2b00      	cmp	r3, #0
 800faae:	d022      	beq.n	800faf6 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800fab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	68db      	ldr	r3, [r3, #12]
 800fab6:	899b      	ldrh	r3, [r3, #12]
 800fab8:	b29b      	uxth	r3, r3
 800faba:	b21b      	sxth	r3, r3
 800fabc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fac0:	b21c      	sxth	r4, r3
 800fac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	68db      	ldr	r3, [r3, #12]
 800fac8:	899b      	ldrh	r3, [r3, #12]
 800faca:	b29b      	uxth	r3, r3
 800facc:	4618      	mov	r0, r3
 800face:	f7fa fa15 	bl	8009efc <lwip_htons>
 800fad2:	4603      	mov	r3, r0
 800fad4:	b2db      	uxtb	r3, r3
 800fad6:	b29b      	uxth	r3, r3
 800fad8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fadc:	b29b      	uxth	r3, r3
 800fade:	4618      	mov	r0, r3
 800fae0:	f7fa fa0c 	bl	8009efc <lwip_htons>
 800fae4:	4603      	mov	r3, r0
 800fae6:	b21b      	sxth	r3, r3
 800fae8:	4323      	orrs	r3, r4
 800faea:	b21a      	sxth	r2, r3
 800faec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	68db      	ldr	r3, [r3, #12]
 800faf2:	b292      	uxth	r2, r2
 800faf4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fafa:	b29a      	uxth	r2, r3
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fb00:	4413      	add	r3, r2
 800fb02:	b299      	uxth	r1, r3
 800fb04:	4b3c      	ldr	r3, [pc, #240]	; (800fbf8 <tcp_receive+0xf14>)
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	b29a      	uxth	r2, r3
 800fb0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	1a8a      	subs	r2, r1, r2
 800fb10:	b292      	uxth	r2, r2
 800fb12:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800fb14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	685a      	ldr	r2, [r3, #4]
 800fb1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	891b      	ldrh	r3, [r3, #8]
 800fb20:	4619      	mov	r1, r3
 800fb22:	4610      	mov	r0, r2
 800fb24:	f7fb fb9a 	bl	800b25c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800fb28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	891c      	ldrh	r4, [r3, #8]
 800fb2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	68db      	ldr	r3, [r3, #12]
 800fb34:	899b      	ldrh	r3, [r3, #12]
 800fb36:	b29b      	uxth	r3, r3
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f7fa f9df 	bl	8009efc <lwip_htons>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	b2db      	uxtb	r3, r3
 800fb42:	f003 0303 	and.w	r3, r3, #3
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d001      	beq.n	800fb4e <tcp_receive+0xe6a>
 800fb4a:	2301      	movs	r3, #1
 800fb4c:	e000      	b.n	800fb50 <tcp_receive+0xe6c>
 800fb4e:	2300      	movs	r3, #0
 800fb50:	4423      	add	r3, r4
 800fb52:	b29a      	uxth	r2, r3
 800fb54:	4b2a      	ldr	r3, [pc, #168]	; (800fc00 <tcp_receive+0xf1c>)
 800fb56:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fb58:	4b29      	ldr	r3, [pc, #164]	; (800fc00 <tcp_receive+0xf1c>)
 800fb5a:	881b      	ldrh	r3, [r3, #0]
 800fb5c:	461a      	mov	r2, r3
 800fb5e:	4b26      	ldr	r3, [pc, #152]	; (800fbf8 <tcp_receive+0xf14>)
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	441a      	add	r2, r3
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb68:	6879      	ldr	r1, [r7, #4]
 800fb6a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fb6c:	440b      	add	r3, r1
 800fb6e:	429a      	cmp	r2, r3
 800fb70:	d019      	beq.n	800fba6 <tcp_receive+0xec2>
 800fb72:	4b24      	ldr	r3, [pc, #144]	; (800fc04 <tcp_receive+0xf20>)
 800fb74:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800fb78:	4923      	ldr	r1, [pc, #140]	; (800fc08 <tcp_receive+0xf24>)
 800fb7a:	4824      	ldr	r0, [pc, #144]	; (800fc0c <tcp_receive+0xf28>)
 800fb7c:	f007 f9e6 	bl	8016f4c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800fb80:	e011      	b.n	800fba6 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fb82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	63bb      	str	r3, [r7, #56]	; 0x38
 800fb88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	f47f aea4 	bne.w	800f8d8 <tcp_receive+0xbf4>
 800fb90:	e00a      	b.n	800fba8 <tcp_receive+0xec4>
                break;
 800fb92:	bf00      	nop
 800fb94:	e008      	b.n	800fba8 <tcp_receive+0xec4>
                break;
 800fb96:	bf00      	nop
 800fb98:	e006      	b.n	800fba8 <tcp_receive+0xec4>
                  break;
 800fb9a:	bf00      	nop
 800fb9c:	e004      	b.n	800fba8 <tcp_receive+0xec4>
                  break;
 800fb9e:	bf00      	nop
 800fba0:	e002      	b.n	800fba8 <tcp_receive+0xec4>
                  break;
 800fba2:	bf00      	nop
 800fba4:	e000      	b.n	800fba8 <tcp_receive+0xec4>
                break;
 800fba6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800fba8:	6878      	ldr	r0, [r7, #4]
 800fbaa:	f001 fe99 	bl	80118e0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800fbae:	e003      	b.n	800fbb8 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800fbb0:	6878      	ldr	r0, [r7, #4]
 800fbb2:	f001 fe95 	bl	80118e0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fbb6:	e01a      	b.n	800fbee <tcp_receive+0xf0a>
 800fbb8:	e019      	b.n	800fbee <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800fbba:	4b0f      	ldr	r3, [pc, #60]	; (800fbf8 <tcp_receive+0xf14>)
 800fbbc:	681a      	ldr	r2, [r3, #0]
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbc2:	1ad3      	subs	r3, r2, r3
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	db0a      	blt.n	800fbde <tcp_receive+0xefa>
 800fbc8:	4b0b      	ldr	r3, [pc, #44]	; (800fbf8 <tcp_receive+0xf14>)
 800fbca:	681a      	ldr	r2, [r3, #0]
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbd0:	6879      	ldr	r1, [r7, #4]
 800fbd2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fbd4:	440b      	add	r3, r1
 800fbd6:	1ad3      	subs	r3, r2, r3
 800fbd8:	3301      	adds	r3, #1
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	dd07      	ble.n	800fbee <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	8b5b      	ldrh	r3, [r3, #26]
 800fbe2:	f043 0302 	orr.w	r3, r3, #2
 800fbe6:	b29a      	uxth	r2, r3
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800fbec:	e7ff      	b.n	800fbee <tcp_receive+0xf0a>
 800fbee:	bf00      	nop
 800fbf0:	3750      	adds	r7, #80	; 0x50
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	bdb0      	pop	{r4, r5, r7, pc}
 800fbf6:	bf00      	nop
 800fbf8:	200081dc 	.word	0x200081dc
 800fbfc:	200081bc 	.word	0x200081bc
 800fc00:	200081e6 	.word	0x200081e6
 800fc04:	080199f8 	.word	0x080199f8
 800fc08:	08019da0 	.word	0x08019da0
 800fc0c:	08019a44 	.word	0x08019a44

0800fc10 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800fc10:	b480      	push	{r7}
 800fc12:	b083      	sub	sp, #12
 800fc14:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800fc16:	4b15      	ldr	r3, [pc, #84]	; (800fc6c <tcp_get_next_optbyte+0x5c>)
 800fc18:	881b      	ldrh	r3, [r3, #0]
 800fc1a:	1c5a      	adds	r2, r3, #1
 800fc1c:	b291      	uxth	r1, r2
 800fc1e:	4a13      	ldr	r2, [pc, #76]	; (800fc6c <tcp_get_next_optbyte+0x5c>)
 800fc20:	8011      	strh	r1, [r2, #0]
 800fc22:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fc24:	4b12      	ldr	r3, [pc, #72]	; (800fc70 <tcp_get_next_optbyte+0x60>)
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d004      	beq.n	800fc36 <tcp_get_next_optbyte+0x26>
 800fc2c:	4b11      	ldr	r3, [pc, #68]	; (800fc74 <tcp_get_next_optbyte+0x64>)
 800fc2e:	881b      	ldrh	r3, [r3, #0]
 800fc30:	88fa      	ldrh	r2, [r7, #6]
 800fc32:	429a      	cmp	r2, r3
 800fc34:	d208      	bcs.n	800fc48 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800fc36:	4b10      	ldr	r3, [pc, #64]	; (800fc78 <tcp_get_next_optbyte+0x68>)
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	3314      	adds	r3, #20
 800fc3c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800fc3e:	88fb      	ldrh	r3, [r7, #6]
 800fc40:	683a      	ldr	r2, [r7, #0]
 800fc42:	4413      	add	r3, r2
 800fc44:	781b      	ldrb	r3, [r3, #0]
 800fc46:	e00b      	b.n	800fc60 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800fc48:	88fb      	ldrh	r3, [r7, #6]
 800fc4a:	b2da      	uxtb	r2, r3
 800fc4c:	4b09      	ldr	r3, [pc, #36]	; (800fc74 <tcp_get_next_optbyte+0x64>)
 800fc4e:	881b      	ldrh	r3, [r3, #0]
 800fc50:	b2db      	uxtb	r3, r3
 800fc52:	1ad3      	subs	r3, r2, r3
 800fc54:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800fc56:	4b06      	ldr	r3, [pc, #24]	; (800fc70 <tcp_get_next_optbyte+0x60>)
 800fc58:	681a      	ldr	r2, [r3, #0]
 800fc5a:	797b      	ldrb	r3, [r7, #5]
 800fc5c:	4413      	add	r3, r2
 800fc5e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fc60:	4618      	mov	r0, r3
 800fc62:	370c      	adds	r7, #12
 800fc64:	46bd      	mov	sp, r7
 800fc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6a:	4770      	bx	lr
 800fc6c:	200081d8 	.word	0x200081d8
 800fc70:	200081d4 	.word	0x200081d4
 800fc74:	200081d2 	.word	0x200081d2
 800fc78:	200081cc 	.word	0x200081cc

0800fc7c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b084      	sub	sp, #16
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d106      	bne.n	800fc98 <tcp_parseopt+0x1c>
 800fc8a:	4b31      	ldr	r3, [pc, #196]	; (800fd50 <tcp_parseopt+0xd4>)
 800fc8c:	f240 727d 	movw	r2, #1917	; 0x77d
 800fc90:	4930      	ldr	r1, [pc, #192]	; (800fd54 <tcp_parseopt+0xd8>)
 800fc92:	4831      	ldr	r0, [pc, #196]	; (800fd58 <tcp_parseopt+0xdc>)
 800fc94:	f007 f95a 	bl	8016f4c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800fc98:	4b30      	ldr	r3, [pc, #192]	; (800fd5c <tcp_parseopt+0xe0>)
 800fc9a:	881b      	ldrh	r3, [r3, #0]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d053      	beq.n	800fd48 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fca0:	4b2f      	ldr	r3, [pc, #188]	; (800fd60 <tcp_parseopt+0xe4>)
 800fca2:	2200      	movs	r2, #0
 800fca4:	801a      	strh	r2, [r3, #0]
 800fca6:	e043      	b.n	800fd30 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 800fca8:	f7ff ffb2 	bl	800fc10 <tcp_get_next_optbyte>
 800fcac:	4603      	mov	r3, r0
 800fcae:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800fcb0:	7bfb      	ldrb	r3, [r7, #15]
 800fcb2:	2b01      	cmp	r3, #1
 800fcb4:	d03c      	beq.n	800fd30 <tcp_parseopt+0xb4>
 800fcb6:	2b02      	cmp	r3, #2
 800fcb8:	d002      	beq.n	800fcc0 <tcp_parseopt+0x44>
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d03f      	beq.n	800fd3e <tcp_parseopt+0xc2>
 800fcbe:	e026      	b.n	800fd0e <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800fcc0:	f7ff ffa6 	bl	800fc10 <tcp_get_next_optbyte>
 800fcc4:	4603      	mov	r3, r0
 800fcc6:	2b04      	cmp	r3, #4
 800fcc8:	d13b      	bne.n	800fd42 <tcp_parseopt+0xc6>
 800fcca:	4b25      	ldr	r3, [pc, #148]	; (800fd60 <tcp_parseopt+0xe4>)
 800fccc:	881b      	ldrh	r3, [r3, #0]
 800fcce:	3302      	adds	r3, #2
 800fcd0:	4a22      	ldr	r2, [pc, #136]	; (800fd5c <tcp_parseopt+0xe0>)
 800fcd2:	8812      	ldrh	r2, [r2, #0]
 800fcd4:	4293      	cmp	r3, r2
 800fcd6:	dc34      	bgt.n	800fd42 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800fcd8:	f7ff ff9a 	bl	800fc10 <tcp_get_next_optbyte>
 800fcdc:	4603      	mov	r3, r0
 800fcde:	b29b      	uxth	r3, r3
 800fce0:	021b      	lsls	r3, r3, #8
 800fce2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800fce4:	f7ff ff94 	bl	800fc10 <tcp_get_next_optbyte>
 800fce8:	4603      	mov	r3, r0
 800fcea:	b29a      	uxth	r2, r3
 800fcec:	89bb      	ldrh	r3, [r7, #12]
 800fcee:	4313      	orrs	r3, r2
 800fcf0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800fcf2:	89bb      	ldrh	r3, [r7, #12]
 800fcf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fcf8:	d804      	bhi.n	800fd04 <tcp_parseopt+0x88>
 800fcfa:	89bb      	ldrh	r3, [r7, #12]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d001      	beq.n	800fd04 <tcp_parseopt+0x88>
 800fd00:	89ba      	ldrh	r2, [r7, #12]
 800fd02:	e001      	b.n	800fd08 <tcp_parseopt+0x8c>
 800fd04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800fd0c:	e010      	b.n	800fd30 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800fd0e:	f7ff ff7f 	bl	800fc10 <tcp_get_next_optbyte>
 800fd12:	4603      	mov	r3, r0
 800fd14:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800fd16:	7afb      	ldrb	r3, [r7, #11]
 800fd18:	2b01      	cmp	r3, #1
 800fd1a:	d914      	bls.n	800fd46 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800fd1c:	7afb      	ldrb	r3, [r7, #11]
 800fd1e:	b29a      	uxth	r2, r3
 800fd20:	4b0f      	ldr	r3, [pc, #60]	; (800fd60 <tcp_parseopt+0xe4>)
 800fd22:	881b      	ldrh	r3, [r3, #0]
 800fd24:	4413      	add	r3, r2
 800fd26:	b29b      	uxth	r3, r3
 800fd28:	3b02      	subs	r3, #2
 800fd2a:	b29a      	uxth	r2, r3
 800fd2c:	4b0c      	ldr	r3, [pc, #48]	; (800fd60 <tcp_parseopt+0xe4>)
 800fd2e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fd30:	4b0b      	ldr	r3, [pc, #44]	; (800fd60 <tcp_parseopt+0xe4>)
 800fd32:	881a      	ldrh	r2, [r3, #0]
 800fd34:	4b09      	ldr	r3, [pc, #36]	; (800fd5c <tcp_parseopt+0xe0>)
 800fd36:	881b      	ldrh	r3, [r3, #0]
 800fd38:	429a      	cmp	r2, r3
 800fd3a:	d3b5      	bcc.n	800fca8 <tcp_parseopt+0x2c>
 800fd3c:	e004      	b.n	800fd48 <tcp_parseopt+0xcc>
          return;
 800fd3e:	bf00      	nop
 800fd40:	e002      	b.n	800fd48 <tcp_parseopt+0xcc>
            return;
 800fd42:	bf00      	nop
 800fd44:	e000      	b.n	800fd48 <tcp_parseopt+0xcc>
            return;
 800fd46:	bf00      	nop
      }
    }
  }
}
 800fd48:	3710      	adds	r7, #16
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd80      	pop	{r7, pc}
 800fd4e:	bf00      	nop
 800fd50:	080199f8 	.word	0x080199f8
 800fd54:	08019e5c 	.word	0x08019e5c
 800fd58:	08019a44 	.word	0x08019a44
 800fd5c:	200081d0 	.word	0x200081d0
 800fd60:	200081d8 	.word	0x200081d8

0800fd64 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800fd64:	b480      	push	{r7}
 800fd66:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800fd68:	4b05      	ldr	r3, [pc, #20]	; (800fd80 <tcp_trigger_input_pcb_close+0x1c>)
 800fd6a:	781b      	ldrb	r3, [r3, #0]
 800fd6c:	f043 0310 	orr.w	r3, r3, #16
 800fd70:	b2da      	uxtb	r2, r3
 800fd72:	4b03      	ldr	r3, [pc, #12]	; (800fd80 <tcp_trigger_input_pcb_close+0x1c>)
 800fd74:	701a      	strb	r2, [r3, #0]
}
 800fd76:	bf00      	nop
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7e:	4770      	bx	lr
 800fd80:	200081e9 	.word	0x200081e9

0800fd84 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b084      	sub	sp, #16
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	60f8      	str	r0, [r7, #12]
 800fd8c:	60b9      	str	r1, [r7, #8]
 800fd8e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d00a      	beq.n	800fdac <tcp_route+0x28>
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	7a1b      	ldrb	r3, [r3, #8]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d006      	beq.n	800fdac <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	7a1b      	ldrb	r3, [r3, #8]
 800fda2:	4618      	mov	r0, r3
 800fda4:	f7fb f856 	bl	800ae54 <netif_get_by_index>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	e003      	b.n	800fdb4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800fdac:	6878      	ldr	r0, [r7, #4]
 800fdae:	f005 fc79 	bl	80156a4 <ip4_route>
 800fdb2:	4603      	mov	r3, r0
  }
}
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	3710      	adds	r7, #16
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	bd80      	pop	{r7, pc}

0800fdbc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800fdbc:	b590      	push	{r4, r7, lr}
 800fdbe:	b087      	sub	sp, #28
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	60f8      	str	r0, [r7, #12]
 800fdc4:	60b9      	str	r1, [r7, #8]
 800fdc6:	603b      	str	r3, [r7, #0]
 800fdc8:	4613      	mov	r3, r2
 800fdca:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d105      	bne.n	800fdde <tcp_create_segment+0x22>
 800fdd2:	4b44      	ldr	r3, [pc, #272]	; (800fee4 <tcp_create_segment+0x128>)
 800fdd4:	22a3      	movs	r2, #163	; 0xa3
 800fdd6:	4944      	ldr	r1, [pc, #272]	; (800fee8 <tcp_create_segment+0x12c>)
 800fdd8:	4844      	ldr	r0, [pc, #272]	; (800feec <tcp_create_segment+0x130>)
 800fdda:	f007 f8b7 	bl	8016f4c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800fdde:	68bb      	ldr	r3, [r7, #8]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d105      	bne.n	800fdf0 <tcp_create_segment+0x34>
 800fde4:	4b3f      	ldr	r3, [pc, #252]	; (800fee4 <tcp_create_segment+0x128>)
 800fde6:	22a4      	movs	r2, #164	; 0xa4
 800fde8:	4941      	ldr	r1, [pc, #260]	; (800fef0 <tcp_create_segment+0x134>)
 800fdea:	4840      	ldr	r0, [pc, #256]	; (800feec <tcp_create_segment+0x130>)
 800fdec:	f007 f8ae 	bl	8016f4c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fdf0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fdf4:	009b      	lsls	r3, r3, #2
 800fdf6:	b2db      	uxtb	r3, r3
 800fdf8:	f003 0304 	and.w	r3, r3, #4
 800fdfc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800fdfe:	2003      	movs	r0, #3
 800fe00:	f7fa fd32 	bl	800a868 <memp_malloc>
 800fe04:	6138      	str	r0, [r7, #16]
 800fe06:	693b      	ldr	r3, [r7, #16]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d104      	bne.n	800fe16 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800fe0c:	68b8      	ldr	r0, [r7, #8]
 800fe0e:	f7fb fbab 	bl	800b568 <pbuf_free>
    return NULL;
 800fe12:	2300      	movs	r3, #0
 800fe14:	e061      	b.n	800feda <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800fe16:	693b      	ldr	r3, [r7, #16]
 800fe18:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800fe1c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800fe1e:	693b      	ldr	r3, [r7, #16]
 800fe20:	2200      	movs	r2, #0
 800fe22:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800fe24:	693b      	ldr	r3, [r7, #16]
 800fe26:	68ba      	ldr	r2, [r7, #8]
 800fe28:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800fe2a:	68bb      	ldr	r3, [r7, #8]
 800fe2c:	891a      	ldrh	r2, [r3, #8]
 800fe2e:	7dfb      	ldrb	r3, [r7, #23]
 800fe30:	b29b      	uxth	r3, r3
 800fe32:	429a      	cmp	r2, r3
 800fe34:	d205      	bcs.n	800fe42 <tcp_create_segment+0x86>
 800fe36:	4b2b      	ldr	r3, [pc, #172]	; (800fee4 <tcp_create_segment+0x128>)
 800fe38:	22b0      	movs	r2, #176	; 0xb0
 800fe3a:	492e      	ldr	r1, [pc, #184]	; (800fef4 <tcp_create_segment+0x138>)
 800fe3c:	482b      	ldr	r0, [pc, #172]	; (800feec <tcp_create_segment+0x130>)
 800fe3e:	f007 f885 	bl	8016f4c <iprintf>
  seg->len = p->tot_len - optlen;
 800fe42:	68bb      	ldr	r3, [r7, #8]
 800fe44:	891a      	ldrh	r2, [r3, #8]
 800fe46:	7dfb      	ldrb	r3, [r7, #23]
 800fe48:	b29b      	uxth	r3, r3
 800fe4a:	1ad3      	subs	r3, r2, r3
 800fe4c:	b29a      	uxth	r2, r3
 800fe4e:	693b      	ldr	r3, [r7, #16]
 800fe50:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800fe52:	2114      	movs	r1, #20
 800fe54:	68b8      	ldr	r0, [r7, #8]
 800fe56:	f7fb faf1 	bl	800b43c <pbuf_add_header>
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d004      	beq.n	800fe6a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800fe60:	6938      	ldr	r0, [r7, #16]
 800fe62:	f7fd f807 	bl	800ce74 <tcp_seg_free>
    return NULL;
 800fe66:	2300      	movs	r3, #0
 800fe68:	e037      	b.n	800feda <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800fe6a:	693b      	ldr	r3, [r7, #16]
 800fe6c:	685b      	ldr	r3, [r3, #4]
 800fe6e:	685a      	ldr	r2, [r3, #4]
 800fe70:	693b      	ldr	r3, [r7, #16]
 800fe72:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	8ada      	ldrh	r2, [r3, #22]
 800fe78:	693b      	ldr	r3, [r7, #16]
 800fe7a:	68dc      	ldr	r4, [r3, #12]
 800fe7c:	4610      	mov	r0, r2
 800fe7e:	f7fa f83d 	bl	8009efc <lwip_htons>
 800fe82:	4603      	mov	r3, r0
 800fe84:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	8b1a      	ldrh	r2, [r3, #24]
 800fe8a:	693b      	ldr	r3, [r7, #16]
 800fe8c:	68dc      	ldr	r4, [r3, #12]
 800fe8e:	4610      	mov	r0, r2
 800fe90:	f7fa f834 	bl	8009efc <lwip_htons>
 800fe94:	4603      	mov	r3, r0
 800fe96:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800fe98:	693b      	ldr	r3, [r7, #16]
 800fe9a:	68dc      	ldr	r4, [r3, #12]
 800fe9c:	6838      	ldr	r0, [r7, #0]
 800fe9e:	f7fa f842 	bl	8009f26 <lwip_htonl>
 800fea2:	4603      	mov	r3, r0
 800fea4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800fea6:	7dfb      	ldrb	r3, [r7, #23]
 800fea8:	089b      	lsrs	r3, r3, #2
 800feaa:	b2db      	uxtb	r3, r3
 800feac:	b29b      	uxth	r3, r3
 800feae:	3305      	adds	r3, #5
 800feb0:	b29b      	uxth	r3, r3
 800feb2:	031b      	lsls	r3, r3, #12
 800feb4:	b29a      	uxth	r2, r3
 800feb6:	79fb      	ldrb	r3, [r7, #7]
 800feb8:	b29b      	uxth	r3, r3
 800feba:	4313      	orrs	r3, r2
 800febc:	b29a      	uxth	r2, r3
 800febe:	693b      	ldr	r3, [r7, #16]
 800fec0:	68dc      	ldr	r4, [r3, #12]
 800fec2:	4610      	mov	r0, r2
 800fec4:	f7fa f81a 	bl	8009efc <lwip_htons>
 800fec8:	4603      	mov	r3, r0
 800feca:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800fecc:	693b      	ldr	r3, [r7, #16]
 800fece:	68db      	ldr	r3, [r3, #12]
 800fed0:	2200      	movs	r2, #0
 800fed2:	749a      	strb	r2, [r3, #18]
 800fed4:	2200      	movs	r2, #0
 800fed6:	74da      	strb	r2, [r3, #19]
  return seg;
 800fed8:	693b      	ldr	r3, [r7, #16]
}
 800feda:	4618      	mov	r0, r3
 800fedc:	371c      	adds	r7, #28
 800fede:	46bd      	mov	sp, r7
 800fee0:	bd90      	pop	{r4, r7, pc}
 800fee2:	bf00      	nop
 800fee4:	08019e78 	.word	0x08019e78
 800fee8:	08019eac 	.word	0x08019eac
 800feec:	08019ecc 	.word	0x08019ecc
 800fef0:	08019ef4 	.word	0x08019ef4
 800fef4:	08019f18 	.word	0x08019f18

0800fef8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b086      	sub	sp, #24
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	607b      	str	r3, [r7, #4]
 800ff00:	4603      	mov	r3, r0
 800ff02:	73fb      	strb	r3, [r7, #15]
 800ff04:	460b      	mov	r3, r1
 800ff06:	81bb      	strh	r3, [r7, #12]
 800ff08:	4613      	mov	r3, r2
 800ff0a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800ff0c:	89bb      	ldrh	r3, [r7, #12]
 800ff0e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d105      	bne.n	800ff22 <tcp_pbuf_prealloc+0x2a>
 800ff16:	4b30      	ldr	r3, [pc, #192]	; (800ffd8 <tcp_pbuf_prealloc+0xe0>)
 800ff18:	22e8      	movs	r2, #232	; 0xe8
 800ff1a:	4930      	ldr	r1, [pc, #192]	; (800ffdc <tcp_pbuf_prealloc+0xe4>)
 800ff1c:	4830      	ldr	r0, [pc, #192]	; (800ffe0 <tcp_pbuf_prealloc+0xe8>)
 800ff1e:	f007 f815 	bl	8016f4c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800ff22:	6a3b      	ldr	r3, [r7, #32]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d105      	bne.n	800ff34 <tcp_pbuf_prealloc+0x3c>
 800ff28:	4b2b      	ldr	r3, [pc, #172]	; (800ffd8 <tcp_pbuf_prealloc+0xe0>)
 800ff2a:	22e9      	movs	r2, #233	; 0xe9
 800ff2c:	492d      	ldr	r1, [pc, #180]	; (800ffe4 <tcp_pbuf_prealloc+0xec>)
 800ff2e:	482c      	ldr	r0, [pc, #176]	; (800ffe0 <tcp_pbuf_prealloc+0xe8>)
 800ff30:	f007 f80c 	bl	8016f4c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800ff34:	89ba      	ldrh	r2, [r7, #12]
 800ff36:	897b      	ldrh	r3, [r7, #10]
 800ff38:	429a      	cmp	r2, r3
 800ff3a:	d221      	bcs.n	800ff80 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800ff3c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ff40:	f003 0302 	and.w	r3, r3, #2
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d111      	bne.n	800ff6c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800ff48:	6a3b      	ldr	r3, [r7, #32]
 800ff4a:	8b5b      	ldrh	r3, [r3, #26]
 800ff4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d115      	bne.n	800ff80 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800ff54:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d007      	beq.n	800ff6c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800ff5c:	6a3b      	ldr	r3, [r7, #32]
 800ff5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d103      	bne.n	800ff6c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800ff64:	6a3b      	ldr	r3, [r7, #32]
 800ff66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d009      	beq.n	800ff80 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800ff6c:	89bb      	ldrh	r3, [r7, #12]
 800ff6e:	f203 4303 	addw	r3, r3, #1027	; 0x403
 800ff72:	f023 0203 	bic.w	r2, r3, #3
 800ff76:	897b      	ldrh	r3, [r7, #10]
 800ff78:	4293      	cmp	r3, r2
 800ff7a:	bf28      	it	cs
 800ff7c:	4613      	movcs	r3, r2
 800ff7e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800ff80:	8af9      	ldrh	r1, [r7, #22]
 800ff82:	7bfb      	ldrb	r3, [r7, #15]
 800ff84:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ff88:	4618      	mov	r0, r3
 800ff8a:	f7fb f80d 	bl	800afa8 <pbuf_alloc>
 800ff8e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ff90:	693b      	ldr	r3, [r7, #16]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d101      	bne.n	800ff9a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800ff96:	2300      	movs	r3, #0
 800ff98:	e019      	b.n	800ffce <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800ff9a:	693b      	ldr	r3, [r7, #16]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d006      	beq.n	800ffb0 <tcp_pbuf_prealloc+0xb8>
 800ffa2:	4b0d      	ldr	r3, [pc, #52]	; (800ffd8 <tcp_pbuf_prealloc+0xe0>)
 800ffa4:	f240 120b 	movw	r2, #267	; 0x10b
 800ffa8:	490f      	ldr	r1, [pc, #60]	; (800ffe8 <tcp_pbuf_prealloc+0xf0>)
 800ffaa:	480d      	ldr	r0, [pc, #52]	; (800ffe0 <tcp_pbuf_prealloc+0xe8>)
 800ffac:	f006 ffce 	bl	8016f4c <iprintf>
  *oversize = p->len - length;
 800ffb0:	693b      	ldr	r3, [r7, #16]
 800ffb2:	895a      	ldrh	r2, [r3, #10]
 800ffb4:	89bb      	ldrh	r3, [r7, #12]
 800ffb6:	1ad3      	subs	r3, r2, r3
 800ffb8:	b29a      	uxth	r2, r3
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800ffbe:	693b      	ldr	r3, [r7, #16]
 800ffc0:	89ba      	ldrh	r2, [r7, #12]
 800ffc2:	811a      	strh	r2, [r3, #8]
 800ffc4:	693b      	ldr	r3, [r7, #16]
 800ffc6:	891a      	ldrh	r2, [r3, #8]
 800ffc8:	693b      	ldr	r3, [r7, #16]
 800ffca:	815a      	strh	r2, [r3, #10]
  return p;
 800ffcc:	693b      	ldr	r3, [r7, #16]
}
 800ffce:	4618      	mov	r0, r3
 800ffd0:	3718      	adds	r7, #24
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	bd80      	pop	{r7, pc}
 800ffd6:	bf00      	nop
 800ffd8:	08019e78 	.word	0x08019e78
 800ffdc:	08019f30 	.word	0x08019f30
 800ffe0:	08019ecc 	.word	0x08019ecc
 800ffe4:	08019f54 	.word	0x08019f54
 800ffe8:	08019f74 	.word	0x08019f74

0800ffec <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b082      	sub	sp, #8
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
 800fff4:	460b      	mov	r3, r1
 800fff6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d106      	bne.n	801000c <tcp_write_checks+0x20>
 800fffe:	4b33      	ldr	r3, [pc, #204]	; (80100cc <tcp_write_checks+0xe0>)
 8010000:	f240 1233 	movw	r2, #307	; 0x133
 8010004:	4932      	ldr	r1, [pc, #200]	; (80100d0 <tcp_write_checks+0xe4>)
 8010006:	4833      	ldr	r0, [pc, #204]	; (80100d4 <tcp_write_checks+0xe8>)
 8010008:	f006 ffa0 	bl	8016f4c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	7d1b      	ldrb	r3, [r3, #20]
 8010010:	2b04      	cmp	r3, #4
 8010012:	d00e      	beq.n	8010032 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8010018:	2b07      	cmp	r3, #7
 801001a:	d00a      	beq.n	8010032 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8010020:	2b02      	cmp	r3, #2
 8010022:	d006      	beq.n	8010032 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8010028:	2b03      	cmp	r3, #3
 801002a:	d002      	beq.n	8010032 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801002c:	f06f 030a 	mvn.w	r3, #10
 8010030:	e048      	b.n	80100c4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8010032:	887b      	ldrh	r3, [r7, #2]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d101      	bne.n	801003c <tcp_write_checks+0x50>
    return ERR_OK;
 8010038:	2300      	movs	r3, #0
 801003a:	e043      	b.n	80100c4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010042:	887a      	ldrh	r2, [r7, #2]
 8010044:	429a      	cmp	r2, r3
 8010046:	d909      	bls.n	801005c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	8b5b      	ldrh	r3, [r3, #26]
 801004c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010050:	b29a      	uxth	r2, r3
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010056:	f04f 33ff 	mov.w	r3, #4294967295
 801005a:	e033      	b.n	80100c4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010062:	2b08      	cmp	r3, #8
 8010064:	d909      	bls.n	801007a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	8b5b      	ldrh	r3, [r3, #26]
 801006a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801006e:	b29a      	uxth	r2, r3
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010074:	f04f 33ff 	mov.w	r3, #4294967295
 8010078:	e024      	b.n	80100c4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010080:	2b00      	cmp	r3, #0
 8010082:	d00f      	beq.n	80100a4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010088:	2b00      	cmp	r3, #0
 801008a:	d11a      	bne.n	80100c2 <tcp_write_checks+0xd6>
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010090:	2b00      	cmp	r3, #0
 8010092:	d116      	bne.n	80100c2 <tcp_write_checks+0xd6>
 8010094:	4b0d      	ldr	r3, [pc, #52]	; (80100cc <tcp_write_checks+0xe0>)
 8010096:	f44f 72ab 	mov.w	r2, #342	; 0x156
 801009a:	490f      	ldr	r1, [pc, #60]	; (80100d8 <tcp_write_checks+0xec>)
 801009c:	480d      	ldr	r0, [pc, #52]	; (80100d4 <tcp_write_checks+0xe8>)
 801009e:	f006 ff55 	bl	8016f4c <iprintf>
 80100a2:	e00e      	b.n	80100c2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d103      	bne.n	80100b4 <tcp_write_checks+0xc8>
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d006      	beq.n	80100c2 <tcp_write_checks+0xd6>
 80100b4:	4b05      	ldr	r3, [pc, #20]	; (80100cc <tcp_write_checks+0xe0>)
 80100b6:	f240 1259 	movw	r2, #345	; 0x159
 80100ba:	4908      	ldr	r1, [pc, #32]	; (80100dc <tcp_write_checks+0xf0>)
 80100bc:	4805      	ldr	r0, [pc, #20]	; (80100d4 <tcp_write_checks+0xe8>)
 80100be:	f006 ff45 	bl	8016f4c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80100c2:	2300      	movs	r3, #0
}
 80100c4:	4618      	mov	r0, r3
 80100c6:	3708      	adds	r7, #8
 80100c8:	46bd      	mov	sp, r7
 80100ca:	bd80      	pop	{r7, pc}
 80100cc:	08019e78 	.word	0x08019e78
 80100d0:	08019f88 	.word	0x08019f88
 80100d4:	08019ecc 	.word	0x08019ecc
 80100d8:	08019fa8 	.word	0x08019fa8
 80100dc:	08019fe4 	.word	0x08019fe4

080100e0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80100e0:	b590      	push	{r4, r7, lr}
 80100e2:	b09b      	sub	sp, #108	; 0x6c
 80100e4:	af04      	add	r7, sp, #16
 80100e6:	60f8      	str	r0, [r7, #12]
 80100e8:	60b9      	str	r1, [r7, #8]
 80100ea:	4611      	mov	r1, r2
 80100ec:	461a      	mov	r2, r3
 80100ee:	460b      	mov	r3, r1
 80100f0:	80fb      	strh	r3, [r7, #6]
 80100f2:	4613      	mov	r3, r2
 80100f4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80100f6:	2300      	movs	r3, #0
 80100f8:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80100fa:	2300      	movs	r3, #0
 80100fc:	653b      	str	r3, [r7, #80]	; 0x50
 80100fe:	2300      	movs	r3, #0
 8010100:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010102:	2300      	movs	r3, #0
 8010104:	64bb      	str	r3, [r7, #72]	; 0x48
 8010106:	2300      	movs	r3, #0
 8010108:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801010a:	2300      	movs	r3, #0
 801010c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8010110:	2300      	movs	r3, #0
 8010112:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8010116:	2300      	movs	r3, #0
 8010118:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801011a:	2300      	movs	r3, #0
 801011c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801011e:	2300      	movs	r3, #0
 8010120:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d109      	bne.n	801013c <tcp_write+0x5c>
 8010128:	4ba5      	ldr	r3, [pc, #660]	; (80103c0 <tcp_write+0x2e0>)
 801012a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801012e:	49a5      	ldr	r1, [pc, #660]	; (80103c4 <tcp_write+0x2e4>)
 8010130:	48a5      	ldr	r0, [pc, #660]	; (80103c8 <tcp_write+0x2e8>)
 8010132:	f006 ff0b 	bl	8016f4c <iprintf>
 8010136:	f06f 030f 	mvn.w	r3, #15
 801013a:	e32c      	b.n	8010796 <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010142:	085b      	lsrs	r3, r3, #1
 8010144:	b29a      	uxth	r2, r3
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801014a:	4293      	cmp	r3, r2
 801014c:	bf28      	it	cs
 801014e:	4613      	movcs	r3, r2
 8010150:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8010152:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010154:	2b00      	cmp	r3, #0
 8010156:	d102      	bne.n	801015e <tcp_write+0x7e>
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801015c:	e000      	b.n	8010160 <tcp_write+0x80>
 801015e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010160:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8010162:	68bb      	ldr	r3, [r7, #8]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d109      	bne.n	801017c <tcp_write+0x9c>
 8010168:	4b95      	ldr	r3, [pc, #596]	; (80103c0 <tcp_write+0x2e0>)
 801016a:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 801016e:	4997      	ldr	r1, [pc, #604]	; (80103cc <tcp_write+0x2ec>)
 8010170:	4895      	ldr	r0, [pc, #596]	; (80103c8 <tcp_write+0x2e8>)
 8010172:	f006 feeb 	bl	8016f4c <iprintf>
 8010176:	f06f 030f 	mvn.w	r3, #15
 801017a:	e30c      	b.n	8010796 <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801017c:	88fb      	ldrh	r3, [r7, #6]
 801017e:	4619      	mov	r1, r3
 8010180:	68f8      	ldr	r0, [r7, #12]
 8010182:	f7ff ff33 	bl	800ffec <tcp_write_checks>
 8010186:	4603      	mov	r3, r0
 8010188:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801018c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010190:	2b00      	cmp	r3, #0
 8010192:	d002      	beq.n	801019a <tcp_write+0xba>
    return err;
 8010194:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010198:	e2fd      	b.n	8010796 <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80101a0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80101a4:	2300      	movs	r3, #0
 80101a6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	f000 80f7 	beq.w	80103a2 <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101b8:	653b      	str	r3, [r7, #80]	; 0x50
 80101ba:	e002      	b.n	80101c2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80101bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80101c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d1f8      	bne.n	80101bc <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80101ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101cc:	7a9b      	ldrb	r3, [r3, #10]
 80101ce:	009b      	lsls	r3, r3, #2
 80101d0:	b29b      	uxth	r3, r3
 80101d2:	f003 0304 	and.w	r3, r3, #4
 80101d6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80101d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80101da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101dc:	891b      	ldrh	r3, [r3, #8]
 80101de:	4619      	mov	r1, r3
 80101e0:	8c3b      	ldrh	r3, [r7, #32]
 80101e2:	440b      	add	r3, r1
 80101e4:	429a      	cmp	r2, r3
 80101e6:	da06      	bge.n	80101f6 <tcp_write+0x116>
 80101e8:	4b75      	ldr	r3, [pc, #468]	; (80103c0 <tcp_write+0x2e0>)
 80101ea:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80101ee:	4978      	ldr	r1, [pc, #480]	; (80103d0 <tcp_write+0x2f0>)
 80101f0:	4875      	ldr	r0, [pc, #468]	; (80103c8 <tcp_write+0x2e8>)
 80101f2:	f006 feab 	bl	8016f4c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80101f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101f8:	891a      	ldrh	r2, [r3, #8]
 80101fa:	8c3b      	ldrh	r3, [r7, #32]
 80101fc:	4413      	add	r3, r2
 80101fe:	b29b      	uxth	r3, r3
 8010200:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010202:	1ad3      	subs	r3, r2, r3
 8010204:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801020c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801020e:	8a7b      	ldrh	r3, [r7, #18]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d027      	beq.n	8010264 <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8010214:	8a7b      	ldrh	r3, [r7, #18]
 8010216:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010218:	429a      	cmp	r2, r3
 801021a:	d206      	bcs.n	801022a <tcp_write+0x14a>
 801021c:	4b68      	ldr	r3, [pc, #416]	; (80103c0 <tcp_write+0x2e0>)
 801021e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8010222:	496c      	ldr	r1, [pc, #432]	; (80103d4 <tcp_write+0x2f4>)
 8010224:	4868      	ldr	r0, [pc, #416]	; (80103c8 <tcp_write+0x2e8>)
 8010226:	f006 fe91 	bl	8016f4c <iprintf>
      seg = last_unsent;
 801022a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801022c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801022e:	8a7b      	ldrh	r3, [r7, #18]
 8010230:	88fa      	ldrh	r2, [r7, #6]
 8010232:	429a      	cmp	r2, r3
 8010234:	d901      	bls.n	801023a <tcp_write+0x15a>
 8010236:	8a7b      	ldrh	r3, [r7, #18]
 8010238:	e000      	b.n	801023c <tcp_write+0x15c>
 801023a:	88fb      	ldrh	r3, [r7, #6]
 801023c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801023e:	4293      	cmp	r3, r2
 8010240:	bfa8      	it	ge
 8010242:	4613      	movge	r3, r2
 8010244:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8010246:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801024a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801024c:	4413      	add	r3, r2
 801024e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8010252:	8a7a      	ldrh	r2, [r7, #18]
 8010254:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010256:	1ad3      	subs	r3, r2, r3
 8010258:	b29b      	uxth	r3, r3
 801025a:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801025c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801025e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010260:	1ad3      	subs	r3, r2, r3
 8010262:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8010264:	8a7b      	ldrh	r3, [r7, #18]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d00b      	beq.n	8010282 <tcp_write+0x1a2>
 801026a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801026e:	88fb      	ldrh	r3, [r7, #6]
 8010270:	429a      	cmp	r2, r3
 8010272:	d006      	beq.n	8010282 <tcp_write+0x1a2>
 8010274:	4b52      	ldr	r3, [pc, #328]	; (80103c0 <tcp_write+0x2e0>)
 8010276:	f44f 7200 	mov.w	r2, #512	; 0x200
 801027a:	4957      	ldr	r1, [pc, #348]	; (80103d8 <tcp_write+0x2f8>)
 801027c:	4852      	ldr	r0, [pc, #328]	; (80103c8 <tcp_write+0x2e8>)
 801027e:	f006 fe65 	bl	8016f4c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010282:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010286:	88fb      	ldrh	r3, [r7, #6]
 8010288:	429a      	cmp	r2, r3
 801028a:	f080 8168 	bcs.w	801055e <tcp_write+0x47e>
 801028e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010290:	2b00      	cmp	r3, #0
 8010292:	f000 8164 	beq.w	801055e <tcp_write+0x47e>
 8010296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010298:	891b      	ldrh	r3, [r3, #8]
 801029a:	2b00      	cmp	r3, #0
 801029c:	f000 815f 	beq.w	801055e <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80102a0:	88fa      	ldrh	r2, [r7, #6]
 80102a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80102a6:	1ad2      	subs	r2, r2, r3
 80102a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80102aa:	4293      	cmp	r3, r2
 80102ac:	bfa8      	it	ge
 80102ae:	4613      	movge	r3, r2
 80102b0:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80102b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102b4:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80102b6:	797b      	ldrb	r3, [r7, #5]
 80102b8:	f003 0301 	and.w	r3, r3, #1
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d027      	beq.n	8010310 <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80102c0:	f107 0012 	add.w	r0, r7, #18
 80102c4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80102c6:	8bf9      	ldrh	r1, [r7, #30]
 80102c8:	2301      	movs	r3, #1
 80102ca:	9302      	str	r3, [sp, #8]
 80102cc:	797b      	ldrb	r3, [r7, #5]
 80102ce:	9301      	str	r3, [sp, #4]
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	9300      	str	r3, [sp, #0]
 80102d4:	4603      	mov	r3, r0
 80102d6:	2000      	movs	r0, #0
 80102d8:	f7ff fe0e 	bl	800fef8 <tcp_pbuf_prealloc>
 80102dc:	6578      	str	r0, [r7, #84]	; 0x54
 80102de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	f000 8226 	beq.w	8010732 <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80102e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80102e8:	6858      	ldr	r0, [r3, #4]
 80102ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80102ee:	68ba      	ldr	r2, [r7, #8]
 80102f0:	4413      	add	r3, r2
 80102f2:	8bfa      	ldrh	r2, [r7, #30]
 80102f4:	4619      	mov	r1, r3
 80102f6:	f006 fe16 	bl	8016f26 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80102fa:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80102fc:	f7fb f9c2 	bl	800b684 <pbuf_clen>
 8010300:	4603      	mov	r3, r0
 8010302:	461a      	mov	r2, r3
 8010304:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010308:	4413      	add	r3, r2
 801030a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801030e:	e041      	b.n	8010394 <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8010310:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010312:	685b      	ldr	r3, [r3, #4]
 8010314:	637b      	str	r3, [r7, #52]	; 0x34
 8010316:	e002      	b.n	801031e <tcp_write+0x23e>
 8010318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	637b      	str	r3, [r7, #52]	; 0x34
 801031e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d1f8      	bne.n	8010318 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010328:	7b1b      	ldrb	r3, [r3, #12]
 801032a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801032e:	2b00      	cmp	r3, #0
 8010330:	d115      	bne.n	801035e <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8010332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010334:	685b      	ldr	r3, [r3, #4]
 8010336:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010338:	8952      	ldrh	r2, [r2, #10]
 801033a:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801033c:	68ba      	ldr	r2, [r7, #8]
 801033e:	429a      	cmp	r2, r3
 8010340:	d10d      	bne.n	801035e <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8010342:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010346:	2b00      	cmp	r3, #0
 8010348:	d006      	beq.n	8010358 <tcp_write+0x278>
 801034a:	4b1d      	ldr	r3, [pc, #116]	; (80103c0 <tcp_write+0x2e0>)
 801034c:	f240 2231 	movw	r2, #561	; 0x231
 8010350:	4922      	ldr	r1, [pc, #136]	; (80103dc <tcp_write+0x2fc>)
 8010352:	481d      	ldr	r0, [pc, #116]	; (80103c8 <tcp_write+0x2e8>)
 8010354:	f006 fdfa 	bl	8016f4c <iprintf>
          extendlen = seglen;
 8010358:	8bfb      	ldrh	r3, [r7, #30]
 801035a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801035c:	e01a      	b.n	8010394 <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801035e:	8bfb      	ldrh	r3, [r7, #30]
 8010360:	2201      	movs	r2, #1
 8010362:	4619      	mov	r1, r3
 8010364:	2000      	movs	r0, #0
 8010366:	f7fa fe1f 	bl	800afa8 <pbuf_alloc>
 801036a:	6578      	str	r0, [r7, #84]	; 0x54
 801036c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801036e:	2b00      	cmp	r3, #0
 8010370:	f000 81e1 	beq.w	8010736 <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8010374:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010378:	68ba      	ldr	r2, [r7, #8]
 801037a:	441a      	add	r2, r3
 801037c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801037e:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8010380:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010382:	f7fb f97f 	bl	800b684 <pbuf_clen>
 8010386:	4603      	mov	r3, r0
 8010388:	461a      	mov	r2, r3
 801038a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801038e:	4413      	add	r3, r2
 8010390:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8010394:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010398:	8bfb      	ldrh	r3, [r7, #30]
 801039a:	4413      	add	r3, r2
 801039c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80103a0:	e0dd      	b.n	801055e <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	f000 80d8 	beq.w	801055e <tcp_write+0x47e>
 80103ae:	4b04      	ldr	r3, [pc, #16]	; (80103c0 <tcp_write+0x2e0>)
 80103b0:	f240 224b 	movw	r2, #587	; 0x24b
 80103b4:	490a      	ldr	r1, [pc, #40]	; (80103e0 <tcp_write+0x300>)
 80103b6:	4804      	ldr	r0, [pc, #16]	; (80103c8 <tcp_write+0x2e8>)
 80103b8:	f006 fdc8 	bl	8016f4c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80103bc:	e0cf      	b.n	801055e <tcp_write+0x47e>
 80103be:	bf00      	nop
 80103c0:	08019e78 	.word	0x08019e78
 80103c4:	0801a018 	.word	0x0801a018
 80103c8:	08019ecc 	.word	0x08019ecc
 80103cc:	0801a030 	.word	0x0801a030
 80103d0:	0801a064 	.word	0x0801a064
 80103d4:	0801a07c 	.word	0x0801a07c
 80103d8:	0801a09c 	.word	0x0801a09c
 80103dc:	0801a0bc 	.word	0x0801a0bc
 80103e0:	0801a0e8 	.word	0x0801a0e8
    struct pbuf *p;
    u16_t left = len - pos;
 80103e4:	88fa      	ldrh	r2, [r7, #6]
 80103e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80103ea:	1ad3      	subs	r3, r2, r3
 80103ec:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80103ee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80103f2:	b29b      	uxth	r3, r3
 80103f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80103f6:	1ad3      	subs	r3, r2, r3
 80103f8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80103fa:	8b7a      	ldrh	r2, [r7, #26]
 80103fc:	8bbb      	ldrh	r3, [r7, #28]
 80103fe:	4293      	cmp	r3, r2
 8010400:	bf28      	it	cs
 8010402:	4613      	movcs	r3, r2
 8010404:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010406:	797b      	ldrb	r3, [r7, #5]
 8010408:	f003 0301 	and.w	r3, r3, #1
 801040c:	2b00      	cmp	r3, #0
 801040e:	d036      	beq.n	801047e <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8010410:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010414:	b29a      	uxth	r2, r3
 8010416:	8b3b      	ldrh	r3, [r7, #24]
 8010418:	4413      	add	r3, r2
 801041a:	b299      	uxth	r1, r3
 801041c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801041e:	2b00      	cmp	r3, #0
 8010420:	bf0c      	ite	eq
 8010422:	2301      	moveq	r3, #1
 8010424:	2300      	movne	r3, #0
 8010426:	b2db      	uxtb	r3, r3
 8010428:	f107 0012 	add.w	r0, r7, #18
 801042c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801042e:	9302      	str	r3, [sp, #8]
 8010430:	797b      	ldrb	r3, [r7, #5]
 8010432:	9301      	str	r3, [sp, #4]
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	9300      	str	r3, [sp, #0]
 8010438:	4603      	mov	r3, r0
 801043a:	2036      	movs	r0, #54	; 0x36
 801043c:	f7ff fd5c 	bl	800fef8 <tcp_pbuf_prealloc>
 8010440:	6338      	str	r0, [r7, #48]	; 0x30
 8010442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010444:	2b00      	cmp	r3, #0
 8010446:	f000 8178 	beq.w	801073a <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801044a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801044c:	895b      	ldrh	r3, [r3, #10]
 801044e:	8b3a      	ldrh	r2, [r7, #24]
 8010450:	429a      	cmp	r2, r3
 8010452:	d906      	bls.n	8010462 <tcp_write+0x382>
 8010454:	4b8c      	ldr	r3, [pc, #560]	; (8010688 <tcp_write+0x5a8>)
 8010456:	f240 2267 	movw	r2, #615	; 0x267
 801045a:	498c      	ldr	r1, [pc, #560]	; (801068c <tcp_write+0x5ac>)
 801045c:	488c      	ldr	r0, [pc, #560]	; (8010690 <tcp_write+0x5b0>)
 801045e:	f006 fd75 	bl	8016f4c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8010462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010464:	685a      	ldr	r2, [r3, #4]
 8010466:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801046a:	18d0      	adds	r0, r2, r3
 801046c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010470:	68ba      	ldr	r2, [r7, #8]
 8010472:	4413      	add	r3, r2
 8010474:	8b3a      	ldrh	r2, [r7, #24]
 8010476:	4619      	mov	r1, r3
 8010478:	f006 fd55 	bl	8016f26 <memcpy>
 801047c:	e02f      	b.n	80104de <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801047e:	8a7b      	ldrh	r3, [r7, #18]
 8010480:	2b00      	cmp	r3, #0
 8010482:	d006      	beq.n	8010492 <tcp_write+0x3b2>
 8010484:	4b80      	ldr	r3, [pc, #512]	; (8010688 <tcp_write+0x5a8>)
 8010486:	f240 2271 	movw	r2, #625	; 0x271
 801048a:	4982      	ldr	r1, [pc, #520]	; (8010694 <tcp_write+0x5b4>)
 801048c:	4880      	ldr	r0, [pc, #512]	; (8010690 <tcp_write+0x5b0>)
 801048e:	f006 fd5d 	bl	8016f4c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8010492:	8b3b      	ldrh	r3, [r7, #24]
 8010494:	2201      	movs	r2, #1
 8010496:	4619      	mov	r1, r3
 8010498:	2036      	movs	r0, #54	; 0x36
 801049a:	f7fa fd85 	bl	800afa8 <pbuf_alloc>
 801049e:	6178      	str	r0, [r7, #20]
 80104a0:	697b      	ldr	r3, [r7, #20]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	f000 814b 	beq.w	801073e <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80104a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80104ac:	68ba      	ldr	r2, [r7, #8]
 80104ae:	441a      	add	r2, r3
 80104b0:	697b      	ldr	r3, [r7, #20]
 80104b2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80104b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80104b8:	b29b      	uxth	r3, r3
 80104ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 80104be:	4619      	mov	r1, r3
 80104c0:	2036      	movs	r0, #54	; 0x36
 80104c2:	f7fa fd71 	bl	800afa8 <pbuf_alloc>
 80104c6:	6338      	str	r0, [r7, #48]	; 0x30
 80104c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d103      	bne.n	80104d6 <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80104ce:	6978      	ldr	r0, [r7, #20]
 80104d0:	f7fb f84a 	bl	800b568 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80104d4:	e136      	b.n	8010744 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80104d6:	6979      	ldr	r1, [r7, #20]
 80104d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80104da:	f7fb f913 	bl	800b704 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80104de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80104e0:	f7fb f8d0 	bl	800b684 <pbuf_clen>
 80104e4:	4603      	mov	r3, r0
 80104e6:	461a      	mov	r2, r3
 80104e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80104ec:	4413      	add	r3, r2
 80104ee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80104f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80104f6:	2b09      	cmp	r3, #9
 80104f8:	d903      	bls.n	8010502 <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80104fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80104fc:	f7fb f834 	bl	800b568 <pbuf_free>
      goto memerr;
 8010500:	e120      	b.n	8010744 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010506:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801050a:	441a      	add	r2, r3
 801050c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010510:	9300      	str	r3, [sp, #0]
 8010512:	4613      	mov	r3, r2
 8010514:	2200      	movs	r2, #0
 8010516:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010518:	68f8      	ldr	r0, [r7, #12]
 801051a:	f7ff fc4f 	bl	800fdbc <tcp_create_segment>
 801051e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8010520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010522:	2b00      	cmp	r3, #0
 8010524:	f000 810d 	beq.w	8010742 <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8010528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801052a:	2b00      	cmp	r3, #0
 801052c:	d102      	bne.n	8010534 <tcp_write+0x454>
      queue = seg;
 801052e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010530:	647b      	str	r3, [r7, #68]	; 0x44
 8010532:	e00c      	b.n	801054e <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8010534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010536:	2b00      	cmp	r3, #0
 8010538:	d106      	bne.n	8010548 <tcp_write+0x468>
 801053a:	4b53      	ldr	r3, [pc, #332]	; (8010688 <tcp_write+0x5a8>)
 801053c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010540:	4955      	ldr	r1, [pc, #340]	; (8010698 <tcp_write+0x5b8>)
 8010542:	4853      	ldr	r0, [pc, #332]	; (8010690 <tcp_write+0x5b0>)
 8010544:	f006 fd02 	bl	8016f4c <iprintf>
      prev_seg->next = seg;
 8010548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801054a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801054c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801054e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010550:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8010552:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010556:	8b3b      	ldrh	r3, [r7, #24]
 8010558:	4413      	add	r3, r2
 801055a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801055e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010562:	88fb      	ldrh	r3, [r7, #6]
 8010564:	429a      	cmp	r2, r3
 8010566:	f4ff af3d 	bcc.w	80103e4 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801056a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801056c:	2b00      	cmp	r3, #0
 801056e:	d02c      	beq.n	80105ca <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8010570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010572:	685b      	ldr	r3, [r3, #4]
 8010574:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010576:	e01e      	b.n	80105b6 <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 8010578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801057a:	891a      	ldrh	r2, [r3, #8]
 801057c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801057e:	4413      	add	r3, r2
 8010580:	b29a      	uxth	r2, r3
 8010582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010584:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8010586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d110      	bne.n	80105b0 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801058e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010590:	685b      	ldr	r3, [r3, #4]
 8010592:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010594:	8952      	ldrh	r2, [r2, #10]
 8010596:	4413      	add	r3, r2
 8010598:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801059a:	68b9      	ldr	r1, [r7, #8]
 801059c:	4618      	mov	r0, r3
 801059e:	f006 fcc2 	bl	8016f26 <memcpy>
        p->len += oversize_used;
 80105a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105a4:	895a      	ldrh	r2, [r3, #10]
 80105a6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80105a8:	4413      	add	r3, r2
 80105aa:	b29a      	uxth	r2, r3
 80105ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ae:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80105b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80105b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d1dd      	bne.n	8010578 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 80105bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105be:	891a      	ldrh	r2, [r3, #8]
 80105c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80105c2:	4413      	add	r3, r2
 80105c4:	b29a      	uxth	r2, r3
 80105c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105c8:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80105ca:	8a7a      	ldrh	r2, [r7, #18]
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80105d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d018      	beq.n	801060a <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80105d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d106      	bne.n	80105ec <tcp_write+0x50c>
 80105de:	4b2a      	ldr	r3, [pc, #168]	; (8010688 <tcp_write+0x5a8>)
 80105e0:	f240 22e1 	movw	r2, #737	; 0x2e1
 80105e4:	492d      	ldr	r1, [pc, #180]	; (801069c <tcp_write+0x5bc>)
 80105e6:	482a      	ldr	r0, [pc, #168]	; (8010690 <tcp_write+0x5b0>)
 80105e8:	f006 fcb0 	bl	8016f4c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80105ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105ee:	685b      	ldr	r3, [r3, #4]
 80105f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80105f2:	4618      	mov	r0, r3
 80105f4:	f7fb f886 	bl	800b704 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80105f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105fa:	891a      	ldrh	r2, [r3, #8]
 80105fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105fe:	891b      	ldrh	r3, [r3, #8]
 8010600:	4413      	add	r3, r2
 8010602:	b29a      	uxth	r2, r3
 8010604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010606:	811a      	strh	r2, [r3, #8]
 8010608:	e037      	b.n	801067a <tcp_write+0x59a>
  } else if (extendlen > 0) {
 801060a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801060c:	2b00      	cmp	r3, #0
 801060e:	d034      	beq.n	801067a <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8010610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010612:	2b00      	cmp	r3, #0
 8010614:	d003      	beq.n	801061e <tcp_write+0x53e>
 8010616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010618:	685b      	ldr	r3, [r3, #4]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d106      	bne.n	801062c <tcp_write+0x54c>
 801061e:	4b1a      	ldr	r3, [pc, #104]	; (8010688 <tcp_write+0x5a8>)
 8010620:	f240 22e7 	movw	r2, #743	; 0x2e7
 8010624:	491e      	ldr	r1, [pc, #120]	; (80106a0 <tcp_write+0x5c0>)
 8010626:	481a      	ldr	r0, [pc, #104]	; (8010690 <tcp_write+0x5b0>)
 8010628:	f006 fc90 	bl	8016f4c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801062c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801062e:	685b      	ldr	r3, [r3, #4]
 8010630:	62bb      	str	r3, [r7, #40]	; 0x28
 8010632:	e009      	b.n	8010648 <tcp_write+0x568>
      p->tot_len += extendlen;
 8010634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010636:	891a      	ldrh	r2, [r3, #8]
 8010638:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801063a:	4413      	add	r3, r2
 801063c:	b29a      	uxth	r2, r3
 801063e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010640:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	62bb      	str	r3, [r7, #40]	; 0x28
 8010648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d1f1      	bne.n	8010634 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 8010650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010652:	891a      	ldrh	r2, [r3, #8]
 8010654:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010656:	4413      	add	r3, r2
 8010658:	b29a      	uxth	r2, r3
 801065a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801065c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801065e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010660:	895a      	ldrh	r2, [r3, #10]
 8010662:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010664:	4413      	add	r3, r2
 8010666:	b29a      	uxth	r2, r3
 8010668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801066a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801066c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801066e:	891a      	ldrh	r2, [r3, #8]
 8010670:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010672:	4413      	add	r3, r2
 8010674:	b29a      	uxth	r2, r3
 8010676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010678:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801067a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801067c:	2b00      	cmp	r3, #0
 801067e:	d111      	bne.n	80106a4 <tcp_write+0x5c4>
    pcb->unsent = queue;
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010684:	66da      	str	r2, [r3, #108]	; 0x6c
 8010686:	e010      	b.n	80106aa <tcp_write+0x5ca>
 8010688:	08019e78 	.word	0x08019e78
 801068c:	0801a118 	.word	0x0801a118
 8010690:	08019ecc 	.word	0x08019ecc
 8010694:	0801a158 	.word	0x0801a158
 8010698:	0801a168 	.word	0x0801a168
 801069c:	0801a17c 	.word	0x0801a17c
 80106a0:	0801a1b4 	.word	0x0801a1b4
  } else {
    last_unsent->next = queue;
 80106a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80106a8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80106ae:	88fb      	ldrh	r3, [r7, #6]
 80106b0:	441a      	add	r2, r3
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80106bc:	88fb      	ldrh	r3, [r7, #6]
 80106be:	1ad3      	subs	r3, r2, r3
 80106c0:	b29a      	uxth	r2, r3
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80106ce:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d00e      	beq.n	80106fa <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d10a      	bne.n	80106fa <tcp_write+0x61a>
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d106      	bne.n	80106fa <tcp_write+0x61a>
 80106ec:	4b2c      	ldr	r3, [pc, #176]	; (80107a0 <tcp_write+0x6c0>)
 80106ee:	f240 3213 	movw	r2, #787	; 0x313
 80106f2:	492c      	ldr	r1, [pc, #176]	; (80107a4 <tcp_write+0x6c4>)
 80106f4:	482c      	ldr	r0, [pc, #176]	; (80107a8 <tcp_write+0x6c8>)
 80106f6:	f006 fc29 	bl	8016f4c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80106fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d016      	beq.n	801072e <tcp_write+0x64e>
 8010700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010702:	68db      	ldr	r3, [r3, #12]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d012      	beq.n	801072e <tcp_write+0x64e>
 8010708:	797b      	ldrb	r3, [r7, #5]
 801070a:	f003 0302 	and.w	r3, r3, #2
 801070e:	2b00      	cmp	r3, #0
 8010710:	d10d      	bne.n	801072e <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8010712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010714:	68db      	ldr	r3, [r3, #12]
 8010716:	899b      	ldrh	r3, [r3, #12]
 8010718:	b29c      	uxth	r4, r3
 801071a:	2008      	movs	r0, #8
 801071c:	f7f9 fbee 	bl	8009efc <lwip_htons>
 8010720:	4603      	mov	r3, r0
 8010722:	461a      	mov	r2, r3
 8010724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010726:	68db      	ldr	r3, [r3, #12]
 8010728:	4322      	orrs	r2, r4
 801072a:	b292      	uxth	r2, r2
 801072c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801072e:	2300      	movs	r3, #0
 8010730:	e031      	b.n	8010796 <tcp_write+0x6b6>
          goto memerr;
 8010732:	bf00      	nop
 8010734:	e006      	b.n	8010744 <tcp_write+0x664>
            goto memerr;
 8010736:	bf00      	nop
 8010738:	e004      	b.n	8010744 <tcp_write+0x664>
        goto memerr;
 801073a:	bf00      	nop
 801073c:	e002      	b.n	8010744 <tcp_write+0x664>
        goto memerr;
 801073e:	bf00      	nop
 8010740:	e000      	b.n	8010744 <tcp_write+0x664>
      goto memerr;
 8010742:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	8b5b      	ldrh	r3, [r3, #26]
 8010748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801074c:	b29a      	uxth	r2, r3
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8010752:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010754:	2b00      	cmp	r3, #0
 8010756:	d002      	beq.n	801075e <tcp_write+0x67e>
    pbuf_free(concat_p);
 8010758:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801075a:	f7fa ff05 	bl	800b568 <pbuf_free>
  }
  if (queue != NULL) {
 801075e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010760:	2b00      	cmp	r3, #0
 8010762:	d002      	beq.n	801076a <tcp_write+0x68a>
    tcp_segs_free(queue);
 8010764:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010766:	f7fc fb71 	bl	800ce4c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010770:	2b00      	cmp	r3, #0
 8010772:	d00e      	beq.n	8010792 <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010778:	2b00      	cmp	r3, #0
 801077a:	d10a      	bne.n	8010792 <tcp_write+0x6b2>
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010780:	2b00      	cmp	r3, #0
 8010782:	d106      	bne.n	8010792 <tcp_write+0x6b2>
 8010784:	4b06      	ldr	r3, [pc, #24]	; (80107a0 <tcp_write+0x6c0>)
 8010786:	f44f 724a 	mov.w	r2, #808	; 0x328
 801078a:	4906      	ldr	r1, [pc, #24]	; (80107a4 <tcp_write+0x6c4>)
 801078c:	4806      	ldr	r0, [pc, #24]	; (80107a8 <tcp_write+0x6c8>)
 801078e:	f006 fbdd 	bl	8016f4c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8010792:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010796:	4618      	mov	r0, r3
 8010798:	375c      	adds	r7, #92	; 0x5c
 801079a:	46bd      	mov	sp, r7
 801079c:	bd90      	pop	{r4, r7, pc}
 801079e:	bf00      	nop
 80107a0:	08019e78 	.word	0x08019e78
 80107a4:	0801a1ec 	.word	0x0801a1ec
 80107a8:	08019ecc 	.word	0x08019ecc

080107ac <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80107ac:	b590      	push	{r4, r7, lr}
 80107ae:	b08b      	sub	sp, #44	; 0x2c
 80107b0:	af02      	add	r7, sp, #8
 80107b2:	6078      	str	r0, [r7, #4]
 80107b4:	460b      	mov	r3, r1
 80107b6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80107b8:	2300      	movs	r3, #0
 80107ba:	61fb      	str	r3, [r7, #28]
 80107bc:	2300      	movs	r3, #0
 80107be:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80107c0:	2300      	movs	r3, #0
 80107c2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d106      	bne.n	80107d8 <tcp_split_unsent_seg+0x2c>
 80107ca:	4b95      	ldr	r3, [pc, #596]	; (8010a20 <tcp_split_unsent_seg+0x274>)
 80107cc:	f240 324b 	movw	r2, #843	; 0x34b
 80107d0:	4994      	ldr	r1, [pc, #592]	; (8010a24 <tcp_split_unsent_seg+0x278>)
 80107d2:	4895      	ldr	r0, [pc, #596]	; (8010a28 <tcp_split_unsent_seg+0x27c>)
 80107d4:	f006 fbba 	bl	8016f4c <iprintf>

  useg = pcb->unsent;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107dc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80107de:	697b      	ldr	r3, [r7, #20]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d102      	bne.n	80107ea <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80107e4:	f04f 33ff 	mov.w	r3, #4294967295
 80107e8:	e116      	b.n	8010a18 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80107ea:	887b      	ldrh	r3, [r7, #2]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d109      	bne.n	8010804 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80107f0:	4b8b      	ldr	r3, [pc, #556]	; (8010a20 <tcp_split_unsent_seg+0x274>)
 80107f2:	f240 3253 	movw	r2, #851	; 0x353
 80107f6:	498d      	ldr	r1, [pc, #564]	; (8010a2c <tcp_split_unsent_seg+0x280>)
 80107f8:	488b      	ldr	r0, [pc, #556]	; (8010a28 <tcp_split_unsent_seg+0x27c>)
 80107fa:	f006 fba7 	bl	8016f4c <iprintf>
    return ERR_VAL;
 80107fe:	f06f 0305 	mvn.w	r3, #5
 8010802:	e109      	b.n	8010a18 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010804:	697b      	ldr	r3, [r7, #20]
 8010806:	891b      	ldrh	r3, [r3, #8]
 8010808:	887a      	ldrh	r2, [r7, #2]
 801080a:	429a      	cmp	r2, r3
 801080c:	d301      	bcc.n	8010812 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801080e:	2300      	movs	r3, #0
 8010810:	e102      	b.n	8010a18 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010816:	887a      	ldrh	r2, [r7, #2]
 8010818:	429a      	cmp	r2, r3
 801081a:	d906      	bls.n	801082a <tcp_split_unsent_seg+0x7e>
 801081c:	4b80      	ldr	r3, [pc, #512]	; (8010a20 <tcp_split_unsent_seg+0x274>)
 801081e:	f240 325b 	movw	r2, #859	; 0x35b
 8010822:	4983      	ldr	r1, [pc, #524]	; (8010a30 <tcp_split_unsent_seg+0x284>)
 8010824:	4880      	ldr	r0, [pc, #512]	; (8010a28 <tcp_split_unsent_seg+0x27c>)
 8010826:	f006 fb91 	bl	8016f4c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801082a:	697b      	ldr	r3, [r7, #20]
 801082c:	891b      	ldrh	r3, [r3, #8]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d106      	bne.n	8010840 <tcp_split_unsent_seg+0x94>
 8010832:	4b7b      	ldr	r3, [pc, #492]	; (8010a20 <tcp_split_unsent_seg+0x274>)
 8010834:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8010838:	497e      	ldr	r1, [pc, #504]	; (8010a34 <tcp_split_unsent_seg+0x288>)
 801083a:	487b      	ldr	r0, [pc, #492]	; (8010a28 <tcp_split_unsent_seg+0x27c>)
 801083c:	f006 fb86 	bl	8016f4c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010840:	697b      	ldr	r3, [r7, #20]
 8010842:	7a9b      	ldrb	r3, [r3, #10]
 8010844:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010846:	7bfb      	ldrb	r3, [r7, #15]
 8010848:	009b      	lsls	r3, r3, #2
 801084a:	b2db      	uxtb	r3, r3
 801084c:	f003 0304 	and.w	r3, r3, #4
 8010850:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8010852:	697b      	ldr	r3, [r7, #20]
 8010854:	891a      	ldrh	r2, [r3, #8]
 8010856:	887b      	ldrh	r3, [r7, #2]
 8010858:	1ad3      	subs	r3, r2, r3
 801085a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801085c:	7bbb      	ldrb	r3, [r7, #14]
 801085e:	b29a      	uxth	r2, r3
 8010860:	89bb      	ldrh	r3, [r7, #12]
 8010862:	4413      	add	r3, r2
 8010864:	b29b      	uxth	r3, r3
 8010866:	f44f 7220 	mov.w	r2, #640	; 0x280
 801086a:	4619      	mov	r1, r3
 801086c:	2036      	movs	r0, #54	; 0x36
 801086e:	f7fa fb9b 	bl	800afa8 <pbuf_alloc>
 8010872:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010874:	693b      	ldr	r3, [r7, #16]
 8010876:	2b00      	cmp	r3, #0
 8010878:	f000 80b7 	beq.w	80109ea <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801087c:	697b      	ldr	r3, [r7, #20]
 801087e:	685b      	ldr	r3, [r3, #4]
 8010880:	891a      	ldrh	r2, [r3, #8]
 8010882:	697b      	ldr	r3, [r7, #20]
 8010884:	891b      	ldrh	r3, [r3, #8]
 8010886:	1ad3      	subs	r3, r2, r3
 8010888:	b29a      	uxth	r2, r3
 801088a:	887b      	ldrh	r3, [r7, #2]
 801088c:	4413      	add	r3, r2
 801088e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010890:	697b      	ldr	r3, [r7, #20]
 8010892:	6858      	ldr	r0, [r3, #4]
 8010894:	693b      	ldr	r3, [r7, #16]
 8010896:	685a      	ldr	r2, [r3, #4]
 8010898:	7bbb      	ldrb	r3, [r7, #14]
 801089a:	18d1      	adds	r1, r2, r3
 801089c:	897b      	ldrh	r3, [r7, #10]
 801089e:	89ba      	ldrh	r2, [r7, #12]
 80108a0:	f7fb f868 	bl	800b974 <pbuf_copy_partial>
 80108a4:	4603      	mov	r3, r0
 80108a6:	461a      	mov	r2, r3
 80108a8:	89bb      	ldrh	r3, [r7, #12]
 80108aa:	4293      	cmp	r3, r2
 80108ac:	f040 809f 	bne.w	80109ee <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80108b0:	697b      	ldr	r3, [r7, #20]
 80108b2:	68db      	ldr	r3, [r3, #12]
 80108b4:	899b      	ldrh	r3, [r3, #12]
 80108b6:	b29b      	uxth	r3, r3
 80108b8:	4618      	mov	r0, r3
 80108ba:	f7f9 fb1f 	bl	8009efc <lwip_htons>
 80108be:	4603      	mov	r3, r0
 80108c0:	b2db      	uxtb	r3, r3
 80108c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80108c6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80108c8:	2300      	movs	r3, #0
 80108ca:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80108cc:	7efb      	ldrb	r3, [r7, #27]
 80108ce:	f003 0308 	and.w	r3, r3, #8
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d007      	beq.n	80108e6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80108d6:	7efb      	ldrb	r3, [r7, #27]
 80108d8:	f023 0308 	bic.w	r3, r3, #8
 80108dc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80108de:	7ebb      	ldrb	r3, [r7, #26]
 80108e0:	f043 0308 	orr.w	r3, r3, #8
 80108e4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80108e6:	7efb      	ldrb	r3, [r7, #27]
 80108e8:	f003 0301 	and.w	r3, r3, #1
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d007      	beq.n	8010900 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80108f0:	7efb      	ldrb	r3, [r7, #27]
 80108f2:	f023 0301 	bic.w	r3, r3, #1
 80108f6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80108f8:	7ebb      	ldrb	r3, [r7, #26]
 80108fa:	f043 0301 	orr.w	r3, r3, #1
 80108fe:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010900:	697b      	ldr	r3, [r7, #20]
 8010902:	68db      	ldr	r3, [r3, #12]
 8010904:	685b      	ldr	r3, [r3, #4]
 8010906:	4618      	mov	r0, r3
 8010908:	f7f9 fb0d 	bl	8009f26 <lwip_htonl>
 801090c:	4602      	mov	r2, r0
 801090e:	887b      	ldrh	r3, [r7, #2]
 8010910:	18d1      	adds	r1, r2, r3
 8010912:	7eba      	ldrb	r2, [r7, #26]
 8010914:	7bfb      	ldrb	r3, [r7, #15]
 8010916:	9300      	str	r3, [sp, #0]
 8010918:	460b      	mov	r3, r1
 801091a:	6939      	ldr	r1, [r7, #16]
 801091c:	6878      	ldr	r0, [r7, #4]
 801091e:	f7ff fa4d 	bl	800fdbc <tcp_create_segment>
 8010922:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010924:	69fb      	ldr	r3, [r7, #28]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d063      	beq.n	80109f2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801092a:	697b      	ldr	r3, [r7, #20]
 801092c:	685b      	ldr	r3, [r3, #4]
 801092e:	4618      	mov	r0, r3
 8010930:	f7fa fea8 	bl	800b684 <pbuf_clen>
 8010934:	4603      	mov	r3, r0
 8010936:	461a      	mov	r2, r3
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801093e:	1a9b      	subs	r3, r3, r2
 8010940:	b29a      	uxth	r2, r3
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010948:	697b      	ldr	r3, [r7, #20]
 801094a:	6858      	ldr	r0, [r3, #4]
 801094c:	697b      	ldr	r3, [r7, #20]
 801094e:	685b      	ldr	r3, [r3, #4]
 8010950:	891a      	ldrh	r2, [r3, #8]
 8010952:	89bb      	ldrh	r3, [r7, #12]
 8010954:	1ad3      	subs	r3, r2, r3
 8010956:	b29b      	uxth	r3, r3
 8010958:	4619      	mov	r1, r3
 801095a:	f7fa fc7f 	bl	800b25c <pbuf_realloc>
  useg->len -= remainder;
 801095e:	697b      	ldr	r3, [r7, #20]
 8010960:	891a      	ldrh	r2, [r3, #8]
 8010962:	89bb      	ldrh	r3, [r7, #12]
 8010964:	1ad3      	subs	r3, r2, r3
 8010966:	b29a      	uxth	r2, r3
 8010968:	697b      	ldr	r3, [r7, #20]
 801096a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801096c:	697b      	ldr	r3, [r7, #20]
 801096e:	68db      	ldr	r3, [r3, #12]
 8010970:	899b      	ldrh	r3, [r3, #12]
 8010972:	b29c      	uxth	r4, r3
 8010974:	7efb      	ldrb	r3, [r7, #27]
 8010976:	b29b      	uxth	r3, r3
 8010978:	4618      	mov	r0, r3
 801097a:	f7f9 fabf 	bl	8009efc <lwip_htons>
 801097e:	4603      	mov	r3, r0
 8010980:	461a      	mov	r2, r3
 8010982:	697b      	ldr	r3, [r7, #20]
 8010984:	68db      	ldr	r3, [r3, #12]
 8010986:	4322      	orrs	r2, r4
 8010988:	b292      	uxth	r2, r2
 801098a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801098c:	697b      	ldr	r3, [r7, #20]
 801098e:	685b      	ldr	r3, [r3, #4]
 8010990:	4618      	mov	r0, r3
 8010992:	f7fa fe77 	bl	800b684 <pbuf_clen>
 8010996:	4603      	mov	r3, r0
 8010998:	461a      	mov	r2, r3
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80109a0:	4413      	add	r3, r2
 80109a2:	b29a      	uxth	r2, r3
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80109aa:	69fb      	ldr	r3, [r7, #28]
 80109ac:	685b      	ldr	r3, [r3, #4]
 80109ae:	4618      	mov	r0, r3
 80109b0:	f7fa fe68 	bl	800b684 <pbuf_clen>
 80109b4:	4603      	mov	r3, r0
 80109b6:	461a      	mov	r2, r3
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80109be:	4413      	add	r3, r2
 80109c0:	b29a      	uxth	r2, r3
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80109c8:	697b      	ldr	r3, [r7, #20]
 80109ca:	681a      	ldr	r2, [r3, #0]
 80109cc:	69fb      	ldr	r3, [r7, #28]
 80109ce:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80109d0:	697b      	ldr	r3, [r7, #20]
 80109d2:	69fa      	ldr	r2, [r7, #28]
 80109d4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80109d6:	69fb      	ldr	r3, [r7, #28]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d103      	bne.n	80109e6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	2200      	movs	r2, #0
 80109e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80109e6:	2300      	movs	r3, #0
 80109e8:	e016      	b.n	8010a18 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80109ea:	bf00      	nop
 80109ec:	e002      	b.n	80109f4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80109ee:	bf00      	nop
 80109f0:	e000      	b.n	80109f4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80109f2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80109f4:	69fb      	ldr	r3, [r7, #28]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d006      	beq.n	8010a08 <tcp_split_unsent_seg+0x25c>
 80109fa:	4b09      	ldr	r3, [pc, #36]	; (8010a20 <tcp_split_unsent_seg+0x274>)
 80109fc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010a00:	490d      	ldr	r1, [pc, #52]	; (8010a38 <tcp_split_unsent_seg+0x28c>)
 8010a02:	4809      	ldr	r0, [pc, #36]	; (8010a28 <tcp_split_unsent_seg+0x27c>)
 8010a04:	f006 faa2 	bl	8016f4c <iprintf>
  if (p != NULL) {
 8010a08:	693b      	ldr	r3, [r7, #16]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d002      	beq.n	8010a14 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010a0e:	6938      	ldr	r0, [r7, #16]
 8010a10:	f7fa fdaa 	bl	800b568 <pbuf_free>
  }

  return ERR_MEM;
 8010a14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010a18:	4618      	mov	r0, r3
 8010a1a:	3724      	adds	r7, #36	; 0x24
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	bd90      	pop	{r4, r7, pc}
 8010a20:	08019e78 	.word	0x08019e78
 8010a24:	0801a20c 	.word	0x0801a20c
 8010a28:	08019ecc 	.word	0x08019ecc
 8010a2c:	0801a230 	.word	0x0801a230
 8010a30:	0801a254 	.word	0x0801a254
 8010a34:	0801a264 	.word	0x0801a264
 8010a38:	0801a274 	.word	0x0801a274

08010a3c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010a3c:	b590      	push	{r4, r7, lr}
 8010a3e:	b085      	sub	sp, #20
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d106      	bne.n	8010a58 <tcp_send_fin+0x1c>
 8010a4a:	4b21      	ldr	r3, [pc, #132]	; (8010ad0 <tcp_send_fin+0x94>)
 8010a4c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8010a50:	4920      	ldr	r1, [pc, #128]	; (8010ad4 <tcp_send_fin+0x98>)
 8010a52:	4821      	ldr	r0, [pc, #132]	; (8010ad8 <tcp_send_fin+0x9c>)
 8010a54:	f006 fa7a 	bl	8016f4c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d02e      	beq.n	8010abe <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a64:	60fb      	str	r3, [r7, #12]
 8010a66:	e002      	b.n	8010a6e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d1f8      	bne.n	8010a68 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	68db      	ldr	r3, [r3, #12]
 8010a7a:	899b      	ldrh	r3, [r3, #12]
 8010a7c:	b29b      	uxth	r3, r3
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f7f9 fa3c 	bl	8009efc <lwip_htons>
 8010a84:	4603      	mov	r3, r0
 8010a86:	b2db      	uxtb	r3, r3
 8010a88:	f003 0307 	and.w	r3, r3, #7
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d116      	bne.n	8010abe <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	68db      	ldr	r3, [r3, #12]
 8010a94:	899b      	ldrh	r3, [r3, #12]
 8010a96:	b29c      	uxth	r4, r3
 8010a98:	2001      	movs	r0, #1
 8010a9a:	f7f9 fa2f 	bl	8009efc <lwip_htons>
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	461a      	mov	r2, r3
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	68db      	ldr	r3, [r3, #12]
 8010aa6:	4322      	orrs	r2, r4
 8010aa8:	b292      	uxth	r2, r2
 8010aaa:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	8b5b      	ldrh	r3, [r3, #26]
 8010ab0:	f043 0320 	orr.w	r3, r3, #32
 8010ab4:	b29a      	uxth	r2, r3
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010aba:	2300      	movs	r3, #0
 8010abc:	e004      	b.n	8010ac8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010abe:	2101      	movs	r1, #1
 8010ac0:	6878      	ldr	r0, [r7, #4]
 8010ac2:	f000 f80b 	bl	8010adc <tcp_enqueue_flags>
 8010ac6:	4603      	mov	r3, r0
}
 8010ac8:	4618      	mov	r0, r3
 8010aca:	3714      	adds	r7, #20
 8010acc:	46bd      	mov	sp, r7
 8010ace:	bd90      	pop	{r4, r7, pc}
 8010ad0:	08019e78 	.word	0x08019e78
 8010ad4:	0801a280 	.word	0x0801a280
 8010ad8:	08019ecc 	.word	0x08019ecc

08010adc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010adc:	b580      	push	{r7, lr}
 8010ade:	b08a      	sub	sp, #40	; 0x28
 8010ae0:	af02      	add	r7, sp, #8
 8010ae2:	6078      	str	r0, [r7, #4]
 8010ae4:	460b      	mov	r3, r1
 8010ae6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010ae8:	2300      	movs	r3, #0
 8010aea:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010aec:	2300      	movs	r3, #0
 8010aee:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010af0:	78fb      	ldrb	r3, [r7, #3]
 8010af2:	f003 0303 	and.w	r3, r3, #3
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d106      	bne.n	8010b08 <tcp_enqueue_flags+0x2c>
 8010afa:	4b67      	ldr	r3, [pc, #412]	; (8010c98 <tcp_enqueue_flags+0x1bc>)
 8010afc:	f240 4212 	movw	r2, #1042	; 0x412
 8010b00:	4966      	ldr	r1, [pc, #408]	; (8010c9c <tcp_enqueue_flags+0x1c0>)
 8010b02:	4867      	ldr	r0, [pc, #412]	; (8010ca0 <tcp_enqueue_flags+0x1c4>)
 8010b04:	f006 fa22 	bl	8016f4c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d106      	bne.n	8010b1c <tcp_enqueue_flags+0x40>
 8010b0e:	4b62      	ldr	r3, [pc, #392]	; (8010c98 <tcp_enqueue_flags+0x1bc>)
 8010b10:	f240 4213 	movw	r2, #1043	; 0x413
 8010b14:	4963      	ldr	r1, [pc, #396]	; (8010ca4 <tcp_enqueue_flags+0x1c8>)
 8010b16:	4862      	ldr	r0, [pc, #392]	; (8010ca0 <tcp_enqueue_flags+0x1c4>)
 8010b18:	f006 fa18 	bl	8016f4c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010b1c:	78fb      	ldrb	r3, [r7, #3]
 8010b1e:	f003 0302 	and.w	r3, r3, #2
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d001      	beq.n	8010b2a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010b26:	2301      	movs	r3, #1
 8010b28:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010b2a:	7ffb      	ldrb	r3, [r7, #31]
 8010b2c:	009b      	lsls	r3, r3, #2
 8010b2e:	b2db      	uxtb	r3, r3
 8010b30:	f003 0304 	and.w	r3, r3, #4
 8010b34:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010b36:	7dfb      	ldrb	r3, [r7, #23]
 8010b38:	b29b      	uxth	r3, r3
 8010b3a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010b3e:	4619      	mov	r1, r3
 8010b40:	2036      	movs	r0, #54	; 0x36
 8010b42:	f7fa fa31 	bl	800afa8 <pbuf_alloc>
 8010b46:	6138      	str	r0, [r7, #16]
 8010b48:	693b      	ldr	r3, [r7, #16]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d109      	bne.n	8010b62 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	8b5b      	ldrh	r3, [r3, #26]
 8010b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b56:	b29a      	uxth	r2, r3
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8010b60:	e095      	b.n	8010c8e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010b62:	693b      	ldr	r3, [r7, #16]
 8010b64:	895a      	ldrh	r2, [r3, #10]
 8010b66:	7dfb      	ldrb	r3, [r7, #23]
 8010b68:	b29b      	uxth	r3, r3
 8010b6a:	429a      	cmp	r2, r3
 8010b6c:	d206      	bcs.n	8010b7c <tcp_enqueue_flags+0xa0>
 8010b6e:	4b4a      	ldr	r3, [pc, #296]	; (8010c98 <tcp_enqueue_flags+0x1bc>)
 8010b70:	f240 423a 	movw	r2, #1082	; 0x43a
 8010b74:	494c      	ldr	r1, [pc, #304]	; (8010ca8 <tcp_enqueue_flags+0x1cc>)
 8010b76:	484a      	ldr	r0, [pc, #296]	; (8010ca0 <tcp_enqueue_flags+0x1c4>)
 8010b78:	f006 f9e8 	bl	8016f4c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8010b80:	78fa      	ldrb	r2, [r7, #3]
 8010b82:	7ffb      	ldrb	r3, [r7, #31]
 8010b84:	9300      	str	r3, [sp, #0]
 8010b86:	460b      	mov	r3, r1
 8010b88:	6939      	ldr	r1, [r7, #16]
 8010b8a:	6878      	ldr	r0, [r7, #4]
 8010b8c:	f7ff f916 	bl	800fdbc <tcp_create_segment>
 8010b90:	60f8      	str	r0, [r7, #12]
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d109      	bne.n	8010bac <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	8b5b      	ldrh	r3, [r3, #26]
 8010b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ba0:	b29a      	uxth	r2, r3
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8010baa:	e070      	b.n	8010c8e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	68db      	ldr	r3, [r3, #12]
 8010bb0:	f003 0303 	and.w	r3, r3, #3
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d006      	beq.n	8010bc6 <tcp_enqueue_flags+0xea>
 8010bb8:	4b37      	ldr	r3, [pc, #220]	; (8010c98 <tcp_enqueue_flags+0x1bc>)
 8010bba:	f240 4242 	movw	r2, #1090	; 0x442
 8010bbe:	493b      	ldr	r1, [pc, #236]	; (8010cac <tcp_enqueue_flags+0x1d0>)
 8010bc0:	4837      	ldr	r0, [pc, #220]	; (8010ca0 <tcp_enqueue_flags+0x1c4>)
 8010bc2:	f006 f9c3 	bl	8016f4c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	891b      	ldrh	r3, [r3, #8]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d006      	beq.n	8010bdc <tcp_enqueue_flags+0x100>
 8010bce:	4b32      	ldr	r3, [pc, #200]	; (8010c98 <tcp_enqueue_flags+0x1bc>)
 8010bd0:	f240 4243 	movw	r2, #1091	; 0x443
 8010bd4:	4936      	ldr	r1, [pc, #216]	; (8010cb0 <tcp_enqueue_flags+0x1d4>)
 8010bd6:	4832      	ldr	r0, [pc, #200]	; (8010ca0 <tcp_enqueue_flags+0x1c4>)
 8010bd8:	f006 f9b8 	bl	8016f4c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d103      	bne.n	8010bec <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	68fa      	ldr	r2, [r7, #12]
 8010be8:	66da      	str	r2, [r3, #108]	; 0x6c
 8010bea:	e00d      	b.n	8010c08 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bf0:	61bb      	str	r3, [r7, #24]
 8010bf2:	e002      	b.n	8010bfa <tcp_enqueue_flags+0x11e>
 8010bf4:	69bb      	ldr	r3, [r7, #24]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	61bb      	str	r3, [r7, #24]
 8010bfa:	69bb      	ldr	r3, [r7, #24]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d1f8      	bne.n	8010bf4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010c02:	69bb      	ldr	r3, [r7, #24]
 8010c04:	68fa      	ldr	r2, [r7, #12]
 8010c06:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010c10:	78fb      	ldrb	r3, [r7, #3]
 8010c12:	f003 0302 	and.w	r3, r3, #2
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d104      	bne.n	8010c24 <tcp_enqueue_flags+0x148>
 8010c1a:	78fb      	ldrb	r3, [r7, #3]
 8010c1c:	f003 0301 	and.w	r3, r3, #1
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d004      	beq.n	8010c2e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010c28:	1c5a      	adds	r2, r3, #1
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010c2e:	78fb      	ldrb	r3, [r7, #3]
 8010c30:	f003 0301 	and.w	r3, r3, #1
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d006      	beq.n	8010c46 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	8b5b      	ldrh	r3, [r3, #26]
 8010c3c:	f043 0320 	orr.w	r3, r3, #32
 8010c40:	b29a      	uxth	r2, r3
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	685b      	ldr	r3, [r3, #4]
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	f7fa fd1a 	bl	800b684 <pbuf_clen>
 8010c50:	4603      	mov	r3, r0
 8010c52:	461a      	mov	r2, r3
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010c5a:	4413      	add	r3, r2
 8010c5c:	b29a      	uxth	r2, r3
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d00e      	beq.n	8010c8c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d10a      	bne.n	8010c8c <tcp_enqueue_flags+0x1b0>
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d106      	bne.n	8010c8c <tcp_enqueue_flags+0x1b0>
 8010c7e:	4b06      	ldr	r3, [pc, #24]	; (8010c98 <tcp_enqueue_flags+0x1bc>)
 8010c80:	f240 4266 	movw	r2, #1126	; 0x466
 8010c84:	490b      	ldr	r1, [pc, #44]	; (8010cb4 <tcp_enqueue_flags+0x1d8>)
 8010c86:	4806      	ldr	r0, [pc, #24]	; (8010ca0 <tcp_enqueue_flags+0x1c4>)
 8010c88:	f006 f960 	bl	8016f4c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010c8c:	2300      	movs	r3, #0
}
 8010c8e:	4618      	mov	r0, r3
 8010c90:	3720      	adds	r7, #32
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd80      	pop	{r7, pc}
 8010c96:	bf00      	nop
 8010c98:	08019e78 	.word	0x08019e78
 8010c9c:	0801a29c 	.word	0x0801a29c
 8010ca0:	08019ecc 	.word	0x08019ecc
 8010ca4:	0801a2f4 	.word	0x0801a2f4
 8010ca8:	0801a314 	.word	0x0801a314
 8010cac:	0801a350 	.word	0x0801a350
 8010cb0:	0801a368 	.word	0x0801a368
 8010cb4:	0801a394 	.word	0x0801a394

08010cb8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010cb8:	b5b0      	push	{r4, r5, r7, lr}
 8010cba:	b08a      	sub	sp, #40	; 0x28
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d106      	bne.n	8010cd4 <tcp_output+0x1c>
 8010cc6:	4ba0      	ldr	r3, [pc, #640]	; (8010f48 <tcp_output+0x290>)
 8010cc8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8010ccc:	499f      	ldr	r1, [pc, #636]	; (8010f4c <tcp_output+0x294>)
 8010cce:	48a0      	ldr	r0, [pc, #640]	; (8010f50 <tcp_output+0x298>)
 8010cd0:	f006 f93c 	bl	8016f4c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	7d1b      	ldrb	r3, [r3, #20]
 8010cd8:	2b01      	cmp	r3, #1
 8010cda:	d106      	bne.n	8010cea <tcp_output+0x32>
 8010cdc:	4b9a      	ldr	r3, [pc, #616]	; (8010f48 <tcp_output+0x290>)
 8010cde:	f240 42e4 	movw	r2, #1252	; 0x4e4
 8010ce2:	499c      	ldr	r1, [pc, #624]	; (8010f54 <tcp_output+0x29c>)
 8010ce4:	489a      	ldr	r0, [pc, #616]	; (8010f50 <tcp_output+0x298>)
 8010ce6:	f006 f931 	bl	8016f4c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010cea:	4b9b      	ldr	r3, [pc, #620]	; (8010f58 <tcp_output+0x2a0>)
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	687a      	ldr	r2, [r7, #4]
 8010cf0:	429a      	cmp	r2, r3
 8010cf2:	d101      	bne.n	8010cf8 <tcp_output+0x40>
    return ERR_OK;
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	e1d2      	b.n	801109e <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010d04:	429a      	cmp	r2, r3
 8010d06:	d203      	bcs.n	8010d10 <tcp_output+0x58>
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010d0e:	e002      	b.n	8010d16 <tcp_output+0x5e>
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010d16:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d1c:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8010d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d10b      	bne.n	8010d3c <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	8b5b      	ldrh	r3, [r3, #26]
 8010d28:	f003 0302 	and.w	r3, r3, #2
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	f000 81a9 	beq.w	8011084 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 8010d32:	6878      	ldr	r0, [r7, #4]
 8010d34:	f000 fdd4 	bl	80118e0 <tcp_send_empty_ack>
 8010d38:	4603      	mov	r3, r0
 8010d3a:	e1b0      	b.n	801109e <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010d3c:	6879      	ldr	r1, [r7, #4]
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	3304      	adds	r3, #4
 8010d42:	461a      	mov	r2, r3
 8010d44:	6878      	ldr	r0, [r7, #4]
 8010d46:	f7ff f81d 	bl	800fd84 <tcp_route>
 8010d4a:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010d4c:	697b      	ldr	r3, [r7, #20]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d102      	bne.n	8010d58 <tcp_output+0xa0>
    return ERR_RTE;
 8010d52:	f06f 0303 	mvn.w	r3, #3
 8010d56:	e1a2      	b.n	801109e <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d003      	beq.n	8010d66 <tcp_output+0xae>
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d111      	bne.n	8010d8a <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010d66:	697b      	ldr	r3, [r7, #20]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d002      	beq.n	8010d72 <tcp_output+0xba>
 8010d6c:	697b      	ldr	r3, [r7, #20]
 8010d6e:	3304      	adds	r3, #4
 8010d70:	e000      	b.n	8010d74 <tcp_output+0xbc>
 8010d72:	2300      	movs	r3, #0
 8010d74:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010d76:	693b      	ldr	r3, [r7, #16]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d102      	bne.n	8010d82 <tcp_output+0xca>
      return ERR_RTE;
 8010d7c:	f06f 0303 	mvn.w	r3, #3
 8010d80:	e18d      	b.n	801109e <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010d82:	693b      	ldr	r3, [r7, #16]
 8010d84:	681a      	ldr	r2, [r3, #0]
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d8c:	68db      	ldr	r3, [r3, #12]
 8010d8e:	685b      	ldr	r3, [r3, #4]
 8010d90:	4618      	mov	r0, r3
 8010d92:	f7f9 f8c8 	bl	8009f26 <lwip_htonl>
 8010d96:	4602      	mov	r2, r0
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d9c:	1ad3      	subs	r3, r2, r3
 8010d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010da0:	8912      	ldrh	r2, [r2, #8]
 8010da2:	4413      	add	r3, r2
 8010da4:	69ba      	ldr	r2, [r7, #24]
 8010da6:	429a      	cmp	r2, r3
 8010da8:	d227      	bcs.n	8010dfa <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010db0:	461a      	mov	r2, r3
 8010db2:	69bb      	ldr	r3, [r7, #24]
 8010db4:	4293      	cmp	r3, r2
 8010db6:	d114      	bne.n	8010de2 <tcp_output+0x12a>
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d110      	bne.n	8010de2 <tcp_output+0x12a>
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d10b      	bne.n	8010de2 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	2200      	movs	r2, #0
 8010dce:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	2201      	movs	r2, #1
 8010dd6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	2200      	movs	r2, #0
 8010dde:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	8b5b      	ldrh	r3, [r3, #26]
 8010de6:	f003 0302 	and.w	r3, r3, #2
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	f000 814c 	beq.w	8011088 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 8010df0:	6878      	ldr	r0, [r7, #4]
 8010df2:	f000 fd75 	bl	80118e0 <tcp_send_empty_ack>
 8010df6:	4603      	mov	r3, r0
 8010df8:	e151      	b.n	801109e <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	2200      	movs	r2, #0
 8010dfe:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e06:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010e08:	6a3b      	ldr	r3, [r7, #32]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	f000 811b 	beq.w	8011046 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 8010e10:	e002      	b.n	8010e18 <tcp_output+0x160>
 8010e12:	6a3b      	ldr	r3, [r7, #32]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	623b      	str	r3, [r7, #32]
 8010e18:	6a3b      	ldr	r3, [r7, #32]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d1f8      	bne.n	8010e12 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010e20:	e111      	b.n	8011046 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e24:	68db      	ldr	r3, [r3, #12]
 8010e26:	899b      	ldrh	r3, [r3, #12]
 8010e28:	b29b      	uxth	r3, r3
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	f7f9 f866 	bl	8009efc <lwip_htons>
 8010e30:	4603      	mov	r3, r0
 8010e32:	b2db      	uxtb	r3, r3
 8010e34:	f003 0304 	and.w	r3, r3, #4
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d006      	beq.n	8010e4a <tcp_output+0x192>
 8010e3c:	4b42      	ldr	r3, [pc, #264]	; (8010f48 <tcp_output+0x290>)
 8010e3e:	f240 5237 	movw	r2, #1335	; 0x537
 8010e42:	4946      	ldr	r1, [pc, #280]	; (8010f5c <tcp_output+0x2a4>)
 8010e44:	4842      	ldr	r0, [pc, #264]	; (8010f50 <tcp_output+0x298>)
 8010e46:	f006 f881 	bl	8016f4c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d01f      	beq.n	8010e92 <tcp_output+0x1da>
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	8b5b      	ldrh	r3, [r3, #26]
 8010e56:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d119      	bne.n	8010e92 <tcp_output+0x1da>
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d00b      	beq.n	8010e7e <tcp_output+0x1c6>
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d110      	bne.n	8010e92 <tcp_output+0x1da>
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e74:	891a      	ldrh	r2, [r3, #8]
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e7a:	429a      	cmp	r2, r3
 8010e7c:	d209      	bcs.n	8010e92 <tcp_output+0x1da>
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d004      	beq.n	8010e92 <tcp_output+0x1da>
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010e8e:	2b08      	cmp	r3, #8
 8010e90:	d901      	bls.n	8010e96 <tcp_output+0x1de>
 8010e92:	2301      	movs	r3, #1
 8010e94:	e000      	b.n	8010e98 <tcp_output+0x1e0>
 8010e96:	2300      	movs	r3, #0
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d106      	bne.n	8010eaa <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	8b5b      	ldrh	r3, [r3, #26]
 8010ea0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	f000 80e3 	beq.w	8011070 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	7d1b      	ldrb	r3, [r3, #20]
 8010eae:	2b02      	cmp	r3, #2
 8010eb0:	d00d      	beq.n	8010ece <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eb4:	68db      	ldr	r3, [r3, #12]
 8010eb6:	899b      	ldrh	r3, [r3, #12]
 8010eb8:	b29c      	uxth	r4, r3
 8010eba:	2010      	movs	r0, #16
 8010ebc:	f7f9 f81e 	bl	8009efc <lwip_htons>
 8010ec0:	4603      	mov	r3, r0
 8010ec2:	461a      	mov	r2, r3
 8010ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ec6:	68db      	ldr	r3, [r3, #12]
 8010ec8:	4322      	orrs	r2, r4
 8010eca:	b292      	uxth	r2, r2
 8010ecc:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8010ece:	697a      	ldr	r2, [r7, #20]
 8010ed0:	6879      	ldr	r1, [r7, #4]
 8010ed2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010ed4:	f000 f908 	bl	80110e8 <tcp_output_segment>
 8010ed8:	4603      	mov	r3, r0
 8010eda:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d009      	beq.n	8010ef8 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	8b5b      	ldrh	r3, [r3, #26]
 8010ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010eec:	b29a      	uxth	r2, r3
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	835a      	strh	r2, [r3, #26]
      return err;
 8010ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ef6:	e0d2      	b.n	801109e <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8010ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010efa:	681a      	ldr	r2, [r3, #0]
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	7d1b      	ldrb	r3, [r3, #20]
 8010f04:	2b02      	cmp	r3, #2
 8010f06:	d006      	beq.n	8010f16 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	8b5b      	ldrh	r3, [r3, #26]
 8010f0c:	f023 0303 	bic.w	r3, r3, #3
 8010f10:	b29a      	uxth	r2, r3
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f18:	68db      	ldr	r3, [r3, #12]
 8010f1a:	685b      	ldr	r3, [r3, #4]
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	f7f9 f802 	bl	8009f26 <lwip_htonl>
 8010f22:	4604      	mov	r4, r0
 8010f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f26:	891b      	ldrh	r3, [r3, #8]
 8010f28:	461d      	mov	r5, r3
 8010f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f2c:	68db      	ldr	r3, [r3, #12]
 8010f2e:	899b      	ldrh	r3, [r3, #12]
 8010f30:	b29b      	uxth	r3, r3
 8010f32:	4618      	mov	r0, r3
 8010f34:	f7f8 ffe2 	bl	8009efc <lwip_htons>
 8010f38:	4603      	mov	r3, r0
 8010f3a:	b2db      	uxtb	r3, r3
 8010f3c:	f003 0303 	and.w	r3, r3, #3
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d00d      	beq.n	8010f60 <tcp_output+0x2a8>
 8010f44:	2301      	movs	r3, #1
 8010f46:	e00c      	b.n	8010f62 <tcp_output+0x2aa>
 8010f48:	08019e78 	.word	0x08019e78
 8010f4c:	0801a3bc 	.word	0x0801a3bc
 8010f50:	08019ecc 	.word	0x08019ecc
 8010f54:	0801a3d4 	.word	0x0801a3d4
 8010f58:	20010e8c 	.word	0x20010e8c
 8010f5c:	0801a3fc 	.word	0x0801a3fc
 8010f60:	2300      	movs	r3, #0
 8010f62:	442b      	add	r3, r5
 8010f64:	4423      	add	r3, r4
 8010f66:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010f6c:	68bb      	ldr	r3, [r7, #8]
 8010f6e:	1ad3      	subs	r3, r2, r3
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	da02      	bge.n	8010f7a <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	68ba      	ldr	r2, [r7, #8]
 8010f78:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8010f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f7c:	891b      	ldrh	r3, [r3, #8]
 8010f7e:	461c      	mov	r4, r3
 8010f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f82:	68db      	ldr	r3, [r3, #12]
 8010f84:	899b      	ldrh	r3, [r3, #12]
 8010f86:	b29b      	uxth	r3, r3
 8010f88:	4618      	mov	r0, r3
 8010f8a:	f7f8 ffb7 	bl	8009efc <lwip_htons>
 8010f8e:	4603      	mov	r3, r0
 8010f90:	b2db      	uxtb	r3, r3
 8010f92:	f003 0303 	and.w	r3, r3, #3
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d001      	beq.n	8010f9e <tcp_output+0x2e6>
 8010f9a:	2301      	movs	r3, #1
 8010f9c:	e000      	b.n	8010fa0 <tcp_output+0x2e8>
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	4423      	add	r3, r4
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d049      	beq.n	801103a <tcp_output+0x382>
      seg->next = NULL;
 8010fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fa8:	2200      	movs	r2, #0
 8010faa:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d105      	bne.n	8010fc0 <tcp_output+0x308>
        pcb->unacked = seg;
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010fb8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8010fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fbc:	623b      	str	r3, [r7, #32]
 8010fbe:	e03f      	b.n	8011040 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8010fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fc2:	68db      	ldr	r3, [r3, #12]
 8010fc4:	685b      	ldr	r3, [r3, #4]
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	f7f8 ffad 	bl	8009f26 <lwip_htonl>
 8010fcc:	4604      	mov	r4, r0
 8010fce:	6a3b      	ldr	r3, [r7, #32]
 8010fd0:	68db      	ldr	r3, [r3, #12]
 8010fd2:	685b      	ldr	r3, [r3, #4]
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	f7f8 ffa6 	bl	8009f26 <lwip_htonl>
 8010fda:	4603      	mov	r3, r0
 8010fdc:	1ae3      	subs	r3, r4, r3
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	da24      	bge.n	801102c <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	3370      	adds	r3, #112	; 0x70
 8010fe6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010fe8:	e002      	b.n	8010ff0 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8010fea:	69fb      	ldr	r3, [r7, #28]
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010ff0:	69fb      	ldr	r3, [r7, #28]
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d011      	beq.n	801101c <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010ff8:	69fb      	ldr	r3, [r7, #28]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	68db      	ldr	r3, [r3, #12]
 8010ffe:	685b      	ldr	r3, [r3, #4]
 8011000:	4618      	mov	r0, r3
 8011002:	f7f8 ff90 	bl	8009f26 <lwip_htonl>
 8011006:	4604      	mov	r4, r0
 8011008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801100a:	68db      	ldr	r3, [r3, #12]
 801100c:	685b      	ldr	r3, [r3, #4]
 801100e:	4618      	mov	r0, r3
 8011010:	f7f8 ff89 	bl	8009f26 <lwip_htonl>
 8011014:	4603      	mov	r3, r0
 8011016:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011018:	2b00      	cmp	r3, #0
 801101a:	dbe6      	blt.n	8010fea <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 801101c:	69fb      	ldr	r3, [r7, #28]
 801101e:	681a      	ldr	r2, [r3, #0]
 8011020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011022:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011024:	69fb      	ldr	r3, [r7, #28]
 8011026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011028:	601a      	str	r2, [r3, #0]
 801102a:	e009      	b.n	8011040 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801102c:	6a3b      	ldr	r3, [r7, #32]
 801102e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011030:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011032:	6a3b      	ldr	r3, [r7, #32]
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	623b      	str	r3, [r7, #32]
 8011038:	e002      	b.n	8011040 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801103a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801103c:	f7fb ff1a 	bl	800ce74 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011044:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8011046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011048:	2b00      	cmp	r3, #0
 801104a:	d012      	beq.n	8011072 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801104c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801104e:	68db      	ldr	r3, [r3, #12]
 8011050:	685b      	ldr	r3, [r3, #4]
 8011052:	4618      	mov	r0, r3
 8011054:	f7f8 ff67 	bl	8009f26 <lwip_htonl>
 8011058:	4602      	mov	r2, r0
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801105e:	1ad3      	subs	r3, r2, r3
 8011060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011062:	8912      	ldrh	r2, [r2, #8]
 8011064:	4413      	add	r3, r2
  while (seg != NULL &&
 8011066:	69ba      	ldr	r2, [r7, #24]
 8011068:	429a      	cmp	r2, r3
 801106a:	f4bf aeda 	bcs.w	8010e22 <tcp_output+0x16a>
 801106e:	e000      	b.n	8011072 <tcp_output+0x3ba>
      break;
 8011070:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011076:	2b00      	cmp	r3, #0
 8011078:	d108      	bne.n	801108c <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	2200      	movs	r2, #0
 801107e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8011082:	e004      	b.n	801108e <tcp_output+0x3d6>
    goto output_done;
 8011084:	bf00      	nop
 8011086:	e002      	b.n	801108e <tcp_output+0x3d6>
    goto output_done;
 8011088:	bf00      	nop
 801108a:	e000      	b.n	801108e <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801108c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	8b5b      	ldrh	r3, [r3, #26]
 8011092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011096:	b29a      	uxth	r2, r3
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801109c:	2300      	movs	r3, #0
}
 801109e:	4618      	mov	r0, r3
 80110a0:	3728      	adds	r7, #40	; 0x28
 80110a2:	46bd      	mov	sp, r7
 80110a4:	bdb0      	pop	{r4, r5, r7, pc}
 80110a6:	bf00      	nop

080110a8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b082      	sub	sp, #8
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d106      	bne.n	80110c4 <tcp_output_segment_busy+0x1c>
 80110b6:	4b09      	ldr	r3, [pc, #36]	; (80110dc <tcp_output_segment_busy+0x34>)
 80110b8:	f240 529a 	movw	r2, #1434	; 0x59a
 80110bc:	4908      	ldr	r1, [pc, #32]	; (80110e0 <tcp_output_segment_busy+0x38>)
 80110be:	4809      	ldr	r0, [pc, #36]	; (80110e4 <tcp_output_segment_busy+0x3c>)
 80110c0:	f005 ff44 	bl	8016f4c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	685b      	ldr	r3, [r3, #4]
 80110c8:	7b9b      	ldrb	r3, [r3, #14]
 80110ca:	2b01      	cmp	r3, #1
 80110cc:	d001      	beq.n	80110d2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80110ce:	2301      	movs	r3, #1
 80110d0:	e000      	b.n	80110d4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80110d2:	2300      	movs	r3, #0
}
 80110d4:	4618      	mov	r0, r3
 80110d6:	3708      	adds	r7, #8
 80110d8:	46bd      	mov	sp, r7
 80110da:	bd80      	pop	{r7, pc}
 80110dc:	08019e78 	.word	0x08019e78
 80110e0:	0801a414 	.word	0x0801a414
 80110e4:	08019ecc 	.word	0x08019ecc

080110e8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80110e8:	b5b0      	push	{r4, r5, r7, lr}
 80110ea:	b08c      	sub	sp, #48	; 0x30
 80110ec:	af04      	add	r7, sp, #16
 80110ee:	60f8      	str	r0, [r7, #12]
 80110f0:	60b9      	str	r1, [r7, #8]
 80110f2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d106      	bne.n	8011108 <tcp_output_segment+0x20>
 80110fa:	4b64      	ldr	r3, [pc, #400]	; (801128c <tcp_output_segment+0x1a4>)
 80110fc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8011100:	4963      	ldr	r1, [pc, #396]	; (8011290 <tcp_output_segment+0x1a8>)
 8011102:	4864      	ldr	r0, [pc, #400]	; (8011294 <tcp_output_segment+0x1ac>)
 8011104:	f005 ff22 	bl	8016f4c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011108:	68bb      	ldr	r3, [r7, #8]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d106      	bne.n	801111c <tcp_output_segment+0x34>
 801110e:	4b5f      	ldr	r3, [pc, #380]	; (801128c <tcp_output_segment+0x1a4>)
 8011110:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8011114:	4960      	ldr	r1, [pc, #384]	; (8011298 <tcp_output_segment+0x1b0>)
 8011116:	485f      	ldr	r0, [pc, #380]	; (8011294 <tcp_output_segment+0x1ac>)
 8011118:	f005 ff18 	bl	8016f4c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d106      	bne.n	8011130 <tcp_output_segment+0x48>
 8011122:	4b5a      	ldr	r3, [pc, #360]	; (801128c <tcp_output_segment+0x1a4>)
 8011124:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8011128:	495c      	ldr	r1, [pc, #368]	; (801129c <tcp_output_segment+0x1b4>)
 801112a:	485a      	ldr	r0, [pc, #360]	; (8011294 <tcp_output_segment+0x1ac>)
 801112c:	f005 ff0e 	bl	8016f4c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011130:	68f8      	ldr	r0, [r7, #12]
 8011132:	f7ff ffb9 	bl	80110a8 <tcp_output_segment_busy>
 8011136:	4603      	mov	r3, r0
 8011138:	2b00      	cmp	r3, #0
 801113a:	d001      	beq.n	8011140 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801113c:	2300      	movs	r3, #0
 801113e:	e0a0      	b.n	8011282 <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011140:	68bb      	ldr	r3, [r7, #8]
 8011142:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	68dc      	ldr	r4, [r3, #12]
 8011148:	4610      	mov	r0, r2
 801114a:	f7f8 feec 	bl	8009f26 <lwip_htonl>
 801114e:	4603      	mov	r3, r0
 8011150:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011152:	68bb      	ldr	r3, [r7, #8]
 8011154:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	68dc      	ldr	r4, [r3, #12]
 801115a:	4610      	mov	r0, r2
 801115c:	f7f8 fece 	bl	8009efc <lwip_htons>
 8011160:	4603      	mov	r3, r0
 8011162:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011164:	68bb      	ldr	r3, [r7, #8]
 8011166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011168:	68ba      	ldr	r2, [r7, #8]
 801116a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801116c:	441a      	add	r2, r3
 801116e:	68bb      	ldr	r3, [r7, #8]
 8011170:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	68db      	ldr	r3, [r3, #12]
 8011176:	3314      	adds	r3, #20
 8011178:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	7a9b      	ldrb	r3, [r3, #10]
 801117e:	f003 0301 	and.w	r3, r3, #1
 8011182:	2b00      	cmp	r3, #0
 8011184:	d015      	beq.n	80111b2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011186:	68bb      	ldr	r3, [r7, #8]
 8011188:	3304      	adds	r3, #4
 801118a:	461a      	mov	r2, r3
 801118c:	6879      	ldr	r1, [r7, #4]
 801118e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8011192:	f7fc fa33 	bl	800d5fc <tcp_eff_send_mss_netif>
 8011196:	4603      	mov	r3, r0
 8011198:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801119a:	8b7b      	ldrh	r3, [r7, #26]
 801119c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80111a0:	4618      	mov	r0, r3
 80111a2:	f7f8 fec0 	bl	8009f26 <lwip_htonl>
 80111a6:	4602      	mov	r2, r0
 80111a8:	69fb      	ldr	r3, [r7, #28]
 80111aa:	601a      	str	r2, [r3, #0]
    opts += 1;
 80111ac:	69fb      	ldr	r3, [r7, #28]
 80111ae:	3304      	adds	r3, #4
 80111b0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80111b2:	68bb      	ldr	r3, [r7, #8]
 80111b4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	da02      	bge.n	80111c2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80111bc:	68bb      	ldr	r3, [r7, #8]
 80111be:	2200      	movs	r2, #0
 80111c0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80111c2:	68bb      	ldr	r3, [r7, #8]
 80111c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d10c      	bne.n	80111e4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80111ca:	4b35      	ldr	r3, [pc, #212]	; (80112a0 <tcp_output_segment+0x1b8>)
 80111cc:	681a      	ldr	r2, [r3, #0]
 80111ce:	68bb      	ldr	r3, [r7, #8]
 80111d0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	68db      	ldr	r3, [r3, #12]
 80111d6:	685b      	ldr	r3, [r3, #4]
 80111d8:	4618      	mov	r0, r3
 80111da:	f7f8 fea4 	bl	8009f26 <lwip_htonl>
 80111de:	4602      	mov	r2, r0
 80111e0:	68bb      	ldr	r3, [r7, #8]
 80111e2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	68db      	ldr	r3, [r3, #12]
 80111e8:	461a      	mov	r2, r3
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	685b      	ldr	r3, [r3, #4]
 80111ee:	685b      	ldr	r3, [r3, #4]
 80111f0:	1ad3      	subs	r3, r2, r3
 80111f2:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	685b      	ldr	r3, [r3, #4]
 80111f8:	8959      	ldrh	r1, [r3, #10]
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	685b      	ldr	r3, [r3, #4]
 80111fe:	8b3a      	ldrh	r2, [r7, #24]
 8011200:	1a8a      	subs	r2, r1, r2
 8011202:	b292      	uxth	r2, r2
 8011204:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	685b      	ldr	r3, [r3, #4]
 801120a:	8919      	ldrh	r1, [r3, #8]
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	685b      	ldr	r3, [r3, #4]
 8011210:	8b3a      	ldrh	r2, [r7, #24]
 8011212:	1a8a      	subs	r2, r1, r2
 8011214:	b292      	uxth	r2, r2
 8011216:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	685b      	ldr	r3, [r3, #4]
 801121c:	68fa      	ldr	r2, [r7, #12]
 801121e:	68d2      	ldr	r2, [r2, #12]
 8011220:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	68db      	ldr	r3, [r3, #12]
 8011226:	2200      	movs	r2, #0
 8011228:	741a      	strb	r2, [r3, #16]
 801122a:	2200      	movs	r2, #0
 801122c:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	68db      	ldr	r3, [r3, #12]
 8011232:	f103 0214 	add.w	r2, r3, #20
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	7a9b      	ldrb	r3, [r3, #10]
 801123a:	009b      	lsls	r3, r3, #2
 801123c:	f003 0304 	and.w	r3, r3, #4
 8011240:	4413      	add	r3, r2
 8011242:	69fa      	ldr	r2, [r7, #28]
 8011244:	429a      	cmp	r2, r3
 8011246:	d006      	beq.n	8011256 <tcp_output_segment+0x16e>
 8011248:	4b10      	ldr	r3, [pc, #64]	; (801128c <tcp_output_segment+0x1a4>)
 801124a:	f240 621c 	movw	r2, #1564	; 0x61c
 801124e:	4915      	ldr	r1, [pc, #84]	; (80112a4 <tcp_output_segment+0x1bc>)
 8011250:	4810      	ldr	r0, [pc, #64]	; (8011294 <tcp_output_segment+0x1ac>)
 8011252:	f005 fe7b 	bl	8016f4c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	6858      	ldr	r0, [r3, #4]
 801125a:	68b9      	ldr	r1, [r7, #8]
 801125c:	68bb      	ldr	r3, [r7, #8]
 801125e:	1d1c      	adds	r4, r3, #4
 8011260:	68bb      	ldr	r3, [r7, #8]
 8011262:	7add      	ldrb	r5, [r3, #11]
 8011264:	68bb      	ldr	r3, [r7, #8]
 8011266:	7a9b      	ldrb	r3, [r3, #10]
 8011268:	687a      	ldr	r2, [r7, #4]
 801126a:	9202      	str	r2, [sp, #8]
 801126c:	2206      	movs	r2, #6
 801126e:	9201      	str	r2, [sp, #4]
 8011270:	9300      	str	r3, [sp, #0]
 8011272:	462b      	mov	r3, r5
 8011274:	4622      	mov	r2, r4
 8011276:	f004 fbef 	bl	8015a58 <ip4_output_if>
 801127a:	4603      	mov	r3, r0
 801127c:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801127e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011282:	4618      	mov	r0, r3
 8011284:	3720      	adds	r7, #32
 8011286:	46bd      	mov	sp, r7
 8011288:	bdb0      	pop	{r4, r5, r7, pc}
 801128a:	bf00      	nop
 801128c:	08019e78 	.word	0x08019e78
 8011290:	0801a43c 	.word	0x0801a43c
 8011294:	08019ecc 	.word	0x08019ecc
 8011298:	0801a45c 	.word	0x0801a45c
 801129c:	0801a47c 	.word	0x0801a47c
 80112a0:	20010e7c 	.word	0x20010e7c
 80112a4:	0801a4a0 	.word	0x0801a4a0

080112a8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80112a8:	b5b0      	push	{r4, r5, r7, lr}
 80112aa:	b084      	sub	sp, #16
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d106      	bne.n	80112c4 <tcp_rexmit_rto_prepare+0x1c>
 80112b6:	4b31      	ldr	r3, [pc, #196]	; (801137c <tcp_rexmit_rto_prepare+0xd4>)
 80112b8:	f240 6263 	movw	r2, #1635	; 0x663
 80112bc:	4930      	ldr	r1, [pc, #192]	; (8011380 <tcp_rexmit_rto_prepare+0xd8>)
 80112be:	4831      	ldr	r0, [pc, #196]	; (8011384 <tcp_rexmit_rto_prepare+0xdc>)
 80112c0:	f005 fe44 	bl	8016f4c <iprintf>

  if (pcb->unacked == NULL) {
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d102      	bne.n	80112d2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80112cc:	f06f 0305 	mvn.w	r3, #5
 80112d0:	e050      	b.n	8011374 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112d6:	60fb      	str	r3, [r7, #12]
 80112d8:	e00b      	b.n	80112f2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80112da:	68f8      	ldr	r0, [r7, #12]
 80112dc:	f7ff fee4 	bl	80110a8 <tcp_output_segment_busy>
 80112e0:	4603      	mov	r3, r0
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d002      	beq.n	80112ec <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80112e6:	f06f 0305 	mvn.w	r3, #5
 80112ea:	e043      	b.n	8011374 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	60fb      	str	r3, [r7, #12]
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d1ef      	bne.n	80112da <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80112fa:	68f8      	ldr	r0, [r7, #12]
 80112fc:	f7ff fed4 	bl	80110a8 <tcp_output_segment_busy>
 8011300:	4603      	mov	r3, r0
 8011302:	2b00      	cmp	r3, #0
 8011304:	d002      	beq.n	801130c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8011306:	f06f 0305 	mvn.w	r3, #5
 801130a:	e033      	b.n	8011374 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	2200      	movs	r2, #0
 8011320:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	8b5b      	ldrh	r3, [r3, #26]
 8011326:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801132a:	b29a      	uxth	r2, r3
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	68db      	ldr	r3, [r3, #12]
 8011334:	685b      	ldr	r3, [r3, #4]
 8011336:	4618      	mov	r0, r3
 8011338:	f7f8 fdf5 	bl	8009f26 <lwip_htonl>
 801133c:	4604      	mov	r4, r0
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	891b      	ldrh	r3, [r3, #8]
 8011342:	461d      	mov	r5, r3
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	68db      	ldr	r3, [r3, #12]
 8011348:	899b      	ldrh	r3, [r3, #12]
 801134a:	b29b      	uxth	r3, r3
 801134c:	4618      	mov	r0, r3
 801134e:	f7f8 fdd5 	bl	8009efc <lwip_htons>
 8011352:	4603      	mov	r3, r0
 8011354:	b2db      	uxtb	r3, r3
 8011356:	f003 0303 	and.w	r3, r3, #3
 801135a:	2b00      	cmp	r3, #0
 801135c:	d001      	beq.n	8011362 <tcp_rexmit_rto_prepare+0xba>
 801135e:	2301      	movs	r3, #1
 8011360:	e000      	b.n	8011364 <tcp_rexmit_rto_prepare+0xbc>
 8011362:	2300      	movs	r3, #0
 8011364:	442b      	add	r3, r5
 8011366:	18e2      	adds	r2, r4, r3
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	2200      	movs	r2, #0
 8011370:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8011372:	2300      	movs	r3, #0
}
 8011374:	4618      	mov	r0, r3
 8011376:	3710      	adds	r7, #16
 8011378:	46bd      	mov	sp, r7
 801137a:	bdb0      	pop	{r4, r5, r7, pc}
 801137c:	08019e78 	.word	0x08019e78
 8011380:	0801a4b4 	.word	0x0801a4b4
 8011384:	08019ecc 	.word	0x08019ecc

08011388 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011388:	b580      	push	{r7, lr}
 801138a:	b082      	sub	sp, #8
 801138c:	af00      	add	r7, sp, #0
 801138e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	2b00      	cmp	r3, #0
 8011394:	d106      	bne.n	80113a4 <tcp_rexmit_rto_commit+0x1c>
 8011396:	4b0d      	ldr	r3, [pc, #52]	; (80113cc <tcp_rexmit_rto_commit+0x44>)
 8011398:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801139c:	490c      	ldr	r1, [pc, #48]	; (80113d0 <tcp_rexmit_rto_commit+0x48>)
 801139e:	480d      	ldr	r0, [pc, #52]	; (80113d4 <tcp_rexmit_rto_commit+0x4c>)
 80113a0:	f005 fdd4 	bl	8016f4c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80113aa:	2bff      	cmp	r3, #255	; 0xff
 80113ac:	d007      	beq.n	80113be <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80113b4:	3301      	adds	r3, #1
 80113b6:	b2da      	uxtb	r2, r3
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80113be:	6878      	ldr	r0, [r7, #4]
 80113c0:	f7ff fc7a 	bl	8010cb8 <tcp_output>
}
 80113c4:	bf00      	nop
 80113c6:	3708      	adds	r7, #8
 80113c8:	46bd      	mov	sp, r7
 80113ca:	bd80      	pop	{r7, pc}
 80113cc:	08019e78 	.word	0x08019e78
 80113d0:	0801a4d8 	.word	0x0801a4d8
 80113d4:	08019ecc 	.word	0x08019ecc

080113d8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80113d8:	b580      	push	{r7, lr}
 80113da:	b082      	sub	sp, #8
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d106      	bne.n	80113f4 <tcp_rexmit_rto+0x1c>
 80113e6:	4b0a      	ldr	r3, [pc, #40]	; (8011410 <tcp_rexmit_rto+0x38>)
 80113e8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80113ec:	4909      	ldr	r1, [pc, #36]	; (8011414 <tcp_rexmit_rto+0x3c>)
 80113ee:	480a      	ldr	r0, [pc, #40]	; (8011418 <tcp_rexmit_rto+0x40>)
 80113f0:	f005 fdac 	bl	8016f4c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80113f4:	6878      	ldr	r0, [r7, #4]
 80113f6:	f7ff ff57 	bl	80112a8 <tcp_rexmit_rto_prepare>
 80113fa:	4603      	mov	r3, r0
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d102      	bne.n	8011406 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8011400:	6878      	ldr	r0, [r7, #4]
 8011402:	f7ff ffc1 	bl	8011388 <tcp_rexmit_rto_commit>
  }
}
 8011406:	bf00      	nop
 8011408:	3708      	adds	r7, #8
 801140a:	46bd      	mov	sp, r7
 801140c:	bd80      	pop	{r7, pc}
 801140e:	bf00      	nop
 8011410:	08019e78 	.word	0x08019e78
 8011414:	0801a4fc 	.word	0x0801a4fc
 8011418:	08019ecc 	.word	0x08019ecc

0801141c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801141c:	b590      	push	{r4, r7, lr}
 801141e:	b085      	sub	sp, #20
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	2b00      	cmp	r3, #0
 8011428:	d106      	bne.n	8011438 <tcp_rexmit+0x1c>
 801142a:	4b2f      	ldr	r3, [pc, #188]	; (80114e8 <tcp_rexmit+0xcc>)
 801142c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8011430:	492e      	ldr	r1, [pc, #184]	; (80114ec <tcp_rexmit+0xd0>)
 8011432:	482f      	ldr	r0, [pc, #188]	; (80114f0 <tcp_rexmit+0xd4>)
 8011434:	f005 fd8a 	bl	8016f4c <iprintf>

  if (pcb->unacked == NULL) {
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801143c:	2b00      	cmp	r3, #0
 801143e:	d102      	bne.n	8011446 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8011440:	f06f 0305 	mvn.w	r3, #5
 8011444:	e04c      	b.n	80114e0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801144a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801144c:	68b8      	ldr	r0, [r7, #8]
 801144e:	f7ff fe2b 	bl	80110a8 <tcp_output_segment_busy>
 8011452:	4603      	mov	r3, r0
 8011454:	2b00      	cmp	r3, #0
 8011456:	d002      	beq.n	801145e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8011458:	f06f 0305 	mvn.w	r3, #5
 801145c:	e040      	b.n	80114e0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801145e:	68bb      	ldr	r3, [r7, #8]
 8011460:	681a      	ldr	r2, [r3, #0]
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	336c      	adds	r3, #108	; 0x6c
 801146a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801146c:	e002      	b.n	8011474 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d011      	beq.n	80114a0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	68db      	ldr	r3, [r3, #12]
 8011482:	685b      	ldr	r3, [r3, #4]
 8011484:	4618      	mov	r0, r3
 8011486:	f7f8 fd4e 	bl	8009f26 <lwip_htonl>
 801148a:	4604      	mov	r4, r0
 801148c:	68bb      	ldr	r3, [r7, #8]
 801148e:	68db      	ldr	r3, [r3, #12]
 8011490:	685b      	ldr	r3, [r3, #4]
 8011492:	4618      	mov	r0, r3
 8011494:	f7f8 fd47 	bl	8009f26 <lwip_htonl>
 8011498:	4603      	mov	r3, r0
 801149a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801149c:	2b00      	cmp	r3, #0
 801149e:	dbe6      	blt.n	801146e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	681a      	ldr	r2, [r3, #0]
 80114a4:	68bb      	ldr	r3, [r7, #8]
 80114a6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	68ba      	ldr	r2, [r7, #8]
 80114ac:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80114ae:	68bb      	ldr	r3, [r7, #8]
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d103      	bne.n	80114be <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	2200      	movs	r2, #0
 80114ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80114c4:	2bff      	cmp	r3, #255	; 0xff
 80114c6:	d007      	beq.n	80114d8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80114ce:	3301      	adds	r3, #1
 80114d0:	b2da      	uxtb	r2, r3
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	2200      	movs	r2, #0
 80114dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80114de:	2300      	movs	r3, #0
}
 80114e0:	4618      	mov	r0, r3
 80114e2:	3714      	adds	r7, #20
 80114e4:	46bd      	mov	sp, r7
 80114e6:	bd90      	pop	{r4, r7, pc}
 80114e8:	08019e78 	.word	0x08019e78
 80114ec:	0801a518 	.word	0x0801a518
 80114f0:	08019ecc 	.word	0x08019ecc

080114f4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80114f4:	b580      	push	{r7, lr}
 80114f6:	b082      	sub	sp, #8
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d106      	bne.n	8011510 <tcp_rexmit_fast+0x1c>
 8011502:	4b2e      	ldr	r3, [pc, #184]	; (80115bc <tcp_rexmit_fast+0xc8>)
 8011504:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8011508:	492d      	ldr	r1, [pc, #180]	; (80115c0 <tcp_rexmit_fast+0xcc>)
 801150a:	482e      	ldr	r0, [pc, #184]	; (80115c4 <tcp_rexmit_fast+0xd0>)
 801150c:	f005 fd1e 	bl	8016f4c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011514:	2b00      	cmp	r3, #0
 8011516:	d04d      	beq.n	80115b4 <tcp_rexmit_fast+0xc0>
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	8b5b      	ldrh	r3, [r3, #26]
 801151c:	f003 0304 	and.w	r3, r3, #4
 8011520:	2b00      	cmp	r3, #0
 8011522:	d147      	bne.n	80115b4 <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8011524:	6878      	ldr	r0, [r7, #4]
 8011526:	f7ff ff79 	bl	801141c <tcp_rexmit>
 801152a:	4603      	mov	r3, r0
 801152c:	2b00      	cmp	r3, #0
 801152e:	d141      	bne.n	80115b4 <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801153c:	429a      	cmp	r2, r3
 801153e:	d207      	bcs.n	8011550 <tcp_rexmit_fast+0x5c>
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011546:	0fda      	lsrs	r2, r3, #31
 8011548:	4413      	add	r3, r2
 801154a:	105b      	asrs	r3, r3, #1
 801154c:	b29b      	uxth	r3, r3
 801154e:	e006      	b.n	801155e <tcp_rexmit_fast+0x6a>
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011556:	0fda      	lsrs	r2, r3, #31
 8011558:	4413      	add	r3, r2
 801155a:	105b      	asrs	r3, r3, #1
 801155c:	b29b      	uxth	r3, r3
 801155e:	687a      	ldr	r2, [r7, #4]
 8011560:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801156a:	461a      	mov	r2, r3
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011570:	005b      	lsls	r3, r3, #1
 8011572:	429a      	cmp	r2, r3
 8011574:	d206      	bcs.n	8011584 <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801157a:	005b      	lsls	r3, r3, #1
 801157c:	b29a      	uxth	r2, r3
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801158e:	4619      	mov	r1, r3
 8011590:	0049      	lsls	r1, r1, #1
 8011592:	440b      	add	r3, r1
 8011594:	b29b      	uxth	r3, r3
 8011596:	4413      	add	r3, r2
 8011598:	b29a      	uxth	r2, r3
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	8b5b      	ldrh	r3, [r3, #26]
 80115a4:	f043 0304 	orr.w	r3, r3, #4
 80115a8:	b29a      	uxth	r2, r3
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	2200      	movs	r2, #0
 80115b2:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80115b4:	bf00      	nop
 80115b6:	3708      	adds	r7, #8
 80115b8:	46bd      	mov	sp, r7
 80115ba:	bd80      	pop	{r7, pc}
 80115bc:	08019e78 	.word	0x08019e78
 80115c0:	0801a530 	.word	0x0801a530
 80115c4:	08019ecc 	.word	0x08019ecc

080115c8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80115c8:	b580      	push	{r7, lr}
 80115ca:	b086      	sub	sp, #24
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	60f8      	str	r0, [r7, #12]
 80115d0:	607b      	str	r3, [r7, #4]
 80115d2:	460b      	mov	r3, r1
 80115d4:	817b      	strh	r3, [r7, #10]
 80115d6:	4613      	mov	r3, r2
 80115d8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80115da:	897a      	ldrh	r2, [r7, #10]
 80115dc:	893b      	ldrh	r3, [r7, #8]
 80115de:	4413      	add	r3, r2
 80115e0:	b29b      	uxth	r3, r3
 80115e2:	3314      	adds	r3, #20
 80115e4:	b29b      	uxth	r3, r3
 80115e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80115ea:	4619      	mov	r1, r3
 80115ec:	2022      	movs	r0, #34	; 0x22
 80115ee:	f7f9 fcdb 	bl	800afa8 <pbuf_alloc>
 80115f2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80115f4:	697b      	ldr	r3, [r7, #20]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d04e      	beq.n	8011698 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80115fa:	697b      	ldr	r3, [r7, #20]
 80115fc:	895b      	ldrh	r3, [r3, #10]
 80115fe:	461a      	mov	r2, r3
 8011600:	897b      	ldrh	r3, [r7, #10]
 8011602:	3314      	adds	r3, #20
 8011604:	429a      	cmp	r2, r3
 8011606:	da06      	bge.n	8011616 <tcp_output_alloc_header_common+0x4e>
 8011608:	4b26      	ldr	r3, [pc, #152]	; (80116a4 <tcp_output_alloc_header_common+0xdc>)
 801160a:	f240 7224 	movw	r2, #1828	; 0x724
 801160e:	4926      	ldr	r1, [pc, #152]	; (80116a8 <tcp_output_alloc_header_common+0xe0>)
 8011610:	4826      	ldr	r0, [pc, #152]	; (80116ac <tcp_output_alloc_header_common+0xe4>)
 8011612:	f005 fc9b 	bl	8016f4c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011616:	697b      	ldr	r3, [r7, #20]
 8011618:	685b      	ldr	r3, [r3, #4]
 801161a:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801161c:	8c3b      	ldrh	r3, [r7, #32]
 801161e:	4618      	mov	r0, r3
 8011620:	f7f8 fc6c 	bl	8009efc <lwip_htons>
 8011624:	4603      	mov	r3, r0
 8011626:	461a      	mov	r2, r3
 8011628:	693b      	ldr	r3, [r7, #16]
 801162a:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801162c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801162e:	4618      	mov	r0, r3
 8011630:	f7f8 fc64 	bl	8009efc <lwip_htons>
 8011634:	4603      	mov	r3, r0
 8011636:	461a      	mov	r2, r3
 8011638:	693b      	ldr	r3, [r7, #16]
 801163a:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801163c:	693b      	ldr	r3, [r7, #16]
 801163e:	687a      	ldr	r2, [r7, #4]
 8011640:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8011642:	68f8      	ldr	r0, [r7, #12]
 8011644:	f7f8 fc6f 	bl	8009f26 <lwip_htonl>
 8011648:	4602      	mov	r2, r0
 801164a:	693b      	ldr	r3, [r7, #16]
 801164c:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801164e:	897b      	ldrh	r3, [r7, #10]
 8011650:	089b      	lsrs	r3, r3, #2
 8011652:	b29b      	uxth	r3, r3
 8011654:	3305      	adds	r3, #5
 8011656:	b29b      	uxth	r3, r3
 8011658:	031b      	lsls	r3, r3, #12
 801165a:	b29a      	uxth	r2, r3
 801165c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011660:	b29b      	uxth	r3, r3
 8011662:	4313      	orrs	r3, r2
 8011664:	b29b      	uxth	r3, r3
 8011666:	4618      	mov	r0, r3
 8011668:	f7f8 fc48 	bl	8009efc <lwip_htons>
 801166c:	4603      	mov	r3, r0
 801166e:	461a      	mov	r2, r3
 8011670:	693b      	ldr	r3, [r7, #16]
 8011672:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8011674:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011676:	4618      	mov	r0, r3
 8011678:	f7f8 fc40 	bl	8009efc <lwip_htons>
 801167c:	4603      	mov	r3, r0
 801167e:	461a      	mov	r2, r3
 8011680:	693b      	ldr	r3, [r7, #16]
 8011682:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8011684:	693b      	ldr	r3, [r7, #16]
 8011686:	2200      	movs	r2, #0
 8011688:	741a      	strb	r2, [r3, #16]
 801168a:	2200      	movs	r2, #0
 801168c:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801168e:	693b      	ldr	r3, [r7, #16]
 8011690:	2200      	movs	r2, #0
 8011692:	749a      	strb	r2, [r3, #18]
 8011694:	2200      	movs	r2, #0
 8011696:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8011698:	697b      	ldr	r3, [r7, #20]
}
 801169a:	4618      	mov	r0, r3
 801169c:	3718      	adds	r7, #24
 801169e:	46bd      	mov	sp, r7
 80116a0:	bd80      	pop	{r7, pc}
 80116a2:	bf00      	nop
 80116a4:	08019e78 	.word	0x08019e78
 80116a8:	0801a550 	.word	0x0801a550
 80116ac:	08019ecc 	.word	0x08019ecc

080116b0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80116b0:	b5b0      	push	{r4, r5, r7, lr}
 80116b2:	b08a      	sub	sp, #40	; 0x28
 80116b4:	af04      	add	r7, sp, #16
 80116b6:	60f8      	str	r0, [r7, #12]
 80116b8:	607b      	str	r3, [r7, #4]
 80116ba:	460b      	mov	r3, r1
 80116bc:	817b      	strh	r3, [r7, #10]
 80116be:	4613      	mov	r3, r2
 80116c0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d106      	bne.n	80116d6 <tcp_output_alloc_header+0x26>
 80116c8:	4b15      	ldr	r3, [pc, #84]	; (8011720 <tcp_output_alloc_header+0x70>)
 80116ca:	f240 7242 	movw	r2, #1858	; 0x742
 80116ce:	4915      	ldr	r1, [pc, #84]	; (8011724 <tcp_output_alloc_header+0x74>)
 80116d0:	4815      	ldr	r0, [pc, #84]	; (8011728 <tcp_output_alloc_header+0x78>)
 80116d2:	f005 fc3b 	bl	8016f4c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	8adb      	ldrh	r3, [r3, #22]
 80116de:	68fa      	ldr	r2, [r7, #12]
 80116e0:	8b12      	ldrh	r2, [r2, #24]
 80116e2:	68f9      	ldr	r1, [r7, #12]
 80116e4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80116e6:	893d      	ldrh	r5, [r7, #8]
 80116e8:	897c      	ldrh	r4, [r7, #10]
 80116ea:	9103      	str	r1, [sp, #12]
 80116ec:	2110      	movs	r1, #16
 80116ee:	9102      	str	r1, [sp, #8]
 80116f0:	9201      	str	r2, [sp, #4]
 80116f2:	9300      	str	r3, [sp, #0]
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	462a      	mov	r2, r5
 80116f8:	4621      	mov	r1, r4
 80116fa:	f7ff ff65 	bl	80115c8 <tcp_output_alloc_header_common>
 80116fe:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011700:	697b      	ldr	r3, [r7, #20]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d006      	beq.n	8011714 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801170a:	68fa      	ldr	r2, [r7, #12]
 801170c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801170e:	441a      	add	r2, r3
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8011714:	697b      	ldr	r3, [r7, #20]
}
 8011716:	4618      	mov	r0, r3
 8011718:	3718      	adds	r7, #24
 801171a:	46bd      	mov	sp, r7
 801171c:	bdb0      	pop	{r4, r5, r7, pc}
 801171e:	bf00      	nop
 8011720:	08019e78 	.word	0x08019e78
 8011724:	0801a580 	.word	0x0801a580
 8011728:	08019ecc 	.word	0x08019ecc

0801172c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b088      	sub	sp, #32
 8011730:	af00      	add	r7, sp, #0
 8011732:	60f8      	str	r0, [r7, #12]
 8011734:	60b9      	str	r1, [r7, #8]
 8011736:	4611      	mov	r1, r2
 8011738:	461a      	mov	r2, r3
 801173a:	460b      	mov	r3, r1
 801173c:	71fb      	strb	r3, [r7, #7]
 801173e:	4613      	mov	r3, r2
 8011740:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8011742:	2300      	movs	r3, #0
 8011744:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8011746:	68bb      	ldr	r3, [r7, #8]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d106      	bne.n	801175a <tcp_output_fill_options+0x2e>
 801174c:	4b13      	ldr	r3, [pc, #76]	; (801179c <tcp_output_fill_options+0x70>)
 801174e:	f240 7256 	movw	r2, #1878	; 0x756
 8011752:	4913      	ldr	r1, [pc, #76]	; (80117a0 <tcp_output_fill_options+0x74>)
 8011754:	4813      	ldr	r0, [pc, #76]	; (80117a4 <tcp_output_fill_options+0x78>)
 8011756:	f005 fbf9 	bl	8016f4c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801175a:	68bb      	ldr	r3, [r7, #8]
 801175c:	685b      	ldr	r3, [r3, #4]
 801175e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011760:	69bb      	ldr	r3, [r7, #24]
 8011762:	3314      	adds	r3, #20
 8011764:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8011766:	69bb      	ldr	r3, [r7, #24]
 8011768:	f103 0214 	add.w	r2, r3, #20
 801176c:	8bfb      	ldrh	r3, [r7, #30]
 801176e:	009b      	lsls	r3, r3, #2
 8011770:	4619      	mov	r1, r3
 8011772:	79fb      	ldrb	r3, [r7, #7]
 8011774:	009b      	lsls	r3, r3, #2
 8011776:	f003 0304 	and.w	r3, r3, #4
 801177a:	440b      	add	r3, r1
 801177c:	4413      	add	r3, r2
 801177e:	697a      	ldr	r2, [r7, #20]
 8011780:	429a      	cmp	r2, r3
 8011782:	d006      	beq.n	8011792 <tcp_output_fill_options+0x66>
 8011784:	4b05      	ldr	r3, [pc, #20]	; (801179c <tcp_output_fill_options+0x70>)
 8011786:	f240 7275 	movw	r2, #1909	; 0x775
 801178a:	4907      	ldr	r1, [pc, #28]	; (80117a8 <tcp_output_fill_options+0x7c>)
 801178c:	4805      	ldr	r0, [pc, #20]	; (80117a4 <tcp_output_fill_options+0x78>)
 801178e:	f005 fbdd 	bl	8016f4c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011792:	bf00      	nop
 8011794:	3720      	adds	r7, #32
 8011796:	46bd      	mov	sp, r7
 8011798:	bd80      	pop	{r7, pc}
 801179a:	bf00      	nop
 801179c:	08019e78 	.word	0x08019e78
 80117a0:	0801a5a8 	.word	0x0801a5a8
 80117a4:	08019ecc 	.word	0x08019ecc
 80117a8:	0801a4a0 	.word	0x0801a4a0

080117ac <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80117ac:	b580      	push	{r7, lr}
 80117ae:	b08a      	sub	sp, #40	; 0x28
 80117b0:	af04      	add	r7, sp, #16
 80117b2:	60f8      	str	r0, [r7, #12]
 80117b4:	60b9      	str	r1, [r7, #8]
 80117b6:	607a      	str	r2, [r7, #4]
 80117b8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80117ba:	68bb      	ldr	r3, [r7, #8]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d106      	bne.n	80117ce <tcp_output_control_segment+0x22>
 80117c0:	4b1c      	ldr	r3, [pc, #112]	; (8011834 <tcp_output_control_segment+0x88>)
 80117c2:	f240 7287 	movw	r2, #1927	; 0x787
 80117c6:	491c      	ldr	r1, [pc, #112]	; (8011838 <tcp_output_control_segment+0x8c>)
 80117c8:	481c      	ldr	r0, [pc, #112]	; (801183c <tcp_output_control_segment+0x90>)
 80117ca:	f005 fbbf 	bl	8016f4c <iprintf>

  netif = tcp_route(pcb, src, dst);
 80117ce:	683a      	ldr	r2, [r7, #0]
 80117d0:	6879      	ldr	r1, [r7, #4]
 80117d2:	68f8      	ldr	r0, [r7, #12]
 80117d4:	f7fe fad6 	bl	800fd84 <tcp_route>
 80117d8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80117da:	693b      	ldr	r3, [r7, #16]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d102      	bne.n	80117e6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80117e0:	23fc      	movs	r3, #252	; 0xfc
 80117e2:	75fb      	strb	r3, [r7, #23]
 80117e4:	e01c      	b.n	8011820 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d006      	beq.n	80117fa <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	7adb      	ldrb	r3, [r3, #11]
 80117f0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	7a9b      	ldrb	r3, [r3, #10]
 80117f6:	757b      	strb	r3, [r7, #21]
 80117f8:	e003      	b.n	8011802 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80117fa:	23ff      	movs	r3, #255	; 0xff
 80117fc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80117fe:	2300      	movs	r3, #0
 8011800:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011802:	7dba      	ldrb	r2, [r7, #22]
 8011804:	693b      	ldr	r3, [r7, #16]
 8011806:	9302      	str	r3, [sp, #8]
 8011808:	2306      	movs	r3, #6
 801180a:	9301      	str	r3, [sp, #4]
 801180c:	7d7b      	ldrb	r3, [r7, #21]
 801180e:	9300      	str	r3, [sp, #0]
 8011810:	4613      	mov	r3, r2
 8011812:	683a      	ldr	r2, [r7, #0]
 8011814:	6879      	ldr	r1, [r7, #4]
 8011816:	68b8      	ldr	r0, [r7, #8]
 8011818:	f004 f91e 	bl	8015a58 <ip4_output_if>
 801181c:	4603      	mov	r3, r0
 801181e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011820:	68b8      	ldr	r0, [r7, #8]
 8011822:	f7f9 fea1 	bl	800b568 <pbuf_free>
  return err;
 8011826:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801182a:	4618      	mov	r0, r3
 801182c:	3718      	adds	r7, #24
 801182e:	46bd      	mov	sp, r7
 8011830:	bd80      	pop	{r7, pc}
 8011832:	bf00      	nop
 8011834:	08019e78 	.word	0x08019e78
 8011838:	0801a5d0 	.word	0x0801a5d0
 801183c:	08019ecc 	.word	0x08019ecc

08011840 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8011840:	b590      	push	{r4, r7, lr}
 8011842:	b08b      	sub	sp, #44	; 0x2c
 8011844:	af04      	add	r7, sp, #16
 8011846:	60f8      	str	r0, [r7, #12]
 8011848:	60b9      	str	r1, [r7, #8]
 801184a:	607a      	str	r2, [r7, #4]
 801184c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801184e:	683b      	ldr	r3, [r7, #0]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d106      	bne.n	8011862 <tcp_rst+0x22>
 8011854:	4b1e      	ldr	r3, [pc, #120]	; (80118d0 <tcp_rst+0x90>)
 8011856:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801185a:	491e      	ldr	r1, [pc, #120]	; (80118d4 <tcp_rst+0x94>)
 801185c:	481e      	ldr	r0, [pc, #120]	; (80118d8 <tcp_rst+0x98>)
 801185e:	f005 fb75 	bl	8016f4c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8011862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011864:	2b00      	cmp	r3, #0
 8011866:	d106      	bne.n	8011876 <tcp_rst+0x36>
 8011868:	4b19      	ldr	r3, [pc, #100]	; (80118d0 <tcp_rst+0x90>)
 801186a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801186e:	491b      	ldr	r1, [pc, #108]	; (80118dc <tcp_rst+0x9c>)
 8011870:	4819      	ldr	r0, [pc, #100]	; (80118d8 <tcp_rst+0x98>)
 8011872:	f005 fb6b 	bl	8016f4c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011876:	2300      	movs	r3, #0
 8011878:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801187a:	2310      	movs	r3, #16
 801187c:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801187e:	7dfb      	ldrb	r3, [r7, #23]
 8011880:	b29c      	uxth	r4, r3
 8011882:	68b8      	ldr	r0, [r7, #8]
 8011884:	f7f8 fb4f 	bl	8009f26 <lwip_htonl>
 8011888:	4602      	mov	r2, r0
 801188a:	8abb      	ldrh	r3, [r7, #20]
 801188c:	9303      	str	r3, [sp, #12]
 801188e:	2314      	movs	r3, #20
 8011890:	9302      	str	r3, [sp, #8]
 8011892:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011894:	9301      	str	r3, [sp, #4]
 8011896:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011898:	9300      	str	r3, [sp, #0]
 801189a:	4613      	mov	r3, r2
 801189c:	2200      	movs	r2, #0
 801189e:	4621      	mov	r1, r4
 80118a0:	6878      	ldr	r0, [r7, #4]
 80118a2:	f7ff fe91 	bl	80115c8 <tcp_output_alloc_header_common>
 80118a6:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80118a8:	693b      	ldr	r3, [r7, #16]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d00c      	beq.n	80118c8 <tcp_rst+0x88>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80118ae:	7dfb      	ldrb	r3, [r7, #23]
 80118b0:	2200      	movs	r2, #0
 80118b2:	6939      	ldr	r1, [r7, #16]
 80118b4:	68f8      	ldr	r0, [r7, #12]
 80118b6:	f7ff ff39 	bl	801172c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80118ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118bc:	683a      	ldr	r2, [r7, #0]
 80118be:	6939      	ldr	r1, [r7, #16]
 80118c0:	68f8      	ldr	r0, [r7, #12]
 80118c2:	f7ff ff73 	bl	80117ac <tcp_output_control_segment>
 80118c6:	e000      	b.n	80118ca <tcp_rst+0x8a>
    return;
 80118c8:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80118ca:	371c      	adds	r7, #28
 80118cc:	46bd      	mov	sp, r7
 80118ce:	bd90      	pop	{r4, r7, pc}
 80118d0:	08019e78 	.word	0x08019e78
 80118d4:	0801a5fc 	.word	0x0801a5fc
 80118d8:	08019ecc 	.word	0x08019ecc
 80118dc:	0801a618 	.word	0x0801a618

080118e0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80118e0:	b590      	push	{r4, r7, lr}
 80118e2:	b087      	sub	sp, #28
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80118e8:	2300      	movs	r3, #0
 80118ea:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80118ec:	2300      	movs	r3, #0
 80118ee:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d106      	bne.n	8011904 <tcp_send_empty_ack+0x24>
 80118f6:	4b28      	ldr	r3, [pc, #160]	; (8011998 <tcp_send_empty_ack+0xb8>)
 80118f8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80118fc:	4927      	ldr	r1, [pc, #156]	; (801199c <tcp_send_empty_ack+0xbc>)
 80118fe:	4828      	ldr	r0, [pc, #160]	; (80119a0 <tcp_send_empty_ack+0xc0>)
 8011900:	f005 fb24 	bl	8016f4c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011904:	7dfb      	ldrb	r3, [r7, #23]
 8011906:	009b      	lsls	r3, r3, #2
 8011908:	b2db      	uxtb	r3, r3
 801190a:	f003 0304 	and.w	r3, r3, #4
 801190e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011910:	7d7b      	ldrb	r3, [r7, #21]
 8011912:	b29c      	uxth	r4, r3
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011918:	4618      	mov	r0, r3
 801191a:	f7f8 fb04 	bl	8009f26 <lwip_htonl>
 801191e:	4603      	mov	r3, r0
 8011920:	2200      	movs	r2, #0
 8011922:	4621      	mov	r1, r4
 8011924:	6878      	ldr	r0, [r7, #4]
 8011926:	f7ff fec3 	bl	80116b0 <tcp_output_alloc_header>
 801192a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801192c:	693b      	ldr	r3, [r7, #16]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d109      	bne.n	8011946 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	8b5b      	ldrh	r3, [r3, #26]
 8011936:	f043 0303 	orr.w	r3, r3, #3
 801193a:	b29a      	uxth	r2, r3
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011940:	f06f 0301 	mvn.w	r3, #1
 8011944:	e023      	b.n	801198e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011946:	7dbb      	ldrb	r3, [r7, #22]
 8011948:	7dfa      	ldrb	r2, [r7, #23]
 801194a:	6939      	ldr	r1, [r7, #16]
 801194c:	6878      	ldr	r0, [r7, #4]
 801194e:	f7ff feed 	bl	801172c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011952:	687a      	ldr	r2, [r7, #4]
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	3304      	adds	r3, #4
 8011958:	6939      	ldr	r1, [r7, #16]
 801195a:	6878      	ldr	r0, [r7, #4]
 801195c:	f7ff ff26 	bl	80117ac <tcp_output_control_segment>
 8011960:	4603      	mov	r3, r0
 8011962:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011964:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d007      	beq.n	801197c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	8b5b      	ldrh	r3, [r3, #26]
 8011970:	f043 0303 	orr.w	r3, r3, #3
 8011974:	b29a      	uxth	r2, r3
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	835a      	strh	r2, [r3, #26]
 801197a:	e006      	b.n	801198a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	8b5b      	ldrh	r3, [r3, #26]
 8011980:	f023 0303 	bic.w	r3, r3, #3
 8011984:	b29a      	uxth	r2, r3
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801198a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801198e:	4618      	mov	r0, r3
 8011990:	371c      	adds	r7, #28
 8011992:	46bd      	mov	sp, r7
 8011994:	bd90      	pop	{r4, r7, pc}
 8011996:	bf00      	nop
 8011998:	08019e78 	.word	0x08019e78
 801199c:	0801a634 	.word	0x0801a634
 80119a0:	08019ecc 	.word	0x08019ecc

080119a4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80119a4:	b590      	push	{r4, r7, lr}
 80119a6:	b087      	sub	sp, #28
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80119ac:	2300      	movs	r3, #0
 80119ae:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d106      	bne.n	80119c4 <tcp_keepalive+0x20>
 80119b6:	4b18      	ldr	r3, [pc, #96]	; (8011a18 <tcp_keepalive+0x74>)
 80119b8:	f640 0224 	movw	r2, #2084	; 0x824
 80119bc:	4917      	ldr	r1, [pc, #92]	; (8011a1c <tcp_keepalive+0x78>)
 80119be:	4818      	ldr	r0, [pc, #96]	; (8011a20 <tcp_keepalive+0x7c>)
 80119c0:	f005 fac4 	bl	8016f4c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80119c4:	7dfb      	ldrb	r3, [r7, #23]
 80119c6:	b29c      	uxth	r4, r3
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80119cc:	3b01      	subs	r3, #1
 80119ce:	4618      	mov	r0, r3
 80119d0:	f7f8 faa9 	bl	8009f26 <lwip_htonl>
 80119d4:	4603      	mov	r3, r0
 80119d6:	2200      	movs	r2, #0
 80119d8:	4621      	mov	r1, r4
 80119da:	6878      	ldr	r0, [r7, #4]
 80119dc:	f7ff fe68 	bl	80116b0 <tcp_output_alloc_header>
 80119e0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80119e2:	693b      	ldr	r3, [r7, #16]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d102      	bne.n	80119ee <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80119e8:	f04f 33ff 	mov.w	r3, #4294967295
 80119ec:	e010      	b.n	8011a10 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80119ee:	7dfb      	ldrb	r3, [r7, #23]
 80119f0:	2200      	movs	r2, #0
 80119f2:	6939      	ldr	r1, [r7, #16]
 80119f4:	6878      	ldr	r0, [r7, #4]
 80119f6:	f7ff fe99 	bl	801172c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80119fa:	687a      	ldr	r2, [r7, #4]
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	3304      	adds	r3, #4
 8011a00:	6939      	ldr	r1, [r7, #16]
 8011a02:	6878      	ldr	r0, [r7, #4]
 8011a04:	f7ff fed2 	bl	80117ac <tcp_output_control_segment>
 8011a08:	4603      	mov	r3, r0
 8011a0a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011a0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011a10:	4618      	mov	r0, r3
 8011a12:	371c      	adds	r7, #28
 8011a14:	46bd      	mov	sp, r7
 8011a16:	bd90      	pop	{r4, r7, pc}
 8011a18:	08019e78 	.word	0x08019e78
 8011a1c:	0801a654 	.word	0x0801a654
 8011a20:	08019ecc 	.word	0x08019ecc

08011a24 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011a24:	b590      	push	{r4, r7, lr}
 8011a26:	b08b      	sub	sp, #44	; 0x2c
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011a2c:	2300      	movs	r3, #0
 8011a2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d106      	bne.n	8011a46 <tcp_zero_window_probe+0x22>
 8011a38:	4b4c      	ldr	r3, [pc, #304]	; (8011b6c <tcp_zero_window_probe+0x148>)
 8011a3a:	f640 024f 	movw	r2, #2127	; 0x84f
 8011a3e:	494c      	ldr	r1, [pc, #304]	; (8011b70 <tcp_zero_window_probe+0x14c>)
 8011a40:	484c      	ldr	r0, [pc, #304]	; (8011b74 <tcp_zero_window_probe+0x150>)
 8011a42:	f005 fa83 	bl	8016f4c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a4a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011a4c:	6a3b      	ldr	r3, [r7, #32]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d101      	bne.n	8011a56 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011a52:	2300      	movs	r3, #0
 8011a54:	e086      	b.n	8011b64 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011a5c:	2bff      	cmp	r3, #255	; 0xff
 8011a5e:	d007      	beq.n	8011a70 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011a66:	3301      	adds	r3, #1
 8011a68:	b2da      	uxtb	r2, r3
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011a70:	6a3b      	ldr	r3, [r7, #32]
 8011a72:	68db      	ldr	r3, [r3, #12]
 8011a74:	899b      	ldrh	r3, [r3, #12]
 8011a76:	b29b      	uxth	r3, r3
 8011a78:	4618      	mov	r0, r3
 8011a7a:	f7f8 fa3f 	bl	8009efc <lwip_htons>
 8011a7e:	4603      	mov	r3, r0
 8011a80:	b2db      	uxtb	r3, r3
 8011a82:	f003 0301 	and.w	r3, r3, #1
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d005      	beq.n	8011a96 <tcp_zero_window_probe+0x72>
 8011a8a:	6a3b      	ldr	r3, [r7, #32]
 8011a8c:	891b      	ldrh	r3, [r3, #8]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d101      	bne.n	8011a96 <tcp_zero_window_probe+0x72>
 8011a92:	2301      	movs	r3, #1
 8011a94:	e000      	b.n	8011a98 <tcp_zero_window_probe+0x74>
 8011a96:	2300      	movs	r3, #0
 8011a98:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011a9a:	7ffb      	ldrb	r3, [r7, #31]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	bf0c      	ite	eq
 8011aa0:	2301      	moveq	r3, #1
 8011aa2:	2300      	movne	r3, #0
 8011aa4:	b2db      	uxtb	r3, r3
 8011aa6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011aac:	b299      	uxth	r1, r3
 8011aae:	6a3b      	ldr	r3, [r7, #32]
 8011ab0:	68db      	ldr	r3, [r3, #12]
 8011ab2:	685b      	ldr	r3, [r3, #4]
 8011ab4:	8bba      	ldrh	r2, [r7, #28]
 8011ab6:	6878      	ldr	r0, [r7, #4]
 8011ab8:	f7ff fdfa 	bl	80116b0 <tcp_output_alloc_header>
 8011abc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011abe:	69bb      	ldr	r3, [r7, #24]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d102      	bne.n	8011aca <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8011ac8:	e04c      	b.n	8011b64 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011aca:	69bb      	ldr	r3, [r7, #24]
 8011acc:	685b      	ldr	r3, [r3, #4]
 8011ace:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011ad0:	7ffb      	ldrb	r3, [r7, #31]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d011      	beq.n	8011afa <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011ad6:	697b      	ldr	r3, [r7, #20]
 8011ad8:	899b      	ldrh	r3, [r3, #12]
 8011ada:	b29b      	uxth	r3, r3
 8011adc:	b21b      	sxth	r3, r3
 8011ade:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011ae2:	b21c      	sxth	r4, r3
 8011ae4:	2011      	movs	r0, #17
 8011ae6:	f7f8 fa09 	bl	8009efc <lwip_htons>
 8011aea:	4603      	mov	r3, r0
 8011aec:	b21b      	sxth	r3, r3
 8011aee:	4323      	orrs	r3, r4
 8011af0:	b21b      	sxth	r3, r3
 8011af2:	b29a      	uxth	r2, r3
 8011af4:	697b      	ldr	r3, [r7, #20]
 8011af6:	819a      	strh	r2, [r3, #12]
 8011af8:	e010      	b.n	8011b1c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011afa:	69bb      	ldr	r3, [r7, #24]
 8011afc:	685b      	ldr	r3, [r3, #4]
 8011afe:	3314      	adds	r3, #20
 8011b00:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011b02:	6a3b      	ldr	r3, [r7, #32]
 8011b04:	6858      	ldr	r0, [r3, #4]
 8011b06:	6a3b      	ldr	r3, [r7, #32]
 8011b08:	685b      	ldr	r3, [r3, #4]
 8011b0a:	891a      	ldrh	r2, [r3, #8]
 8011b0c:	6a3b      	ldr	r3, [r7, #32]
 8011b0e:	891b      	ldrh	r3, [r3, #8]
 8011b10:	1ad3      	subs	r3, r2, r3
 8011b12:	b29b      	uxth	r3, r3
 8011b14:	2201      	movs	r2, #1
 8011b16:	6939      	ldr	r1, [r7, #16]
 8011b18:	f7f9 ff2c 	bl	800b974 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011b1c:	6a3b      	ldr	r3, [r7, #32]
 8011b1e:	68db      	ldr	r3, [r3, #12]
 8011b20:	685b      	ldr	r3, [r3, #4]
 8011b22:	4618      	mov	r0, r3
 8011b24:	f7f8 f9ff 	bl	8009f26 <lwip_htonl>
 8011b28:	4603      	mov	r3, r0
 8011b2a:	3301      	adds	r3, #1
 8011b2c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	1ad3      	subs	r3, r2, r3
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	da02      	bge.n	8011b40 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	68fa      	ldr	r2, [r7, #12]
 8011b3e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011b40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011b44:	2200      	movs	r2, #0
 8011b46:	69b9      	ldr	r1, [r7, #24]
 8011b48:	6878      	ldr	r0, [r7, #4]
 8011b4a:	f7ff fdef 	bl	801172c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011b4e:	687a      	ldr	r2, [r7, #4]
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	3304      	adds	r3, #4
 8011b54:	69b9      	ldr	r1, [r7, #24]
 8011b56:	6878      	ldr	r0, [r7, #4]
 8011b58:	f7ff fe28 	bl	80117ac <tcp_output_control_segment>
 8011b5c:	4603      	mov	r3, r0
 8011b5e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011b60:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011b64:	4618      	mov	r0, r3
 8011b66:	372c      	adds	r7, #44	; 0x2c
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	bd90      	pop	{r4, r7, pc}
 8011b6c:	08019e78 	.word	0x08019e78
 8011b70:	0801a670 	.word	0x0801a670
 8011b74:	08019ecc 	.word	0x08019ecc

08011b78 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b082      	sub	sp, #8
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011b80:	f7f9 ffe6 	bl	800bb50 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011b84:	4b0a      	ldr	r3, [pc, #40]	; (8011bb0 <tcpip_tcp_timer+0x38>)
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d103      	bne.n	8011b94 <tcpip_tcp_timer+0x1c>
 8011b8c:	4b09      	ldr	r3, [pc, #36]	; (8011bb4 <tcpip_tcp_timer+0x3c>)
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d005      	beq.n	8011ba0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011b94:	2200      	movs	r2, #0
 8011b96:	4908      	ldr	r1, [pc, #32]	; (8011bb8 <tcpip_tcp_timer+0x40>)
 8011b98:	20fa      	movs	r0, #250	; 0xfa
 8011b9a:	f000 f8f1 	bl	8011d80 <sys_timeout>
 8011b9e:	e002      	b.n	8011ba6 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011ba0:	4b06      	ldr	r3, [pc, #24]	; (8011bbc <tcpip_tcp_timer+0x44>)
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	601a      	str	r2, [r3, #0]
  }
}
 8011ba6:	bf00      	nop
 8011ba8:	3708      	adds	r7, #8
 8011baa:	46bd      	mov	sp, r7
 8011bac:	bd80      	pop	{r7, pc}
 8011bae:	bf00      	nop
 8011bb0:	20010e78 	.word	0x20010e78
 8011bb4:	20010e88 	.word	0x20010e88
 8011bb8:	08011b79 	.word	0x08011b79
 8011bbc:	200081f8 	.word	0x200081f8

08011bc0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011bc4:	4b0a      	ldr	r3, [pc, #40]	; (8011bf0 <tcp_timer_needed+0x30>)
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d10f      	bne.n	8011bec <tcp_timer_needed+0x2c>
 8011bcc:	4b09      	ldr	r3, [pc, #36]	; (8011bf4 <tcp_timer_needed+0x34>)
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d103      	bne.n	8011bdc <tcp_timer_needed+0x1c>
 8011bd4:	4b08      	ldr	r3, [pc, #32]	; (8011bf8 <tcp_timer_needed+0x38>)
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d007      	beq.n	8011bec <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011bdc:	4b04      	ldr	r3, [pc, #16]	; (8011bf0 <tcp_timer_needed+0x30>)
 8011bde:	2201      	movs	r2, #1
 8011be0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011be2:	2200      	movs	r2, #0
 8011be4:	4905      	ldr	r1, [pc, #20]	; (8011bfc <tcp_timer_needed+0x3c>)
 8011be6:	20fa      	movs	r0, #250	; 0xfa
 8011be8:	f000 f8ca 	bl	8011d80 <sys_timeout>
  }
}
 8011bec:	bf00      	nop
 8011bee:	bd80      	pop	{r7, pc}
 8011bf0:	200081f8 	.word	0x200081f8
 8011bf4:	20010e78 	.word	0x20010e78
 8011bf8:	20010e88 	.word	0x20010e88
 8011bfc:	08011b79 	.word	0x08011b79

08011c00 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b086      	sub	sp, #24
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	60f8      	str	r0, [r7, #12]
 8011c08:	60b9      	str	r1, [r7, #8]
 8011c0a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011c0c:	200a      	movs	r0, #10
 8011c0e:	f7f8 fe2b 	bl	800a868 <memp_malloc>
 8011c12:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011c14:	693b      	ldr	r3, [r7, #16]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d109      	bne.n	8011c2e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011c1a:	693b      	ldr	r3, [r7, #16]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d151      	bne.n	8011cc4 <sys_timeout_abs+0xc4>
 8011c20:	4b2a      	ldr	r3, [pc, #168]	; (8011ccc <sys_timeout_abs+0xcc>)
 8011c22:	22be      	movs	r2, #190	; 0xbe
 8011c24:	492a      	ldr	r1, [pc, #168]	; (8011cd0 <sys_timeout_abs+0xd0>)
 8011c26:	482b      	ldr	r0, [pc, #172]	; (8011cd4 <sys_timeout_abs+0xd4>)
 8011c28:	f005 f990 	bl	8016f4c <iprintf>
    return;
 8011c2c:	e04a      	b.n	8011cc4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011c2e:	693b      	ldr	r3, [r7, #16]
 8011c30:	2200      	movs	r2, #0
 8011c32:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011c34:	693b      	ldr	r3, [r7, #16]
 8011c36:	68ba      	ldr	r2, [r7, #8]
 8011c38:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011c3a:	693b      	ldr	r3, [r7, #16]
 8011c3c:	687a      	ldr	r2, [r7, #4]
 8011c3e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011c40:	693b      	ldr	r3, [r7, #16]
 8011c42:	68fa      	ldr	r2, [r7, #12]
 8011c44:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011c46:	4b24      	ldr	r3, [pc, #144]	; (8011cd8 <sys_timeout_abs+0xd8>)
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d103      	bne.n	8011c56 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011c4e:	4a22      	ldr	r2, [pc, #136]	; (8011cd8 <sys_timeout_abs+0xd8>)
 8011c50:	693b      	ldr	r3, [r7, #16]
 8011c52:	6013      	str	r3, [r2, #0]
    return;
 8011c54:	e037      	b.n	8011cc6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011c56:	693b      	ldr	r3, [r7, #16]
 8011c58:	685a      	ldr	r2, [r3, #4]
 8011c5a:	4b1f      	ldr	r3, [pc, #124]	; (8011cd8 <sys_timeout_abs+0xd8>)
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	685b      	ldr	r3, [r3, #4]
 8011c60:	1ad3      	subs	r3, r2, r3
 8011c62:	0fdb      	lsrs	r3, r3, #31
 8011c64:	f003 0301 	and.w	r3, r3, #1
 8011c68:	b2db      	uxtb	r3, r3
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d007      	beq.n	8011c7e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011c6e:	4b1a      	ldr	r3, [pc, #104]	; (8011cd8 <sys_timeout_abs+0xd8>)
 8011c70:	681a      	ldr	r2, [r3, #0]
 8011c72:	693b      	ldr	r3, [r7, #16]
 8011c74:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011c76:	4a18      	ldr	r2, [pc, #96]	; (8011cd8 <sys_timeout_abs+0xd8>)
 8011c78:	693b      	ldr	r3, [r7, #16]
 8011c7a:	6013      	str	r3, [r2, #0]
 8011c7c:	e023      	b.n	8011cc6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011c7e:	4b16      	ldr	r3, [pc, #88]	; (8011cd8 <sys_timeout_abs+0xd8>)
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	617b      	str	r3, [r7, #20]
 8011c84:	e01a      	b.n	8011cbc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011c86:	697b      	ldr	r3, [r7, #20]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d00b      	beq.n	8011ca6 <sys_timeout_abs+0xa6>
 8011c8e:	693b      	ldr	r3, [r7, #16]
 8011c90:	685a      	ldr	r2, [r3, #4]
 8011c92:	697b      	ldr	r3, [r7, #20]
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	685b      	ldr	r3, [r3, #4]
 8011c98:	1ad3      	subs	r3, r2, r3
 8011c9a:	0fdb      	lsrs	r3, r3, #31
 8011c9c:	f003 0301 	and.w	r3, r3, #1
 8011ca0:	b2db      	uxtb	r3, r3
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d007      	beq.n	8011cb6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011ca6:	697b      	ldr	r3, [r7, #20]
 8011ca8:	681a      	ldr	r2, [r3, #0]
 8011caa:	693b      	ldr	r3, [r7, #16]
 8011cac:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011cae:	697b      	ldr	r3, [r7, #20]
 8011cb0:	693a      	ldr	r2, [r7, #16]
 8011cb2:	601a      	str	r2, [r3, #0]
        break;
 8011cb4:	e007      	b.n	8011cc6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011cb6:	697b      	ldr	r3, [r7, #20]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	617b      	str	r3, [r7, #20]
 8011cbc:	697b      	ldr	r3, [r7, #20]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d1e1      	bne.n	8011c86 <sys_timeout_abs+0x86>
 8011cc2:	e000      	b.n	8011cc6 <sys_timeout_abs+0xc6>
    return;
 8011cc4:	bf00      	nop
      }
    }
  }
}
 8011cc6:	3718      	adds	r7, #24
 8011cc8:	46bd      	mov	sp, r7
 8011cca:	bd80      	pop	{r7, pc}
 8011ccc:	0801a694 	.word	0x0801a694
 8011cd0:	0801a6c8 	.word	0x0801a6c8
 8011cd4:	0801a708 	.word	0x0801a708
 8011cd8:	200081f0 	.word	0x200081f0

08011cdc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011cdc:	b580      	push	{r7, lr}
 8011cde:	b086      	sub	sp, #24
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011ce8:	697b      	ldr	r3, [r7, #20]
 8011cea:	685b      	ldr	r3, [r3, #4]
 8011cec:	4798      	blx	r3

  now = sys_now();
 8011cee:	f7f2 fecf 	bl	8004a90 <sys_now>
 8011cf2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011cf4:	697b      	ldr	r3, [r7, #20]
 8011cf6:	681a      	ldr	r2, [r3, #0]
 8011cf8:	4b0f      	ldr	r3, [pc, #60]	; (8011d38 <lwip_cyclic_timer+0x5c>)
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	4413      	add	r3, r2
 8011cfe:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011d00:	68fa      	ldr	r2, [r7, #12]
 8011d02:	693b      	ldr	r3, [r7, #16]
 8011d04:	1ad3      	subs	r3, r2, r3
 8011d06:	0fdb      	lsrs	r3, r3, #31
 8011d08:	f003 0301 	and.w	r3, r3, #1
 8011d0c:	b2db      	uxtb	r3, r3
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d009      	beq.n	8011d26 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011d12:	697b      	ldr	r3, [r7, #20]
 8011d14:	681a      	ldr	r2, [r3, #0]
 8011d16:	693b      	ldr	r3, [r7, #16]
 8011d18:	4413      	add	r3, r2
 8011d1a:	687a      	ldr	r2, [r7, #4]
 8011d1c:	4907      	ldr	r1, [pc, #28]	; (8011d3c <lwip_cyclic_timer+0x60>)
 8011d1e:	4618      	mov	r0, r3
 8011d20:	f7ff ff6e 	bl	8011c00 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011d24:	e004      	b.n	8011d30 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011d26:	687a      	ldr	r2, [r7, #4]
 8011d28:	4904      	ldr	r1, [pc, #16]	; (8011d3c <lwip_cyclic_timer+0x60>)
 8011d2a:	68f8      	ldr	r0, [r7, #12]
 8011d2c:	f7ff ff68 	bl	8011c00 <sys_timeout_abs>
}
 8011d30:	bf00      	nop
 8011d32:	3718      	adds	r7, #24
 8011d34:	46bd      	mov	sp, r7
 8011d36:	bd80      	pop	{r7, pc}
 8011d38:	200081f4 	.word	0x200081f4
 8011d3c:	08011cdd 	.word	0x08011cdd

08011d40 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011d40:	b580      	push	{r7, lr}
 8011d42:	b082      	sub	sp, #8
 8011d44:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011d46:	2301      	movs	r3, #1
 8011d48:	607b      	str	r3, [r7, #4]
 8011d4a:	e00e      	b.n	8011d6a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011d4c:	4a0a      	ldr	r2, [pc, #40]	; (8011d78 <sys_timeouts_init+0x38>)
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	00db      	lsls	r3, r3, #3
 8011d58:	4a07      	ldr	r2, [pc, #28]	; (8011d78 <sys_timeouts_init+0x38>)
 8011d5a:	4413      	add	r3, r2
 8011d5c:	461a      	mov	r2, r3
 8011d5e:	4907      	ldr	r1, [pc, #28]	; (8011d7c <sys_timeouts_init+0x3c>)
 8011d60:	f000 f80e 	bl	8011d80 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	3301      	adds	r3, #1
 8011d68:	607b      	str	r3, [r7, #4]
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	2b04      	cmp	r3, #4
 8011d6e:	d9ed      	bls.n	8011d4c <sys_timeouts_init+0xc>
  }
}
 8011d70:	bf00      	nop
 8011d72:	3708      	adds	r7, #8
 8011d74:	46bd      	mov	sp, r7
 8011d76:	bd80      	pop	{r7, pc}
 8011d78:	0801fa80 	.word	0x0801fa80
 8011d7c:	08011cdd 	.word	0x08011cdd

08011d80 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b086      	sub	sp, #24
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	60f8      	str	r0, [r7, #12]
 8011d88:	60b9      	str	r1, [r7, #8]
 8011d8a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011d92:	d306      	bcc.n	8011da2 <sys_timeout+0x22>
 8011d94:	4b0a      	ldr	r3, [pc, #40]	; (8011dc0 <sys_timeout+0x40>)
 8011d96:	f240 1229 	movw	r2, #297	; 0x129
 8011d9a:	490a      	ldr	r1, [pc, #40]	; (8011dc4 <sys_timeout+0x44>)
 8011d9c:	480a      	ldr	r0, [pc, #40]	; (8011dc8 <sys_timeout+0x48>)
 8011d9e:	f005 f8d5 	bl	8016f4c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8011da2:	f7f2 fe75 	bl	8004a90 <sys_now>
 8011da6:	4602      	mov	r2, r0
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	4413      	add	r3, r2
 8011dac:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011dae:	687a      	ldr	r2, [r7, #4]
 8011db0:	68b9      	ldr	r1, [r7, #8]
 8011db2:	6978      	ldr	r0, [r7, #20]
 8011db4:	f7ff ff24 	bl	8011c00 <sys_timeout_abs>
#endif
}
 8011db8:	bf00      	nop
 8011dba:	3718      	adds	r7, #24
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	bd80      	pop	{r7, pc}
 8011dc0:	0801a694 	.word	0x0801a694
 8011dc4:	0801a730 	.word	0x0801a730
 8011dc8:	0801a708 	.word	0x0801a708

08011dcc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011dcc:	b580      	push	{r7, lr}
 8011dce:	b084      	sub	sp, #16
 8011dd0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8011dd2:	f7f2 fe5d 	bl	8004a90 <sys_now>
 8011dd6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8011dd8:	4b17      	ldr	r3, [pc, #92]	; (8011e38 <sys_check_timeouts+0x6c>)
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8011dde:	68bb      	ldr	r3, [r7, #8]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d022      	beq.n	8011e2a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011de4:	68bb      	ldr	r3, [r7, #8]
 8011de6:	685b      	ldr	r3, [r3, #4]
 8011de8:	68fa      	ldr	r2, [r7, #12]
 8011dea:	1ad3      	subs	r3, r2, r3
 8011dec:	0fdb      	lsrs	r3, r3, #31
 8011dee:	f003 0301 	and.w	r3, r3, #1
 8011df2:	b2db      	uxtb	r3, r3
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d11a      	bne.n	8011e2e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8011df8:	68bb      	ldr	r3, [r7, #8]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	4a0e      	ldr	r2, [pc, #56]	; (8011e38 <sys_check_timeouts+0x6c>)
 8011dfe:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8011e00:	68bb      	ldr	r3, [r7, #8]
 8011e02:	689b      	ldr	r3, [r3, #8]
 8011e04:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011e06:	68bb      	ldr	r3, [r7, #8]
 8011e08:	68db      	ldr	r3, [r3, #12]
 8011e0a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011e0c:	68bb      	ldr	r3, [r7, #8]
 8011e0e:	685b      	ldr	r3, [r3, #4]
 8011e10:	4a0a      	ldr	r2, [pc, #40]	; (8011e3c <sys_check_timeouts+0x70>)
 8011e12:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011e14:	68b9      	ldr	r1, [r7, #8]
 8011e16:	200a      	movs	r0, #10
 8011e18:	f7f8 fd78 	bl	800a90c <memp_free>
    if (handler != NULL) {
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d0da      	beq.n	8011dd8 <sys_check_timeouts+0xc>
      handler(arg);
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	6838      	ldr	r0, [r7, #0]
 8011e26:	4798      	blx	r3
  do {
 8011e28:	e7d6      	b.n	8011dd8 <sys_check_timeouts+0xc>
      return;
 8011e2a:	bf00      	nop
 8011e2c:	e000      	b.n	8011e30 <sys_check_timeouts+0x64>
      return;
 8011e2e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8011e30:	3710      	adds	r7, #16
 8011e32:	46bd      	mov	sp, r7
 8011e34:	bd80      	pop	{r7, pc}
 8011e36:	bf00      	nop
 8011e38:	200081f0 	.word	0x200081f0
 8011e3c:	200081f4 	.word	0x200081f4

08011e40 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b082      	sub	sp, #8
 8011e44:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8011e46:	4b16      	ldr	r3, [pc, #88]	; (8011ea0 <sys_timeouts_sleeptime+0x60>)
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d102      	bne.n	8011e54 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8011e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8011e52:	e020      	b.n	8011e96 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8011e54:	f7f2 fe1c 	bl	8004a90 <sys_now>
 8011e58:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8011e5a:	4b11      	ldr	r3, [pc, #68]	; (8011ea0 <sys_timeouts_sleeptime+0x60>)
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	685a      	ldr	r2, [r3, #4]
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	1ad3      	subs	r3, r2, r3
 8011e64:	0fdb      	lsrs	r3, r3, #31
 8011e66:	f003 0301 	and.w	r3, r3, #1
 8011e6a:	b2db      	uxtb	r3, r3
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d001      	beq.n	8011e74 <sys_timeouts_sleeptime+0x34>
    return 0;
 8011e70:	2300      	movs	r3, #0
 8011e72:	e010      	b.n	8011e96 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8011e74:	4b0a      	ldr	r3, [pc, #40]	; (8011ea0 <sys_timeouts_sleeptime+0x60>)
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	685a      	ldr	r2, [r3, #4]
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	1ad3      	subs	r3, r2, r3
 8011e7e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8011e80:	683b      	ldr	r3, [r7, #0]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	da06      	bge.n	8011e94 <sys_timeouts_sleeptime+0x54>
 8011e86:	4b07      	ldr	r3, [pc, #28]	; (8011ea4 <sys_timeouts_sleeptime+0x64>)
 8011e88:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8011e8c:	4906      	ldr	r1, [pc, #24]	; (8011ea8 <sys_timeouts_sleeptime+0x68>)
 8011e8e:	4807      	ldr	r0, [pc, #28]	; (8011eac <sys_timeouts_sleeptime+0x6c>)
 8011e90:	f005 f85c 	bl	8016f4c <iprintf>
    return ret;
 8011e94:	683b      	ldr	r3, [r7, #0]
  }
}
 8011e96:	4618      	mov	r0, r3
 8011e98:	3708      	adds	r7, #8
 8011e9a:	46bd      	mov	sp, r7
 8011e9c:	bd80      	pop	{r7, pc}
 8011e9e:	bf00      	nop
 8011ea0:	200081f0 	.word	0x200081f0
 8011ea4:	0801a694 	.word	0x0801a694
 8011ea8:	0801a768 	.word	0x0801a768
 8011eac:	0801a708 	.word	0x0801a708

08011eb0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011eb4:	f005 f862 	bl	8016f7c <rand>
 8011eb8:	4603      	mov	r3, r0
 8011eba:	b29b      	uxth	r3, r3
 8011ebc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011ec0:	b29b      	uxth	r3, r3
 8011ec2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011ec6:	b29a      	uxth	r2, r3
 8011ec8:	4b01      	ldr	r3, [pc, #4]	; (8011ed0 <udp_init+0x20>)
 8011eca:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011ecc:	bf00      	nop
 8011ece:	bd80      	pop	{r7, pc}
 8011ed0:	20000038 	.word	0x20000038

08011ed4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8011ed4:	b480      	push	{r7}
 8011ed6:	b083      	sub	sp, #12
 8011ed8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8011eda:	2300      	movs	r3, #0
 8011edc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8011ede:	4b17      	ldr	r3, [pc, #92]	; (8011f3c <udp_new_port+0x68>)
 8011ee0:	881b      	ldrh	r3, [r3, #0]
 8011ee2:	1c5a      	adds	r2, r3, #1
 8011ee4:	b291      	uxth	r1, r2
 8011ee6:	4a15      	ldr	r2, [pc, #84]	; (8011f3c <udp_new_port+0x68>)
 8011ee8:	8011      	strh	r1, [r2, #0]
 8011eea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011eee:	4293      	cmp	r3, r2
 8011ef0:	d103      	bne.n	8011efa <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8011ef2:	4b12      	ldr	r3, [pc, #72]	; (8011f3c <udp_new_port+0x68>)
 8011ef4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8011ef8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011efa:	4b11      	ldr	r3, [pc, #68]	; (8011f40 <udp_new_port+0x6c>)
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	603b      	str	r3, [r7, #0]
 8011f00:	e011      	b.n	8011f26 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8011f02:	683b      	ldr	r3, [r7, #0]
 8011f04:	8a5a      	ldrh	r2, [r3, #18]
 8011f06:	4b0d      	ldr	r3, [pc, #52]	; (8011f3c <udp_new_port+0x68>)
 8011f08:	881b      	ldrh	r3, [r3, #0]
 8011f0a:	429a      	cmp	r2, r3
 8011f0c:	d108      	bne.n	8011f20 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8011f0e:	88fb      	ldrh	r3, [r7, #6]
 8011f10:	3301      	adds	r3, #1
 8011f12:	80fb      	strh	r3, [r7, #6]
 8011f14:	88fb      	ldrh	r3, [r7, #6]
 8011f16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011f1a:	d3e0      	bcc.n	8011ede <udp_new_port+0xa>
        return 0;
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	e007      	b.n	8011f30 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011f20:	683b      	ldr	r3, [r7, #0]
 8011f22:	68db      	ldr	r3, [r3, #12]
 8011f24:	603b      	str	r3, [r7, #0]
 8011f26:	683b      	ldr	r3, [r7, #0]
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d1ea      	bne.n	8011f02 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8011f2c:	4b03      	ldr	r3, [pc, #12]	; (8011f3c <udp_new_port+0x68>)
 8011f2e:	881b      	ldrh	r3, [r3, #0]
}
 8011f30:	4618      	mov	r0, r3
 8011f32:	370c      	adds	r7, #12
 8011f34:	46bd      	mov	sp, r7
 8011f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f3a:	4770      	bx	lr
 8011f3c:	20000038 	.word	0x20000038
 8011f40:	20010e90 	.word	0x20010e90

08011f44 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011f44:	b580      	push	{r7, lr}
 8011f46:	b084      	sub	sp, #16
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	60f8      	str	r0, [r7, #12]
 8011f4c:	60b9      	str	r1, [r7, #8]
 8011f4e:	4613      	mov	r3, r2
 8011f50:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d105      	bne.n	8011f64 <udp_input_local_match+0x20>
 8011f58:	4b27      	ldr	r3, [pc, #156]	; (8011ff8 <udp_input_local_match+0xb4>)
 8011f5a:	2287      	movs	r2, #135	; 0x87
 8011f5c:	4927      	ldr	r1, [pc, #156]	; (8011ffc <udp_input_local_match+0xb8>)
 8011f5e:	4828      	ldr	r0, [pc, #160]	; (8012000 <udp_input_local_match+0xbc>)
 8011f60:	f004 fff4 	bl	8016f4c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011f64:	68bb      	ldr	r3, [r7, #8]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d105      	bne.n	8011f76 <udp_input_local_match+0x32>
 8011f6a:	4b23      	ldr	r3, [pc, #140]	; (8011ff8 <udp_input_local_match+0xb4>)
 8011f6c:	2288      	movs	r2, #136	; 0x88
 8011f6e:	4925      	ldr	r1, [pc, #148]	; (8012004 <udp_input_local_match+0xc0>)
 8011f70:	4823      	ldr	r0, [pc, #140]	; (8012000 <udp_input_local_match+0xbc>)
 8011f72:	f004 ffeb 	bl	8016f4c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	7a1b      	ldrb	r3, [r3, #8]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d00b      	beq.n	8011f96 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	7a1a      	ldrb	r2, [r3, #8]
 8011f82:	4b21      	ldr	r3, [pc, #132]	; (8012008 <udp_input_local_match+0xc4>)
 8011f84:	685b      	ldr	r3, [r3, #4]
 8011f86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011f8a:	3301      	adds	r3, #1
 8011f8c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011f8e:	429a      	cmp	r2, r3
 8011f90:	d001      	beq.n	8011f96 <udp_input_local_match+0x52>
    return 0;
 8011f92:	2300      	movs	r3, #0
 8011f94:	e02b      	b.n	8011fee <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011f96:	79fb      	ldrb	r3, [r7, #7]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d018      	beq.n	8011fce <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d013      	beq.n	8011fca <udp_input_local_match+0x86>
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d00f      	beq.n	8011fca <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011faa:	4b17      	ldr	r3, [pc, #92]	; (8012008 <udp_input_local_match+0xc4>)
 8011fac:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fb2:	d00a      	beq.n	8011fca <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	681a      	ldr	r2, [r3, #0]
 8011fb8:	4b13      	ldr	r3, [pc, #76]	; (8012008 <udp_input_local_match+0xc4>)
 8011fba:	695b      	ldr	r3, [r3, #20]
 8011fbc:	405a      	eors	r2, r3
 8011fbe:	68bb      	ldr	r3, [r7, #8]
 8011fc0:	3308      	adds	r3, #8
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d110      	bne.n	8011fec <udp_input_local_match+0xa8>
          return 1;
 8011fca:	2301      	movs	r3, #1
 8011fcc:	e00f      	b.n	8011fee <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d009      	beq.n	8011fe8 <udp_input_local_match+0xa4>
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d005      	beq.n	8011fe8 <udp_input_local_match+0xa4>
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	681a      	ldr	r2, [r3, #0]
 8011fe0:	4b09      	ldr	r3, [pc, #36]	; (8012008 <udp_input_local_match+0xc4>)
 8011fe2:	695b      	ldr	r3, [r3, #20]
 8011fe4:	429a      	cmp	r2, r3
 8011fe6:	d101      	bne.n	8011fec <udp_input_local_match+0xa8>
        return 1;
 8011fe8:	2301      	movs	r3, #1
 8011fea:	e000      	b.n	8011fee <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011fec:	2300      	movs	r3, #0
}
 8011fee:	4618      	mov	r0, r3
 8011ff0:	3710      	adds	r7, #16
 8011ff2:	46bd      	mov	sp, r7
 8011ff4:	bd80      	pop	{r7, pc}
 8011ff6:	bf00      	nop
 8011ff8:	0801a77c 	.word	0x0801a77c
 8011ffc:	0801a7ac 	.word	0x0801a7ac
 8012000:	0801a7d0 	.word	0x0801a7d0
 8012004:	0801a7f8 	.word	0x0801a7f8
 8012008:	2000b8c4 	.word	0x2000b8c4

0801200c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801200c:	b590      	push	{r4, r7, lr}
 801200e:	b08d      	sub	sp, #52	; 0x34
 8012010:	af02      	add	r7, sp, #8
 8012012:	6078      	str	r0, [r7, #4]
 8012014:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012016:	2300      	movs	r3, #0
 8012018:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	2b00      	cmp	r3, #0
 801201e:	d105      	bne.n	801202c <udp_input+0x20>
 8012020:	4b7c      	ldr	r3, [pc, #496]	; (8012214 <udp_input+0x208>)
 8012022:	22cf      	movs	r2, #207	; 0xcf
 8012024:	497c      	ldr	r1, [pc, #496]	; (8012218 <udp_input+0x20c>)
 8012026:	487d      	ldr	r0, [pc, #500]	; (801221c <udp_input+0x210>)
 8012028:	f004 ff90 	bl	8016f4c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801202c:	683b      	ldr	r3, [r7, #0]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d105      	bne.n	801203e <udp_input+0x32>
 8012032:	4b78      	ldr	r3, [pc, #480]	; (8012214 <udp_input+0x208>)
 8012034:	22d0      	movs	r2, #208	; 0xd0
 8012036:	497a      	ldr	r1, [pc, #488]	; (8012220 <udp_input+0x214>)
 8012038:	4878      	ldr	r0, [pc, #480]	; (801221c <udp_input+0x210>)
 801203a:	f004 ff87 	bl	8016f4c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	895b      	ldrh	r3, [r3, #10]
 8012042:	2b07      	cmp	r3, #7
 8012044:	d803      	bhi.n	801204e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012046:	6878      	ldr	r0, [r7, #4]
 8012048:	f7f9 fa8e 	bl	800b568 <pbuf_free>
    goto end;
 801204c:	e0de      	b.n	801220c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	685b      	ldr	r3, [r3, #4]
 8012052:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012054:	4b73      	ldr	r3, [pc, #460]	; (8012224 <udp_input+0x218>)
 8012056:	695a      	ldr	r2, [r3, #20]
 8012058:	4b72      	ldr	r3, [pc, #456]	; (8012224 <udp_input+0x218>)
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	4619      	mov	r1, r3
 801205e:	4610      	mov	r0, r2
 8012060:	f003 fdd2 	bl	8015c08 <ip4_addr_isbroadcast_u32>
 8012064:	4603      	mov	r3, r0
 8012066:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012068:	697b      	ldr	r3, [r7, #20]
 801206a:	881b      	ldrh	r3, [r3, #0]
 801206c:	b29b      	uxth	r3, r3
 801206e:	4618      	mov	r0, r3
 8012070:	f7f7 ff44 	bl	8009efc <lwip_htons>
 8012074:	4603      	mov	r3, r0
 8012076:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012078:	697b      	ldr	r3, [r7, #20]
 801207a:	885b      	ldrh	r3, [r3, #2]
 801207c:	b29b      	uxth	r3, r3
 801207e:	4618      	mov	r0, r3
 8012080:	f7f7 ff3c 	bl	8009efc <lwip_htons>
 8012084:	4603      	mov	r3, r0
 8012086:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012088:	2300      	movs	r3, #0
 801208a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801208c:	2300      	movs	r3, #0
 801208e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012090:	2300      	movs	r3, #0
 8012092:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012094:	4b64      	ldr	r3, [pc, #400]	; (8012228 <udp_input+0x21c>)
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	627b      	str	r3, [r7, #36]	; 0x24
 801209a:	e054      	b.n	8012146 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801209c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801209e:	8a5b      	ldrh	r3, [r3, #18]
 80120a0:	89fa      	ldrh	r2, [r7, #14]
 80120a2:	429a      	cmp	r2, r3
 80120a4:	d14a      	bne.n	801213c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80120a6:	7cfb      	ldrb	r3, [r7, #19]
 80120a8:	461a      	mov	r2, r3
 80120aa:	6839      	ldr	r1, [r7, #0]
 80120ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80120ae:	f7ff ff49 	bl	8011f44 <udp_input_local_match>
 80120b2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d041      	beq.n	801213c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80120b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ba:	7c1b      	ldrb	r3, [r3, #16]
 80120bc:	f003 0304 	and.w	r3, r3, #4
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d11d      	bne.n	8012100 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80120c4:	69fb      	ldr	r3, [r7, #28]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d102      	bne.n	80120d0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80120ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120cc:	61fb      	str	r3, [r7, #28]
 80120ce:	e017      	b.n	8012100 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80120d0:	7cfb      	ldrb	r3, [r7, #19]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d014      	beq.n	8012100 <udp_input+0xf4>
 80120d6:	4b53      	ldr	r3, [pc, #332]	; (8012224 <udp_input+0x218>)
 80120d8:	695b      	ldr	r3, [r3, #20]
 80120da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120de:	d10f      	bne.n	8012100 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80120e0:	69fb      	ldr	r3, [r7, #28]
 80120e2:	681a      	ldr	r2, [r3, #0]
 80120e4:	683b      	ldr	r3, [r7, #0]
 80120e6:	3304      	adds	r3, #4
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	429a      	cmp	r2, r3
 80120ec:	d008      	beq.n	8012100 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80120ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120f0:	681a      	ldr	r2, [r3, #0]
 80120f2:	683b      	ldr	r3, [r7, #0]
 80120f4:	3304      	adds	r3, #4
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	429a      	cmp	r2, r3
 80120fa:	d101      	bne.n	8012100 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80120fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120fe:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012102:	8a9b      	ldrh	r3, [r3, #20]
 8012104:	8a3a      	ldrh	r2, [r7, #16]
 8012106:	429a      	cmp	r2, r3
 8012108:	d118      	bne.n	801213c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801210c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801210e:	2b00      	cmp	r3, #0
 8012110:	d005      	beq.n	801211e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012114:	685a      	ldr	r2, [r3, #4]
 8012116:	4b43      	ldr	r3, [pc, #268]	; (8012224 <udp_input+0x218>)
 8012118:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801211a:	429a      	cmp	r2, r3
 801211c:	d10e      	bne.n	801213c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801211e:	6a3b      	ldr	r3, [r7, #32]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d014      	beq.n	801214e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012126:	68da      	ldr	r2, [r3, #12]
 8012128:	6a3b      	ldr	r3, [r7, #32]
 801212a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801212c:	4b3e      	ldr	r3, [pc, #248]	; (8012228 <udp_input+0x21c>)
 801212e:	681a      	ldr	r2, [r3, #0]
 8012130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012132:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012134:	4a3c      	ldr	r2, [pc, #240]	; (8012228 <udp_input+0x21c>)
 8012136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012138:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801213a:	e008      	b.n	801214e <udp_input+0x142>
      }
    }

    prev = pcb;
 801213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801213e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012142:	68db      	ldr	r3, [r3, #12]
 8012144:	627b      	str	r3, [r7, #36]	; 0x24
 8012146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012148:	2b00      	cmp	r3, #0
 801214a:	d1a7      	bne.n	801209c <udp_input+0x90>
 801214c:	e000      	b.n	8012150 <udp_input+0x144>
        break;
 801214e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012152:	2b00      	cmp	r3, #0
 8012154:	d101      	bne.n	801215a <udp_input+0x14e>
    pcb = uncon_pcb;
 8012156:	69fb      	ldr	r3, [r7, #28]
 8012158:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801215c:	2b00      	cmp	r3, #0
 801215e:	d002      	beq.n	8012166 <udp_input+0x15a>
    for_us = 1;
 8012160:	2301      	movs	r3, #1
 8012162:	76fb      	strb	r3, [r7, #27]
 8012164:	e00a      	b.n	801217c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012166:	683b      	ldr	r3, [r7, #0]
 8012168:	3304      	adds	r3, #4
 801216a:	681a      	ldr	r2, [r3, #0]
 801216c:	4b2d      	ldr	r3, [pc, #180]	; (8012224 <udp_input+0x218>)
 801216e:	695b      	ldr	r3, [r3, #20]
 8012170:	429a      	cmp	r2, r3
 8012172:	bf0c      	ite	eq
 8012174:	2301      	moveq	r3, #1
 8012176:	2300      	movne	r3, #0
 8012178:	b2db      	uxtb	r3, r3
 801217a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801217c:	7efb      	ldrb	r3, [r7, #27]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d041      	beq.n	8012206 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012182:	2108      	movs	r1, #8
 8012184:	6878      	ldr	r0, [r7, #4]
 8012186:	f7f9 f969 	bl	800b45c <pbuf_remove_header>
 801218a:	4603      	mov	r3, r0
 801218c:	2b00      	cmp	r3, #0
 801218e:	d00a      	beq.n	80121a6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012190:	4b20      	ldr	r3, [pc, #128]	; (8012214 <udp_input+0x208>)
 8012192:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8012196:	4925      	ldr	r1, [pc, #148]	; (801222c <udp_input+0x220>)
 8012198:	4820      	ldr	r0, [pc, #128]	; (801221c <udp_input+0x210>)
 801219a:	f004 fed7 	bl	8016f4c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801219e:	6878      	ldr	r0, [r7, #4]
 80121a0:	f7f9 f9e2 	bl	800b568 <pbuf_free>
      goto end;
 80121a4:	e032      	b.n	801220c <udp_input+0x200>
    }

    if (pcb != NULL) {
 80121a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d012      	beq.n	80121d2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80121ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ae:	699b      	ldr	r3, [r3, #24]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d00a      	beq.n	80121ca <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80121b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121b6:	699c      	ldr	r4, [r3, #24]
 80121b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ba:	69d8      	ldr	r0, [r3, #28]
 80121bc:	8a3b      	ldrh	r3, [r7, #16]
 80121be:	9300      	str	r3, [sp, #0]
 80121c0:	4b1b      	ldr	r3, [pc, #108]	; (8012230 <udp_input+0x224>)
 80121c2:	687a      	ldr	r2, [r7, #4]
 80121c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80121c6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80121c8:	e021      	b.n	801220e <udp_input+0x202>
        pbuf_free(p);
 80121ca:	6878      	ldr	r0, [r7, #4]
 80121cc:	f7f9 f9cc 	bl	800b568 <pbuf_free>
        goto end;
 80121d0:	e01c      	b.n	801220c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80121d2:	7cfb      	ldrb	r3, [r7, #19]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d112      	bne.n	80121fe <udp_input+0x1f2>
 80121d8:	4b12      	ldr	r3, [pc, #72]	; (8012224 <udp_input+0x218>)
 80121da:	695b      	ldr	r3, [r3, #20]
 80121dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80121e0:	2be0      	cmp	r3, #224	; 0xe0
 80121e2:	d00c      	beq.n	80121fe <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80121e4:	4b0f      	ldr	r3, [pc, #60]	; (8012224 <udp_input+0x218>)
 80121e6:	899b      	ldrh	r3, [r3, #12]
 80121e8:	3308      	adds	r3, #8
 80121ea:	b29b      	uxth	r3, r3
 80121ec:	b21b      	sxth	r3, r3
 80121ee:	4619      	mov	r1, r3
 80121f0:	6878      	ldr	r0, [r7, #4]
 80121f2:	f7f9 f9a6 	bl	800b542 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80121f6:	2103      	movs	r1, #3
 80121f8:	6878      	ldr	r0, [r7, #4]
 80121fa:	f003 f9c9 	bl	8015590 <icmp_dest_unreach>
      pbuf_free(p);
 80121fe:	6878      	ldr	r0, [r7, #4]
 8012200:	f7f9 f9b2 	bl	800b568 <pbuf_free>
  return;
 8012204:	e003      	b.n	801220e <udp_input+0x202>
    pbuf_free(p);
 8012206:	6878      	ldr	r0, [r7, #4]
 8012208:	f7f9 f9ae 	bl	800b568 <pbuf_free>
  return;
 801220c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801220e:	372c      	adds	r7, #44	; 0x2c
 8012210:	46bd      	mov	sp, r7
 8012212:	bd90      	pop	{r4, r7, pc}
 8012214:	0801a77c 	.word	0x0801a77c
 8012218:	0801a820 	.word	0x0801a820
 801221c:	0801a7d0 	.word	0x0801a7d0
 8012220:	0801a838 	.word	0x0801a838
 8012224:	2000b8c4 	.word	0x2000b8c4
 8012228:	20010e90 	.word	0x20010e90
 801222c:	0801a854 	.word	0x0801a854
 8012230:	2000b8d4 	.word	0x2000b8d4

08012234 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8012234:	b580      	push	{r7, lr}
 8012236:	b088      	sub	sp, #32
 8012238:	af02      	add	r7, sp, #8
 801223a:	60f8      	str	r0, [r7, #12]
 801223c:	60b9      	str	r1, [r7, #8]
 801223e:	607a      	str	r2, [r7, #4]
 8012240:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	2b00      	cmp	r3, #0
 8012246:	d109      	bne.n	801225c <udp_sendto_if+0x28>
 8012248:	4b2e      	ldr	r3, [pc, #184]	; (8012304 <udp_sendto_if+0xd0>)
 801224a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801224e:	492e      	ldr	r1, [pc, #184]	; (8012308 <udp_sendto_if+0xd4>)
 8012250:	482e      	ldr	r0, [pc, #184]	; (801230c <udp_sendto_if+0xd8>)
 8012252:	f004 fe7b 	bl	8016f4c <iprintf>
 8012256:	f06f 030f 	mvn.w	r3, #15
 801225a:	e04f      	b.n	80122fc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801225c:	68bb      	ldr	r3, [r7, #8]
 801225e:	2b00      	cmp	r3, #0
 8012260:	d109      	bne.n	8012276 <udp_sendto_if+0x42>
 8012262:	4b28      	ldr	r3, [pc, #160]	; (8012304 <udp_sendto_if+0xd0>)
 8012264:	f240 2281 	movw	r2, #641	; 0x281
 8012268:	4929      	ldr	r1, [pc, #164]	; (8012310 <udp_sendto_if+0xdc>)
 801226a:	4828      	ldr	r0, [pc, #160]	; (801230c <udp_sendto_if+0xd8>)
 801226c:	f004 fe6e 	bl	8016f4c <iprintf>
 8012270:	f06f 030f 	mvn.w	r3, #15
 8012274:	e042      	b.n	80122fc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d109      	bne.n	8012290 <udp_sendto_if+0x5c>
 801227c:	4b21      	ldr	r3, [pc, #132]	; (8012304 <udp_sendto_if+0xd0>)
 801227e:	f240 2282 	movw	r2, #642	; 0x282
 8012282:	4924      	ldr	r1, [pc, #144]	; (8012314 <udp_sendto_if+0xe0>)
 8012284:	4821      	ldr	r0, [pc, #132]	; (801230c <udp_sendto_if+0xd8>)
 8012286:	f004 fe61 	bl	8016f4c <iprintf>
 801228a:	f06f 030f 	mvn.w	r3, #15
 801228e:	e035      	b.n	80122fc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8012290:	6a3b      	ldr	r3, [r7, #32]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d109      	bne.n	80122aa <udp_sendto_if+0x76>
 8012296:	4b1b      	ldr	r3, [pc, #108]	; (8012304 <udp_sendto_if+0xd0>)
 8012298:	f240 2283 	movw	r2, #643	; 0x283
 801229c:	491e      	ldr	r1, [pc, #120]	; (8012318 <udp_sendto_if+0xe4>)
 801229e:	481b      	ldr	r0, [pc, #108]	; (801230c <udp_sendto_if+0xd8>)
 80122a0:	f004 fe54 	bl	8016f4c <iprintf>
 80122a4:	f06f 030f 	mvn.w	r3, #15
 80122a8:	e028      	b.n	80122fc <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d009      	beq.n	80122c4 <udp_sendto_if+0x90>
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d005      	beq.n	80122c4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80122c0:	2be0      	cmp	r3, #224	; 0xe0
 80122c2:	d103      	bne.n	80122cc <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80122c4:	6a3b      	ldr	r3, [r7, #32]
 80122c6:	3304      	adds	r3, #4
 80122c8:	617b      	str	r3, [r7, #20]
 80122ca:	e00b      	b.n	80122e4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	681a      	ldr	r2, [r3, #0]
 80122d0:	6a3b      	ldr	r3, [r7, #32]
 80122d2:	3304      	adds	r3, #4
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	429a      	cmp	r2, r3
 80122d8:	d002      	beq.n	80122e0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80122da:	f06f 0303 	mvn.w	r3, #3
 80122de:	e00d      	b.n	80122fc <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80122e4:	887a      	ldrh	r2, [r7, #2]
 80122e6:	697b      	ldr	r3, [r7, #20]
 80122e8:	9301      	str	r3, [sp, #4]
 80122ea:	6a3b      	ldr	r3, [r7, #32]
 80122ec:	9300      	str	r3, [sp, #0]
 80122ee:	4613      	mov	r3, r2
 80122f0:	687a      	ldr	r2, [r7, #4]
 80122f2:	68b9      	ldr	r1, [r7, #8]
 80122f4:	68f8      	ldr	r0, [r7, #12]
 80122f6:	f000 f811 	bl	801231c <udp_sendto_if_src>
 80122fa:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80122fc:	4618      	mov	r0, r3
 80122fe:	3718      	adds	r7, #24
 8012300:	46bd      	mov	sp, r7
 8012302:	bd80      	pop	{r7, pc}
 8012304:	0801a77c 	.word	0x0801a77c
 8012308:	0801a8f0 	.word	0x0801a8f0
 801230c:	0801a7d0 	.word	0x0801a7d0
 8012310:	0801a90c 	.word	0x0801a90c
 8012314:	0801a928 	.word	0x0801a928
 8012318:	0801a948 	.word	0x0801a948

0801231c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801231c:	b580      	push	{r7, lr}
 801231e:	b08c      	sub	sp, #48	; 0x30
 8012320:	af04      	add	r7, sp, #16
 8012322:	60f8      	str	r0, [r7, #12]
 8012324:	60b9      	str	r1, [r7, #8]
 8012326:	607a      	str	r2, [r7, #4]
 8012328:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	2b00      	cmp	r3, #0
 801232e:	d109      	bne.n	8012344 <udp_sendto_if_src+0x28>
 8012330:	4b65      	ldr	r3, [pc, #404]	; (80124c8 <udp_sendto_if_src+0x1ac>)
 8012332:	f240 22d1 	movw	r2, #721	; 0x2d1
 8012336:	4965      	ldr	r1, [pc, #404]	; (80124cc <udp_sendto_if_src+0x1b0>)
 8012338:	4865      	ldr	r0, [pc, #404]	; (80124d0 <udp_sendto_if_src+0x1b4>)
 801233a:	f004 fe07 	bl	8016f4c <iprintf>
 801233e:	f06f 030f 	mvn.w	r3, #15
 8012342:	e0bc      	b.n	80124be <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8012344:	68bb      	ldr	r3, [r7, #8]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d109      	bne.n	801235e <udp_sendto_if_src+0x42>
 801234a:	4b5f      	ldr	r3, [pc, #380]	; (80124c8 <udp_sendto_if_src+0x1ac>)
 801234c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8012350:	4960      	ldr	r1, [pc, #384]	; (80124d4 <udp_sendto_if_src+0x1b8>)
 8012352:	485f      	ldr	r0, [pc, #380]	; (80124d0 <udp_sendto_if_src+0x1b4>)
 8012354:	f004 fdfa 	bl	8016f4c <iprintf>
 8012358:	f06f 030f 	mvn.w	r3, #15
 801235c:	e0af      	b.n	80124be <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d109      	bne.n	8012378 <udp_sendto_if_src+0x5c>
 8012364:	4b58      	ldr	r3, [pc, #352]	; (80124c8 <udp_sendto_if_src+0x1ac>)
 8012366:	f240 22d3 	movw	r2, #723	; 0x2d3
 801236a:	495b      	ldr	r1, [pc, #364]	; (80124d8 <udp_sendto_if_src+0x1bc>)
 801236c:	4858      	ldr	r0, [pc, #352]	; (80124d0 <udp_sendto_if_src+0x1b4>)
 801236e:	f004 fded 	bl	8016f4c <iprintf>
 8012372:	f06f 030f 	mvn.w	r3, #15
 8012376:	e0a2      	b.n	80124be <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8012378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801237a:	2b00      	cmp	r3, #0
 801237c:	d109      	bne.n	8012392 <udp_sendto_if_src+0x76>
 801237e:	4b52      	ldr	r3, [pc, #328]	; (80124c8 <udp_sendto_if_src+0x1ac>)
 8012380:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8012384:	4955      	ldr	r1, [pc, #340]	; (80124dc <udp_sendto_if_src+0x1c0>)
 8012386:	4852      	ldr	r0, [pc, #328]	; (80124d0 <udp_sendto_if_src+0x1b4>)
 8012388:	f004 fde0 	bl	8016f4c <iprintf>
 801238c:	f06f 030f 	mvn.w	r3, #15
 8012390:	e095      	b.n	80124be <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8012392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012394:	2b00      	cmp	r3, #0
 8012396:	d109      	bne.n	80123ac <udp_sendto_if_src+0x90>
 8012398:	4b4b      	ldr	r3, [pc, #300]	; (80124c8 <udp_sendto_if_src+0x1ac>)
 801239a:	f240 22d5 	movw	r2, #725	; 0x2d5
 801239e:	4950      	ldr	r1, [pc, #320]	; (80124e0 <udp_sendto_if_src+0x1c4>)
 80123a0:	484b      	ldr	r0, [pc, #300]	; (80124d0 <udp_sendto_if_src+0x1b4>)
 80123a2:	f004 fdd3 	bl	8016f4c <iprintf>
 80123a6:	f06f 030f 	mvn.w	r3, #15
 80123aa:	e088      	b.n	80124be <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	8a5b      	ldrh	r3, [r3, #18]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d10f      	bne.n	80123d4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80123b4:	68f9      	ldr	r1, [r7, #12]
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	8a5b      	ldrh	r3, [r3, #18]
 80123ba:	461a      	mov	r2, r3
 80123bc:	68f8      	ldr	r0, [r7, #12]
 80123be:	f000 f893 	bl	80124e8 <udp_bind>
 80123c2:	4603      	mov	r3, r0
 80123c4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80123c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d002      	beq.n	80123d4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80123ce:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80123d2:	e074      	b.n	80124be <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80123d4:	68bb      	ldr	r3, [r7, #8]
 80123d6:	891b      	ldrh	r3, [r3, #8]
 80123d8:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80123dc:	4293      	cmp	r3, r2
 80123de:	d902      	bls.n	80123e6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80123e0:	f04f 33ff 	mov.w	r3, #4294967295
 80123e4:	e06b      	b.n	80124be <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80123e6:	2108      	movs	r1, #8
 80123e8:	68b8      	ldr	r0, [r7, #8]
 80123ea:	f7f9 f827 	bl	800b43c <pbuf_add_header>
 80123ee:	4603      	mov	r3, r0
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d015      	beq.n	8012420 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80123f4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80123f8:	2108      	movs	r1, #8
 80123fa:	2022      	movs	r0, #34	; 0x22
 80123fc:	f7f8 fdd4 	bl	800afa8 <pbuf_alloc>
 8012400:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8012402:	69fb      	ldr	r3, [r7, #28]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d102      	bne.n	801240e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8012408:	f04f 33ff 	mov.w	r3, #4294967295
 801240c:	e057      	b.n	80124be <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801240e:	68bb      	ldr	r3, [r7, #8]
 8012410:	891b      	ldrh	r3, [r3, #8]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d006      	beq.n	8012424 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8012416:	68b9      	ldr	r1, [r7, #8]
 8012418:	69f8      	ldr	r0, [r7, #28]
 801241a:	f7f9 f9c9 	bl	800b7b0 <pbuf_chain>
 801241e:	e001      	b.n	8012424 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8012420:	68bb      	ldr	r3, [r7, #8]
 8012422:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8012424:	69fb      	ldr	r3, [r7, #28]
 8012426:	895b      	ldrh	r3, [r3, #10]
 8012428:	2b07      	cmp	r3, #7
 801242a:	d806      	bhi.n	801243a <udp_sendto_if_src+0x11e>
 801242c:	4b26      	ldr	r3, [pc, #152]	; (80124c8 <udp_sendto_if_src+0x1ac>)
 801242e:	f240 320e 	movw	r2, #782	; 0x30e
 8012432:	492c      	ldr	r1, [pc, #176]	; (80124e4 <udp_sendto_if_src+0x1c8>)
 8012434:	4826      	ldr	r0, [pc, #152]	; (80124d0 <udp_sendto_if_src+0x1b4>)
 8012436:	f004 fd89 	bl	8016f4c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801243a:	69fb      	ldr	r3, [r7, #28]
 801243c:	685b      	ldr	r3, [r3, #4]
 801243e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	8a5b      	ldrh	r3, [r3, #18]
 8012444:	4618      	mov	r0, r3
 8012446:	f7f7 fd59 	bl	8009efc <lwip_htons>
 801244a:	4603      	mov	r3, r0
 801244c:	461a      	mov	r2, r3
 801244e:	697b      	ldr	r3, [r7, #20]
 8012450:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8012452:	887b      	ldrh	r3, [r7, #2]
 8012454:	4618      	mov	r0, r3
 8012456:	f7f7 fd51 	bl	8009efc <lwip_htons>
 801245a:	4603      	mov	r3, r0
 801245c:	461a      	mov	r2, r3
 801245e:	697b      	ldr	r3, [r7, #20]
 8012460:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8012462:	697b      	ldr	r3, [r7, #20]
 8012464:	2200      	movs	r2, #0
 8012466:	719a      	strb	r2, [r3, #6]
 8012468:	2200      	movs	r2, #0
 801246a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801246c:	69fb      	ldr	r3, [r7, #28]
 801246e:	891b      	ldrh	r3, [r3, #8]
 8012470:	4618      	mov	r0, r3
 8012472:	f7f7 fd43 	bl	8009efc <lwip_htons>
 8012476:	4603      	mov	r3, r0
 8012478:	461a      	mov	r2, r3
 801247a:	697b      	ldr	r3, [r7, #20]
 801247c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801247e:	2311      	movs	r3, #17
 8012480:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	7adb      	ldrb	r3, [r3, #11]
 8012486:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	7a9b      	ldrb	r3, [r3, #10]
 801248c:	7cb9      	ldrb	r1, [r7, #18]
 801248e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012490:	9202      	str	r2, [sp, #8]
 8012492:	7cfa      	ldrb	r2, [r7, #19]
 8012494:	9201      	str	r2, [sp, #4]
 8012496:	9300      	str	r3, [sp, #0]
 8012498:	460b      	mov	r3, r1
 801249a:	687a      	ldr	r2, [r7, #4]
 801249c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801249e:	69f8      	ldr	r0, [r7, #28]
 80124a0:	f003 fb04 	bl	8015aac <ip4_output_if_src>
 80124a4:	4603      	mov	r3, r0
 80124a6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80124a8:	69fa      	ldr	r2, [r7, #28]
 80124aa:	68bb      	ldr	r3, [r7, #8]
 80124ac:	429a      	cmp	r2, r3
 80124ae:	d004      	beq.n	80124ba <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80124b0:	69f8      	ldr	r0, [r7, #28]
 80124b2:	f7f9 f859 	bl	800b568 <pbuf_free>
    q = NULL;
 80124b6:	2300      	movs	r3, #0
 80124b8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80124ba:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80124be:	4618      	mov	r0, r3
 80124c0:	3720      	adds	r7, #32
 80124c2:	46bd      	mov	sp, r7
 80124c4:	bd80      	pop	{r7, pc}
 80124c6:	bf00      	nop
 80124c8:	0801a77c 	.word	0x0801a77c
 80124cc:	0801a968 	.word	0x0801a968
 80124d0:	0801a7d0 	.word	0x0801a7d0
 80124d4:	0801a988 	.word	0x0801a988
 80124d8:	0801a9a8 	.word	0x0801a9a8
 80124dc:	0801a9cc 	.word	0x0801a9cc
 80124e0:	0801a9f0 	.word	0x0801a9f0
 80124e4:	0801aa14 	.word	0x0801aa14

080124e8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b086      	sub	sp, #24
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	60f8      	str	r0, [r7, #12]
 80124f0:	60b9      	str	r1, [r7, #8]
 80124f2:	4613      	mov	r3, r2
 80124f4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80124f6:	68bb      	ldr	r3, [r7, #8]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d101      	bne.n	8012500 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80124fc:	4b39      	ldr	r3, [pc, #228]	; (80125e4 <udp_bind+0xfc>)
 80124fe:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	2b00      	cmp	r3, #0
 8012504:	d109      	bne.n	801251a <udp_bind+0x32>
 8012506:	4b38      	ldr	r3, [pc, #224]	; (80125e8 <udp_bind+0x100>)
 8012508:	f240 32b7 	movw	r2, #951	; 0x3b7
 801250c:	4937      	ldr	r1, [pc, #220]	; (80125ec <udp_bind+0x104>)
 801250e:	4838      	ldr	r0, [pc, #224]	; (80125f0 <udp_bind+0x108>)
 8012510:	f004 fd1c 	bl	8016f4c <iprintf>
 8012514:	f06f 030f 	mvn.w	r3, #15
 8012518:	e060      	b.n	80125dc <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801251a:	2300      	movs	r3, #0
 801251c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801251e:	4b35      	ldr	r3, [pc, #212]	; (80125f4 <udp_bind+0x10c>)
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	617b      	str	r3, [r7, #20]
 8012524:	e009      	b.n	801253a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8012526:	68fa      	ldr	r2, [r7, #12]
 8012528:	697b      	ldr	r3, [r7, #20]
 801252a:	429a      	cmp	r2, r3
 801252c:	d102      	bne.n	8012534 <udp_bind+0x4c>
      rebind = 1;
 801252e:	2301      	movs	r3, #1
 8012530:	74fb      	strb	r3, [r7, #19]
      break;
 8012532:	e005      	b.n	8012540 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012534:	697b      	ldr	r3, [r7, #20]
 8012536:	68db      	ldr	r3, [r3, #12]
 8012538:	617b      	str	r3, [r7, #20]
 801253a:	697b      	ldr	r3, [r7, #20]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d1f2      	bne.n	8012526 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8012540:	88fb      	ldrh	r3, [r7, #6]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d109      	bne.n	801255a <udp_bind+0x72>
    port = udp_new_port();
 8012546:	f7ff fcc5 	bl	8011ed4 <udp_new_port>
 801254a:	4603      	mov	r3, r0
 801254c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801254e:	88fb      	ldrh	r3, [r7, #6]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d12c      	bne.n	80125ae <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8012554:	f06f 0307 	mvn.w	r3, #7
 8012558:	e040      	b.n	80125dc <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801255a:	4b26      	ldr	r3, [pc, #152]	; (80125f4 <udp_bind+0x10c>)
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	617b      	str	r3, [r7, #20]
 8012560:	e022      	b.n	80125a8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8012562:	68fa      	ldr	r2, [r7, #12]
 8012564:	697b      	ldr	r3, [r7, #20]
 8012566:	429a      	cmp	r2, r3
 8012568:	d01b      	beq.n	80125a2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801256a:	697b      	ldr	r3, [r7, #20]
 801256c:	8a5b      	ldrh	r3, [r3, #18]
 801256e:	88fa      	ldrh	r2, [r7, #6]
 8012570:	429a      	cmp	r2, r3
 8012572:	d116      	bne.n	80125a2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012574:	697b      	ldr	r3, [r7, #20]
 8012576:	681a      	ldr	r2, [r3, #0]
 8012578:	68bb      	ldr	r3, [r7, #8]
 801257a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801257c:	429a      	cmp	r2, r3
 801257e:	d00d      	beq.n	801259c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012580:	68bb      	ldr	r3, [r7, #8]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d00a      	beq.n	801259c <udp_bind+0xb4>
 8012586:	68bb      	ldr	r3, [r7, #8]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	2b00      	cmp	r3, #0
 801258c:	d006      	beq.n	801259c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801258e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012590:	2b00      	cmp	r3, #0
 8012592:	d003      	beq.n	801259c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8012594:	697b      	ldr	r3, [r7, #20]
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d102      	bne.n	80125a2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801259c:	f06f 0307 	mvn.w	r3, #7
 80125a0:	e01c      	b.n	80125dc <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80125a2:	697b      	ldr	r3, [r7, #20]
 80125a4:	68db      	ldr	r3, [r3, #12]
 80125a6:	617b      	str	r3, [r7, #20]
 80125a8:	697b      	ldr	r3, [r7, #20]
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d1d9      	bne.n	8012562 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80125ae:	68bb      	ldr	r3, [r7, #8]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d002      	beq.n	80125ba <udp_bind+0xd2>
 80125b4:	68bb      	ldr	r3, [r7, #8]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	e000      	b.n	80125bc <udp_bind+0xd4>
 80125ba:	2300      	movs	r3, #0
 80125bc:	68fa      	ldr	r2, [r7, #12]
 80125be:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	88fa      	ldrh	r2, [r7, #6]
 80125c4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80125c6:	7cfb      	ldrb	r3, [r7, #19]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d106      	bne.n	80125da <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80125cc:	4b09      	ldr	r3, [pc, #36]	; (80125f4 <udp_bind+0x10c>)
 80125ce:	681a      	ldr	r2, [r3, #0]
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80125d4:	4a07      	ldr	r2, [pc, #28]	; (80125f4 <udp_bind+0x10c>)
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80125da:	2300      	movs	r3, #0
}
 80125dc:	4618      	mov	r0, r3
 80125de:	3718      	adds	r7, #24
 80125e0:	46bd      	mov	sp, r7
 80125e2:	bd80      	pop	{r7, pc}
 80125e4:	0801faa8 	.word	0x0801faa8
 80125e8:	0801a77c 	.word	0x0801a77c
 80125ec:	0801aa44 	.word	0x0801aa44
 80125f0:	0801a7d0 	.word	0x0801a7d0
 80125f4:	20010e90 	.word	0x20010e90

080125f8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80125f8:	b580      	push	{r7, lr}
 80125fa:	b086      	sub	sp, #24
 80125fc:	af00      	add	r7, sp, #0
 80125fe:	60f8      	str	r0, [r7, #12]
 8012600:	60b9      	str	r1, [r7, #8]
 8012602:	4613      	mov	r3, r2
 8012604:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d109      	bne.n	8012620 <udp_connect+0x28>
 801260c:	4b2c      	ldr	r3, [pc, #176]	; (80126c0 <udp_connect+0xc8>)
 801260e:	f240 4235 	movw	r2, #1077	; 0x435
 8012612:	492c      	ldr	r1, [pc, #176]	; (80126c4 <udp_connect+0xcc>)
 8012614:	482c      	ldr	r0, [pc, #176]	; (80126c8 <udp_connect+0xd0>)
 8012616:	f004 fc99 	bl	8016f4c <iprintf>
 801261a:	f06f 030f 	mvn.w	r3, #15
 801261e:	e04b      	b.n	80126b8 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8012620:	68bb      	ldr	r3, [r7, #8]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d109      	bne.n	801263a <udp_connect+0x42>
 8012626:	4b26      	ldr	r3, [pc, #152]	; (80126c0 <udp_connect+0xc8>)
 8012628:	f240 4236 	movw	r2, #1078	; 0x436
 801262c:	4927      	ldr	r1, [pc, #156]	; (80126cc <udp_connect+0xd4>)
 801262e:	4826      	ldr	r0, [pc, #152]	; (80126c8 <udp_connect+0xd0>)
 8012630:	f004 fc8c 	bl	8016f4c <iprintf>
 8012634:	f06f 030f 	mvn.w	r3, #15
 8012638:	e03e      	b.n	80126b8 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	8a5b      	ldrh	r3, [r3, #18]
 801263e:	2b00      	cmp	r3, #0
 8012640:	d10f      	bne.n	8012662 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012642:	68f9      	ldr	r1, [r7, #12]
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	8a5b      	ldrh	r3, [r3, #18]
 8012648:	461a      	mov	r2, r3
 801264a:	68f8      	ldr	r0, [r7, #12]
 801264c:	f7ff ff4c 	bl	80124e8 <udp_bind>
 8012650:	4603      	mov	r3, r0
 8012652:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8012654:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012658:	2b00      	cmp	r3, #0
 801265a:	d002      	beq.n	8012662 <udp_connect+0x6a>
      return err;
 801265c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012660:	e02a      	b.n	80126b8 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8012662:	68bb      	ldr	r3, [r7, #8]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d002      	beq.n	801266e <udp_connect+0x76>
 8012668:	68bb      	ldr	r3, [r7, #8]
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	e000      	b.n	8012670 <udp_connect+0x78>
 801266e:	2300      	movs	r3, #0
 8012670:	68fa      	ldr	r2, [r7, #12]
 8012672:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	88fa      	ldrh	r2, [r7, #6]
 8012678:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	7c1b      	ldrb	r3, [r3, #16]
 801267e:	f043 0304 	orr.w	r3, r3, #4
 8012682:	b2da      	uxtb	r2, r3
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012688:	4b11      	ldr	r3, [pc, #68]	; (80126d0 <udp_connect+0xd8>)
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	617b      	str	r3, [r7, #20]
 801268e:	e008      	b.n	80126a2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8012690:	68fa      	ldr	r2, [r7, #12]
 8012692:	697b      	ldr	r3, [r7, #20]
 8012694:	429a      	cmp	r2, r3
 8012696:	d101      	bne.n	801269c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8012698:	2300      	movs	r3, #0
 801269a:	e00d      	b.n	80126b8 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801269c:	697b      	ldr	r3, [r7, #20]
 801269e:	68db      	ldr	r3, [r3, #12]
 80126a0:	617b      	str	r3, [r7, #20]
 80126a2:	697b      	ldr	r3, [r7, #20]
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d1f3      	bne.n	8012690 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80126a8:	4b09      	ldr	r3, [pc, #36]	; (80126d0 <udp_connect+0xd8>)
 80126aa:	681a      	ldr	r2, [r3, #0]
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80126b0:	4a07      	ldr	r2, [pc, #28]	; (80126d0 <udp_connect+0xd8>)
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80126b6:	2300      	movs	r3, #0
}
 80126b8:	4618      	mov	r0, r3
 80126ba:	3718      	adds	r7, #24
 80126bc:	46bd      	mov	sp, r7
 80126be:	bd80      	pop	{r7, pc}
 80126c0:	0801a77c 	.word	0x0801a77c
 80126c4:	0801aa5c 	.word	0x0801aa5c
 80126c8:	0801a7d0 	.word	0x0801a7d0
 80126cc:	0801aa78 	.word	0x0801aa78
 80126d0:	20010e90 	.word	0x20010e90

080126d4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80126d4:	b580      	push	{r7, lr}
 80126d6:	b084      	sub	sp, #16
 80126d8:	af00      	add	r7, sp, #0
 80126da:	60f8      	str	r0, [r7, #12]
 80126dc:	60b9      	str	r1, [r7, #8]
 80126de:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d107      	bne.n	80126f6 <udp_recv+0x22>
 80126e6:	4b08      	ldr	r3, [pc, #32]	; (8012708 <udp_recv+0x34>)
 80126e8:	f240 428a 	movw	r2, #1162	; 0x48a
 80126ec:	4907      	ldr	r1, [pc, #28]	; (801270c <udp_recv+0x38>)
 80126ee:	4808      	ldr	r0, [pc, #32]	; (8012710 <udp_recv+0x3c>)
 80126f0:	f004 fc2c 	bl	8016f4c <iprintf>
 80126f4:	e005      	b.n	8012702 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	68ba      	ldr	r2, [r7, #8]
 80126fa:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	687a      	ldr	r2, [r7, #4]
 8012700:	61da      	str	r2, [r3, #28]
}
 8012702:	3710      	adds	r7, #16
 8012704:	46bd      	mov	sp, r7
 8012706:	bd80      	pop	{r7, pc}
 8012708:	0801a77c 	.word	0x0801a77c
 801270c:	0801aab0 	.word	0x0801aab0
 8012710:	0801a7d0 	.word	0x0801a7d0

08012714 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8012714:	b580      	push	{r7, lr}
 8012716:	b084      	sub	sp, #16
 8012718:	af00      	add	r7, sp, #0
 801271a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d107      	bne.n	8012732 <udp_remove+0x1e>
 8012722:	4b19      	ldr	r3, [pc, #100]	; (8012788 <udp_remove+0x74>)
 8012724:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8012728:	4918      	ldr	r1, [pc, #96]	; (801278c <udp_remove+0x78>)
 801272a:	4819      	ldr	r0, [pc, #100]	; (8012790 <udp_remove+0x7c>)
 801272c:	f004 fc0e 	bl	8016f4c <iprintf>
 8012730:	e026      	b.n	8012780 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8012732:	4b18      	ldr	r3, [pc, #96]	; (8012794 <udp_remove+0x80>)
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	687a      	ldr	r2, [r7, #4]
 8012738:	429a      	cmp	r2, r3
 801273a:	d105      	bne.n	8012748 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801273c:	4b15      	ldr	r3, [pc, #84]	; (8012794 <udp_remove+0x80>)
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	68db      	ldr	r3, [r3, #12]
 8012742:	4a14      	ldr	r2, [pc, #80]	; (8012794 <udp_remove+0x80>)
 8012744:	6013      	str	r3, [r2, #0]
 8012746:	e017      	b.n	8012778 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012748:	4b12      	ldr	r3, [pc, #72]	; (8012794 <udp_remove+0x80>)
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	60fb      	str	r3, [r7, #12]
 801274e:	e010      	b.n	8012772 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	68db      	ldr	r3, [r3, #12]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d009      	beq.n	801276c <udp_remove+0x58>
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	68db      	ldr	r3, [r3, #12]
 801275c:	687a      	ldr	r2, [r7, #4]
 801275e:	429a      	cmp	r2, r3
 8012760:	d104      	bne.n	801276c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	68da      	ldr	r2, [r3, #12]
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	60da      	str	r2, [r3, #12]
        break;
 801276a:	e005      	b.n	8012778 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	68db      	ldr	r3, [r3, #12]
 8012770:	60fb      	str	r3, [r7, #12]
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d1eb      	bne.n	8012750 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8012778:	6879      	ldr	r1, [r7, #4]
 801277a:	2000      	movs	r0, #0
 801277c:	f7f8 f8c6 	bl	800a90c <memp_free>
}
 8012780:	3710      	adds	r7, #16
 8012782:	46bd      	mov	sp, r7
 8012784:	bd80      	pop	{r7, pc}
 8012786:	bf00      	nop
 8012788:	0801a77c 	.word	0x0801a77c
 801278c:	0801aac8 	.word	0x0801aac8
 8012790:	0801a7d0 	.word	0x0801a7d0
 8012794:	20010e90 	.word	0x20010e90

08012798 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8012798:	b580      	push	{r7, lr}
 801279a:	b082      	sub	sp, #8
 801279c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801279e:	2000      	movs	r0, #0
 80127a0:	f7f8 f862 	bl	800a868 <memp_malloc>
 80127a4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d007      	beq.n	80127bc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80127ac:	2220      	movs	r2, #32
 80127ae:	2100      	movs	r1, #0
 80127b0:	6878      	ldr	r0, [r7, #4]
 80127b2:	f004 fbc3 	bl	8016f3c <memset>
    pcb->ttl = UDP_TTL;
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	22ff      	movs	r2, #255	; 0xff
 80127ba:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80127bc:	687b      	ldr	r3, [r7, #4]
}
 80127be:	4618      	mov	r0, r3
 80127c0:	3708      	adds	r7, #8
 80127c2:	46bd      	mov	sp, r7
 80127c4:	bd80      	pop	{r7, pc}

080127c6 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80127c6:	b580      	push	{r7, lr}
 80127c8:	b084      	sub	sp, #16
 80127ca:	af00      	add	r7, sp, #0
 80127cc:	4603      	mov	r3, r0
 80127ce:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80127d0:	f7ff ffe2 	bl	8012798 <udp_new>
 80127d4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80127d6:	68fb      	ldr	r3, [r7, #12]
}
 80127d8:	4618      	mov	r0, r3
 80127da:	3710      	adds	r7, #16
 80127dc:	46bd      	mov	sp, r7
 80127de:	bd80      	pop	{r7, pc}

080127e0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80127e0:	b480      	push	{r7}
 80127e2:	b085      	sub	sp, #20
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	6078      	str	r0, [r7, #4]
 80127e8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d01e      	beq.n	801282e <udp_netif_ip_addr_changed+0x4e>
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d01a      	beq.n	801282e <udp_netif_ip_addr_changed+0x4e>
 80127f8:	683b      	ldr	r3, [r7, #0]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d017      	beq.n	801282e <udp_netif_ip_addr_changed+0x4e>
 80127fe:	683b      	ldr	r3, [r7, #0]
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d013      	beq.n	801282e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012806:	4b0d      	ldr	r3, [pc, #52]	; (801283c <udp_netif_ip_addr_changed+0x5c>)
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	60fb      	str	r3, [r7, #12]
 801280c:	e00c      	b.n	8012828 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	681a      	ldr	r2, [r3, #0]
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	429a      	cmp	r2, r3
 8012818:	d103      	bne.n	8012822 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801281a:	683b      	ldr	r3, [r7, #0]
 801281c:	681a      	ldr	r2, [r3, #0]
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	68db      	ldr	r3, [r3, #12]
 8012826:	60fb      	str	r3, [r7, #12]
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	2b00      	cmp	r3, #0
 801282c:	d1ef      	bne.n	801280e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801282e:	bf00      	nop
 8012830:	3714      	adds	r7, #20
 8012832:	46bd      	mov	sp, r7
 8012834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012838:	4770      	bx	lr
 801283a:	bf00      	nop
 801283c:	20010e90 	.word	0x20010e90

08012840 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8012844:	4b20      	ldr	r3, [pc, #128]	; (80128c8 <dhcp_inc_pcb_refcount+0x88>)
 8012846:	781b      	ldrb	r3, [r3, #0]
 8012848:	2b00      	cmp	r3, #0
 801284a:	d133      	bne.n	80128b4 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801284c:	4b1f      	ldr	r3, [pc, #124]	; (80128cc <dhcp_inc_pcb_refcount+0x8c>)
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d005      	beq.n	8012860 <dhcp_inc_pcb_refcount+0x20>
 8012854:	4b1e      	ldr	r3, [pc, #120]	; (80128d0 <dhcp_inc_pcb_refcount+0x90>)
 8012856:	22e5      	movs	r2, #229	; 0xe5
 8012858:	491e      	ldr	r1, [pc, #120]	; (80128d4 <dhcp_inc_pcb_refcount+0x94>)
 801285a:	481f      	ldr	r0, [pc, #124]	; (80128d8 <dhcp_inc_pcb_refcount+0x98>)
 801285c:	f004 fb76 	bl	8016f4c <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8012860:	f7ff ff9a 	bl	8012798 <udp_new>
 8012864:	4602      	mov	r2, r0
 8012866:	4b19      	ldr	r3, [pc, #100]	; (80128cc <dhcp_inc_pcb_refcount+0x8c>)
 8012868:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 801286a:	4b18      	ldr	r3, [pc, #96]	; (80128cc <dhcp_inc_pcb_refcount+0x8c>)
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d102      	bne.n	8012878 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8012872:	f04f 33ff 	mov.w	r3, #4294967295
 8012876:	e024      	b.n	80128c2 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8012878:	4b14      	ldr	r3, [pc, #80]	; (80128cc <dhcp_inc_pcb_refcount+0x8c>)
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	7a5a      	ldrb	r2, [r3, #9]
 801287e:	4b13      	ldr	r3, [pc, #76]	; (80128cc <dhcp_inc_pcb_refcount+0x8c>)
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	f042 0220 	orr.w	r2, r2, #32
 8012886:	b2d2      	uxtb	r2, r2
 8012888:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801288a:	4b10      	ldr	r3, [pc, #64]	; (80128cc <dhcp_inc_pcb_refcount+0x8c>)
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	2244      	movs	r2, #68	; 0x44
 8012890:	4912      	ldr	r1, [pc, #72]	; (80128dc <dhcp_inc_pcb_refcount+0x9c>)
 8012892:	4618      	mov	r0, r3
 8012894:	f7ff fe28 	bl	80124e8 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8012898:	4b0c      	ldr	r3, [pc, #48]	; (80128cc <dhcp_inc_pcb_refcount+0x8c>)
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	2243      	movs	r2, #67	; 0x43
 801289e:	490f      	ldr	r1, [pc, #60]	; (80128dc <dhcp_inc_pcb_refcount+0x9c>)
 80128a0:	4618      	mov	r0, r3
 80128a2:	f7ff fea9 	bl	80125f8 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80128a6:	4b09      	ldr	r3, [pc, #36]	; (80128cc <dhcp_inc_pcb_refcount+0x8c>)
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	2200      	movs	r2, #0
 80128ac:	490c      	ldr	r1, [pc, #48]	; (80128e0 <dhcp_inc_pcb_refcount+0xa0>)
 80128ae:	4618      	mov	r0, r3
 80128b0:	f7ff ff10 	bl	80126d4 <udp_recv>
  }

  dhcp_pcb_refcount++;
 80128b4:	4b04      	ldr	r3, [pc, #16]	; (80128c8 <dhcp_inc_pcb_refcount+0x88>)
 80128b6:	781b      	ldrb	r3, [r3, #0]
 80128b8:	3301      	adds	r3, #1
 80128ba:	b2da      	uxtb	r2, r3
 80128bc:	4b02      	ldr	r3, [pc, #8]	; (80128c8 <dhcp_inc_pcb_refcount+0x88>)
 80128be:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80128c0:	2300      	movs	r3, #0
}
 80128c2:	4618      	mov	r0, r3
 80128c4:	bd80      	pop	{r7, pc}
 80128c6:	bf00      	nop
 80128c8:	20008200 	.word	0x20008200
 80128cc:	200081fc 	.word	0x200081fc
 80128d0:	0801aae0 	.word	0x0801aae0
 80128d4:	0801ab18 	.word	0x0801ab18
 80128d8:	0801ab40 	.word	0x0801ab40
 80128dc:	0801faa8 	.word	0x0801faa8
 80128e0:	080140fd 	.word	0x080140fd

080128e4 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80128e8:	4b0e      	ldr	r3, [pc, #56]	; (8012924 <dhcp_dec_pcb_refcount+0x40>)
 80128ea:	781b      	ldrb	r3, [r3, #0]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d105      	bne.n	80128fc <dhcp_dec_pcb_refcount+0x18>
 80128f0:	4b0d      	ldr	r3, [pc, #52]	; (8012928 <dhcp_dec_pcb_refcount+0x44>)
 80128f2:	22ff      	movs	r2, #255	; 0xff
 80128f4:	490d      	ldr	r1, [pc, #52]	; (801292c <dhcp_dec_pcb_refcount+0x48>)
 80128f6:	480e      	ldr	r0, [pc, #56]	; (8012930 <dhcp_dec_pcb_refcount+0x4c>)
 80128f8:	f004 fb28 	bl	8016f4c <iprintf>
  dhcp_pcb_refcount--;
 80128fc:	4b09      	ldr	r3, [pc, #36]	; (8012924 <dhcp_dec_pcb_refcount+0x40>)
 80128fe:	781b      	ldrb	r3, [r3, #0]
 8012900:	3b01      	subs	r3, #1
 8012902:	b2da      	uxtb	r2, r3
 8012904:	4b07      	ldr	r3, [pc, #28]	; (8012924 <dhcp_dec_pcb_refcount+0x40>)
 8012906:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8012908:	4b06      	ldr	r3, [pc, #24]	; (8012924 <dhcp_dec_pcb_refcount+0x40>)
 801290a:	781b      	ldrb	r3, [r3, #0]
 801290c:	2b00      	cmp	r3, #0
 801290e:	d107      	bne.n	8012920 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8012910:	4b08      	ldr	r3, [pc, #32]	; (8012934 <dhcp_dec_pcb_refcount+0x50>)
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	4618      	mov	r0, r3
 8012916:	f7ff fefd 	bl	8012714 <udp_remove>
    dhcp_pcb = NULL;
 801291a:	4b06      	ldr	r3, [pc, #24]	; (8012934 <dhcp_dec_pcb_refcount+0x50>)
 801291c:	2200      	movs	r2, #0
 801291e:	601a      	str	r2, [r3, #0]
  }
}
 8012920:	bf00      	nop
 8012922:	bd80      	pop	{r7, pc}
 8012924:	20008200 	.word	0x20008200
 8012928:	0801aae0 	.word	0x0801aae0
 801292c:	0801ab68 	.word	0x0801ab68
 8012930:	0801ab40 	.word	0x0801ab40
 8012934:	200081fc 	.word	0x200081fc

08012938 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8012938:	b580      	push	{r7, lr}
 801293a:	b084      	sub	sp, #16
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	6a1b      	ldr	r3, [r3, #32]
 8012944:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8012946:	210c      	movs	r1, #12
 8012948:	68f8      	ldr	r0, [r7, #12]
 801294a:	f001 f819 	bl	8013980 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801294e:	4b06      	ldr	r3, [pc, #24]	; (8012968 <dhcp_handle_nak+0x30>)
 8012950:	4a05      	ldr	r2, [pc, #20]	; (8012968 <dhcp_handle_nak+0x30>)
 8012952:	4905      	ldr	r1, [pc, #20]	; (8012968 <dhcp_handle_nak+0x30>)
 8012954:	6878      	ldr	r0, [r7, #4]
 8012956:	f7f8 f977 	bl	800ac48 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801295a:	6878      	ldr	r0, [r7, #4]
 801295c:	f000 fc0c 	bl	8013178 <dhcp_discover>
}
 8012960:	bf00      	nop
 8012962:	3710      	adds	r7, #16
 8012964:	46bd      	mov	sp, r7
 8012966:	bd80      	pop	{r7, pc}
 8012968:	0801faa8 	.word	0x0801faa8

0801296c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 801296c:	b580      	push	{r7, lr}
 801296e:	b084      	sub	sp, #16
 8012970:	af00      	add	r7, sp, #0
 8012972:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	6a1b      	ldr	r3, [r3, #32]
 8012978:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801297a:	2108      	movs	r1, #8
 801297c:	68f8      	ldr	r0, [r7, #12]
 801297e:	f000 ffff 	bl	8013980 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	331c      	adds	r3, #28
 8012986:	2200      	movs	r2, #0
 8012988:	4619      	mov	r1, r3
 801298a:	6878      	ldr	r0, [r7, #4]
 801298c:	f002 fafe 	bl	8014f8c <etharp_query>
 8012990:	4603      	mov	r3, r0
 8012992:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	799b      	ldrb	r3, [r3, #6]
 8012998:	2bff      	cmp	r3, #255	; 0xff
 801299a:	d005      	beq.n	80129a8 <dhcp_check+0x3c>
    dhcp->tries++;
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	799b      	ldrb	r3, [r3, #6]
 80129a0:	3301      	adds	r3, #1
 80129a2:	b2da      	uxtb	r2, r3
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80129a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80129ac:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80129ae:	893b      	ldrh	r3, [r7, #8]
 80129b0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80129b4:	4a06      	ldr	r2, [pc, #24]	; (80129d0 <dhcp_check+0x64>)
 80129b6:	fb82 1203 	smull	r1, r2, r2, r3
 80129ba:	1152      	asrs	r2, r2, #5
 80129bc:	17db      	asrs	r3, r3, #31
 80129be:	1ad3      	subs	r3, r2, r3
 80129c0:	b29a      	uxth	r2, r3
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80129c6:	bf00      	nop
 80129c8:	3710      	adds	r7, #16
 80129ca:	46bd      	mov	sp, r7
 80129cc:	bd80      	pop	{r7, pc}
 80129ce:	bf00      	nop
 80129d0:	10624dd3 	.word	0x10624dd3

080129d4 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80129d4:	b580      	push	{r7, lr}
 80129d6:	b084      	sub	sp, #16
 80129d8:	af00      	add	r7, sp, #0
 80129da:	6078      	str	r0, [r7, #4]
 80129dc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	6a1b      	ldr	r3, [r3, #32]
 80129e2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80129e4:	4b0c      	ldr	r3, [pc, #48]	; (8012a18 <dhcp_handle_offer+0x44>)
 80129e6:	789b      	ldrb	r3, [r3, #2]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d011      	beq.n	8012a10 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	2200      	movs	r2, #0
 80129f0:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80129f2:	4b0a      	ldr	r3, [pc, #40]	; (8012a1c <dhcp_handle_offer+0x48>)
 80129f4:	689b      	ldr	r3, [r3, #8]
 80129f6:	4618      	mov	r0, r3
 80129f8:	f7f7 fa95 	bl	8009f26 <lwip_htonl>
 80129fc:	4602      	mov	r2, r0
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8012a02:	683b      	ldr	r3, [r7, #0]
 8012a04:	691a      	ldr	r2, [r3, #16]
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8012a0a:	6878      	ldr	r0, [r7, #4]
 8012a0c:	f000 f808 	bl	8012a20 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8012a10:	bf00      	nop
 8012a12:	3710      	adds	r7, #16
 8012a14:	46bd      	mov	sp, r7
 8012a16:	bd80      	pop	{r7, pc}
 8012a18:	20010e94 	.word	0x20010e94
 8012a1c:	20010e9c 	.word	0x20010e9c

08012a20 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8012a20:	b5b0      	push	{r4, r5, r7, lr}
 8012a22:	b08a      	sub	sp, #40	; 0x28
 8012a24:	af02      	add	r7, sp, #8
 8012a26:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d109      	bne.n	8012a42 <dhcp_select+0x22>
 8012a2e:	4b71      	ldr	r3, [pc, #452]	; (8012bf4 <dhcp_select+0x1d4>)
 8012a30:	f240 1277 	movw	r2, #375	; 0x177
 8012a34:	4970      	ldr	r1, [pc, #448]	; (8012bf8 <dhcp_select+0x1d8>)
 8012a36:	4871      	ldr	r0, [pc, #452]	; (8012bfc <dhcp_select+0x1dc>)
 8012a38:	f004 fa88 	bl	8016f4c <iprintf>
 8012a3c:	f06f 030f 	mvn.w	r3, #15
 8012a40:	e0d3      	b.n	8012bea <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	6a1b      	ldr	r3, [r3, #32]
 8012a46:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8012a48:	69bb      	ldr	r3, [r7, #24]
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d109      	bne.n	8012a62 <dhcp_select+0x42>
 8012a4e:	4b69      	ldr	r3, [pc, #420]	; (8012bf4 <dhcp_select+0x1d4>)
 8012a50:	f240 1279 	movw	r2, #377	; 0x179
 8012a54:	496a      	ldr	r1, [pc, #424]	; (8012c00 <dhcp_select+0x1e0>)
 8012a56:	4869      	ldr	r0, [pc, #420]	; (8012bfc <dhcp_select+0x1dc>)
 8012a58:	f004 fa78 	bl	8016f4c <iprintf>
 8012a5c:	f06f 0305 	mvn.w	r3, #5
 8012a60:	e0c3      	b.n	8012bea <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8012a62:	2101      	movs	r1, #1
 8012a64:	69b8      	ldr	r0, [r7, #24]
 8012a66:	f000 ff8b 	bl	8013980 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012a6a:	f107 030c 	add.w	r3, r7, #12
 8012a6e:	2203      	movs	r2, #3
 8012a70:	69b9      	ldr	r1, [r7, #24]
 8012a72:	6878      	ldr	r0, [r7, #4]
 8012a74:	f001 fc0e 	bl	8014294 <dhcp_create_msg>
 8012a78:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012a7a:	697b      	ldr	r3, [r7, #20]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	f000 8085 	beq.w	8012b8c <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012a82:	697b      	ldr	r3, [r7, #20]
 8012a84:	685b      	ldr	r3, [r3, #4]
 8012a86:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012a88:	89b8      	ldrh	r0, [r7, #12]
 8012a8a:	693b      	ldr	r3, [r7, #16]
 8012a8c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012a90:	2302      	movs	r3, #2
 8012a92:	2239      	movs	r2, #57	; 0x39
 8012a94:	f000 ff8e 	bl	80139b4 <dhcp_option>
 8012a98:	4603      	mov	r3, r0
 8012a9a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012a9c:	89b8      	ldrh	r0, [r7, #12]
 8012a9e:	693b      	ldr	r3, [r7, #16]
 8012aa0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012aa8:	461a      	mov	r2, r3
 8012aaa:	f000 ffdd 	bl	8013a68 <dhcp_option_short>
 8012aae:	4603      	mov	r3, r0
 8012ab0:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8012ab2:	89b8      	ldrh	r0, [r7, #12]
 8012ab4:	693b      	ldr	r3, [r7, #16]
 8012ab6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012aba:	2304      	movs	r3, #4
 8012abc:	2232      	movs	r2, #50	; 0x32
 8012abe:	f000 ff79 	bl	80139b4 <dhcp_option>
 8012ac2:	4603      	mov	r3, r0
 8012ac4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012ac6:	89bc      	ldrh	r4, [r7, #12]
 8012ac8:	693b      	ldr	r3, [r7, #16]
 8012aca:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012ace:	69bb      	ldr	r3, [r7, #24]
 8012ad0:	69db      	ldr	r3, [r3, #28]
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	f7f7 fa27 	bl	8009f26 <lwip_htonl>
 8012ad8:	4603      	mov	r3, r0
 8012ada:	461a      	mov	r2, r3
 8012adc:	4629      	mov	r1, r5
 8012ade:	4620      	mov	r0, r4
 8012ae0:	f000 fff4 	bl	8013acc <dhcp_option_long>
 8012ae4:	4603      	mov	r3, r0
 8012ae6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8012ae8:	89b8      	ldrh	r0, [r7, #12]
 8012aea:	693b      	ldr	r3, [r7, #16]
 8012aec:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012af0:	2304      	movs	r3, #4
 8012af2:	2236      	movs	r2, #54	; 0x36
 8012af4:	f000 ff5e 	bl	80139b4 <dhcp_option>
 8012af8:	4603      	mov	r3, r0
 8012afa:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8012afc:	89bc      	ldrh	r4, [r7, #12]
 8012afe:	693b      	ldr	r3, [r7, #16]
 8012b00:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012b04:	69bb      	ldr	r3, [r7, #24]
 8012b06:	699b      	ldr	r3, [r3, #24]
 8012b08:	4618      	mov	r0, r3
 8012b0a:	f7f7 fa0c 	bl	8009f26 <lwip_htonl>
 8012b0e:	4603      	mov	r3, r0
 8012b10:	461a      	mov	r2, r3
 8012b12:	4629      	mov	r1, r5
 8012b14:	4620      	mov	r0, r4
 8012b16:	f000 ffd9 	bl	8013acc <dhcp_option_long>
 8012b1a:	4603      	mov	r3, r0
 8012b1c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012b1e:	89b8      	ldrh	r0, [r7, #12]
 8012b20:	693b      	ldr	r3, [r7, #16]
 8012b22:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012b26:	2303      	movs	r3, #3
 8012b28:	2237      	movs	r2, #55	; 0x37
 8012b2a:	f000 ff43 	bl	80139b4 <dhcp_option>
 8012b2e:	4603      	mov	r3, r0
 8012b30:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012b32:	2300      	movs	r3, #0
 8012b34:	77bb      	strb	r3, [r7, #30]
 8012b36:	e00e      	b.n	8012b56 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012b38:	89b8      	ldrh	r0, [r7, #12]
 8012b3a:	693b      	ldr	r3, [r7, #16]
 8012b3c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012b40:	7fbb      	ldrb	r3, [r7, #30]
 8012b42:	4a30      	ldr	r2, [pc, #192]	; (8012c04 <dhcp_select+0x1e4>)
 8012b44:	5cd3      	ldrb	r3, [r2, r3]
 8012b46:	461a      	mov	r2, r3
 8012b48:	f000 ff68 	bl	8013a1c <dhcp_option_byte>
 8012b4c:	4603      	mov	r3, r0
 8012b4e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012b50:	7fbb      	ldrb	r3, [r7, #30]
 8012b52:	3301      	adds	r3, #1
 8012b54:	77bb      	strb	r3, [r7, #30]
 8012b56:	7fbb      	ldrb	r3, [r7, #30]
 8012b58:	2b02      	cmp	r3, #2
 8012b5a:	d9ed      	bls.n	8012b38 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012b5c:	89b8      	ldrh	r0, [r7, #12]
 8012b5e:	693b      	ldr	r3, [r7, #16]
 8012b60:	33f0      	adds	r3, #240	; 0xf0
 8012b62:	697a      	ldr	r2, [r7, #20]
 8012b64:	4619      	mov	r1, r3
 8012b66:	f001 fc6b 	bl	8014440 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8012b6a:	4b27      	ldr	r3, [pc, #156]	; (8012c08 <dhcp_select+0x1e8>)
 8012b6c:	6818      	ldr	r0, [r3, #0]
 8012b6e:	4b27      	ldr	r3, [pc, #156]	; (8012c0c <dhcp_select+0x1ec>)
 8012b70:	9301      	str	r3, [sp, #4]
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	9300      	str	r3, [sp, #0]
 8012b76:	2343      	movs	r3, #67	; 0x43
 8012b78:	4a25      	ldr	r2, [pc, #148]	; (8012c10 <dhcp_select+0x1f0>)
 8012b7a:	6979      	ldr	r1, [r7, #20]
 8012b7c:	f7ff fbce 	bl	801231c <udp_sendto_if_src>
 8012b80:	4603      	mov	r3, r0
 8012b82:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012b84:	6978      	ldr	r0, [r7, #20]
 8012b86:	f7f8 fcef 	bl	800b568 <pbuf_free>
 8012b8a:	e001      	b.n	8012b90 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012b8c:	23ff      	movs	r3, #255	; 0xff
 8012b8e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012b90:	69bb      	ldr	r3, [r7, #24]
 8012b92:	799b      	ldrb	r3, [r3, #6]
 8012b94:	2bff      	cmp	r3, #255	; 0xff
 8012b96:	d005      	beq.n	8012ba4 <dhcp_select+0x184>
    dhcp->tries++;
 8012b98:	69bb      	ldr	r3, [r7, #24]
 8012b9a:	799b      	ldrb	r3, [r3, #6]
 8012b9c:	3301      	adds	r3, #1
 8012b9e:	b2da      	uxtb	r2, r3
 8012ba0:	69bb      	ldr	r3, [r7, #24]
 8012ba2:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8012ba4:	69bb      	ldr	r3, [r7, #24]
 8012ba6:	799b      	ldrb	r3, [r3, #6]
 8012ba8:	2b05      	cmp	r3, #5
 8012baa:	d80d      	bhi.n	8012bc8 <dhcp_select+0x1a8>
 8012bac:	69bb      	ldr	r3, [r7, #24]
 8012bae:	799b      	ldrb	r3, [r3, #6]
 8012bb0:	461a      	mov	r2, r3
 8012bb2:	2301      	movs	r3, #1
 8012bb4:	4093      	lsls	r3, r2
 8012bb6:	b29b      	uxth	r3, r3
 8012bb8:	461a      	mov	r2, r3
 8012bba:	0152      	lsls	r2, r2, #5
 8012bbc:	1ad2      	subs	r2, r2, r3
 8012bbe:	0092      	lsls	r2, r2, #2
 8012bc0:	4413      	add	r3, r2
 8012bc2:	00db      	lsls	r3, r3, #3
 8012bc4:	b29b      	uxth	r3, r3
 8012bc6:	e001      	b.n	8012bcc <dhcp_select+0x1ac>
 8012bc8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8012bcc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012bce:	89fb      	ldrh	r3, [r7, #14]
 8012bd0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012bd4:	4a0f      	ldr	r2, [pc, #60]	; (8012c14 <dhcp_select+0x1f4>)
 8012bd6:	fb82 1203 	smull	r1, r2, r2, r3
 8012bda:	1152      	asrs	r2, r2, #5
 8012bdc:	17db      	asrs	r3, r3, #31
 8012bde:	1ad3      	subs	r3, r2, r3
 8012be0:	b29a      	uxth	r2, r3
 8012be2:	69bb      	ldr	r3, [r7, #24]
 8012be4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012be6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012bea:	4618      	mov	r0, r3
 8012bec:	3720      	adds	r7, #32
 8012bee:	46bd      	mov	sp, r7
 8012bf0:	bdb0      	pop	{r4, r5, r7, pc}
 8012bf2:	bf00      	nop
 8012bf4:	0801aae0 	.word	0x0801aae0
 8012bf8:	0801ab8c 	.word	0x0801ab8c
 8012bfc:	0801ab40 	.word	0x0801ab40
 8012c00:	0801aba8 	.word	0x0801aba8
 8012c04:	2000003c 	.word	0x2000003c
 8012c08:	200081fc 	.word	0x200081fc
 8012c0c:	0801faa8 	.word	0x0801faa8
 8012c10:	0801faac 	.word	0x0801faac
 8012c14:	10624dd3 	.word	0x10624dd3

08012c18 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	b082      	sub	sp, #8
 8012c1c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8012c1e:	4b27      	ldr	r3, [pc, #156]	; (8012cbc <dhcp_coarse_tmr+0xa4>)
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	607b      	str	r3, [r7, #4]
 8012c24:	e042      	b.n	8012cac <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	6a1b      	ldr	r3, [r3, #32]
 8012c2a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8012c2c:	683b      	ldr	r3, [r7, #0]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d039      	beq.n	8012ca6 <dhcp_coarse_tmr+0x8e>
 8012c32:	683b      	ldr	r3, [r7, #0]
 8012c34:	795b      	ldrb	r3, [r3, #5]
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d035      	beq.n	8012ca6 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8012c3a:	683b      	ldr	r3, [r7, #0]
 8012c3c:	8a9b      	ldrh	r3, [r3, #20]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d012      	beq.n	8012c68 <dhcp_coarse_tmr+0x50>
 8012c42:	683b      	ldr	r3, [r7, #0]
 8012c44:	8a5b      	ldrh	r3, [r3, #18]
 8012c46:	3301      	adds	r3, #1
 8012c48:	b29a      	uxth	r2, r3
 8012c4a:	683b      	ldr	r3, [r7, #0]
 8012c4c:	825a      	strh	r2, [r3, #18]
 8012c4e:	683b      	ldr	r3, [r7, #0]
 8012c50:	8a5a      	ldrh	r2, [r3, #18]
 8012c52:	683b      	ldr	r3, [r7, #0]
 8012c54:	8a9b      	ldrh	r3, [r3, #20]
 8012c56:	429a      	cmp	r2, r3
 8012c58:	d106      	bne.n	8012c68 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8012c5a:	6878      	ldr	r0, [r7, #4]
 8012c5c:	f000 fdf6 	bl	801384c <dhcp_release_and_stop>
        dhcp_start(netif);
 8012c60:	6878      	ldr	r0, [r7, #4]
 8012c62:	f000 f969 	bl	8012f38 <dhcp_start>
 8012c66:	e01e      	b.n	8012ca6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8012c68:	683b      	ldr	r3, [r7, #0]
 8012c6a:	8a1b      	ldrh	r3, [r3, #16]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d00b      	beq.n	8012c88 <dhcp_coarse_tmr+0x70>
 8012c70:	683b      	ldr	r3, [r7, #0]
 8012c72:	8a1b      	ldrh	r3, [r3, #16]
 8012c74:	1e5a      	subs	r2, r3, #1
 8012c76:	b291      	uxth	r1, r2
 8012c78:	683a      	ldr	r2, [r7, #0]
 8012c7a:	8211      	strh	r1, [r2, #16]
 8012c7c:	2b01      	cmp	r3, #1
 8012c7e:	d103      	bne.n	8012c88 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8012c80:	6878      	ldr	r0, [r7, #4]
 8012c82:	f000 f8c6 	bl	8012e12 <dhcp_t2_timeout>
 8012c86:	e00e      	b.n	8012ca6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8012c88:	683b      	ldr	r3, [r7, #0]
 8012c8a:	89db      	ldrh	r3, [r3, #14]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d00a      	beq.n	8012ca6 <dhcp_coarse_tmr+0x8e>
 8012c90:	683b      	ldr	r3, [r7, #0]
 8012c92:	89db      	ldrh	r3, [r3, #14]
 8012c94:	1e5a      	subs	r2, r3, #1
 8012c96:	b291      	uxth	r1, r2
 8012c98:	683a      	ldr	r2, [r7, #0]
 8012c9a:	81d1      	strh	r1, [r2, #14]
 8012c9c:	2b01      	cmp	r3, #1
 8012c9e:	d102      	bne.n	8012ca6 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8012ca0:	6878      	ldr	r0, [r7, #4]
 8012ca2:	f000 f888 	bl	8012db6 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	607b      	str	r3, [r7, #4]
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d1b9      	bne.n	8012c26 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8012cb2:	bf00      	nop
 8012cb4:	3708      	adds	r7, #8
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	bd80      	pop	{r7, pc}
 8012cba:	bf00      	nop
 8012cbc:	20010e68 	.word	0x20010e68

08012cc0 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8012cc0:	b580      	push	{r7, lr}
 8012cc2:	b082      	sub	sp, #8
 8012cc4:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8012cc6:	4b16      	ldr	r3, [pc, #88]	; (8012d20 <dhcp_fine_tmr+0x60>)
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	607b      	str	r3, [r7, #4]
 8012ccc:	e020      	b.n	8012d10 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	6a1b      	ldr	r3, [r3, #32]
 8012cd2:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8012cd4:	683b      	ldr	r3, [r7, #0]
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d017      	beq.n	8012d0a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8012cda:	683b      	ldr	r3, [r7, #0]
 8012cdc:	891b      	ldrh	r3, [r3, #8]
 8012cde:	2b01      	cmp	r3, #1
 8012ce0:	d906      	bls.n	8012cf0 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8012ce2:	683b      	ldr	r3, [r7, #0]
 8012ce4:	891b      	ldrh	r3, [r3, #8]
 8012ce6:	3b01      	subs	r3, #1
 8012ce8:	b29a      	uxth	r2, r3
 8012cea:	683b      	ldr	r3, [r7, #0]
 8012cec:	811a      	strh	r2, [r3, #8]
 8012cee:	e00c      	b.n	8012d0a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8012cf0:	683b      	ldr	r3, [r7, #0]
 8012cf2:	891b      	ldrh	r3, [r3, #8]
 8012cf4:	2b01      	cmp	r3, #1
 8012cf6:	d108      	bne.n	8012d0a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8012cf8:	683b      	ldr	r3, [r7, #0]
 8012cfa:	891b      	ldrh	r3, [r3, #8]
 8012cfc:	3b01      	subs	r3, #1
 8012cfe:	b29a      	uxth	r2, r3
 8012d00:	683b      	ldr	r3, [r7, #0]
 8012d02:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8012d04:	6878      	ldr	r0, [r7, #4]
 8012d06:	f000 f80d 	bl	8012d24 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	607b      	str	r3, [r7, #4]
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d1db      	bne.n	8012cce <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8012d16:	bf00      	nop
 8012d18:	3708      	adds	r7, #8
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	bd80      	pop	{r7, pc}
 8012d1e:	bf00      	nop
 8012d20:	20010e68 	.word	0x20010e68

08012d24 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8012d24:	b580      	push	{r7, lr}
 8012d26:	b084      	sub	sp, #16
 8012d28:	af00      	add	r7, sp, #0
 8012d2a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	6a1b      	ldr	r3, [r3, #32]
 8012d30:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	795b      	ldrb	r3, [r3, #5]
 8012d36:	2b0c      	cmp	r3, #12
 8012d38:	d003      	beq.n	8012d42 <dhcp_timeout+0x1e>
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	795b      	ldrb	r3, [r3, #5]
 8012d3e:	2b06      	cmp	r3, #6
 8012d40:	d103      	bne.n	8012d4a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8012d42:	6878      	ldr	r0, [r7, #4]
 8012d44:	f000 fa18 	bl	8013178 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8012d48:	e031      	b.n	8012dae <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	795b      	ldrb	r3, [r3, #5]
 8012d4e:	2b01      	cmp	r3, #1
 8012d50:	d10e      	bne.n	8012d70 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	799b      	ldrb	r3, [r3, #6]
 8012d56:	2b05      	cmp	r3, #5
 8012d58:	d803      	bhi.n	8012d62 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8012d5a:	6878      	ldr	r0, [r7, #4]
 8012d5c:	f7ff fe60 	bl	8012a20 <dhcp_select>
}
 8012d60:	e025      	b.n	8012dae <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8012d62:	6878      	ldr	r0, [r7, #4]
 8012d64:	f000 fd72 	bl	801384c <dhcp_release_and_stop>
      dhcp_start(netif);
 8012d68:	6878      	ldr	r0, [r7, #4]
 8012d6a:	f000 f8e5 	bl	8012f38 <dhcp_start>
}
 8012d6e:	e01e      	b.n	8012dae <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	795b      	ldrb	r3, [r3, #5]
 8012d74:	2b08      	cmp	r3, #8
 8012d76:	d10b      	bne.n	8012d90 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	799b      	ldrb	r3, [r3, #6]
 8012d7c:	2b01      	cmp	r3, #1
 8012d7e:	d803      	bhi.n	8012d88 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8012d80:	6878      	ldr	r0, [r7, #4]
 8012d82:	f7ff fdf3 	bl	801296c <dhcp_check>
}
 8012d86:	e012      	b.n	8012dae <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8012d88:	6878      	ldr	r0, [r7, #4]
 8012d8a:	f000 fa97 	bl	80132bc <dhcp_bind>
}
 8012d8e:	e00e      	b.n	8012dae <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	795b      	ldrb	r3, [r3, #5]
 8012d94:	2b03      	cmp	r3, #3
 8012d96:	d10a      	bne.n	8012dae <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	799b      	ldrb	r3, [r3, #6]
 8012d9c:	2b01      	cmp	r3, #1
 8012d9e:	d803      	bhi.n	8012da8 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8012da0:	6878      	ldr	r0, [r7, #4]
 8012da2:	f000 fc9d 	bl	80136e0 <dhcp_reboot>
}
 8012da6:	e002      	b.n	8012dae <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8012da8:	6878      	ldr	r0, [r7, #4]
 8012daa:	f000 f9e5 	bl	8013178 <dhcp_discover>
}
 8012dae:	bf00      	nop
 8012db0:	3710      	adds	r7, #16
 8012db2:	46bd      	mov	sp, r7
 8012db4:	bd80      	pop	{r7, pc}

08012db6 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8012db6:	b580      	push	{r7, lr}
 8012db8:	b084      	sub	sp, #16
 8012dba:	af00      	add	r7, sp, #0
 8012dbc:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	6a1b      	ldr	r3, [r3, #32]
 8012dc2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	795b      	ldrb	r3, [r3, #5]
 8012dc8:	2b01      	cmp	r3, #1
 8012dca:	d007      	beq.n	8012ddc <dhcp_t1_timeout+0x26>
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	795b      	ldrb	r3, [r3, #5]
 8012dd0:	2b0a      	cmp	r3, #10
 8012dd2:	d003      	beq.n	8012ddc <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012dd8:	2b05      	cmp	r3, #5
 8012dda:	d116      	bne.n	8012e0a <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8012ddc:	6878      	ldr	r0, [r7, #4]
 8012dde:	f000 fb47 	bl	8013470 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	899b      	ldrh	r3, [r3, #12]
 8012de6:	461a      	mov	r2, r3
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	8a5b      	ldrh	r3, [r3, #18]
 8012dec:	1ad3      	subs	r3, r2, r3
 8012dee:	2b01      	cmp	r3, #1
 8012df0:	dd0b      	ble.n	8012e0a <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	899b      	ldrh	r3, [r3, #12]
 8012df6:	461a      	mov	r2, r3
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	8a5b      	ldrh	r3, [r3, #18]
 8012dfc:	1ad3      	subs	r3, r2, r3
 8012dfe:	0fda      	lsrs	r2, r3, #31
 8012e00:	4413      	add	r3, r2
 8012e02:	105b      	asrs	r3, r3, #1
 8012e04:	b29a      	uxth	r2, r3
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8012e0a:	bf00      	nop
 8012e0c:	3710      	adds	r7, #16
 8012e0e:	46bd      	mov	sp, r7
 8012e10:	bd80      	pop	{r7, pc}

08012e12 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8012e12:	b580      	push	{r7, lr}
 8012e14:	b084      	sub	sp, #16
 8012e16:	af00      	add	r7, sp, #0
 8012e18:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	6a1b      	ldr	r3, [r3, #32]
 8012e1e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	795b      	ldrb	r3, [r3, #5]
 8012e24:	2b01      	cmp	r3, #1
 8012e26:	d00b      	beq.n	8012e40 <dhcp_t2_timeout+0x2e>
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	795b      	ldrb	r3, [r3, #5]
 8012e2c:	2b0a      	cmp	r3, #10
 8012e2e:	d007      	beq.n	8012e40 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012e34:	2b05      	cmp	r3, #5
 8012e36:	d003      	beq.n	8012e40 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	795b      	ldrb	r3, [r3, #5]
 8012e3c:	2b04      	cmp	r3, #4
 8012e3e:	d116      	bne.n	8012e6e <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8012e40:	6878      	ldr	r0, [r7, #4]
 8012e42:	f000 fbb1 	bl	80135a8 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	8a9b      	ldrh	r3, [r3, #20]
 8012e4a:	461a      	mov	r2, r3
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	8a5b      	ldrh	r3, [r3, #18]
 8012e50:	1ad3      	subs	r3, r2, r3
 8012e52:	2b01      	cmp	r3, #1
 8012e54:	dd0b      	ble.n	8012e6e <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	8a9b      	ldrh	r3, [r3, #20]
 8012e5a:	461a      	mov	r2, r3
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	8a5b      	ldrh	r3, [r3, #18]
 8012e60:	1ad3      	subs	r3, r2, r3
 8012e62:	0fda      	lsrs	r2, r3, #31
 8012e64:	4413      	add	r3, r2
 8012e66:	105b      	asrs	r3, r3, #1
 8012e68:	b29a      	uxth	r2, r3
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8012e6e:	bf00      	nop
 8012e70:	3710      	adds	r7, #16
 8012e72:	46bd      	mov	sp, r7
 8012e74:	bd80      	pop	{r7, pc}
	...

08012e78 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8012e78:	b580      	push	{r7, lr}
 8012e7a:	b084      	sub	sp, #16
 8012e7c:	af00      	add	r7, sp, #0
 8012e7e:	6078      	str	r0, [r7, #4]
 8012e80:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	6a1b      	ldr	r3, [r3, #32]
 8012e86:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	2200      	movs	r2, #0
 8012e92:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8012e94:	4b26      	ldr	r3, [pc, #152]	; (8012f30 <dhcp_handle_ack+0xb8>)
 8012e96:	78db      	ldrb	r3, [r3, #3]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d003      	beq.n	8012ea4 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8012e9c:	4b25      	ldr	r3, [pc, #148]	; (8012f34 <dhcp_handle_ack+0xbc>)
 8012e9e:	68da      	ldr	r2, [r3, #12]
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8012ea4:	4b22      	ldr	r3, [pc, #136]	; (8012f30 <dhcp_handle_ack+0xb8>)
 8012ea6:	791b      	ldrb	r3, [r3, #4]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d004      	beq.n	8012eb6 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8012eac:	4b21      	ldr	r3, [pc, #132]	; (8012f34 <dhcp_handle_ack+0xbc>)
 8012eae:	691a      	ldr	r2, [r3, #16]
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	62da      	str	r2, [r3, #44]	; 0x2c
 8012eb4:	e004      	b.n	8012ec0 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012eba:	085a      	lsrs	r2, r3, #1
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8012ec0:	4b1b      	ldr	r3, [pc, #108]	; (8012f30 <dhcp_handle_ack+0xb8>)
 8012ec2:	795b      	ldrb	r3, [r3, #5]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d004      	beq.n	8012ed2 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8012ec8:	4b1a      	ldr	r3, [pc, #104]	; (8012f34 <dhcp_handle_ack+0xbc>)
 8012eca:	695a      	ldr	r2, [r3, #20]
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	631a      	str	r2, [r3, #48]	; 0x30
 8012ed0:	e007      	b.n	8012ee2 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012ed6:	4613      	mov	r3, r2
 8012ed8:	00db      	lsls	r3, r3, #3
 8012eda:	1a9b      	subs	r3, r3, r2
 8012edc:	08da      	lsrs	r2, r3, #3
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8012ee2:	683b      	ldr	r3, [r7, #0]
 8012ee4:	691a      	ldr	r2, [r3, #16]
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8012eea:	4b11      	ldr	r3, [pc, #68]	; (8012f30 <dhcp_handle_ack+0xb8>)
 8012eec:	799b      	ldrb	r3, [r3, #6]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d00b      	beq.n	8012f0a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8012ef2:	4b10      	ldr	r3, [pc, #64]	; (8012f34 <dhcp_handle_ack+0xbc>)
 8012ef4:	699b      	ldr	r3, [r3, #24]
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	f7f7 f815 	bl	8009f26 <lwip_htonl>
 8012efc:	4602      	mov	r2, r0
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	2201      	movs	r2, #1
 8012f06:	71da      	strb	r2, [r3, #7]
 8012f08:	e002      	b.n	8012f10 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	2200      	movs	r2, #0
 8012f0e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8012f10:	4b07      	ldr	r3, [pc, #28]	; (8012f30 <dhcp_handle_ack+0xb8>)
 8012f12:	79db      	ldrb	r3, [r3, #7]
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d007      	beq.n	8012f28 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8012f18:	4b06      	ldr	r3, [pc, #24]	; (8012f34 <dhcp_handle_ack+0xbc>)
 8012f1a:	69db      	ldr	r3, [r3, #28]
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	f7f7 f802 	bl	8009f26 <lwip_htonl>
 8012f22:	4602      	mov	r2, r0
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8012f28:	bf00      	nop
 8012f2a:	3710      	adds	r7, #16
 8012f2c:	46bd      	mov	sp, r7
 8012f2e:	bd80      	pop	{r7, pc}
 8012f30:	20010e94 	.word	0x20010e94
 8012f34:	20010e9c 	.word	0x20010e9c

08012f38 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8012f38:	b580      	push	{r7, lr}
 8012f3a:	b084      	sub	sp, #16
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d109      	bne.n	8012f5a <dhcp_start+0x22>
 8012f46:	4b37      	ldr	r3, [pc, #220]	; (8013024 <dhcp_start+0xec>)
 8012f48:	f240 22e7 	movw	r2, #743	; 0x2e7
 8012f4c:	4936      	ldr	r1, [pc, #216]	; (8013028 <dhcp_start+0xf0>)
 8012f4e:	4837      	ldr	r0, [pc, #220]	; (801302c <dhcp_start+0xf4>)
 8012f50:	f003 fffc 	bl	8016f4c <iprintf>
 8012f54:	f06f 030f 	mvn.w	r3, #15
 8012f58:	e060      	b.n	801301c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012f60:	f003 0301 	and.w	r3, r3, #1
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d109      	bne.n	8012f7c <dhcp_start+0x44>
 8012f68:	4b2e      	ldr	r3, [pc, #184]	; (8013024 <dhcp_start+0xec>)
 8012f6a:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8012f6e:	4930      	ldr	r1, [pc, #192]	; (8013030 <dhcp_start+0xf8>)
 8012f70:	482e      	ldr	r0, [pc, #184]	; (801302c <dhcp_start+0xf4>)
 8012f72:	f003 ffeb 	bl	8016f4c <iprintf>
 8012f76:	f06f 030f 	mvn.w	r3, #15
 8012f7a:	e04f      	b.n	801301c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	6a1b      	ldr	r3, [r3, #32]
 8012f80:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012f86:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8012f8a:	d202      	bcs.n	8012f92 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8012f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8012f90:	e044      	b.n	801301c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d10d      	bne.n	8012fb4 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8012f98:	2034      	movs	r0, #52	; 0x34
 8012f9a:	f7f7 fae3 	bl	800a564 <mem_malloc>
 8012f9e:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d102      	bne.n	8012fac <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8012fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8012faa:	e037      	b.n	801301c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	68fa      	ldr	r2, [r7, #12]
 8012fb0:	621a      	str	r2, [r3, #32]
 8012fb2:	e005      	b.n	8012fc0 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	791b      	ldrb	r3, [r3, #4]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d001      	beq.n	8012fc0 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8012fbc:	f7ff fc92 	bl	80128e4 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8012fc0:	2234      	movs	r2, #52	; 0x34
 8012fc2:	2100      	movs	r1, #0
 8012fc4:	68f8      	ldr	r0, [r7, #12]
 8012fc6:	f003 ffb9 	bl	8016f3c <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8012fca:	f7ff fc39 	bl	8012840 <dhcp_inc_pcb_refcount>
 8012fce:	4603      	mov	r3, r0
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d002      	beq.n	8012fda <dhcp_start+0xa2>
    return ERR_MEM;
 8012fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8012fd8:	e020      	b.n	801301c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	2201      	movs	r2, #1
 8012fde:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012fe6:	f003 0304 	and.w	r3, r3, #4
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d105      	bne.n	8012ffa <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8012fee:	2102      	movs	r1, #2
 8012ff0:	68f8      	ldr	r0, [r7, #12]
 8012ff2:	f000 fcc5 	bl	8013980 <dhcp_set_state>
    return ERR_OK;
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	e010      	b.n	801301c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8012ffa:	6878      	ldr	r0, [r7, #4]
 8012ffc:	f000 f8bc 	bl	8013178 <dhcp_discover>
 8013000:	4603      	mov	r3, r0
 8013002:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8013004:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013008:	2b00      	cmp	r3, #0
 801300a:	d005      	beq.n	8013018 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801300c:	6878      	ldr	r0, [r7, #4]
 801300e:	f000 fc1d 	bl	801384c <dhcp_release_and_stop>
    return ERR_MEM;
 8013012:	f04f 33ff 	mov.w	r3, #4294967295
 8013016:	e001      	b.n	801301c <dhcp_start+0xe4>
  }
  return result;
 8013018:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801301c:	4618      	mov	r0, r3
 801301e:	3710      	adds	r7, #16
 8013020:	46bd      	mov	sp, r7
 8013022:	bd80      	pop	{r7, pc}
 8013024:	0801aae0 	.word	0x0801aae0
 8013028:	0801abc4 	.word	0x0801abc4
 801302c:	0801ab40 	.word	0x0801ab40
 8013030:	0801ac08 	.word	0x0801ac08

08013034 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8013034:	b580      	push	{r7, lr}
 8013036:	b084      	sub	sp, #16
 8013038:	af00      	add	r7, sp, #0
 801303a:	6078      	str	r0, [r7, #4]
 801303c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d107      	bne.n	8013054 <dhcp_arp_reply+0x20>
 8013044:	4b0e      	ldr	r3, [pc, #56]	; (8013080 <dhcp_arp_reply+0x4c>)
 8013046:	f240 328b 	movw	r2, #907	; 0x38b
 801304a:	490e      	ldr	r1, [pc, #56]	; (8013084 <dhcp_arp_reply+0x50>)
 801304c:	480e      	ldr	r0, [pc, #56]	; (8013088 <dhcp_arp_reply+0x54>)
 801304e:	f003 ff7d 	bl	8016f4c <iprintf>
 8013052:	e012      	b.n	801307a <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	6a1b      	ldr	r3, [r3, #32]
 8013058:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	2b00      	cmp	r3, #0
 801305e:	d00c      	beq.n	801307a <dhcp_arp_reply+0x46>
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	795b      	ldrb	r3, [r3, #5]
 8013064:	2b08      	cmp	r3, #8
 8013066:	d108      	bne.n	801307a <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8013068:	683b      	ldr	r3, [r7, #0]
 801306a:	681a      	ldr	r2, [r3, #0]
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	69db      	ldr	r3, [r3, #28]
 8013070:	429a      	cmp	r2, r3
 8013072:	d102      	bne.n	801307a <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8013074:	6878      	ldr	r0, [r7, #4]
 8013076:	f000 f809 	bl	801308c <dhcp_decline>
    }
  }
}
 801307a:	3710      	adds	r7, #16
 801307c:	46bd      	mov	sp, r7
 801307e:	bd80      	pop	{r7, pc}
 8013080:	0801aae0 	.word	0x0801aae0
 8013084:	0801abc4 	.word	0x0801abc4
 8013088:	0801ab40 	.word	0x0801ab40

0801308c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801308c:	b5b0      	push	{r4, r5, r7, lr}
 801308e:	b08a      	sub	sp, #40	; 0x28
 8013090:	af02      	add	r7, sp, #8
 8013092:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	6a1b      	ldr	r3, [r3, #32]
 8013098:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801309a:	210c      	movs	r1, #12
 801309c:	69b8      	ldr	r0, [r7, #24]
 801309e:	f000 fc6f 	bl	8013980 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80130a2:	f107 030c 	add.w	r3, r7, #12
 80130a6:	2204      	movs	r2, #4
 80130a8:	69b9      	ldr	r1, [r7, #24]
 80130aa:	6878      	ldr	r0, [r7, #4]
 80130ac:	f001 f8f2 	bl	8014294 <dhcp_create_msg>
 80130b0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80130b2:	697b      	ldr	r3, [r7, #20]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d035      	beq.n	8013124 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80130b8:	697b      	ldr	r3, [r7, #20]
 80130ba:	685b      	ldr	r3, [r3, #4]
 80130bc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80130be:	89b8      	ldrh	r0, [r7, #12]
 80130c0:	693b      	ldr	r3, [r7, #16]
 80130c2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80130c6:	2304      	movs	r3, #4
 80130c8:	2232      	movs	r2, #50	; 0x32
 80130ca:	f000 fc73 	bl	80139b4 <dhcp_option>
 80130ce:	4603      	mov	r3, r0
 80130d0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80130d2:	89bc      	ldrh	r4, [r7, #12]
 80130d4:	693b      	ldr	r3, [r7, #16]
 80130d6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80130da:	69bb      	ldr	r3, [r7, #24]
 80130dc:	69db      	ldr	r3, [r3, #28]
 80130de:	4618      	mov	r0, r3
 80130e0:	f7f6 ff21 	bl	8009f26 <lwip_htonl>
 80130e4:	4603      	mov	r3, r0
 80130e6:	461a      	mov	r2, r3
 80130e8:	4629      	mov	r1, r5
 80130ea:	4620      	mov	r0, r4
 80130ec:	f000 fcee 	bl	8013acc <dhcp_option_long>
 80130f0:	4603      	mov	r3, r0
 80130f2:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80130f4:	89b8      	ldrh	r0, [r7, #12]
 80130f6:	693b      	ldr	r3, [r7, #16]
 80130f8:	33f0      	adds	r3, #240	; 0xf0
 80130fa:	697a      	ldr	r2, [r7, #20]
 80130fc:	4619      	mov	r1, r3
 80130fe:	f001 f99f 	bl	8014440 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013102:	4b19      	ldr	r3, [pc, #100]	; (8013168 <dhcp_decline+0xdc>)
 8013104:	6818      	ldr	r0, [r3, #0]
 8013106:	4b19      	ldr	r3, [pc, #100]	; (801316c <dhcp_decline+0xe0>)
 8013108:	9301      	str	r3, [sp, #4]
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	9300      	str	r3, [sp, #0]
 801310e:	2343      	movs	r3, #67	; 0x43
 8013110:	4a17      	ldr	r2, [pc, #92]	; (8013170 <dhcp_decline+0xe4>)
 8013112:	6979      	ldr	r1, [r7, #20]
 8013114:	f7ff f902 	bl	801231c <udp_sendto_if_src>
 8013118:	4603      	mov	r3, r0
 801311a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801311c:	6978      	ldr	r0, [r7, #20]
 801311e:	f7f8 fa23 	bl	800b568 <pbuf_free>
 8013122:	e001      	b.n	8013128 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013124:	23ff      	movs	r3, #255	; 0xff
 8013126:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013128:	69bb      	ldr	r3, [r7, #24]
 801312a:	799b      	ldrb	r3, [r3, #6]
 801312c:	2bff      	cmp	r3, #255	; 0xff
 801312e:	d005      	beq.n	801313c <dhcp_decline+0xb0>
    dhcp->tries++;
 8013130:	69bb      	ldr	r3, [r7, #24]
 8013132:	799b      	ldrb	r3, [r3, #6]
 8013134:	3301      	adds	r3, #1
 8013136:	b2da      	uxtb	r2, r3
 8013138:	69bb      	ldr	r3, [r7, #24]
 801313a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 801313c:	f242 7310 	movw	r3, #10000	; 0x2710
 8013140:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013142:	89fb      	ldrh	r3, [r7, #14]
 8013144:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013148:	4a0a      	ldr	r2, [pc, #40]	; (8013174 <dhcp_decline+0xe8>)
 801314a:	fb82 1203 	smull	r1, r2, r2, r3
 801314e:	1152      	asrs	r2, r2, #5
 8013150:	17db      	asrs	r3, r3, #31
 8013152:	1ad3      	subs	r3, r2, r3
 8013154:	b29a      	uxth	r2, r3
 8013156:	69bb      	ldr	r3, [r7, #24]
 8013158:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801315a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801315e:	4618      	mov	r0, r3
 8013160:	3720      	adds	r7, #32
 8013162:	46bd      	mov	sp, r7
 8013164:	bdb0      	pop	{r4, r5, r7, pc}
 8013166:	bf00      	nop
 8013168:	200081fc 	.word	0x200081fc
 801316c:	0801faa8 	.word	0x0801faa8
 8013170:	0801faac 	.word	0x0801faac
 8013174:	10624dd3 	.word	0x10624dd3

08013178 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8013178:	b580      	push	{r7, lr}
 801317a:	b08a      	sub	sp, #40	; 0x28
 801317c:	af02      	add	r7, sp, #8
 801317e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	6a1b      	ldr	r3, [r3, #32]
 8013184:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8013186:	2300      	movs	r3, #0
 8013188:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801318a:	69bb      	ldr	r3, [r7, #24]
 801318c:	2200      	movs	r2, #0
 801318e:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8013190:	2106      	movs	r1, #6
 8013192:	69b8      	ldr	r0, [r7, #24]
 8013194:	f000 fbf4 	bl	8013980 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8013198:	f107 0308 	add.w	r3, r7, #8
 801319c:	2201      	movs	r2, #1
 801319e:	69b9      	ldr	r1, [r7, #24]
 80131a0:	6878      	ldr	r0, [r7, #4]
 80131a2:	f001 f877 	bl	8014294 <dhcp_create_msg>
 80131a6:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80131a8:	693b      	ldr	r3, [r7, #16]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d04b      	beq.n	8013246 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80131ae:	693b      	ldr	r3, [r7, #16]
 80131b0:	685b      	ldr	r3, [r3, #4]
 80131b2:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80131b4:	8938      	ldrh	r0, [r7, #8]
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80131bc:	2302      	movs	r3, #2
 80131be:	2239      	movs	r2, #57	; 0x39
 80131c0:	f000 fbf8 	bl	80139b4 <dhcp_option>
 80131c4:	4603      	mov	r3, r0
 80131c6:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80131c8:	8938      	ldrh	r0, [r7, #8]
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80131d4:	461a      	mov	r2, r3
 80131d6:	f000 fc47 	bl	8013a68 <dhcp_option_short>
 80131da:	4603      	mov	r3, r0
 80131dc:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80131de:	8938      	ldrh	r0, [r7, #8]
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80131e6:	2303      	movs	r3, #3
 80131e8:	2237      	movs	r2, #55	; 0x37
 80131ea:	f000 fbe3 	bl	80139b4 <dhcp_option>
 80131ee:	4603      	mov	r3, r0
 80131f0:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80131f2:	2300      	movs	r3, #0
 80131f4:	77fb      	strb	r3, [r7, #31]
 80131f6:	e00e      	b.n	8013216 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80131f8:	8938      	ldrh	r0, [r7, #8]
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013200:	7ffb      	ldrb	r3, [r7, #31]
 8013202:	4a29      	ldr	r2, [pc, #164]	; (80132a8 <dhcp_discover+0x130>)
 8013204:	5cd3      	ldrb	r3, [r2, r3]
 8013206:	461a      	mov	r2, r3
 8013208:	f000 fc08 	bl	8013a1c <dhcp_option_byte>
 801320c:	4603      	mov	r3, r0
 801320e:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013210:	7ffb      	ldrb	r3, [r7, #31]
 8013212:	3301      	adds	r3, #1
 8013214:	77fb      	strb	r3, [r7, #31]
 8013216:	7ffb      	ldrb	r3, [r7, #31]
 8013218:	2b02      	cmp	r3, #2
 801321a:	d9ed      	bls.n	80131f8 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801321c:	8938      	ldrh	r0, [r7, #8]
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	33f0      	adds	r3, #240	; 0xf0
 8013222:	693a      	ldr	r2, [r7, #16]
 8013224:	4619      	mov	r1, r3
 8013226:	f001 f90b 	bl	8014440 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801322a:	4b20      	ldr	r3, [pc, #128]	; (80132ac <dhcp_discover+0x134>)
 801322c:	6818      	ldr	r0, [r3, #0]
 801322e:	4b20      	ldr	r3, [pc, #128]	; (80132b0 <dhcp_discover+0x138>)
 8013230:	9301      	str	r3, [sp, #4]
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	9300      	str	r3, [sp, #0]
 8013236:	2343      	movs	r3, #67	; 0x43
 8013238:	4a1e      	ldr	r2, [pc, #120]	; (80132b4 <dhcp_discover+0x13c>)
 801323a:	6939      	ldr	r1, [r7, #16]
 801323c:	f7ff f86e 	bl	801231c <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8013240:	6938      	ldr	r0, [r7, #16]
 8013242:	f7f8 f991 	bl	800b568 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8013246:	69bb      	ldr	r3, [r7, #24]
 8013248:	799b      	ldrb	r3, [r3, #6]
 801324a:	2bff      	cmp	r3, #255	; 0xff
 801324c:	d005      	beq.n	801325a <dhcp_discover+0xe2>
    dhcp->tries++;
 801324e:	69bb      	ldr	r3, [r7, #24]
 8013250:	799b      	ldrb	r3, [r3, #6]
 8013252:	3301      	adds	r3, #1
 8013254:	b2da      	uxtb	r2, r3
 8013256:	69bb      	ldr	r3, [r7, #24]
 8013258:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801325a:	69bb      	ldr	r3, [r7, #24]
 801325c:	799b      	ldrb	r3, [r3, #6]
 801325e:	2b05      	cmp	r3, #5
 8013260:	d80d      	bhi.n	801327e <dhcp_discover+0x106>
 8013262:	69bb      	ldr	r3, [r7, #24]
 8013264:	799b      	ldrb	r3, [r3, #6]
 8013266:	461a      	mov	r2, r3
 8013268:	2301      	movs	r3, #1
 801326a:	4093      	lsls	r3, r2
 801326c:	b29b      	uxth	r3, r3
 801326e:	461a      	mov	r2, r3
 8013270:	0152      	lsls	r2, r2, #5
 8013272:	1ad2      	subs	r2, r2, r3
 8013274:	0092      	lsls	r2, r2, #2
 8013276:	4413      	add	r3, r2
 8013278:	00db      	lsls	r3, r3, #3
 801327a:	b29b      	uxth	r3, r3
 801327c:	e001      	b.n	8013282 <dhcp_discover+0x10a>
 801327e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8013282:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013284:	897b      	ldrh	r3, [r7, #10]
 8013286:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801328a:	4a0b      	ldr	r2, [pc, #44]	; (80132b8 <dhcp_discover+0x140>)
 801328c:	fb82 1203 	smull	r1, r2, r2, r3
 8013290:	1152      	asrs	r2, r2, #5
 8013292:	17db      	asrs	r3, r3, #31
 8013294:	1ad3      	subs	r3, r2, r3
 8013296:	b29a      	uxth	r2, r3
 8013298:	69bb      	ldr	r3, [r7, #24]
 801329a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801329c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80132a0:	4618      	mov	r0, r3
 80132a2:	3720      	adds	r7, #32
 80132a4:	46bd      	mov	sp, r7
 80132a6:	bd80      	pop	{r7, pc}
 80132a8:	2000003c 	.word	0x2000003c
 80132ac:	200081fc 	.word	0x200081fc
 80132b0:	0801faa8 	.word	0x0801faa8
 80132b4:	0801faac 	.word	0x0801faac
 80132b8:	10624dd3 	.word	0x10624dd3

080132bc <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80132bc:	b580      	push	{r7, lr}
 80132be:	b088      	sub	sp, #32
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d107      	bne.n	80132da <dhcp_bind+0x1e>
 80132ca:	4b64      	ldr	r3, [pc, #400]	; (801345c <dhcp_bind+0x1a0>)
 80132cc:	f240 4215 	movw	r2, #1045	; 0x415
 80132d0:	4963      	ldr	r1, [pc, #396]	; (8013460 <dhcp_bind+0x1a4>)
 80132d2:	4864      	ldr	r0, [pc, #400]	; (8013464 <dhcp_bind+0x1a8>)
 80132d4:	f003 fe3a 	bl	8016f4c <iprintf>
 80132d8:	e0bc      	b.n	8013454 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	6a1b      	ldr	r3, [r3, #32]
 80132de:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80132e0:	69bb      	ldr	r3, [r7, #24]
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d107      	bne.n	80132f6 <dhcp_bind+0x3a>
 80132e6:	4b5d      	ldr	r3, [pc, #372]	; (801345c <dhcp_bind+0x1a0>)
 80132e8:	f240 4217 	movw	r2, #1047	; 0x417
 80132ec:	495e      	ldr	r1, [pc, #376]	; (8013468 <dhcp_bind+0x1ac>)
 80132ee:	485d      	ldr	r0, [pc, #372]	; (8013464 <dhcp_bind+0x1a8>)
 80132f0:	f003 fe2c 	bl	8016f4c <iprintf>
 80132f4:	e0ae      	b.n	8013454 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80132f6:	69bb      	ldr	r3, [r7, #24]
 80132f8:	2200      	movs	r2, #0
 80132fa:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80132fc:	69bb      	ldr	r3, [r7, #24]
 80132fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013304:	d019      	beq.n	801333a <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8013306:	69bb      	ldr	r3, [r7, #24]
 8013308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801330a:	331e      	adds	r3, #30
 801330c:	4a57      	ldr	r2, [pc, #348]	; (801346c <dhcp_bind+0x1b0>)
 801330e:	fba2 2303 	umull	r2, r3, r2, r3
 8013312:	095b      	lsrs	r3, r3, #5
 8013314:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8013316:	69fb      	ldr	r3, [r7, #28]
 8013318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801331c:	d302      	bcc.n	8013324 <dhcp_bind+0x68>
      timeout = 0xffff;
 801331e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013322:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8013324:	69fb      	ldr	r3, [r7, #28]
 8013326:	b29a      	uxth	r2, r3
 8013328:	69bb      	ldr	r3, [r7, #24]
 801332a:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 801332c:	69bb      	ldr	r3, [r7, #24]
 801332e:	8a9b      	ldrh	r3, [r3, #20]
 8013330:	2b00      	cmp	r3, #0
 8013332:	d102      	bne.n	801333a <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8013334:	69bb      	ldr	r3, [r7, #24]
 8013336:	2201      	movs	r2, #1
 8013338:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801333a:	69bb      	ldr	r3, [r7, #24]
 801333c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801333e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013342:	d01d      	beq.n	8013380 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8013344:	69bb      	ldr	r3, [r7, #24]
 8013346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013348:	331e      	adds	r3, #30
 801334a:	4a48      	ldr	r2, [pc, #288]	; (801346c <dhcp_bind+0x1b0>)
 801334c:	fba2 2303 	umull	r2, r3, r2, r3
 8013350:	095b      	lsrs	r3, r3, #5
 8013352:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8013354:	69fb      	ldr	r3, [r7, #28]
 8013356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801335a:	d302      	bcc.n	8013362 <dhcp_bind+0xa6>
      timeout = 0xffff;
 801335c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013360:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8013362:	69fb      	ldr	r3, [r7, #28]
 8013364:	b29a      	uxth	r2, r3
 8013366:	69bb      	ldr	r3, [r7, #24]
 8013368:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801336a:	69bb      	ldr	r3, [r7, #24]
 801336c:	895b      	ldrh	r3, [r3, #10]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d102      	bne.n	8013378 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8013372:	69bb      	ldr	r3, [r7, #24]
 8013374:	2201      	movs	r2, #1
 8013376:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8013378:	69bb      	ldr	r3, [r7, #24]
 801337a:	895a      	ldrh	r2, [r3, #10]
 801337c:	69bb      	ldr	r3, [r7, #24]
 801337e:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8013380:	69bb      	ldr	r3, [r7, #24]
 8013382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013388:	d01d      	beq.n	80133c6 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801338a:	69bb      	ldr	r3, [r7, #24]
 801338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801338e:	331e      	adds	r3, #30
 8013390:	4a36      	ldr	r2, [pc, #216]	; (801346c <dhcp_bind+0x1b0>)
 8013392:	fba2 2303 	umull	r2, r3, r2, r3
 8013396:	095b      	lsrs	r3, r3, #5
 8013398:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801339a:	69fb      	ldr	r3, [r7, #28]
 801339c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80133a0:	d302      	bcc.n	80133a8 <dhcp_bind+0xec>
      timeout = 0xffff;
 80133a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80133a6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80133a8:	69fb      	ldr	r3, [r7, #28]
 80133aa:	b29a      	uxth	r2, r3
 80133ac:	69bb      	ldr	r3, [r7, #24]
 80133ae:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80133b0:	69bb      	ldr	r3, [r7, #24]
 80133b2:	899b      	ldrh	r3, [r3, #12]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d102      	bne.n	80133be <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80133b8:	69bb      	ldr	r3, [r7, #24]
 80133ba:	2201      	movs	r2, #1
 80133bc:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80133be:	69bb      	ldr	r3, [r7, #24]
 80133c0:	899a      	ldrh	r2, [r3, #12]
 80133c2:	69bb      	ldr	r3, [r7, #24]
 80133c4:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80133c6:	69bb      	ldr	r3, [r7, #24]
 80133c8:	895a      	ldrh	r2, [r3, #10]
 80133ca:	69bb      	ldr	r3, [r7, #24]
 80133cc:	899b      	ldrh	r3, [r3, #12]
 80133ce:	429a      	cmp	r2, r3
 80133d0:	d306      	bcc.n	80133e0 <dhcp_bind+0x124>
 80133d2:	69bb      	ldr	r3, [r7, #24]
 80133d4:	899b      	ldrh	r3, [r3, #12]
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d002      	beq.n	80133e0 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80133da:	69bb      	ldr	r3, [r7, #24]
 80133dc:	2200      	movs	r2, #0
 80133de:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80133e0:	69bb      	ldr	r3, [r7, #24]
 80133e2:	79db      	ldrb	r3, [r3, #7]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d003      	beq.n	80133f0 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80133e8:	69bb      	ldr	r3, [r7, #24]
 80133ea:	6a1b      	ldr	r3, [r3, #32]
 80133ec:	613b      	str	r3, [r7, #16]
 80133ee:	e014      	b.n	801341a <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80133f0:	69bb      	ldr	r3, [r7, #24]
 80133f2:	331c      	adds	r3, #28
 80133f4:	781b      	ldrb	r3, [r3, #0]
 80133f6:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80133f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	db02      	blt.n	8013406 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8013400:	23ff      	movs	r3, #255	; 0xff
 8013402:	613b      	str	r3, [r7, #16]
 8013404:	e009      	b.n	801341a <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8013406:	7dfb      	ldrb	r3, [r7, #23]
 8013408:	2bbf      	cmp	r3, #191	; 0xbf
 801340a:	d903      	bls.n	8013414 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801340c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8013410:	613b      	str	r3, [r7, #16]
 8013412:	e002      	b.n	801341a <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8013414:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013418:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801341a:	69bb      	ldr	r3, [r7, #24]
 801341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801341e:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	2b00      	cmp	r3, #0
 8013424:	d108      	bne.n	8013438 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8013426:	69bb      	ldr	r3, [r7, #24]
 8013428:	69da      	ldr	r2, [r3, #28]
 801342a:	693b      	ldr	r3, [r7, #16]
 801342c:	4013      	ands	r3, r2
 801342e:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013436:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8013438:	210a      	movs	r1, #10
 801343a:	69b8      	ldr	r0, [r7, #24]
 801343c:	f000 faa0 	bl	8013980 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8013440:	69bb      	ldr	r3, [r7, #24]
 8013442:	f103 011c 	add.w	r1, r3, #28
 8013446:	f107 030c 	add.w	r3, r7, #12
 801344a:	f107 0210 	add.w	r2, r7, #16
 801344e:	6878      	ldr	r0, [r7, #4]
 8013450:	f7f7 fbfa 	bl	800ac48 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8013454:	3720      	adds	r7, #32
 8013456:	46bd      	mov	sp, r7
 8013458:	bd80      	pop	{r7, pc}
 801345a:	bf00      	nop
 801345c:	0801aae0 	.word	0x0801aae0
 8013460:	0801ac40 	.word	0x0801ac40
 8013464:	0801ab40 	.word	0x0801ab40
 8013468:	0801ac5c 	.word	0x0801ac5c
 801346c:	88888889 	.word	0x88888889

08013470 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8013470:	b580      	push	{r7, lr}
 8013472:	b08a      	sub	sp, #40	; 0x28
 8013474:	af02      	add	r7, sp, #8
 8013476:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	6a1b      	ldr	r3, [r3, #32]
 801347c:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801347e:	2105      	movs	r1, #5
 8013480:	69b8      	ldr	r0, [r7, #24]
 8013482:	f000 fa7d 	bl	8013980 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013486:	f107 030c 	add.w	r3, r7, #12
 801348a:	2203      	movs	r2, #3
 801348c:	69b9      	ldr	r1, [r7, #24]
 801348e:	6878      	ldr	r0, [r7, #4]
 8013490:	f000 ff00 	bl	8014294 <dhcp_create_msg>
 8013494:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013496:	697b      	ldr	r3, [r7, #20]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d04e      	beq.n	801353a <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801349c:	697b      	ldr	r3, [r7, #20]
 801349e:	685b      	ldr	r3, [r3, #4]
 80134a0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80134a2:	89b8      	ldrh	r0, [r7, #12]
 80134a4:	693b      	ldr	r3, [r7, #16]
 80134a6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80134aa:	2302      	movs	r3, #2
 80134ac:	2239      	movs	r2, #57	; 0x39
 80134ae:	f000 fa81 	bl	80139b4 <dhcp_option>
 80134b2:	4603      	mov	r3, r0
 80134b4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80134b6:	89b8      	ldrh	r0, [r7, #12]
 80134b8:	693b      	ldr	r3, [r7, #16]
 80134ba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80134c2:	461a      	mov	r2, r3
 80134c4:	f000 fad0 	bl	8013a68 <dhcp_option_short>
 80134c8:	4603      	mov	r3, r0
 80134ca:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80134cc:	89b8      	ldrh	r0, [r7, #12]
 80134ce:	693b      	ldr	r3, [r7, #16]
 80134d0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80134d4:	2303      	movs	r3, #3
 80134d6:	2237      	movs	r2, #55	; 0x37
 80134d8:	f000 fa6c 	bl	80139b4 <dhcp_option>
 80134dc:	4603      	mov	r3, r0
 80134de:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80134e0:	2300      	movs	r3, #0
 80134e2:	77bb      	strb	r3, [r7, #30]
 80134e4:	e00e      	b.n	8013504 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80134e6:	89b8      	ldrh	r0, [r7, #12]
 80134e8:	693b      	ldr	r3, [r7, #16]
 80134ea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80134ee:	7fbb      	ldrb	r3, [r7, #30]
 80134f0:	4a2a      	ldr	r2, [pc, #168]	; (801359c <dhcp_renew+0x12c>)
 80134f2:	5cd3      	ldrb	r3, [r2, r3]
 80134f4:	461a      	mov	r2, r3
 80134f6:	f000 fa91 	bl	8013a1c <dhcp_option_byte>
 80134fa:	4603      	mov	r3, r0
 80134fc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80134fe:	7fbb      	ldrb	r3, [r7, #30]
 8013500:	3301      	adds	r3, #1
 8013502:	77bb      	strb	r3, [r7, #30]
 8013504:	7fbb      	ldrb	r3, [r7, #30]
 8013506:	2b02      	cmp	r3, #2
 8013508:	d9ed      	bls.n	80134e6 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801350a:	89b8      	ldrh	r0, [r7, #12]
 801350c:	693b      	ldr	r3, [r7, #16]
 801350e:	33f0      	adds	r3, #240	; 0xf0
 8013510:	697a      	ldr	r2, [r7, #20]
 8013512:	4619      	mov	r1, r3
 8013514:	f000 ff94 	bl	8014440 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013518:	4b21      	ldr	r3, [pc, #132]	; (80135a0 <dhcp_renew+0x130>)
 801351a:	6818      	ldr	r0, [r3, #0]
 801351c:	69bb      	ldr	r3, [r7, #24]
 801351e:	f103 0218 	add.w	r2, r3, #24
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	9300      	str	r3, [sp, #0]
 8013526:	2343      	movs	r3, #67	; 0x43
 8013528:	6979      	ldr	r1, [r7, #20]
 801352a:	f7fe fe83 	bl	8012234 <udp_sendto_if>
 801352e:	4603      	mov	r3, r0
 8013530:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013532:	6978      	ldr	r0, [r7, #20]
 8013534:	f7f8 f818 	bl	800b568 <pbuf_free>
 8013538:	e001      	b.n	801353e <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801353a:	23ff      	movs	r3, #255	; 0xff
 801353c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801353e:	69bb      	ldr	r3, [r7, #24]
 8013540:	799b      	ldrb	r3, [r3, #6]
 8013542:	2bff      	cmp	r3, #255	; 0xff
 8013544:	d005      	beq.n	8013552 <dhcp_renew+0xe2>
    dhcp->tries++;
 8013546:	69bb      	ldr	r3, [r7, #24]
 8013548:	799b      	ldrb	r3, [r3, #6]
 801354a:	3301      	adds	r3, #1
 801354c:	b2da      	uxtb	r2, r3
 801354e:	69bb      	ldr	r3, [r7, #24]
 8013550:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8013552:	69bb      	ldr	r3, [r7, #24]
 8013554:	799b      	ldrb	r3, [r3, #6]
 8013556:	2b09      	cmp	r3, #9
 8013558:	d80a      	bhi.n	8013570 <dhcp_renew+0x100>
 801355a:	69bb      	ldr	r3, [r7, #24]
 801355c:	799b      	ldrb	r3, [r3, #6]
 801355e:	b29b      	uxth	r3, r3
 8013560:	461a      	mov	r2, r3
 8013562:	0152      	lsls	r2, r2, #5
 8013564:	1ad2      	subs	r2, r2, r3
 8013566:	0092      	lsls	r2, r2, #2
 8013568:	4413      	add	r3, r2
 801356a:	011b      	lsls	r3, r3, #4
 801356c:	b29b      	uxth	r3, r3
 801356e:	e001      	b.n	8013574 <dhcp_renew+0x104>
 8013570:	f644 6320 	movw	r3, #20000	; 0x4e20
 8013574:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013576:	89fb      	ldrh	r3, [r7, #14]
 8013578:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801357c:	4a09      	ldr	r2, [pc, #36]	; (80135a4 <dhcp_renew+0x134>)
 801357e:	fb82 1203 	smull	r1, r2, r2, r3
 8013582:	1152      	asrs	r2, r2, #5
 8013584:	17db      	asrs	r3, r3, #31
 8013586:	1ad3      	subs	r3, r2, r3
 8013588:	b29a      	uxth	r2, r3
 801358a:	69bb      	ldr	r3, [r7, #24]
 801358c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801358e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013592:	4618      	mov	r0, r3
 8013594:	3720      	adds	r7, #32
 8013596:	46bd      	mov	sp, r7
 8013598:	bd80      	pop	{r7, pc}
 801359a:	bf00      	nop
 801359c:	2000003c 	.word	0x2000003c
 80135a0:	200081fc 	.word	0x200081fc
 80135a4:	10624dd3 	.word	0x10624dd3

080135a8 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80135a8:	b580      	push	{r7, lr}
 80135aa:	b08a      	sub	sp, #40	; 0x28
 80135ac:	af02      	add	r7, sp, #8
 80135ae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	6a1b      	ldr	r3, [r3, #32]
 80135b4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80135b6:	2104      	movs	r1, #4
 80135b8:	69b8      	ldr	r0, [r7, #24]
 80135ba:	f000 f9e1 	bl	8013980 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80135be:	f107 030c 	add.w	r3, r7, #12
 80135c2:	2203      	movs	r2, #3
 80135c4:	69b9      	ldr	r1, [r7, #24]
 80135c6:	6878      	ldr	r0, [r7, #4]
 80135c8:	f000 fe64 	bl	8014294 <dhcp_create_msg>
 80135cc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80135ce:	697b      	ldr	r3, [r7, #20]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d04c      	beq.n	801366e <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80135d4:	697b      	ldr	r3, [r7, #20]
 80135d6:	685b      	ldr	r3, [r3, #4]
 80135d8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80135da:	89b8      	ldrh	r0, [r7, #12]
 80135dc:	693b      	ldr	r3, [r7, #16]
 80135de:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80135e2:	2302      	movs	r3, #2
 80135e4:	2239      	movs	r2, #57	; 0x39
 80135e6:	f000 f9e5 	bl	80139b4 <dhcp_option>
 80135ea:	4603      	mov	r3, r0
 80135ec:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80135ee:	89b8      	ldrh	r0, [r7, #12]
 80135f0:	693b      	ldr	r3, [r7, #16]
 80135f2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80135fa:	461a      	mov	r2, r3
 80135fc:	f000 fa34 	bl	8013a68 <dhcp_option_short>
 8013600:	4603      	mov	r3, r0
 8013602:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013604:	89b8      	ldrh	r0, [r7, #12]
 8013606:	693b      	ldr	r3, [r7, #16]
 8013608:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801360c:	2303      	movs	r3, #3
 801360e:	2237      	movs	r2, #55	; 0x37
 8013610:	f000 f9d0 	bl	80139b4 <dhcp_option>
 8013614:	4603      	mov	r3, r0
 8013616:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013618:	2300      	movs	r3, #0
 801361a:	77bb      	strb	r3, [r7, #30]
 801361c:	e00e      	b.n	801363c <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801361e:	89b8      	ldrh	r0, [r7, #12]
 8013620:	693b      	ldr	r3, [r7, #16]
 8013622:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013626:	7fbb      	ldrb	r3, [r7, #30]
 8013628:	4a29      	ldr	r2, [pc, #164]	; (80136d0 <dhcp_rebind+0x128>)
 801362a:	5cd3      	ldrb	r3, [r2, r3]
 801362c:	461a      	mov	r2, r3
 801362e:	f000 f9f5 	bl	8013a1c <dhcp_option_byte>
 8013632:	4603      	mov	r3, r0
 8013634:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013636:	7fbb      	ldrb	r3, [r7, #30]
 8013638:	3301      	adds	r3, #1
 801363a:	77bb      	strb	r3, [r7, #30]
 801363c:	7fbb      	ldrb	r3, [r7, #30]
 801363e:	2b02      	cmp	r3, #2
 8013640:	d9ed      	bls.n	801361e <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013642:	89b8      	ldrh	r0, [r7, #12]
 8013644:	693b      	ldr	r3, [r7, #16]
 8013646:	33f0      	adds	r3, #240	; 0xf0
 8013648:	697a      	ldr	r2, [r7, #20]
 801364a:	4619      	mov	r1, r3
 801364c:	f000 fef8 	bl	8014440 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013650:	4b20      	ldr	r3, [pc, #128]	; (80136d4 <dhcp_rebind+0x12c>)
 8013652:	6818      	ldr	r0, [r3, #0]
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	9300      	str	r3, [sp, #0]
 8013658:	2343      	movs	r3, #67	; 0x43
 801365a:	4a1f      	ldr	r2, [pc, #124]	; (80136d8 <dhcp_rebind+0x130>)
 801365c:	6979      	ldr	r1, [r7, #20]
 801365e:	f7fe fde9 	bl	8012234 <udp_sendto_if>
 8013662:	4603      	mov	r3, r0
 8013664:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013666:	6978      	ldr	r0, [r7, #20]
 8013668:	f7f7 ff7e 	bl	800b568 <pbuf_free>
 801366c:	e001      	b.n	8013672 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801366e:	23ff      	movs	r3, #255	; 0xff
 8013670:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013672:	69bb      	ldr	r3, [r7, #24]
 8013674:	799b      	ldrb	r3, [r3, #6]
 8013676:	2bff      	cmp	r3, #255	; 0xff
 8013678:	d005      	beq.n	8013686 <dhcp_rebind+0xde>
    dhcp->tries++;
 801367a:	69bb      	ldr	r3, [r7, #24]
 801367c:	799b      	ldrb	r3, [r3, #6]
 801367e:	3301      	adds	r3, #1
 8013680:	b2da      	uxtb	r2, r3
 8013682:	69bb      	ldr	r3, [r7, #24]
 8013684:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8013686:	69bb      	ldr	r3, [r7, #24]
 8013688:	799b      	ldrb	r3, [r3, #6]
 801368a:	2b09      	cmp	r3, #9
 801368c:	d80a      	bhi.n	80136a4 <dhcp_rebind+0xfc>
 801368e:	69bb      	ldr	r3, [r7, #24]
 8013690:	799b      	ldrb	r3, [r3, #6]
 8013692:	b29b      	uxth	r3, r3
 8013694:	461a      	mov	r2, r3
 8013696:	0152      	lsls	r2, r2, #5
 8013698:	1ad2      	subs	r2, r2, r3
 801369a:	0092      	lsls	r2, r2, #2
 801369c:	4413      	add	r3, r2
 801369e:	00db      	lsls	r3, r3, #3
 80136a0:	b29b      	uxth	r3, r3
 80136a2:	e001      	b.n	80136a8 <dhcp_rebind+0x100>
 80136a4:	f242 7310 	movw	r3, #10000	; 0x2710
 80136a8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80136aa:	89fb      	ldrh	r3, [r7, #14]
 80136ac:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80136b0:	4a0a      	ldr	r2, [pc, #40]	; (80136dc <dhcp_rebind+0x134>)
 80136b2:	fb82 1203 	smull	r1, r2, r2, r3
 80136b6:	1152      	asrs	r2, r2, #5
 80136b8:	17db      	asrs	r3, r3, #31
 80136ba:	1ad3      	subs	r3, r2, r3
 80136bc:	b29a      	uxth	r2, r3
 80136be:	69bb      	ldr	r3, [r7, #24]
 80136c0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80136c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80136c6:	4618      	mov	r0, r3
 80136c8:	3720      	adds	r7, #32
 80136ca:	46bd      	mov	sp, r7
 80136cc:	bd80      	pop	{r7, pc}
 80136ce:	bf00      	nop
 80136d0:	2000003c 	.word	0x2000003c
 80136d4:	200081fc 	.word	0x200081fc
 80136d8:	0801faac 	.word	0x0801faac
 80136dc:	10624dd3 	.word	0x10624dd3

080136e0 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80136e0:	b5b0      	push	{r4, r5, r7, lr}
 80136e2:	b08a      	sub	sp, #40	; 0x28
 80136e4:	af02      	add	r7, sp, #8
 80136e6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	6a1b      	ldr	r3, [r3, #32]
 80136ec:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80136ee:	2103      	movs	r1, #3
 80136f0:	69b8      	ldr	r0, [r7, #24]
 80136f2:	f000 f945 	bl	8013980 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80136f6:	f107 030c 	add.w	r3, r7, #12
 80136fa:	2203      	movs	r2, #3
 80136fc:	69b9      	ldr	r1, [r7, #24]
 80136fe:	6878      	ldr	r0, [r7, #4]
 8013700:	f000 fdc8 	bl	8014294 <dhcp_create_msg>
 8013704:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013706:	697b      	ldr	r3, [r7, #20]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d066      	beq.n	80137da <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801370c:	697b      	ldr	r3, [r7, #20]
 801370e:	685b      	ldr	r3, [r3, #4]
 8013710:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013712:	89b8      	ldrh	r0, [r7, #12]
 8013714:	693b      	ldr	r3, [r7, #16]
 8013716:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801371a:	2302      	movs	r3, #2
 801371c:	2239      	movs	r2, #57	; 0x39
 801371e:	f000 f949 	bl	80139b4 <dhcp_option>
 8013722:	4603      	mov	r3, r0
 8013724:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8013726:	89b8      	ldrh	r0, [r7, #12]
 8013728:	693b      	ldr	r3, [r7, #16]
 801372a:	33f0      	adds	r3, #240	; 0xf0
 801372c:	f44f 7210 	mov.w	r2, #576	; 0x240
 8013730:	4619      	mov	r1, r3
 8013732:	f000 f999 	bl	8013a68 <dhcp_option_short>
 8013736:	4603      	mov	r3, r0
 8013738:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801373a:	89b8      	ldrh	r0, [r7, #12]
 801373c:	693b      	ldr	r3, [r7, #16]
 801373e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013742:	2304      	movs	r3, #4
 8013744:	2232      	movs	r2, #50	; 0x32
 8013746:	f000 f935 	bl	80139b4 <dhcp_option>
 801374a:	4603      	mov	r3, r0
 801374c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801374e:	89bc      	ldrh	r4, [r7, #12]
 8013750:	693b      	ldr	r3, [r7, #16]
 8013752:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013756:	69bb      	ldr	r3, [r7, #24]
 8013758:	69db      	ldr	r3, [r3, #28]
 801375a:	4618      	mov	r0, r3
 801375c:	f7f6 fbe3 	bl	8009f26 <lwip_htonl>
 8013760:	4603      	mov	r3, r0
 8013762:	461a      	mov	r2, r3
 8013764:	4629      	mov	r1, r5
 8013766:	4620      	mov	r0, r4
 8013768:	f000 f9b0 	bl	8013acc <dhcp_option_long>
 801376c:	4603      	mov	r3, r0
 801376e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013770:	89b8      	ldrh	r0, [r7, #12]
 8013772:	693b      	ldr	r3, [r7, #16]
 8013774:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013778:	2303      	movs	r3, #3
 801377a:	2237      	movs	r2, #55	; 0x37
 801377c:	f000 f91a 	bl	80139b4 <dhcp_option>
 8013780:	4603      	mov	r3, r0
 8013782:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013784:	2300      	movs	r3, #0
 8013786:	77bb      	strb	r3, [r7, #30]
 8013788:	e00e      	b.n	80137a8 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801378a:	89b8      	ldrh	r0, [r7, #12]
 801378c:	693b      	ldr	r3, [r7, #16]
 801378e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013792:	7fbb      	ldrb	r3, [r7, #30]
 8013794:	4a29      	ldr	r2, [pc, #164]	; (801383c <dhcp_reboot+0x15c>)
 8013796:	5cd3      	ldrb	r3, [r2, r3]
 8013798:	461a      	mov	r2, r3
 801379a:	f000 f93f 	bl	8013a1c <dhcp_option_byte>
 801379e:	4603      	mov	r3, r0
 80137a0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80137a2:	7fbb      	ldrb	r3, [r7, #30]
 80137a4:	3301      	adds	r3, #1
 80137a6:	77bb      	strb	r3, [r7, #30]
 80137a8:	7fbb      	ldrb	r3, [r7, #30]
 80137aa:	2b02      	cmp	r3, #2
 80137ac:	d9ed      	bls.n	801378a <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80137ae:	89b8      	ldrh	r0, [r7, #12]
 80137b0:	693b      	ldr	r3, [r7, #16]
 80137b2:	33f0      	adds	r3, #240	; 0xf0
 80137b4:	697a      	ldr	r2, [r7, #20]
 80137b6:	4619      	mov	r1, r3
 80137b8:	f000 fe42 	bl	8014440 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80137bc:	4b20      	ldr	r3, [pc, #128]	; (8013840 <dhcp_reboot+0x160>)
 80137be:	6818      	ldr	r0, [r3, #0]
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	9300      	str	r3, [sp, #0]
 80137c4:	2343      	movs	r3, #67	; 0x43
 80137c6:	4a1f      	ldr	r2, [pc, #124]	; (8013844 <dhcp_reboot+0x164>)
 80137c8:	6979      	ldr	r1, [r7, #20]
 80137ca:	f7fe fd33 	bl	8012234 <udp_sendto_if>
 80137ce:	4603      	mov	r3, r0
 80137d0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80137d2:	6978      	ldr	r0, [r7, #20]
 80137d4:	f7f7 fec8 	bl	800b568 <pbuf_free>
 80137d8:	e001      	b.n	80137de <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80137da:	23ff      	movs	r3, #255	; 0xff
 80137dc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80137de:	69bb      	ldr	r3, [r7, #24]
 80137e0:	799b      	ldrb	r3, [r3, #6]
 80137e2:	2bff      	cmp	r3, #255	; 0xff
 80137e4:	d005      	beq.n	80137f2 <dhcp_reboot+0x112>
    dhcp->tries++;
 80137e6:	69bb      	ldr	r3, [r7, #24]
 80137e8:	799b      	ldrb	r3, [r3, #6]
 80137ea:	3301      	adds	r3, #1
 80137ec:	b2da      	uxtb	r2, r3
 80137ee:	69bb      	ldr	r3, [r7, #24]
 80137f0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80137f2:	69bb      	ldr	r3, [r7, #24]
 80137f4:	799b      	ldrb	r3, [r3, #6]
 80137f6:	2b09      	cmp	r3, #9
 80137f8:	d80a      	bhi.n	8013810 <dhcp_reboot+0x130>
 80137fa:	69bb      	ldr	r3, [r7, #24]
 80137fc:	799b      	ldrb	r3, [r3, #6]
 80137fe:	b29b      	uxth	r3, r3
 8013800:	461a      	mov	r2, r3
 8013802:	0152      	lsls	r2, r2, #5
 8013804:	1ad2      	subs	r2, r2, r3
 8013806:	0092      	lsls	r2, r2, #2
 8013808:	4413      	add	r3, r2
 801380a:	00db      	lsls	r3, r3, #3
 801380c:	b29b      	uxth	r3, r3
 801380e:	e001      	b.n	8013814 <dhcp_reboot+0x134>
 8013810:	f242 7310 	movw	r3, #10000	; 0x2710
 8013814:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013816:	89fb      	ldrh	r3, [r7, #14]
 8013818:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801381c:	4a0a      	ldr	r2, [pc, #40]	; (8013848 <dhcp_reboot+0x168>)
 801381e:	fb82 1203 	smull	r1, r2, r2, r3
 8013822:	1152      	asrs	r2, r2, #5
 8013824:	17db      	asrs	r3, r3, #31
 8013826:	1ad3      	subs	r3, r2, r3
 8013828:	b29a      	uxth	r2, r3
 801382a:	69bb      	ldr	r3, [r7, #24]
 801382c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801382e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013832:	4618      	mov	r0, r3
 8013834:	3720      	adds	r7, #32
 8013836:	46bd      	mov	sp, r7
 8013838:	bdb0      	pop	{r4, r5, r7, pc}
 801383a:	bf00      	nop
 801383c:	2000003c 	.word	0x2000003c
 8013840:	200081fc 	.word	0x200081fc
 8013844:	0801faac 	.word	0x0801faac
 8013848:	10624dd3 	.word	0x10624dd3

0801384c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801384c:	b5b0      	push	{r4, r5, r7, lr}
 801384e:	b08a      	sub	sp, #40	; 0x28
 8013850:	af02      	add	r7, sp, #8
 8013852:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	6a1b      	ldr	r3, [r3, #32]
 8013858:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801385a:	69fb      	ldr	r3, [r7, #28]
 801385c:	2b00      	cmp	r3, #0
 801385e:	f000 8084 	beq.w	801396a <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8013862:	69fb      	ldr	r3, [r7, #28]
 8013864:	795b      	ldrb	r3, [r3, #5]
 8013866:	2b00      	cmp	r3, #0
 8013868:	f000 8081 	beq.w	801396e <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801386c:	69fb      	ldr	r3, [r7, #28]
 801386e:	699b      	ldr	r3, [r3, #24]
 8013870:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8013872:	69fb      	ldr	r3, [r7, #28]
 8013874:	2200      	movs	r2, #0
 8013876:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8013878:	69fb      	ldr	r3, [r7, #28]
 801387a:	2200      	movs	r2, #0
 801387c:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801387e:	69fb      	ldr	r3, [r7, #28]
 8013880:	2200      	movs	r2, #0
 8013882:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8013884:	69fb      	ldr	r3, [r7, #28]
 8013886:	2200      	movs	r2, #0
 8013888:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801388a:	69fb      	ldr	r3, [r7, #28]
 801388c:	2200      	movs	r2, #0
 801388e:	631a      	str	r2, [r3, #48]	; 0x30
 8013890:	69fb      	ldr	r3, [r7, #28]
 8013892:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013894:	69fb      	ldr	r3, [r7, #28]
 8013896:	62da      	str	r2, [r3, #44]	; 0x2c
 8013898:	69fb      	ldr	r3, [r7, #28]
 801389a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801389c:	69fb      	ldr	r3, [r7, #28]
 801389e:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80138a0:	69fb      	ldr	r3, [r7, #28]
 80138a2:	2200      	movs	r2, #0
 80138a4:	829a      	strh	r2, [r3, #20]
 80138a6:	69fb      	ldr	r3, [r7, #28]
 80138a8:	8a9a      	ldrh	r2, [r3, #20]
 80138aa:	69fb      	ldr	r3, [r7, #28]
 80138ac:	825a      	strh	r2, [r3, #18]
 80138ae:	69fb      	ldr	r3, [r7, #28]
 80138b0:	8a5a      	ldrh	r2, [r3, #18]
 80138b2:	69fb      	ldr	r3, [r7, #28]
 80138b4:	821a      	strh	r2, [r3, #16]
 80138b6:	69fb      	ldr	r3, [r7, #28]
 80138b8:	8a1a      	ldrh	r2, [r3, #16]
 80138ba:	69fb      	ldr	r3, [r7, #28]
 80138bc:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80138be:	6878      	ldr	r0, [r7, #4]
 80138c0:	f000 fdec 	bl	801449c <dhcp_supplied_address>
 80138c4:	4603      	mov	r3, r0
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d03b      	beq.n	8013942 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80138ca:	f107 030e 	add.w	r3, r7, #14
 80138ce:	2207      	movs	r2, #7
 80138d0:	69f9      	ldr	r1, [r7, #28]
 80138d2:	6878      	ldr	r0, [r7, #4]
 80138d4:	f000 fcde 	bl	8014294 <dhcp_create_msg>
 80138d8:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80138da:	69bb      	ldr	r3, [r7, #24]
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d030      	beq.n	8013942 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80138e0:	69bb      	ldr	r3, [r7, #24]
 80138e2:	685b      	ldr	r3, [r3, #4]
 80138e4:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80138e6:	89f8      	ldrh	r0, [r7, #14]
 80138e8:	697b      	ldr	r3, [r7, #20]
 80138ea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80138ee:	2304      	movs	r3, #4
 80138f0:	2236      	movs	r2, #54	; 0x36
 80138f2:	f000 f85f 	bl	80139b4 <dhcp_option>
 80138f6:	4603      	mov	r3, r0
 80138f8:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80138fa:	89fc      	ldrh	r4, [r7, #14]
 80138fc:	697b      	ldr	r3, [r7, #20]
 80138fe:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013902:	693b      	ldr	r3, [r7, #16]
 8013904:	4618      	mov	r0, r3
 8013906:	f7f6 fb0e 	bl	8009f26 <lwip_htonl>
 801390a:	4603      	mov	r3, r0
 801390c:	461a      	mov	r2, r3
 801390e:	4629      	mov	r1, r5
 8013910:	4620      	mov	r0, r4
 8013912:	f000 f8db 	bl	8013acc <dhcp_option_long>
 8013916:	4603      	mov	r3, r0
 8013918:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801391a:	89f8      	ldrh	r0, [r7, #14]
 801391c:	697b      	ldr	r3, [r7, #20]
 801391e:	33f0      	adds	r3, #240	; 0xf0
 8013920:	69ba      	ldr	r2, [r7, #24]
 8013922:	4619      	mov	r1, r3
 8013924:	f000 fd8c 	bl	8014440 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013928:	4b13      	ldr	r3, [pc, #76]	; (8013978 <dhcp_release_and_stop+0x12c>)
 801392a:	6818      	ldr	r0, [r3, #0]
 801392c:	f107 0210 	add.w	r2, r7, #16
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	9300      	str	r3, [sp, #0]
 8013934:	2343      	movs	r3, #67	; 0x43
 8013936:	69b9      	ldr	r1, [r7, #24]
 8013938:	f7fe fc7c 	bl	8012234 <udp_sendto_if>
      pbuf_free(p_out);
 801393c:	69b8      	ldr	r0, [r7, #24]
 801393e:	f7f7 fe13 	bl	800b568 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8013942:	4b0e      	ldr	r3, [pc, #56]	; (801397c <dhcp_release_and_stop+0x130>)
 8013944:	4a0d      	ldr	r2, [pc, #52]	; (801397c <dhcp_release_and_stop+0x130>)
 8013946:	490d      	ldr	r1, [pc, #52]	; (801397c <dhcp_release_and_stop+0x130>)
 8013948:	6878      	ldr	r0, [r7, #4]
 801394a:	f7f7 f97d 	bl	800ac48 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801394e:	2100      	movs	r1, #0
 8013950:	69f8      	ldr	r0, [r7, #28]
 8013952:	f000 f815 	bl	8013980 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8013956:	69fb      	ldr	r3, [r7, #28]
 8013958:	791b      	ldrb	r3, [r3, #4]
 801395a:	2b00      	cmp	r3, #0
 801395c:	d008      	beq.n	8013970 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801395e:	f7fe ffc1 	bl	80128e4 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8013962:	69fb      	ldr	r3, [r7, #28]
 8013964:	2200      	movs	r2, #0
 8013966:	711a      	strb	r2, [r3, #4]
 8013968:	e002      	b.n	8013970 <dhcp_release_and_stop+0x124>
    return;
 801396a:	bf00      	nop
 801396c:	e000      	b.n	8013970 <dhcp_release_and_stop+0x124>
    return;
 801396e:	bf00      	nop
  }
}
 8013970:	3720      	adds	r7, #32
 8013972:	46bd      	mov	sp, r7
 8013974:	bdb0      	pop	{r4, r5, r7, pc}
 8013976:	bf00      	nop
 8013978:	200081fc 	.word	0x200081fc
 801397c:	0801faa8 	.word	0x0801faa8

08013980 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8013980:	b480      	push	{r7}
 8013982:	b083      	sub	sp, #12
 8013984:	af00      	add	r7, sp, #0
 8013986:	6078      	str	r0, [r7, #4]
 8013988:	460b      	mov	r3, r1
 801398a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	795b      	ldrb	r3, [r3, #5]
 8013990:	78fa      	ldrb	r2, [r7, #3]
 8013992:	429a      	cmp	r2, r3
 8013994:	d008      	beq.n	80139a8 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	78fa      	ldrb	r2, [r7, #3]
 801399a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	2200      	movs	r2, #0
 80139a0:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	2200      	movs	r2, #0
 80139a6:	811a      	strh	r2, [r3, #8]
  }
}
 80139a8:	bf00      	nop
 80139aa:	370c      	adds	r7, #12
 80139ac:	46bd      	mov	sp, r7
 80139ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139b2:	4770      	bx	lr

080139b4 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 80139b4:	b580      	push	{r7, lr}
 80139b6:	b082      	sub	sp, #8
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	6039      	str	r1, [r7, #0]
 80139bc:	4611      	mov	r1, r2
 80139be:	461a      	mov	r2, r3
 80139c0:	4603      	mov	r3, r0
 80139c2:	80fb      	strh	r3, [r7, #6]
 80139c4:	460b      	mov	r3, r1
 80139c6:	717b      	strb	r3, [r7, #5]
 80139c8:	4613      	mov	r3, r2
 80139ca:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80139cc:	88fa      	ldrh	r2, [r7, #6]
 80139ce:	793b      	ldrb	r3, [r7, #4]
 80139d0:	4413      	add	r3, r2
 80139d2:	3302      	adds	r3, #2
 80139d4:	2b44      	cmp	r3, #68	; 0x44
 80139d6:	d906      	bls.n	80139e6 <dhcp_option+0x32>
 80139d8:	4b0d      	ldr	r3, [pc, #52]	; (8013a10 <dhcp_option+0x5c>)
 80139da:	f240 529a 	movw	r2, #1434	; 0x59a
 80139de:	490d      	ldr	r1, [pc, #52]	; (8013a14 <dhcp_option+0x60>)
 80139e0:	480d      	ldr	r0, [pc, #52]	; (8013a18 <dhcp_option+0x64>)
 80139e2:	f003 fab3 	bl	8016f4c <iprintf>
  options[options_out_len++] = option_type;
 80139e6:	88fb      	ldrh	r3, [r7, #6]
 80139e8:	1c5a      	adds	r2, r3, #1
 80139ea:	80fa      	strh	r2, [r7, #6]
 80139ec:	461a      	mov	r2, r3
 80139ee:	683b      	ldr	r3, [r7, #0]
 80139f0:	4413      	add	r3, r2
 80139f2:	797a      	ldrb	r2, [r7, #5]
 80139f4:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80139f6:	88fb      	ldrh	r3, [r7, #6]
 80139f8:	1c5a      	adds	r2, r3, #1
 80139fa:	80fa      	strh	r2, [r7, #6]
 80139fc:	461a      	mov	r2, r3
 80139fe:	683b      	ldr	r3, [r7, #0]
 8013a00:	4413      	add	r3, r2
 8013a02:	793a      	ldrb	r2, [r7, #4]
 8013a04:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013a06:	88fb      	ldrh	r3, [r7, #6]
}
 8013a08:	4618      	mov	r0, r3
 8013a0a:	3708      	adds	r7, #8
 8013a0c:	46bd      	mov	sp, r7
 8013a0e:	bd80      	pop	{r7, pc}
 8013a10:	0801aae0 	.word	0x0801aae0
 8013a14:	0801ac74 	.word	0x0801ac74
 8013a18:	0801ab40 	.word	0x0801ab40

08013a1c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8013a1c:	b580      	push	{r7, lr}
 8013a1e:	b082      	sub	sp, #8
 8013a20:	af00      	add	r7, sp, #0
 8013a22:	4603      	mov	r3, r0
 8013a24:	6039      	str	r1, [r7, #0]
 8013a26:	80fb      	strh	r3, [r7, #6]
 8013a28:	4613      	mov	r3, r2
 8013a2a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8013a2c:	88fb      	ldrh	r3, [r7, #6]
 8013a2e:	2b43      	cmp	r3, #67	; 0x43
 8013a30:	d906      	bls.n	8013a40 <dhcp_option_byte+0x24>
 8013a32:	4b0a      	ldr	r3, [pc, #40]	; (8013a5c <dhcp_option_byte+0x40>)
 8013a34:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8013a38:	4909      	ldr	r1, [pc, #36]	; (8013a60 <dhcp_option_byte+0x44>)
 8013a3a:	480a      	ldr	r0, [pc, #40]	; (8013a64 <dhcp_option_byte+0x48>)
 8013a3c:	f003 fa86 	bl	8016f4c <iprintf>
  options[options_out_len++] = value;
 8013a40:	88fb      	ldrh	r3, [r7, #6]
 8013a42:	1c5a      	adds	r2, r3, #1
 8013a44:	80fa      	strh	r2, [r7, #6]
 8013a46:	461a      	mov	r2, r3
 8013a48:	683b      	ldr	r3, [r7, #0]
 8013a4a:	4413      	add	r3, r2
 8013a4c:	797a      	ldrb	r2, [r7, #5]
 8013a4e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013a50:	88fb      	ldrh	r3, [r7, #6]
}
 8013a52:	4618      	mov	r0, r3
 8013a54:	3708      	adds	r7, #8
 8013a56:	46bd      	mov	sp, r7
 8013a58:	bd80      	pop	{r7, pc}
 8013a5a:	bf00      	nop
 8013a5c:	0801aae0 	.word	0x0801aae0
 8013a60:	0801acb8 	.word	0x0801acb8
 8013a64:	0801ab40 	.word	0x0801ab40

08013a68 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8013a68:	b580      	push	{r7, lr}
 8013a6a:	b082      	sub	sp, #8
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	4603      	mov	r3, r0
 8013a70:	6039      	str	r1, [r7, #0]
 8013a72:	80fb      	strh	r3, [r7, #6]
 8013a74:	4613      	mov	r3, r2
 8013a76:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8013a78:	88fb      	ldrh	r3, [r7, #6]
 8013a7a:	3302      	adds	r3, #2
 8013a7c:	2b44      	cmp	r3, #68	; 0x44
 8013a7e:	d906      	bls.n	8013a8e <dhcp_option_short+0x26>
 8013a80:	4b0f      	ldr	r3, [pc, #60]	; (8013ac0 <dhcp_option_short+0x58>)
 8013a82:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8013a86:	490f      	ldr	r1, [pc, #60]	; (8013ac4 <dhcp_option_short+0x5c>)
 8013a88:	480f      	ldr	r0, [pc, #60]	; (8013ac8 <dhcp_option_short+0x60>)
 8013a8a:	f003 fa5f 	bl	8016f4c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8013a8e:	88bb      	ldrh	r3, [r7, #4]
 8013a90:	0a1b      	lsrs	r3, r3, #8
 8013a92:	b29a      	uxth	r2, r3
 8013a94:	88fb      	ldrh	r3, [r7, #6]
 8013a96:	1c59      	adds	r1, r3, #1
 8013a98:	80f9      	strh	r1, [r7, #6]
 8013a9a:	4619      	mov	r1, r3
 8013a9c:	683b      	ldr	r3, [r7, #0]
 8013a9e:	440b      	add	r3, r1
 8013aa0:	b2d2      	uxtb	r2, r2
 8013aa2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8013aa4:	88fb      	ldrh	r3, [r7, #6]
 8013aa6:	1c5a      	adds	r2, r3, #1
 8013aa8:	80fa      	strh	r2, [r7, #6]
 8013aaa:	461a      	mov	r2, r3
 8013aac:	683b      	ldr	r3, [r7, #0]
 8013aae:	4413      	add	r3, r2
 8013ab0:	88ba      	ldrh	r2, [r7, #4]
 8013ab2:	b2d2      	uxtb	r2, r2
 8013ab4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013ab6:	88fb      	ldrh	r3, [r7, #6]
}
 8013ab8:	4618      	mov	r0, r3
 8013aba:	3708      	adds	r7, #8
 8013abc:	46bd      	mov	sp, r7
 8013abe:	bd80      	pop	{r7, pc}
 8013ac0:	0801aae0 	.word	0x0801aae0
 8013ac4:	0801acf0 	.word	0x0801acf0
 8013ac8:	0801ab40 	.word	0x0801ab40

08013acc <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8013acc:	b580      	push	{r7, lr}
 8013ace:	b084      	sub	sp, #16
 8013ad0:	af00      	add	r7, sp, #0
 8013ad2:	4603      	mov	r3, r0
 8013ad4:	60b9      	str	r1, [r7, #8]
 8013ad6:	607a      	str	r2, [r7, #4]
 8013ad8:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8013ada:	89fb      	ldrh	r3, [r7, #14]
 8013adc:	3304      	adds	r3, #4
 8013ade:	2b44      	cmp	r3, #68	; 0x44
 8013ae0:	d906      	bls.n	8013af0 <dhcp_option_long+0x24>
 8013ae2:	4b19      	ldr	r3, [pc, #100]	; (8013b48 <dhcp_option_long+0x7c>)
 8013ae4:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8013ae8:	4918      	ldr	r1, [pc, #96]	; (8013b4c <dhcp_option_long+0x80>)
 8013aea:	4819      	ldr	r0, [pc, #100]	; (8013b50 <dhcp_option_long+0x84>)
 8013aec:	f003 fa2e 	bl	8016f4c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	0e1a      	lsrs	r2, r3, #24
 8013af4:	89fb      	ldrh	r3, [r7, #14]
 8013af6:	1c59      	adds	r1, r3, #1
 8013af8:	81f9      	strh	r1, [r7, #14]
 8013afa:	4619      	mov	r1, r3
 8013afc:	68bb      	ldr	r3, [r7, #8]
 8013afe:	440b      	add	r3, r1
 8013b00:	b2d2      	uxtb	r2, r2
 8013b02:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	0c1a      	lsrs	r2, r3, #16
 8013b08:	89fb      	ldrh	r3, [r7, #14]
 8013b0a:	1c59      	adds	r1, r3, #1
 8013b0c:	81f9      	strh	r1, [r7, #14]
 8013b0e:	4619      	mov	r1, r3
 8013b10:	68bb      	ldr	r3, [r7, #8]
 8013b12:	440b      	add	r3, r1
 8013b14:	b2d2      	uxtb	r2, r2
 8013b16:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	0a1a      	lsrs	r2, r3, #8
 8013b1c:	89fb      	ldrh	r3, [r7, #14]
 8013b1e:	1c59      	adds	r1, r3, #1
 8013b20:	81f9      	strh	r1, [r7, #14]
 8013b22:	4619      	mov	r1, r3
 8013b24:	68bb      	ldr	r3, [r7, #8]
 8013b26:	440b      	add	r3, r1
 8013b28:	b2d2      	uxtb	r2, r2
 8013b2a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8013b2c:	89fb      	ldrh	r3, [r7, #14]
 8013b2e:	1c5a      	adds	r2, r3, #1
 8013b30:	81fa      	strh	r2, [r7, #14]
 8013b32:	461a      	mov	r2, r3
 8013b34:	68bb      	ldr	r3, [r7, #8]
 8013b36:	4413      	add	r3, r2
 8013b38:	687a      	ldr	r2, [r7, #4]
 8013b3a:	b2d2      	uxtb	r2, r2
 8013b3c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013b3e:	89fb      	ldrh	r3, [r7, #14]
}
 8013b40:	4618      	mov	r0, r3
 8013b42:	3710      	adds	r7, #16
 8013b44:	46bd      	mov	sp, r7
 8013b46:	bd80      	pop	{r7, pc}
 8013b48:	0801aae0 	.word	0x0801aae0
 8013b4c:	0801ad2c 	.word	0x0801ad2c
 8013b50:	0801ab40 	.word	0x0801ab40

08013b54 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8013b54:	b580      	push	{r7, lr}
 8013b56:	b090      	sub	sp, #64	; 0x40
 8013b58:	af00      	add	r7, sp, #0
 8013b5a:	6078      	str	r0, [r7, #4]
 8013b5c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8013b5e:	2300      	movs	r3, #0
 8013b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8013b62:	2300      	movs	r3, #0
 8013b64:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8013b66:	2208      	movs	r2, #8
 8013b68:	2100      	movs	r1, #0
 8013b6a:	48be      	ldr	r0, [pc, #760]	; (8013e64 <dhcp_parse_reply+0x310>)
 8013b6c:	f003 f9e6 	bl	8016f3c <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	895b      	ldrh	r3, [r3, #10]
 8013b74:	2b2b      	cmp	r3, #43	; 0x2b
 8013b76:	d802      	bhi.n	8013b7e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8013b78:	f06f 0301 	mvn.w	r3, #1
 8013b7c:	e2a8      	b.n	80140d0 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	685b      	ldr	r3, [r3, #4]
 8013b82:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8013b84:	23f0      	movs	r3, #240	; 0xf0
 8013b86:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	891b      	ldrh	r3, [r3, #8]
 8013b8c:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8013b92:	e00c      	b.n	8013bae <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8013b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b96:	895b      	ldrh	r3, [r3, #10]
 8013b98:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013b9a:	1ad3      	subs	r3, r2, r3
 8013b9c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8013b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ba0:	895b      	ldrh	r3, [r3, #10]
 8013ba2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8013ba4:	1ad3      	subs	r3, r2, r3
 8013ba6:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8013ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8013bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d004      	beq.n	8013bbe <dhcp_parse_reply+0x6a>
 8013bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bb6:	895b      	ldrh	r3, [r3, #10]
 8013bb8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013bba:	429a      	cmp	r2, r3
 8013bbc:	d2ea      	bcs.n	8013b94 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8013bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d102      	bne.n	8013bca <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8013bc4:	f06f 0301 	mvn.w	r3, #1
 8013bc8:	e282      	b.n	80140d0 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8013bca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013bcc:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8013bce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013bd0:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8013bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bd4:	685b      	ldr	r3, [r3, #4]
 8013bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8013bd8:	e23a      	b.n	8014050 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8013bda:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013bdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013bde:	4413      	add	r3, r2
 8013be0:	781b      	ldrb	r3, [r3, #0]
 8013be2:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8013be4:	2300      	movs	r3, #0
 8013be6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8013bea:	f04f 33ff 	mov.w	r3, #4294967295
 8013bee:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8013bf0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013bf2:	3302      	adds	r3, #2
 8013bf4:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8013bf6:	8bfa      	ldrh	r2, [r7, #30]
 8013bf8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013bfa:	429a      	cmp	r2, r3
 8013bfc:	d202      	bcs.n	8013c04 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8013bfe:	f06f 0301 	mvn.w	r3, #1
 8013c02:	e265      	b.n	80140d0 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8013c04:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013c06:	3301      	adds	r3, #1
 8013c08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013c0a:	8952      	ldrh	r2, [r2, #10]
 8013c0c:	4293      	cmp	r3, r2
 8013c0e:	da07      	bge.n	8013c20 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8013c10:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013c12:	3301      	adds	r3, #1
 8013c14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013c16:	4413      	add	r3, r2
 8013c18:	781b      	ldrb	r3, [r3, #0]
 8013c1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013c1e:	e00b      	b.n	8013c38 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8013c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d004      	beq.n	8013c32 <dhcp_parse_reply+0xde>
 8013c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	685b      	ldr	r3, [r3, #4]
 8013c2e:	781b      	ldrb	r3, [r3, #0]
 8013c30:	e000      	b.n	8013c34 <dhcp_parse_reply+0xe0>
 8013c32:	2300      	movs	r3, #0
 8013c34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8013c38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8013c40:	7dfb      	ldrb	r3, [r7, #23]
 8013c42:	2b3b      	cmp	r3, #59	; 0x3b
 8013c44:	f200 812d 	bhi.w	8013ea2 <dhcp_parse_reply+0x34e>
 8013c48:	a201      	add	r2, pc, #4	; (adr r2, 8013c50 <dhcp_parse_reply+0xfc>)
 8013c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c4e:	bf00      	nop
 8013c50:	08013d41 	.word	0x08013d41
 8013c54:	08013d51 	.word	0x08013d51
 8013c58:	08013ea3 	.word	0x08013ea3
 8013c5c:	08013d73 	.word	0x08013d73
 8013c60:	08013ea3 	.word	0x08013ea3
 8013c64:	08013ea3 	.word	0x08013ea3
 8013c68:	08013ea3 	.word	0x08013ea3
 8013c6c:	08013ea3 	.word	0x08013ea3
 8013c70:	08013ea3 	.word	0x08013ea3
 8013c74:	08013ea3 	.word	0x08013ea3
 8013c78:	08013ea3 	.word	0x08013ea3
 8013c7c:	08013ea3 	.word	0x08013ea3
 8013c80:	08013ea3 	.word	0x08013ea3
 8013c84:	08013ea3 	.word	0x08013ea3
 8013c88:	08013ea3 	.word	0x08013ea3
 8013c8c:	08013ea3 	.word	0x08013ea3
 8013c90:	08013ea3 	.word	0x08013ea3
 8013c94:	08013ea3 	.word	0x08013ea3
 8013c98:	08013ea3 	.word	0x08013ea3
 8013c9c:	08013ea3 	.word	0x08013ea3
 8013ca0:	08013ea3 	.word	0x08013ea3
 8013ca4:	08013ea3 	.word	0x08013ea3
 8013ca8:	08013ea3 	.word	0x08013ea3
 8013cac:	08013ea3 	.word	0x08013ea3
 8013cb0:	08013ea3 	.word	0x08013ea3
 8013cb4:	08013ea3 	.word	0x08013ea3
 8013cb8:	08013ea3 	.word	0x08013ea3
 8013cbc:	08013ea3 	.word	0x08013ea3
 8013cc0:	08013ea3 	.word	0x08013ea3
 8013cc4:	08013ea3 	.word	0x08013ea3
 8013cc8:	08013ea3 	.word	0x08013ea3
 8013ccc:	08013ea3 	.word	0x08013ea3
 8013cd0:	08013ea3 	.word	0x08013ea3
 8013cd4:	08013ea3 	.word	0x08013ea3
 8013cd8:	08013ea3 	.word	0x08013ea3
 8013cdc:	08013ea3 	.word	0x08013ea3
 8013ce0:	08013ea3 	.word	0x08013ea3
 8013ce4:	08013ea3 	.word	0x08013ea3
 8013ce8:	08013ea3 	.word	0x08013ea3
 8013cec:	08013ea3 	.word	0x08013ea3
 8013cf0:	08013ea3 	.word	0x08013ea3
 8013cf4:	08013ea3 	.word	0x08013ea3
 8013cf8:	08013ea3 	.word	0x08013ea3
 8013cfc:	08013ea3 	.word	0x08013ea3
 8013d00:	08013ea3 	.word	0x08013ea3
 8013d04:	08013ea3 	.word	0x08013ea3
 8013d08:	08013ea3 	.word	0x08013ea3
 8013d0c:	08013ea3 	.word	0x08013ea3
 8013d10:	08013ea3 	.word	0x08013ea3
 8013d14:	08013ea3 	.word	0x08013ea3
 8013d18:	08013ea3 	.word	0x08013ea3
 8013d1c:	08013d9f 	.word	0x08013d9f
 8013d20:	08013dc1 	.word	0x08013dc1
 8013d24:	08013dfd 	.word	0x08013dfd
 8013d28:	08013e1f 	.word	0x08013e1f
 8013d2c:	08013ea3 	.word	0x08013ea3
 8013d30:	08013ea3 	.word	0x08013ea3
 8013d34:	08013ea3 	.word	0x08013ea3
 8013d38:	08013e41 	.word	0x08013e41
 8013d3c:	08013e81 	.word	0x08013e81
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8013d40:	2300      	movs	r3, #0
 8013d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013d46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8013d4e:	e0ac      	b.n	8013eaa <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013d50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d54:	2b04      	cmp	r3, #4
 8013d56:	d009      	beq.n	8013d6c <dhcp_parse_reply+0x218>
 8013d58:	4b43      	ldr	r3, [pc, #268]	; (8013e68 <dhcp_parse_reply+0x314>)
 8013d5a:	f240 622e 	movw	r2, #1582	; 0x62e
 8013d5e:	4943      	ldr	r1, [pc, #268]	; (8013e6c <dhcp_parse_reply+0x318>)
 8013d60:	4843      	ldr	r0, [pc, #268]	; (8013e70 <dhcp_parse_reply+0x31c>)
 8013d62:	f003 f8f3 	bl	8016f4c <iprintf>
 8013d66:	f06f 0305 	mvn.w	r3, #5
 8013d6a:	e1b1      	b.n	80140d0 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8013d6c:	2306      	movs	r3, #6
 8013d6e:	623b      	str	r3, [r7, #32]
        break;
 8013d70:	e09b      	b.n	8013eaa <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8013d72:	2304      	movs	r3, #4
 8013d74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8013d78:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013d7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013d80:	429a      	cmp	r2, r3
 8013d82:	d209      	bcs.n	8013d98 <dhcp_parse_reply+0x244>
 8013d84:	4b38      	ldr	r3, [pc, #224]	; (8013e68 <dhcp_parse_reply+0x314>)
 8013d86:	f240 6233 	movw	r2, #1587	; 0x633
 8013d8a:	493a      	ldr	r1, [pc, #232]	; (8013e74 <dhcp_parse_reply+0x320>)
 8013d8c:	4838      	ldr	r0, [pc, #224]	; (8013e70 <dhcp_parse_reply+0x31c>)
 8013d8e:	f003 f8dd 	bl	8016f4c <iprintf>
 8013d92:	f06f 0305 	mvn.w	r3, #5
 8013d96:	e19b      	b.n	80140d0 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8013d98:	2307      	movs	r3, #7
 8013d9a:	623b      	str	r3, [r7, #32]
        break;
 8013d9c:	e085      	b.n	8013eaa <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013d9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013da2:	2b04      	cmp	r3, #4
 8013da4:	d009      	beq.n	8013dba <dhcp_parse_reply+0x266>
 8013da6:	4b30      	ldr	r3, [pc, #192]	; (8013e68 <dhcp_parse_reply+0x314>)
 8013da8:	f240 6241 	movw	r2, #1601	; 0x641
 8013dac:	492f      	ldr	r1, [pc, #188]	; (8013e6c <dhcp_parse_reply+0x318>)
 8013dae:	4830      	ldr	r0, [pc, #192]	; (8013e70 <dhcp_parse_reply+0x31c>)
 8013db0:	f003 f8cc 	bl	8016f4c <iprintf>
 8013db4:	f06f 0305 	mvn.w	r3, #5
 8013db8:	e18a      	b.n	80140d0 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8013dba:	2303      	movs	r3, #3
 8013dbc:	623b      	str	r3, [r7, #32]
        break;
 8013dbe:	e074      	b.n	8013eaa <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8013dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013dc4:	2b01      	cmp	r3, #1
 8013dc6:	d009      	beq.n	8013ddc <dhcp_parse_reply+0x288>
 8013dc8:	4b27      	ldr	r3, [pc, #156]	; (8013e68 <dhcp_parse_reply+0x314>)
 8013dca:	f240 624f 	movw	r2, #1615	; 0x64f
 8013dce:	492a      	ldr	r1, [pc, #168]	; (8013e78 <dhcp_parse_reply+0x324>)
 8013dd0:	4827      	ldr	r0, [pc, #156]	; (8013e70 <dhcp_parse_reply+0x31c>)
 8013dd2:	f003 f8bb 	bl	8016f4c <iprintf>
 8013dd6:	f06f 0305 	mvn.w	r3, #5
 8013dda:	e179      	b.n	80140d0 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8013ddc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013dde:	2bf0      	cmp	r3, #240	; 0xf0
 8013de0:	d009      	beq.n	8013df6 <dhcp_parse_reply+0x2a2>
 8013de2:	4b21      	ldr	r3, [pc, #132]	; (8013e68 <dhcp_parse_reply+0x314>)
 8013de4:	f240 6251 	movw	r2, #1617	; 0x651
 8013de8:	4924      	ldr	r1, [pc, #144]	; (8013e7c <dhcp_parse_reply+0x328>)
 8013dea:	4821      	ldr	r0, [pc, #132]	; (8013e70 <dhcp_parse_reply+0x31c>)
 8013dec:	f003 f8ae 	bl	8016f4c <iprintf>
 8013df0:	f06f 0305 	mvn.w	r3, #5
 8013df4:	e16c      	b.n	80140d0 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8013df6:	2300      	movs	r3, #0
 8013df8:	623b      	str	r3, [r7, #32]
        break;
 8013dfa:	e056      	b.n	8013eaa <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8013dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e00:	2b01      	cmp	r3, #1
 8013e02:	d009      	beq.n	8013e18 <dhcp_parse_reply+0x2c4>
 8013e04:	4b18      	ldr	r3, [pc, #96]	; (8013e68 <dhcp_parse_reply+0x314>)
 8013e06:	f240 6255 	movw	r2, #1621	; 0x655
 8013e0a:	491b      	ldr	r1, [pc, #108]	; (8013e78 <dhcp_parse_reply+0x324>)
 8013e0c:	4818      	ldr	r0, [pc, #96]	; (8013e70 <dhcp_parse_reply+0x31c>)
 8013e0e:	f003 f89d 	bl	8016f4c <iprintf>
 8013e12:	f06f 0305 	mvn.w	r3, #5
 8013e16:	e15b      	b.n	80140d0 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8013e18:	2301      	movs	r3, #1
 8013e1a:	623b      	str	r3, [r7, #32]
        break;
 8013e1c:	e045      	b.n	8013eaa <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013e1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e22:	2b04      	cmp	r3, #4
 8013e24:	d009      	beq.n	8013e3a <dhcp_parse_reply+0x2e6>
 8013e26:	4b10      	ldr	r3, [pc, #64]	; (8013e68 <dhcp_parse_reply+0x314>)
 8013e28:	f240 6259 	movw	r2, #1625	; 0x659
 8013e2c:	490f      	ldr	r1, [pc, #60]	; (8013e6c <dhcp_parse_reply+0x318>)
 8013e2e:	4810      	ldr	r0, [pc, #64]	; (8013e70 <dhcp_parse_reply+0x31c>)
 8013e30:	f003 f88c 	bl	8016f4c <iprintf>
 8013e34:	f06f 0305 	mvn.w	r3, #5
 8013e38:	e14a      	b.n	80140d0 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8013e3a:	2302      	movs	r3, #2
 8013e3c:	623b      	str	r3, [r7, #32]
        break;
 8013e3e:	e034      	b.n	8013eaa <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013e40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e44:	2b04      	cmp	r3, #4
 8013e46:	d009      	beq.n	8013e5c <dhcp_parse_reply+0x308>
 8013e48:	4b07      	ldr	r3, [pc, #28]	; (8013e68 <dhcp_parse_reply+0x314>)
 8013e4a:	f240 625d 	movw	r2, #1629	; 0x65d
 8013e4e:	4907      	ldr	r1, [pc, #28]	; (8013e6c <dhcp_parse_reply+0x318>)
 8013e50:	4807      	ldr	r0, [pc, #28]	; (8013e70 <dhcp_parse_reply+0x31c>)
 8013e52:	f003 f87b 	bl	8016f4c <iprintf>
 8013e56:	f06f 0305 	mvn.w	r3, #5
 8013e5a:	e139      	b.n	80140d0 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8013e5c:	2304      	movs	r3, #4
 8013e5e:	623b      	str	r3, [r7, #32]
        break;
 8013e60:	e023      	b.n	8013eaa <dhcp_parse_reply+0x356>
 8013e62:	bf00      	nop
 8013e64:	20010e94 	.word	0x20010e94
 8013e68:	0801aae0 	.word	0x0801aae0
 8013e6c:	0801ad68 	.word	0x0801ad68
 8013e70:	0801ab40 	.word	0x0801ab40
 8013e74:	0801ad74 	.word	0x0801ad74
 8013e78:	0801ad88 	.word	0x0801ad88
 8013e7c:	0801ad94 	.word	0x0801ad94
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013e80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e84:	2b04      	cmp	r3, #4
 8013e86:	d009      	beq.n	8013e9c <dhcp_parse_reply+0x348>
 8013e88:	4b93      	ldr	r3, [pc, #588]	; (80140d8 <dhcp_parse_reply+0x584>)
 8013e8a:	f240 6261 	movw	r2, #1633	; 0x661
 8013e8e:	4993      	ldr	r1, [pc, #588]	; (80140dc <dhcp_parse_reply+0x588>)
 8013e90:	4893      	ldr	r0, [pc, #588]	; (80140e0 <dhcp_parse_reply+0x58c>)
 8013e92:	f003 f85b 	bl	8016f4c <iprintf>
 8013e96:	f06f 0305 	mvn.w	r3, #5
 8013e9a:	e119      	b.n	80140d0 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8013e9c:	2305      	movs	r3, #5
 8013e9e:	623b      	str	r3, [r7, #32]
        break;
 8013ea0:	e003      	b.n	8013eaa <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8013ea2:	2300      	movs	r3, #0
 8013ea4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8013ea8:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8013eaa:	7dfb      	ldrb	r3, [r7, #23]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d103      	bne.n	8013eb8 <dhcp_parse_reply+0x364>
      offset++;
 8013eb0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013eb2:	3301      	adds	r3, #1
 8013eb4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8013eb6:	e0a1      	b.n	8013ffc <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8013eb8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013eba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013ebe:	4413      	add	r3, r2
 8013ec0:	3302      	adds	r3, #2
 8013ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013ec6:	db02      	blt.n	8013ece <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8013ec8:	f06f 0301 	mvn.w	r3, #1
 8013ecc:	e100      	b.n	80140d0 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 8013ece:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013ed2:	b29a      	uxth	r2, r3
 8013ed4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013ed6:	4413      	add	r3, r2
 8013ed8:	b29b      	uxth	r3, r3
 8013eda:	3302      	adds	r3, #2
 8013edc:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8013ede:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	f000 808a 	beq.w	8013ffc <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8013ee8:	2300      	movs	r3, #0
 8013eea:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8013eec:	6a3b      	ldr	r3, [r7, #32]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	db02      	blt.n	8013ef8 <dhcp_parse_reply+0x3a4>
 8013ef2:	6a3b      	ldr	r3, [r7, #32]
 8013ef4:	2b07      	cmp	r3, #7
 8013ef6:	dd06      	ble.n	8013f06 <dhcp_parse_reply+0x3b2>
 8013ef8:	4b77      	ldr	r3, [pc, #476]	; (80140d8 <dhcp_parse_reply+0x584>)
 8013efa:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8013efe:	4979      	ldr	r1, [pc, #484]	; (80140e4 <dhcp_parse_reply+0x590>)
 8013f00:	4877      	ldr	r0, [pc, #476]	; (80140e0 <dhcp_parse_reply+0x58c>)
 8013f02:	f003 f823 	bl	8016f4c <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8013f06:	4a78      	ldr	r2, [pc, #480]	; (80140e8 <dhcp_parse_reply+0x594>)
 8013f08:	6a3b      	ldr	r3, [r7, #32]
 8013f0a:	4413      	add	r3, r2
 8013f0c:	781b      	ldrb	r3, [r3, #0]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d174      	bne.n	8013ffc <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 8013f12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013f16:	2b04      	cmp	r3, #4
 8013f18:	bf28      	it	cs
 8013f1a:	2304      	movcs	r3, #4
 8013f1c:	b2db      	uxtb	r3, r3
 8013f1e:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8013f20:	8bfb      	ldrh	r3, [r7, #30]
 8013f22:	8aba      	ldrh	r2, [r7, #20]
 8013f24:	f107 0108 	add.w	r1, r7, #8
 8013f28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013f2a:	f7f7 fd23 	bl	800b974 <pbuf_copy_partial>
 8013f2e:	4603      	mov	r3, r0
 8013f30:	461a      	mov	r2, r3
 8013f32:	8abb      	ldrh	r3, [r7, #20]
 8013f34:	4293      	cmp	r3, r2
 8013f36:	d002      	beq.n	8013f3e <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8013f38:	f06f 0301 	mvn.w	r3, #1
 8013f3c:	e0c8      	b.n	80140d0 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 8013f3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013f42:	2b04      	cmp	r3, #4
 8013f44:	d933      	bls.n	8013fae <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8013f46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013f4a:	f003 0303 	and.w	r3, r3, #3
 8013f4e:	b2db      	uxtb	r3, r3
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d009      	beq.n	8013f68 <dhcp_parse_reply+0x414>
 8013f54:	4b60      	ldr	r3, [pc, #384]	; (80140d8 <dhcp_parse_reply+0x584>)
 8013f56:	f240 6281 	movw	r2, #1665	; 0x681
 8013f5a:	4964      	ldr	r1, [pc, #400]	; (80140ec <dhcp_parse_reply+0x598>)
 8013f5c:	4860      	ldr	r0, [pc, #384]	; (80140e0 <dhcp_parse_reply+0x58c>)
 8013f5e:	f002 fff5 	bl	8016f4c <iprintf>
 8013f62:	f06f 0305 	mvn.w	r3, #5
 8013f66:	e0b3      	b.n	80140d0 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8013f68:	4a5f      	ldr	r2, [pc, #380]	; (80140e8 <dhcp_parse_reply+0x594>)
 8013f6a:	6a3b      	ldr	r3, [r7, #32]
 8013f6c:	4413      	add	r3, r2
 8013f6e:	2201      	movs	r2, #1
 8013f70:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8013f72:	68bb      	ldr	r3, [r7, #8]
 8013f74:	4618      	mov	r0, r3
 8013f76:	f7f5 ffd6 	bl	8009f26 <lwip_htonl>
 8013f7a:	4601      	mov	r1, r0
 8013f7c:	4a5c      	ldr	r2, [pc, #368]	; (80140f0 <dhcp_parse_reply+0x59c>)
 8013f7e:	6a3b      	ldr	r3, [r7, #32]
 8013f80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8013f84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013f88:	3b04      	subs	r3, #4
 8013f8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8013f8e:	8bfb      	ldrh	r3, [r7, #30]
 8013f90:	3304      	adds	r3, #4
 8013f92:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8013f94:	8a7a      	ldrh	r2, [r7, #18]
 8013f96:	8bfb      	ldrh	r3, [r7, #30]
 8013f98:	429a      	cmp	r2, r3
 8013f9a:	d202      	bcs.n	8013fa2 <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8013f9c:	f06f 0301 	mvn.w	r3, #1
 8013fa0:	e096      	b.n	80140d0 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 8013fa2:	8a7b      	ldrh	r3, [r7, #18]
 8013fa4:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8013fa6:	6a3b      	ldr	r3, [r7, #32]
 8013fa8:	3301      	adds	r3, #1
 8013faa:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8013fac:	e79e      	b.n	8013eec <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8013fae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013fb2:	2b04      	cmp	r3, #4
 8013fb4:	d106      	bne.n	8013fc4 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8013fb6:	68bb      	ldr	r3, [r7, #8]
 8013fb8:	4618      	mov	r0, r3
 8013fba:	f7f5 ffb4 	bl	8009f26 <lwip_htonl>
 8013fbe:	4603      	mov	r3, r0
 8013fc0:	60bb      	str	r3, [r7, #8]
 8013fc2:	e011      	b.n	8013fe8 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8013fc4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013fc8:	2b01      	cmp	r3, #1
 8013fca:	d009      	beq.n	8013fe0 <dhcp_parse_reply+0x48c>
 8013fcc:	4b42      	ldr	r3, [pc, #264]	; (80140d8 <dhcp_parse_reply+0x584>)
 8013fce:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8013fd2:	4948      	ldr	r1, [pc, #288]	; (80140f4 <dhcp_parse_reply+0x5a0>)
 8013fd4:	4842      	ldr	r0, [pc, #264]	; (80140e0 <dhcp_parse_reply+0x58c>)
 8013fd6:	f002 ffb9 	bl	8016f4c <iprintf>
 8013fda:	f06f 0305 	mvn.w	r3, #5
 8013fde:	e077      	b.n	80140d0 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8013fe0:	f107 0308 	add.w	r3, r7, #8
 8013fe4:	781b      	ldrb	r3, [r3, #0]
 8013fe6:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8013fe8:	4a3f      	ldr	r2, [pc, #252]	; (80140e8 <dhcp_parse_reply+0x594>)
 8013fea:	6a3b      	ldr	r3, [r7, #32]
 8013fec:	4413      	add	r3, r2
 8013fee:	2201      	movs	r2, #1
 8013ff0:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8013ff2:	68ba      	ldr	r2, [r7, #8]
 8013ff4:	493e      	ldr	r1, [pc, #248]	; (80140f0 <dhcp_parse_reply+0x59c>)
 8013ff6:	6a3b      	ldr	r3, [r7, #32]
 8013ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8013ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ffe:	895b      	ldrh	r3, [r3, #10]
 8014000:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014002:	429a      	cmp	r2, r3
 8014004:	d324      	bcc.n	8014050 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8014006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014008:	895b      	ldrh	r3, [r3, #10]
 801400a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801400c:	1ad3      	subs	r3, r2, r3
 801400e:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8014010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014012:	895b      	ldrh	r3, [r3, #10]
 8014014:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8014016:	1ad3      	subs	r3, r2, r3
 8014018:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801401a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801401c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801401e:	429a      	cmp	r2, r3
 8014020:	d213      	bcs.n	801404a <dhcp_parse_reply+0x4f6>
        q = q->next;
 8014022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8014028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801402a:	2b00      	cmp	r3, #0
 801402c:	d109      	bne.n	8014042 <dhcp_parse_reply+0x4ee>
 801402e:	4b2a      	ldr	r3, [pc, #168]	; (80140d8 <dhcp_parse_reply+0x584>)
 8014030:	f240 629d 	movw	r2, #1693	; 0x69d
 8014034:	4930      	ldr	r1, [pc, #192]	; (80140f8 <dhcp_parse_reply+0x5a4>)
 8014036:	482a      	ldr	r0, [pc, #168]	; (80140e0 <dhcp_parse_reply+0x58c>)
 8014038:	f002 ff88 	bl	8016f4c <iprintf>
 801403c:	f06f 0305 	mvn.w	r3, #5
 8014040:	e046      	b.n	80140d0 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 8014042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014044:	685b      	ldr	r3, [r3, #4]
 8014046:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014048:	e002      	b.n	8014050 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801404a:	f06f 0301 	mvn.w	r3, #1
 801404e:	e03f      	b.n	80140d0 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8014050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014052:	2b00      	cmp	r3, #0
 8014054:	d00a      	beq.n	801406c <dhcp_parse_reply+0x518>
 8014056:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014058:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801405a:	429a      	cmp	r2, r3
 801405c:	d206      	bcs.n	801406c <dhcp_parse_reply+0x518>
 801405e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014060:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014062:	4413      	add	r3, r2
 8014064:	781b      	ldrb	r3, [r3, #0]
 8014066:	2bff      	cmp	r3, #255	; 0xff
 8014068:	f47f adb7 	bne.w	8013bda <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801406c:	4b1e      	ldr	r3, [pc, #120]	; (80140e8 <dhcp_parse_reply+0x594>)
 801406e:	781b      	ldrb	r3, [r3, #0]
 8014070:	2b00      	cmp	r3, #0
 8014072:	d018      	beq.n	80140a6 <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014074:	4b1e      	ldr	r3, [pc, #120]	; (80140f0 <dhcp_parse_reply+0x59c>)
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801407a:	4b1b      	ldr	r3, [pc, #108]	; (80140e8 <dhcp_parse_reply+0x594>)
 801407c:	2200      	movs	r2, #0
 801407e:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	2b01      	cmp	r3, #1
 8014084:	d102      	bne.n	801408c <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 8014086:	2301      	movs	r3, #1
 8014088:	62fb      	str	r3, [r7, #44]	; 0x2c
 801408a:	e00c      	b.n	80140a6 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	2b02      	cmp	r3, #2
 8014090:	d102      	bne.n	8014098 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 8014092:	2301      	movs	r3, #1
 8014094:	62bb      	str	r3, [r7, #40]	; 0x28
 8014096:	e006      	b.n	80140a6 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	2b03      	cmp	r3, #3
 801409c:	d103      	bne.n	80140a6 <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 801409e:	2301      	movs	r3, #1
 80140a0:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 80140a2:	2301      	movs	r3, #1
 80140a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 80140a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d006      	beq.n	80140ba <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80140ac:	2300      	movs	r3, #0
 80140ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 80140b0:	236c      	movs	r3, #108	; 0x6c
 80140b2:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80140b4:	23ec      	movs	r3, #236	; 0xec
 80140b6:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 80140b8:	e569      	b.n	8013b8e <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80140ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d006      	beq.n	80140ce <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 80140c0:	2300      	movs	r3, #0
 80140c2:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 80140c4:	232c      	movs	r3, #44	; 0x2c
 80140c6:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80140c8:	236c      	movs	r3, #108	; 0x6c
 80140ca:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 80140cc:	e55f      	b.n	8013b8e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80140ce:	2300      	movs	r3, #0
}
 80140d0:	4618      	mov	r0, r3
 80140d2:	3740      	adds	r7, #64	; 0x40
 80140d4:	46bd      	mov	sp, r7
 80140d6:	bd80      	pop	{r7, pc}
 80140d8:	0801aae0 	.word	0x0801aae0
 80140dc:	0801ad68 	.word	0x0801ad68
 80140e0:	0801ab40 	.word	0x0801ab40
 80140e4:	0801adac 	.word	0x0801adac
 80140e8:	20010e94 	.word	0x20010e94
 80140ec:	0801adc0 	.word	0x0801adc0
 80140f0:	20010e9c 	.word	0x20010e9c
 80140f4:	0801add8 	.word	0x0801add8
 80140f8:	0801adec 	.word	0x0801adec

080140fc <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80140fc:	b580      	push	{r7, lr}
 80140fe:	b08a      	sub	sp, #40	; 0x28
 8014100:	af00      	add	r7, sp, #0
 8014102:	60f8      	str	r0, [r7, #12]
 8014104:	60b9      	str	r1, [r7, #8]
 8014106:	607a      	str	r2, [r7, #4]
 8014108:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801410a:	4b5f      	ldr	r3, [pc, #380]	; (8014288 <dhcp_recv+0x18c>)
 801410c:	685b      	ldr	r3, [r3, #4]
 801410e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014110:	6a3b      	ldr	r3, [r7, #32]
 8014112:	6a1b      	ldr	r3, [r3, #32]
 8014114:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	685b      	ldr	r3, [r3, #4]
 801411a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801411c:	69fb      	ldr	r3, [r7, #28]
 801411e:	2b00      	cmp	r3, #0
 8014120:	f000 809d 	beq.w	801425e <dhcp_recv+0x162>
 8014124:	69fb      	ldr	r3, [r7, #28]
 8014126:	791b      	ldrb	r3, [r3, #4]
 8014128:	2b00      	cmp	r3, #0
 801412a:	f000 8098 	beq.w	801425e <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	895b      	ldrh	r3, [r3, #10]
 8014132:	2b2b      	cmp	r3, #43	; 0x2b
 8014134:	f240 8095 	bls.w	8014262 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8014138:	69bb      	ldr	r3, [r7, #24]
 801413a:	781b      	ldrb	r3, [r3, #0]
 801413c:	2b02      	cmp	r3, #2
 801413e:	f040 8092 	bne.w	8014266 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014142:	2300      	movs	r3, #0
 8014144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014148:	e012      	b.n	8014170 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801414a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801414e:	6a3a      	ldr	r2, [r7, #32]
 8014150:	4413      	add	r3, r2
 8014152:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8014156:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801415a:	69b9      	ldr	r1, [r7, #24]
 801415c:	440b      	add	r3, r1
 801415e:	7f1b      	ldrb	r3, [r3, #28]
 8014160:	429a      	cmp	r2, r3
 8014162:	f040 8082 	bne.w	801426a <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014166:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801416a:	3301      	adds	r3, #1
 801416c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014170:	6a3b      	ldr	r3, [r7, #32]
 8014172:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014176:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801417a:	429a      	cmp	r2, r3
 801417c:	d203      	bcs.n	8014186 <dhcp_recv+0x8a>
 801417e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014182:	2b05      	cmp	r3, #5
 8014184:	d9e1      	bls.n	801414a <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8014186:	69bb      	ldr	r3, [r7, #24]
 8014188:	685b      	ldr	r3, [r3, #4]
 801418a:	4618      	mov	r0, r3
 801418c:	f7f5 fecb 	bl	8009f26 <lwip_htonl>
 8014190:	4602      	mov	r2, r0
 8014192:	69fb      	ldr	r3, [r7, #28]
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	429a      	cmp	r2, r3
 8014198:	d169      	bne.n	801426e <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801419a:	69f9      	ldr	r1, [r7, #28]
 801419c:	6878      	ldr	r0, [r7, #4]
 801419e:	f7ff fcd9 	bl	8013b54 <dhcp_parse_reply>
 80141a2:	4603      	mov	r3, r0
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d164      	bne.n	8014272 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80141a8:	4b38      	ldr	r3, [pc, #224]	; (801428c <dhcp_recv+0x190>)
 80141aa:	785b      	ldrb	r3, [r3, #1]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d062      	beq.n	8014276 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	685b      	ldr	r3, [r3, #4]
 80141b4:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80141b6:	4b36      	ldr	r3, [pc, #216]	; (8014290 <dhcp_recv+0x194>)
 80141b8:	685b      	ldr	r3, [r3, #4]
 80141ba:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80141bc:	7cfb      	ldrb	r3, [r7, #19]
 80141be:	2b05      	cmp	r3, #5
 80141c0:	d12a      	bne.n	8014218 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80141c2:	69fb      	ldr	r3, [r7, #28]
 80141c4:	795b      	ldrb	r3, [r3, #5]
 80141c6:	2b01      	cmp	r3, #1
 80141c8:	d112      	bne.n	80141f0 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 80141ca:	6979      	ldr	r1, [r7, #20]
 80141cc:	6a38      	ldr	r0, [r7, #32]
 80141ce:	f7fe fe53 	bl	8012e78 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80141d2:	6a3b      	ldr	r3, [r7, #32]
 80141d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80141d8:	f003 0308 	and.w	r3, r3, #8
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d003      	beq.n	80141e8 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80141e0:	6a38      	ldr	r0, [r7, #32]
 80141e2:	f7fe fbc3 	bl	801296c <dhcp_check>
 80141e6:	e047      	b.n	8014278 <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80141e8:	6a38      	ldr	r0, [r7, #32]
 80141ea:	f7ff f867 	bl	80132bc <dhcp_bind>
 80141ee:	e043      	b.n	8014278 <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80141f0:	69fb      	ldr	r3, [r7, #28]
 80141f2:	795b      	ldrb	r3, [r3, #5]
 80141f4:	2b03      	cmp	r3, #3
 80141f6:	d007      	beq.n	8014208 <dhcp_recv+0x10c>
 80141f8:	69fb      	ldr	r3, [r7, #28]
 80141fa:	795b      	ldrb	r3, [r3, #5]
 80141fc:	2b04      	cmp	r3, #4
 80141fe:	d003      	beq.n	8014208 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8014200:	69fb      	ldr	r3, [r7, #28]
 8014202:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8014204:	2b05      	cmp	r3, #5
 8014206:	d137      	bne.n	8014278 <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 8014208:	6979      	ldr	r1, [r7, #20]
 801420a:	6a38      	ldr	r0, [r7, #32]
 801420c:	f7fe fe34 	bl	8012e78 <dhcp_handle_ack>
      dhcp_bind(netif);
 8014210:	6a38      	ldr	r0, [r7, #32]
 8014212:	f7ff f853 	bl	80132bc <dhcp_bind>
 8014216:	e02f      	b.n	8014278 <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8014218:	7cfb      	ldrb	r3, [r7, #19]
 801421a:	2b06      	cmp	r3, #6
 801421c:	d113      	bne.n	8014246 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801421e:	69fb      	ldr	r3, [r7, #28]
 8014220:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8014222:	2b03      	cmp	r3, #3
 8014224:	d00b      	beq.n	801423e <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014226:	69fb      	ldr	r3, [r7, #28]
 8014228:	795b      	ldrb	r3, [r3, #5]
 801422a:	2b01      	cmp	r3, #1
 801422c:	d007      	beq.n	801423e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801422e:	69fb      	ldr	r3, [r7, #28]
 8014230:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014232:	2b04      	cmp	r3, #4
 8014234:	d003      	beq.n	801423e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8014236:	69fb      	ldr	r3, [r7, #28]
 8014238:	795b      	ldrb	r3, [r3, #5]
 801423a:	2b05      	cmp	r3, #5
 801423c:	d103      	bne.n	8014246 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801423e:	6a38      	ldr	r0, [r7, #32]
 8014240:	f7fe fb7a 	bl	8012938 <dhcp_handle_nak>
 8014244:	e018      	b.n	8014278 <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8014246:	7cfb      	ldrb	r3, [r7, #19]
 8014248:	2b02      	cmp	r3, #2
 801424a:	d108      	bne.n	801425e <dhcp_recv+0x162>
 801424c:	69fb      	ldr	r3, [r7, #28]
 801424e:	795b      	ldrb	r3, [r3, #5]
 8014250:	2b06      	cmp	r3, #6
 8014252:	d104      	bne.n	801425e <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8014254:	6979      	ldr	r1, [r7, #20]
 8014256:	6a38      	ldr	r0, [r7, #32]
 8014258:	f7fe fbbc 	bl	80129d4 <dhcp_handle_offer>
 801425c:	e00c      	b.n	8014278 <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 801425e:	bf00      	nop
 8014260:	e00a      	b.n	8014278 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8014262:	bf00      	nop
 8014264:	e008      	b.n	8014278 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8014266:	bf00      	nop
 8014268:	e006      	b.n	8014278 <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 801426a:	bf00      	nop
 801426c:	e004      	b.n	8014278 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801426e:	bf00      	nop
 8014270:	e002      	b.n	8014278 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8014272:	bf00      	nop
 8014274:	e000      	b.n	8014278 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8014276:	bf00      	nop
  pbuf_free(p);
 8014278:	6878      	ldr	r0, [r7, #4]
 801427a:	f7f7 f975 	bl	800b568 <pbuf_free>
}
 801427e:	bf00      	nop
 8014280:	3728      	adds	r7, #40	; 0x28
 8014282:	46bd      	mov	sp, r7
 8014284:	bd80      	pop	{r7, pc}
 8014286:	bf00      	nop
 8014288:	2000b8c4 	.word	0x2000b8c4
 801428c:	20010e94 	.word	0x20010e94
 8014290:	20010e9c 	.word	0x20010e9c

08014294 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8014294:	b580      	push	{r7, lr}
 8014296:	b088      	sub	sp, #32
 8014298:	af00      	add	r7, sp, #0
 801429a:	60f8      	str	r0, [r7, #12]
 801429c:	60b9      	str	r1, [r7, #8]
 801429e:	603b      	str	r3, [r7, #0]
 80142a0:	4613      	mov	r3, r2
 80142a2:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80142a4:	68fb      	ldr	r3, [r7, #12]
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d108      	bne.n	80142bc <dhcp_create_msg+0x28>
 80142aa:	4b5f      	ldr	r3, [pc, #380]	; (8014428 <dhcp_create_msg+0x194>)
 80142ac:	f240 7269 	movw	r2, #1897	; 0x769
 80142b0:	495e      	ldr	r1, [pc, #376]	; (801442c <dhcp_create_msg+0x198>)
 80142b2:	485f      	ldr	r0, [pc, #380]	; (8014430 <dhcp_create_msg+0x19c>)
 80142b4:	f002 fe4a 	bl	8016f4c <iprintf>
 80142b8:	2300      	movs	r3, #0
 80142ba:	e0b1      	b.n	8014420 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80142bc:	68bb      	ldr	r3, [r7, #8]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d108      	bne.n	80142d4 <dhcp_create_msg+0x40>
 80142c2:	4b59      	ldr	r3, [pc, #356]	; (8014428 <dhcp_create_msg+0x194>)
 80142c4:	f240 726a 	movw	r2, #1898	; 0x76a
 80142c8:	495a      	ldr	r1, [pc, #360]	; (8014434 <dhcp_create_msg+0x1a0>)
 80142ca:	4859      	ldr	r0, [pc, #356]	; (8014430 <dhcp_create_msg+0x19c>)
 80142cc:	f002 fe3e 	bl	8016f4c <iprintf>
 80142d0:	2300      	movs	r3, #0
 80142d2:	e0a5      	b.n	8014420 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80142d4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80142d8:	f44f 719a 	mov.w	r1, #308	; 0x134
 80142dc:	2036      	movs	r0, #54	; 0x36
 80142de:	f7f6 fe63 	bl	800afa8 <pbuf_alloc>
 80142e2:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80142e4:	69bb      	ldr	r3, [r7, #24]
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d101      	bne.n	80142ee <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80142ea:	2300      	movs	r3, #0
 80142ec:	e098      	b.n	8014420 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80142ee:	69bb      	ldr	r3, [r7, #24]
 80142f0:	895b      	ldrh	r3, [r3, #10]
 80142f2:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80142f6:	d206      	bcs.n	8014306 <dhcp_create_msg+0x72>
 80142f8:	4b4b      	ldr	r3, [pc, #300]	; (8014428 <dhcp_create_msg+0x194>)
 80142fa:	f240 7272 	movw	r2, #1906	; 0x772
 80142fe:	494e      	ldr	r1, [pc, #312]	; (8014438 <dhcp_create_msg+0x1a4>)
 8014300:	484b      	ldr	r0, [pc, #300]	; (8014430 <dhcp_create_msg+0x19c>)
 8014302:	f002 fe23 	bl	8016f4c <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8014306:	79fb      	ldrb	r3, [r7, #7]
 8014308:	2b03      	cmp	r3, #3
 801430a:	d103      	bne.n	8014314 <dhcp_create_msg+0x80>
 801430c:	68bb      	ldr	r3, [r7, #8]
 801430e:	795b      	ldrb	r3, [r3, #5]
 8014310:	2b03      	cmp	r3, #3
 8014312:	d10d      	bne.n	8014330 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8014314:	68bb      	ldr	r3, [r7, #8]
 8014316:	799b      	ldrb	r3, [r3, #6]
 8014318:	2b00      	cmp	r3, #0
 801431a:	d105      	bne.n	8014328 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801431c:	f002 fe2e 	bl	8016f7c <rand>
 8014320:	4603      	mov	r3, r0
 8014322:	461a      	mov	r2, r3
 8014324:	4b45      	ldr	r3, [pc, #276]	; (801443c <dhcp_create_msg+0x1a8>)
 8014326:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8014328:	4b44      	ldr	r3, [pc, #272]	; (801443c <dhcp_create_msg+0x1a8>)
 801432a:	681a      	ldr	r2, [r3, #0]
 801432c:	68bb      	ldr	r3, [r7, #8]
 801432e:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8014330:	69bb      	ldr	r3, [r7, #24]
 8014332:	685b      	ldr	r3, [r3, #4]
 8014334:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8014336:	f44f 729a 	mov.w	r2, #308	; 0x134
 801433a:	2100      	movs	r1, #0
 801433c:	6978      	ldr	r0, [r7, #20]
 801433e:	f002 fdfd 	bl	8016f3c <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8014342:	697b      	ldr	r3, [r7, #20]
 8014344:	2201      	movs	r2, #1
 8014346:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8014348:	697b      	ldr	r3, [r7, #20]
 801434a:	2201      	movs	r2, #1
 801434c:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801434e:	68fb      	ldr	r3, [r7, #12]
 8014350:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8014354:	697b      	ldr	r3, [r7, #20]
 8014356:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8014358:	68bb      	ldr	r3, [r7, #8]
 801435a:	681b      	ldr	r3, [r3, #0]
 801435c:	4618      	mov	r0, r3
 801435e:	f7f5 fde2 	bl	8009f26 <lwip_htonl>
 8014362:	4602      	mov	r2, r0
 8014364:	697b      	ldr	r3, [r7, #20]
 8014366:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8014368:	79fb      	ldrb	r3, [r7, #7]
 801436a:	2b08      	cmp	r3, #8
 801436c:	d010      	beq.n	8014390 <dhcp_create_msg+0xfc>
 801436e:	79fb      	ldrb	r3, [r7, #7]
 8014370:	2b04      	cmp	r3, #4
 8014372:	d00d      	beq.n	8014390 <dhcp_create_msg+0xfc>
 8014374:	79fb      	ldrb	r3, [r7, #7]
 8014376:	2b07      	cmp	r3, #7
 8014378:	d00a      	beq.n	8014390 <dhcp_create_msg+0xfc>
 801437a:	79fb      	ldrb	r3, [r7, #7]
 801437c:	2b03      	cmp	r3, #3
 801437e:	d10c      	bne.n	801439a <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8014380:	68bb      	ldr	r3, [r7, #8]
 8014382:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8014384:	2b05      	cmp	r3, #5
 8014386:	d003      	beq.n	8014390 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8014388:	68bb      	ldr	r3, [r7, #8]
 801438a:	795b      	ldrb	r3, [r3, #5]
 801438c:	2b04      	cmp	r3, #4
 801438e:	d104      	bne.n	801439a <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	3304      	adds	r3, #4
 8014394:	681a      	ldr	r2, [r3, #0]
 8014396:	697b      	ldr	r3, [r7, #20]
 8014398:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801439a:	2300      	movs	r3, #0
 801439c:	83fb      	strh	r3, [r7, #30]
 801439e:	e00c      	b.n	80143ba <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80143a0:	8bfa      	ldrh	r2, [r7, #30]
 80143a2:	8bfb      	ldrh	r3, [r7, #30]
 80143a4:	68f9      	ldr	r1, [r7, #12]
 80143a6:	440a      	add	r2, r1
 80143a8:	f892 1026 	ldrb.w	r1, [r2, #38]	; 0x26
 80143ac:	697a      	ldr	r2, [r7, #20]
 80143ae:	4413      	add	r3, r2
 80143b0:	460a      	mov	r2, r1
 80143b2:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80143b4:	8bfb      	ldrh	r3, [r7, #30]
 80143b6:	3301      	adds	r3, #1
 80143b8:	83fb      	strh	r3, [r7, #30]
 80143ba:	8bfb      	ldrh	r3, [r7, #30]
 80143bc:	2b05      	cmp	r3, #5
 80143be:	d9ef      	bls.n	80143a0 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80143c0:	697b      	ldr	r3, [r7, #20]
 80143c2:	2200      	movs	r2, #0
 80143c4:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80143c8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80143cc:	2200      	movs	r2, #0
 80143ce:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80143d2:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80143d6:	2200      	movs	r2, #0
 80143d8:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80143dc:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80143e0:	2200      	movs	r2, #0
 80143e2:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80143e6:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80143ea:	697b      	ldr	r3, [r7, #20]
 80143ec:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80143f0:	2301      	movs	r3, #1
 80143f2:	2235      	movs	r2, #53	; 0x35
 80143f4:	2000      	movs	r0, #0
 80143f6:	f7ff fadd 	bl	80139b4 <dhcp_option>
 80143fa:	4603      	mov	r3, r0
 80143fc:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80143fe:	697b      	ldr	r3, [r7, #20]
 8014400:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014404:	79fa      	ldrb	r2, [r7, #7]
 8014406:	8a7b      	ldrh	r3, [r7, #18]
 8014408:	4618      	mov	r0, r3
 801440a:	f7ff fb07 	bl	8013a1c <dhcp_option_byte>
 801440e:	4603      	mov	r3, r0
 8014410:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8014412:	683b      	ldr	r3, [r7, #0]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d002      	beq.n	801441e <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8014418:	683b      	ldr	r3, [r7, #0]
 801441a:	8a7a      	ldrh	r2, [r7, #18]
 801441c:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801441e:	69bb      	ldr	r3, [r7, #24]
}
 8014420:	4618      	mov	r0, r3
 8014422:	3720      	adds	r7, #32
 8014424:	46bd      	mov	sp, r7
 8014426:	bd80      	pop	{r7, pc}
 8014428:	0801aae0 	.word	0x0801aae0
 801442c:	0801ae00 	.word	0x0801ae00
 8014430:	0801ab40 	.word	0x0801ab40
 8014434:	0801ae20 	.word	0x0801ae20
 8014438:	0801ae40 	.word	0x0801ae40
 801443c:	20008204 	.word	0x20008204

08014440 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8014440:	b580      	push	{r7, lr}
 8014442:	b084      	sub	sp, #16
 8014444:	af00      	add	r7, sp, #0
 8014446:	4603      	mov	r3, r0
 8014448:	60b9      	str	r1, [r7, #8]
 801444a:	607a      	str	r2, [r7, #4]
 801444c:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801444e:	89fb      	ldrh	r3, [r7, #14]
 8014450:	1c5a      	adds	r2, r3, #1
 8014452:	81fa      	strh	r2, [r7, #14]
 8014454:	461a      	mov	r2, r3
 8014456:	68bb      	ldr	r3, [r7, #8]
 8014458:	4413      	add	r3, r2
 801445a:	22ff      	movs	r2, #255	; 0xff
 801445c:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801445e:	e007      	b.n	8014470 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8014460:	89fb      	ldrh	r3, [r7, #14]
 8014462:	1c5a      	adds	r2, r3, #1
 8014464:	81fa      	strh	r2, [r7, #14]
 8014466:	461a      	mov	r2, r3
 8014468:	68bb      	ldr	r3, [r7, #8]
 801446a:	4413      	add	r3, r2
 801446c:	2200      	movs	r2, #0
 801446e:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8014470:	89fb      	ldrh	r3, [r7, #14]
 8014472:	2b43      	cmp	r3, #67	; 0x43
 8014474:	d904      	bls.n	8014480 <dhcp_option_trailer+0x40>
 8014476:	89fb      	ldrh	r3, [r7, #14]
 8014478:	f003 0303 	and.w	r3, r3, #3
 801447c:	2b00      	cmp	r3, #0
 801447e:	d002      	beq.n	8014486 <dhcp_option_trailer+0x46>
 8014480:	89fb      	ldrh	r3, [r7, #14]
 8014482:	2b43      	cmp	r3, #67	; 0x43
 8014484:	d9ec      	bls.n	8014460 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8014486:	89fb      	ldrh	r3, [r7, #14]
 8014488:	33f0      	adds	r3, #240	; 0xf0
 801448a:	b29b      	uxth	r3, r3
 801448c:	4619      	mov	r1, r3
 801448e:	6878      	ldr	r0, [r7, #4]
 8014490:	f7f6 fee4 	bl	800b25c <pbuf_realloc>
}
 8014494:	bf00      	nop
 8014496:	3710      	adds	r7, #16
 8014498:	46bd      	mov	sp, r7
 801449a:	bd80      	pop	{r7, pc}

0801449c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801449c:	b480      	push	{r7}
 801449e:	b085      	sub	sp, #20
 80144a0:	af00      	add	r7, sp, #0
 80144a2:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d017      	beq.n	80144da <dhcp_supplied_address+0x3e>
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	6a1b      	ldr	r3, [r3, #32]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d013      	beq.n	80144da <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	6a1b      	ldr	r3, [r3, #32]
 80144b6:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	795b      	ldrb	r3, [r3, #5]
 80144bc:	2b0a      	cmp	r3, #10
 80144be:	d007      	beq.n	80144d0 <dhcp_supplied_address+0x34>
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	795b      	ldrb	r3, [r3, #5]
 80144c4:	2b05      	cmp	r3, #5
 80144c6:	d003      	beq.n	80144d0 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80144cc:	2b04      	cmp	r3, #4
 80144ce:	d101      	bne.n	80144d4 <dhcp_supplied_address+0x38>
 80144d0:	2301      	movs	r3, #1
 80144d2:	e000      	b.n	80144d6 <dhcp_supplied_address+0x3a>
 80144d4:	2300      	movs	r3, #0
 80144d6:	b2db      	uxtb	r3, r3
 80144d8:	e000      	b.n	80144dc <dhcp_supplied_address+0x40>
  }
  return 0;
 80144da:	2300      	movs	r3, #0
}
 80144dc:	4618      	mov	r0, r3
 80144de:	3714      	adds	r7, #20
 80144e0:	46bd      	mov	sp, r7
 80144e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144e6:	4770      	bx	lr

080144e8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80144e8:	b580      	push	{r7, lr}
 80144ea:	b082      	sub	sp, #8
 80144ec:	af00      	add	r7, sp, #0
 80144ee:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80144f0:	4915      	ldr	r1, [pc, #84]	; (8014548 <etharp_free_entry+0x60>)
 80144f2:	687a      	ldr	r2, [r7, #4]
 80144f4:	4613      	mov	r3, r2
 80144f6:	005b      	lsls	r3, r3, #1
 80144f8:	4413      	add	r3, r2
 80144fa:	00db      	lsls	r3, r3, #3
 80144fc:	440b      	add	r3, r1
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	2b00      	cmp	r3, #0
 8014502:	d013      	beq.n	801452c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014504:	4910      	ldr	r1, [pc, #64]	; (8014548 <etharp_free_entry+0x60>)
 8014506:	687a      	ldr	r2, [r7, #4]
 8014508:	4613      	mov	r3, r2
 801450a:	005b      	lsls	r3, r3, #1
 801450c:	4413      	add	r3, r2
 801450e:	00db      	lsls	r3, r3, #3
 8014510:	440b      	add	r3, r1
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	4618      	mov	r0, r3
 8014516:	f7f7 f827 	bl	800b568 <pbuf_free>
    arp_table[i].q = NULL;
 801451a:	490b      	ldr	r1, [pc, #44]	; (8014548 <etharp_free_entry+0x60>)
 801451c:	687a      	ldr	r2, [r7, #4]
 801451e:	4613      	mov	r3, r2
 8014520:	005b      	lsls	r3, r3, #1
 8014522:	4413      	add	r3, r2
 8014524:	00db      	lsls	r3, r3, #3
 8014526:	440b      	add	r3, r1
 8014528:	2200      	movs	r2, #0
 801452a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801452c:	4906      	ldr	r1, [pc, #24]	; (8014548 <etharp_free_entry+0x60>)
 801452e:	687a      	ldr	r2, [r7, #4]
 8014530:	4613      	mov	r3, r2
 8014532:	005b      	lsls	r3, r3, #1
 8014534:	4413      	add	r3, r2
 8014536:	00db      	lsls	r3, r3, #3
 8014538:	440b      	add	r3, r1
 801453a:	3314      	adds	r3, #20
 801453c:	2200      	movs	r2, #0
 801453e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014540:	bf00      	nop
 8014542:	3708      	adds	r7, #8
 8014544:	46bd      	mov	sp, r7
 8014546:	bd80      	pop	{r7, pc}
 8014548:	20008208 	.word	0x20008208

0801454c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801454c:	b580      	push	{r7, lr}
 801454e:	b082      	sub	sp, #8
 8014550:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014552:	2300      	movs	r3, #0
 8014554:	607b      	str	r3, [r7, #4]
 8014556:	e096      	b.n	8014686 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014558:	494f      	ldr	r1, [pc, #316]	; (8014698 <etharp_tmr+0x14c>)
 801455a:	687a      	ldr	r2, [r7, #4]
 801455c:	4613      	mov	r3, r2
 801455e:	005b      	lsls	r3, r3, #1
 8014560:	4413      	add	r3, r2
 8014562:	00db      	lsls	r3, r3, #3
 8014564:	440b      	add	r3, r1
 8014566:	3314      	adds	r3, #20
 8014568:	781b      	ldrb	r3, [r3, #0]
 801456a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801456c:	78fb      	ldrb	r3, [r7, #3]
 801456e:	2b00      	cmp	r3, #0
 8014570:	f000 8086 	beq.w	8014680 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014574:	4948      	ldr	r1, [pc, #288]	; (8014698 <etharp_tmr+0x14c>)
 8014576:	687a      	ldr	r2, [r7, #4]
 8014578:	4613      	mov	r3, r2
 801457a:	005b      	lsls	r3, r3, #1
 801457c:	4413      	add	r3, r2
 801457e:	00db      	lsls	r3, r3, #3
 8014580:	440b      	add	r3, r1
 8014582:	3312      	adds	r3, #18
 8014584:	881b      	ldrh	r3, [r3, #0]
 8014586:	3301      	adds	r3, #1
 8014588:	b298      	uxth	r0, r3
 801458a:	4943      	ldr	r1, [pc, #268]	; (8014698 <etharp_tmr+0x14c>)
 801458c:	687a      	ldr	r2, [r7, #4]
 801458e:	4613      	mov	r3, r2
 8014590:	005b      	lsls	r3, r3, #1
 8014592:	4413      	add	r3, r2
 8014594:	00db      	lsls	r3, r3, #3
 8014596:	440b      	add	r3, r1
 8014598:	3312      	adds	r3, #18
 801459a:	4602      	mov	r2, r0
 801459c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801459e:	493e      	ldr	r1, [pc, #248]	; (8014698 <etharp_tmr+0x14c>)
 80145a0:	687a      	ldr	r2, [r7, #4]
 80145a2:	4613      	mov	r3, r2
 80145a4:	005b      	lsls	r3, r3, #1
 80145a6:	4413      	add	r3, r2
 80145a8:	00db      	lsls	r3, r3, #3
 80145aa:	440b      	add	r3, r1
 80145ac:	3312      	adds	r3, #18
 80145ae:	881b      	ldrh	r3, [r3, #0]
 80145b0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80145b4:	d215      	bcs.n	80145e2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80145b6:	4938      	ldr	r1, [pc, #224]	; (8014698 <etharp_tmr+0x14c>)
 80145b8:	687a      	ldr	r2, [r7, #4]
 80145ba:	4613      	mov	r3, r2
 80145bc:	005b      	lsls	r3, r3, #1
 80145be:	4413      	add	r3, r2
 80145c0:	00db      	lsls	r3, r3, #3
 80145c2:	440b      	add	r3, r1
 80145c4:	3314      	adds	r3, #20
 80145c6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80145c8:	2b01      	cmp	r3, #1
 80145ca:	d10e      	bne.n	80145ea <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80145cc:	4932      	ldr	r1, [pc, #200]	; (8014698 <etharp_tmr+0x14c>)
 80145ce:	687a      	ldr	r2, [r7, #4]
 80145d0:	4613      	mov	r3, r2
 80145d2:	005b      	lsls	r3, r3, #1
 80145d4:	4413      	add	r3, r2
 80145d6:	00db      	lsls	r3, r3, #3
 80145d8:	440b      	add	r3, r1
 80145da:	3312      	adds	r3, #18
 80145dc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80145de:	2b04      	cmp	r3, #4
 80145e0:	d903      	bls.n	80145ea <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80145e2:	6878      	ldr	r0, [r7, #4]
 80145e4:	f7ff ff80 	bl	80144e8 <etharp_free_entry>
 80145e8:	e04a      	b.n	8014680 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80145ea:	492b      	ldr	r1, [pc, #172]	; (8014698 <etharp_tmr+0x14c>)
 80145ec:	687a      	ldr	r2, [r7, #4]
 80145ee:	4613      	mov	r3, r2
 80145f0:	005b      	lsls	r3, r3, #1
 80145f2:	4413      	add	r3, r2
 80145f4:	00db      	lsls	r3, r3, #3
 80145f6:	440b      	add	r3, r1
 80145f8:	3314      	adds	r3, #20
 80145fa:	781b      	ldrb	r3, [r3, #0]
 80145fc:	2b03      	cmp	r3, #3
 80145fe:	d10a      	bne.n	8014616 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014600:	4925      	ldr	r1, [pc, #148]	; (8014698 <etharp_tmr+0x14c>)
 8014602:	687a      	ldr	r2, [r7, #4]
 8014604:	4613      	mov	r3, r2
 8014606:	005b      	lsls	r3, r3, #1
 8014608:	4413      	add	r3, r2
 801460a:	00db      	lsls	r3, r3, #3
 801460c:	440b      	add	r3, r1
 801460e:	3314      	adds	r3, #20
 8014610:	2204      	movs	r2, #4
 8014612:	701a      	strb	r2, [r3, #0]
 8014614:	e034      	b.n	8014680 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014616:	4920      	ldr	r1, [pc, #128]	; (8014698 <etharp_tmr+0x14c>)
 8014618:	687a      	ldr	r2, [r7, #4]
 801461a:	4613      	mov	r3, r2
 801461c:	005b      	lsls	r3, r3, #1
 801461e:	4413      	add	r3, r2
 8014620:	00db      	lsls	r3, r3, #3
 8014622:	440b      	add	r3, r1
 8014624:	3314      	adds	r3, #20
 8014626:	781b      	ldrb	r3, [r3, #0]
 8014628:	2b04      	cmp	r3, #4
 801462a:	d10a      	bne.n	8014642 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801462c:	491a      	ldr	r1, [pc, #104]	; (8014698 <etharp_tmr+0x14c>)
 801462e:	687a      	ldr	r2, [r7, #4]
 8014630:	4613      	mov	r3, r2
 8014632:	005b      	lsls	r3, r3, #1
 8014634:	4413      	add	r3, r2
 8014636:	00db      	lsls	r3, r3, #3
 8014638:	440b      	add	r3, r1
 801463a:	3314      	adds	r3, #20
 801463c:	2202      	movs	r2, #2
 801463e:	701a      	strb	r2, [r3, #0]
 8014640:	e01e      	b.n	8014680 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014642:	4915      	ldr	r1, [pc, #84]	; (8014698 <etharp_tmr+0x14c>)
 8014644:	687a      	ldr	r2, [r7, #4]
 8014646:	4613      	mov	r3, r2
 8014648:	005b      	lsls	r3, r3, #1
 801464a:	4413      	add	r3, r2
 801464c:	00db      	lsls	r3, r3, #3
 801464e:	440b      	add	r3, r1
 8014650:	3314      	adds	r3, #20
 8014652:	781b      	ldrb	r3, [r3, #0]
 8014654:	2b01      	cmp	r3, #1
 8014656:	d113      	bne.n	8014680 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014658:	490f      	ldr	r1, [pc, #60]	; (8014698 <etharp_tmr+0x14c>)
 801465a:	687a      	ldr	r2, [r7, #4]
 801465c:	4613      	mov	r3, r2
 801465e:	005b      	lsls	r3, r3, #1
 8014660:	4413      	add	r3, r2
 8014662:	00db      	lsls	r3, r3, #3
 8014664:	440b      	add	r3, r1
 8014666:	3308      	adds	r3, #8
 8014668:	6818      	ldr	r0, [r3, #0]
 801466a:	687a      	ldr	r2, [r7, #4]
 801466c:	4613      	mov	r3, r2
 801466e:	005b      	lsls	r3, r3, #1
 8014670:	4413      	add	r3, r2
 8014672:	00db      	lsls	r3, r3, #3
 8014674:	4a08      	ldr	r2, [pc, #32]	; (8014698 <etharp_tmr+0x14c>)
 8014676:	4413      	add	r3, r2
 8014678:	3304      	adds	r3, #4
 801467a:	4619      	mov	r1, r3
 801467c:	f000 fe72 	bl	8015364 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	3301      	adds	r3, #1
 8014684:	607b      	str	r3, [r7, #4]
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	2b09      	cmp	r3, #9
 801468a:	f77f af65 	ble.w	8014558 <etharp_tmr+0xc>
      }
    }
  }
}
 801468e:	bf00      	nop
 8014690:	3708      	adds	r7, #8
 8014692:	46bd      	mov	sp, r7
 8014694:	bd80      	pop	{r7, pc}
 8014696:	bf00      	nop
 8014698:	20008208 	.word	0x20008208

0801469c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801469c:	b580      	push	{r7, lr}
 801469e:	b08a      	sub	sp, #40	; 0x28
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	60f8      	str	r0, [r7, #12]
 80146a4:	460b      	mov	r3, r1
 80146a6:	607a      	str	r2, [r7, #4]
 80146a8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80146aa:	230a      	movs	r3, #10
 80146ac:	84fb      	strh	r3, [r7, #38]	; 0x26
 80146ae:	230a      	movs	r3, #10
 80146b0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80146b2:	230a      	movs	r3, #10
 80146b4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80146b6:	2300      	movs	r3, #0
 80146b8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80146ba:	230a      	movs	r3, #10
 80146bc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80146be:	2300      	movs	r3, #0
 80146c0:	83bb      	strh	r3, [r7, #28]
 80146c2:	2300      	movs	r3, #0
 80146c4:	837b      	strh	r3, [r7, #26]
 80146c6:	2300      	movs	r3, #0
 80146c8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80146ca:	2300      	movs	r3, #0
 80146cc:	843b      	strh	r3, [r7, #32]
 80146ce:	e0ae      	b.n	801482e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80146d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80146d4:	49a6      	ldr	r1, [pc, #664]	; (8014970 <etharp_find_entry+0x2d4>)
 80146d6:	4613      	mov	r3, r2
 80146d8:	005b      	lsls	r3, r3, #1
 80146da:	4413      	add	r3, r2
 80146dc:	00db      	lsls	r3, r3, #3
 80146de:	440b      	add	r3, r1
 80146e0:	3314      	adds	r3, #20
 80146e2:	781b      	ldrb	r3, [r3, #0]
 80146e4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80146e6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80146ea:	2b0a      	cmp	r3, #10
 80146ec:	d105      	bne.n	80146fa <etharp_find_entry+0x5e>
 80146ee:	7dfb      	ldrb	r3, [r7, #23]
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d102      	bne.n	80146fa <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80146f4:	8c3b      	ldrh	r3, [r7, #32]
 80146f6:	847b      	strh	r3, [r7, #34]	; 0x22
 80146f8:	e095      	b.n	8014826 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80146fa:	7dfb      	ldrb	r3, [r7, #23]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	f000 8092 	beq.w	8014826 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014702:	7dfb      	ldrb	r3, [r7, #23]
 8014704:	2b01      	cmp	r3, #1
 8014706:	d009      	beq.n	801471c <etharp_find_entry+0x80>
 8014708:	7dfb      	ldrb	r3, [r7, #23]
 801470a:	2b01      	cmp	r3, #1
 801470c:	d806      	bhi.n	801471c <etharp_find_entry+0x80>
 801470e:	4b99      	ldr	r3, [pc, #612]	; (8014974 <etharp_find_entry+0x2d8>)
 8014710:	f44f 7292 	mov.w	r2, #292	; 0x124
 8014714:	4998      	ldr	r1, [pc, #608]	; (8014978 <etharp_find_entry+0x2dc>)
 8014716:	4899      	ldr	r0, [pc, #612]	; (801497c <etharp_find_entry+0x2e0>)
 8014718:	f002 fc18 	bl	8016f4c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801471c:	68fb      	ldr	r3, [r7, #12]
 801471e:	2b00      	cmp	r3, #0
 8014720:	d020      	beq.n	8014764 <etharp_find_entry+0xc8>
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	6819      	ldr	r1, [r3, #0]
 8014726:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801472a:	4891      	ldr	r0, [pc, #580]	; (8014970 <etharp_find_entry+0x2d4>)
 801472c:	4613      	mov	r3, r2
 801472e:	005b      	lsls	r3, r3, #1
 8014730:	4413      	add	r3, r2
 8014732:	00db      	lsls	r3, r3, #3
 8014734:	4403      	add	r3, r0
 8014736:	3304      	adds	r3, #4
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	4299      	cmp	r1, r3
 801473c:	d112      	bne.n	8014764 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	2b00      	cmp	r3, #0
 8014742:	d00c      	beq.n	801475e <etharp_find_entry+0xc2>
 8014744:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014748:	4989      	ldr	r1, [pc, #548]	; (8014970 <etharp_find_entry+0x2d4>)
 801474a:	4613      	mov	r3, r2
 801474c:	005b      	lsls	r3, r3, #1
 801474e:	4413      	add	r3, r2
 8014750:	00db      	lsls	r3, r3, #3
 8014752:	440b      	add	r3, r1
 8014754:	3308      	adds	r3, #8
 8014756:	681b      	ldr	r3, [r3, #0]
 8014758:	687a      	ldr	r2, [r7, #4]
 801475a:	429a      	cmp	r2, r3
 801475c:	d102      	bne.n	8014764 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801475e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014762:	e100      	b.n	8014966 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014764:	7dfb      	ldrb	r3, [r7, #23]
 8014766:	2b01      	cmp	r3, #1
 8014768:	d140      	bne.n	80147ec <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801476a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801476e:	4980      	ldr	r1, [pc, #512]	; (8014970 <etharp_find_entry+0x2d4>)
 8014770:	4613      	mov	r3, r2
 8014772:	005b      	lsls	r3, r3, #1
 8014774:	4413      	add	r3, r2
 8014776:	00db      	lsls	r3, r3, #3
 8014778:	440b      	add	r3, r1
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	2b00      	cmp	r3, #0
 801477e:	d01a      	beq.n	80147b6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014780:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014784:	497a      	ldr	r1, [pc, #488]	; (8014970 <etharp_find_entry+0x2d4>)
 8014786:	4613      	mov	r3, r2
 8014788:	005b      	lsls	r3, r3, #1
 801478a:	4413      	add	r3, r2
 801478c:	00db      	lsls	r3, r3, #3
 801478e:	440b      	add	r3, r1
 8014790:	3312      	adds	r3, #18
 8014792:	881b      	ldrh	r3, [r3, #0]
 8014794:	8bba      	ldrh	r2, [r7, #28]
 8014796:	429a      	cmp	r2, r3
 8014798:	d845      	bhi.n	8014826 <etharp_find_entry+0x18a>
            old_queue = i;
 801479a:	8c3b      	ldrh	r3, [r7, #32]
 801479c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801479e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80147a2:	4973      	ldr	r1, [pc, #460]	; (8014970 <etharp_find_entry+0x2d4>)
 80147a4:	4613      	mov	r3, r2
 80147a6:	005b      	lsls	r3, r3, #1
 80147a8:	4413      	add	r3, r2
 80147aa:	00db      	lsls	r3, r3, #3
 80147ac:	440b      	add	r3, r1
 80147ae:	3312      	adds	r3, #18
 80147b0:	881b      	ldrh	r3, [r3, #0]
 80147b2:	83bb      	strh	r3, [r7, #28]
 80147b4:	e037      	b.n	8014826 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80147b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80147ba:	496d      	ldr	r1, [pc, #436]	; (8014970 <etharp_find_entry+0x2d4>)
 80147bc:	4613      	mov	r3, r2
 80147be:	005b      	lsls	r3, r3, #1
 80147c0:	4413      	add	r3, r2
 80147c2:	00db      	lsls	r3, r3, #3
 80147c4:	440b      	add	r3, r1
 80147c6:	3312      	adds	r3, #18
 80147c8:	881b      	ldrh	r3, [r3, #0]
 80147ca:	8b7a      	ldrh	r2, [r7, #26]
 80147cc:	429a      	cmp	r2, r3
 80147ce:	d82a      	bhi.n	8014826 <etharp_find_entry+0x18a>
            old_pending = i;
 80147d0:	8c3b      	ldrh	r3, [r7, #32]
 80147d2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80147d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80147d8:	4965      	ldr	r1, [pc, #404]	; (8014970 <etharp_find_entry+0x2d4>)
 80147da:	4613      	mov	r3, r2
 80147dc:	005b      	lsls	r3, r3, #1
 80147de:	4413      	add	r3, r2
 80147e0:	00db      	lsls	r3, r3, #3
 80147e2:	440b      	add	r3, r1
 80147e4:	3312      	adds	r3, #18
 80147e6:	881b      	ldrh	r3, [r3, #0]
 80147e8:	837b      	strh	r3, [r7, #26]
 80147ea:	e01c      	b.n	8014826 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80147ec:	7dfb      	ldrb	r3, [r7, #23]
 80147ee:	2b01      	cmp	r3, #1
 80147f0:	d919      	bls.n	8014826 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80147f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80147f6:	495e      	ldr	r1, [pc, #376]	; (8014970 <etharp_find_entry+0x2d4>)
 80147f8:	4613      	mov	r3, r2
 80147fa:	005b      	lsls	r3, r3, #1
 80147fc:	4413      	add	r3, r2
 80147fe:	00db      	lsls	r3, r3, #3
 8014800:	440b      	add	r3, r1
 8014802:	3312      	adds	r3, #18
 8014804:	881b      	ldrh	r3, [r3, #0]
 8014806:	8b3a      	ldrh	r2, [r7, #24]
 8014808:	429a      	cmp	r2, r3
 801480a:	d80c      	bhi.n	8014826 <etharp_find_entry+0x18a>
            old_stable = i;
 801480c:	8c3b      	ldrh	r3, [r7, #32]
 801480e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8014810:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014814:	4956      	ldr	r1, [pc, #344]	; (8014970 <etharp_find_entry+0x2d4>)
 8014816:	4613      	mov	r3, r2
 8014818:	005b      	lsls	r3, r3, #1
 801481a:	4413      	add	r3, r2
 801481c:	00db      	lsls	r3, r3, #3
 801481e:	440b      	add	r3, r1
 8014820:	3312      	adds	r3, #18
 8014822:	881b      	ldrh	r3, [r3, #0]
 8014824:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014826:	8c3b      	ldrh	r3, [r7, #32]
 8014828:	3301      	adds	r3, #1
 801482a:	b29b      	uxth	r3, r3
 801482c:	843b      	strh	r3, [r7, #32]
 801482e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014832:	2b09      	cmp	r3, #9
 8014834:	f77f af4c 	ble.w	80146d0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014838:	7afb      	ldrb	r3, [r7, #11]
 801483a:	f003 0302 	and.w	r3, r3, #2
 801483e:	2b00      	cmp	r3, #0
 8014840:	d108      	bne.n	8014854 <etharp_find_entry+0x1b8>
 8014842:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014846:	2b0a      	cmp	r3, #10
 8014848:	d107      	bne.n	801485a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801484a:	7afb      	ldrb	r3, [r7, #11]
 801484c:	f003 0301 	and.w	r3, r3, #1
 8014850:	2b00      	cmp	r3, #0
 8014852:	d102      	bne.n	801485a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014854:	f04f 33ff 	mov.w	r3, #4294967295
 8014858:	e085      	b.n	8014966 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801485a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801485e:	2b09      	cmp	r3, #9
 8014860:	dc02      	bgt.n	8014868 <etharp_find_entry+0x1cc>
    i = empty;
 8014862:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014864:	843b      	strh	r3, [r7, #32]
 8014866:	e039      	b.n	80148dc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014868:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801486c:	2b09      	cmp	r3, #9
 801486e:	dc14      	bgt.n	801489a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014870:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014872:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014874:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014878:	493d      	ldr	r1, [pc, #244]	; (8014970 <etharp_find_entry+0x2d4>)
 801487a:	4613      	mov	r3, r2
 801487c:	005b      	lsls	r3, r3, #1
 801487e:	4413      	add	r3, r2
 8014880:	00db      	lsls	r3, r3, #3
 8014882:	440b      	add	r3, r1
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d018      	beq.n	80148bc <etharp_find_entry+0x220>
 801488a:	4b3a      	ldr	r3, [pc, #232]	; (8014974 <etharp_find_entry+0x2d8>)
 801488c:	f240 126d 	movw	r2, #365	; 0x16d
 8014890:	493b      	ldr	r1, [pc, #236]	; (8014980 <etharp_find_entry+0x2e4>)
 8014892:	483a      	ldr	r0, [pc, #232]	; (801497c <etharp_find_entry+0x2e0>)
 8014894:	f002 fb5a 	bl	8016f4c <iprintf>
 8014898:	e010      	b.n	80148bc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801489a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801489e:	2b09      	cmp	r3, #9
 80148a0:	dc02      	bgt.n	80148a8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80148a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80148a4:	843b      	strh	r3, [r7, #32]
 80148a6:	e009      	b.n	80148bc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80148a8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80148ac:	2b09      	cmp	r3, #9
 80148ae:	dc02      	bgt.n	80148b6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80148b0:	8bfb      	ldrh	r3, [r7, #30]
 80148b2:	843b      	strh	r3, [r7, #32]
 80148b4:	e002      	b.n	80148bc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80148b6:	f04f 33ff 	mov.w	r3, #4294967295
 80148ba:	e054      	b.n	8014966 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80148bc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80148c0:	2b09      	cmp	r3, #9
 80148c2:	dd06      	ble.n	80148d2 <etharp_find_entry+0x236>
 80148c4:	4b2b      	ldr	r3, [pc, #172]	; (8014974 <etharp_find_entry+0x2d8>)
 80148c6:	f240 127f 	movw	r2, #383	; 0x17f
 80148ca:	492e      	ldr	r1, [pc, #184]	; (8014984 <etharp_find_entry+0x2e8>)
 80148cc:	482b      	ldr	r0, [pc, #172]	; (801497c <etharp_find_entry+0x2e0>)
 80148ce:	f002 fb3d 	bl	8016f4c <iprintf>
    etharp_free_entry(i);
 80148d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80148d6:	4618      	mov	r0, r3
 80148d8:	f7ff fe06 	bl	80144e8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80148dc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80148e0:	2b09      	cmp	r3, #9
 80148e2:	dd06      	ble.n	80148f2 <etharp_find_entry+0x256>
 80148e4:	4b23      	ldr	r3, [pc, #140]	; (8014974 <etharp_find_entry+0x2d8>)
 80148e6:	f240 1283 	movw	r2, #387	; 0x183
 80148ea:	4926      	ldr	r1, [pc, #152]	; (8014984 <etharp_find_entry+0x2e8>)
 80148ec:	4823      	ldr	r0, [pc, #140]	; (801497c <etharp_find_entry+0x2e0>)
 80148ee:	f002 fb2d 	bl	8016f4c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80148f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80148f6:	491e      	ldr	r1, [pc, #120]	; (8014970 <etharp_find_entry+0x2d4>)
 80148f8:	4613      	mov	r3, r2
 80148fa:	005b      	lsls	r3, r3, #1
 80148fc:	4413      	add	r3, r2
 80148fe:	00db      	lsls	r3, r3, #3
 8014900:	440b      	add	r3, r1
 8014902:	3314      	adds	r3, #20
 8014904:	781b      	ldrb	r3, [r3, #0]
 8014906:	2b00      	cmp	r3, #0
 8014908:	d006      	beq.n	8014918 <etharp_find_entry+0x27c>
 801490a:	4b1a      	ldr	r3, [pc, #104]	; (8014974 <etharp_find_entry+0x2d8>)
 801490c:	f240 1285 	movw	r2, #389	; 0x185
 8014910:	491d      	ldr	r1, [pc, #116]	; (8014988 <etharp_find_entry+0x2ec>)
 8014912:	481a      	ldr	r0, [pc, #104]	; (801497c <etharp_find_entry+0x2e0>)
 8014914:	f002 fb1a 	bl	8016f4c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d00b      	beq.n	8014936 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801491e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	6819      	ldr	r1, [r3, #0]
 8014926:	4812      	ldr	r0, [pc, #72]	; (8014970 <etharp_find_entry+0x2d4>)
 8014928:	4613      	mov	r3, r2
 801492a:	005b      	lsls	r3, r3, #1
 801492c:	4413      	add	r3, r2
 801492e:	00db      	lsls	r3, r3, #3
 8014930:	4403      	add	r3, r0
 8014932:	3304      	adds	r3, #4
 8014934:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014936:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801493a:	490d      	ldr	r1, [pc, #52]	; (8014970 <etharp_find_entry+0x2d4>)
 801493c:	4613      	mov	r3, r2
 801493e:	005b      	lsls	r3, r3, #1
 8014940:	4413      	add	r3, r2
 8014942:	00db      	lsls	r3, r3, #3
 8014944:	440b      	add	r3, r1
 8014946:	3312      	adds	r3, #18
 8014948:	2200      	movs	r2, #0
 801494a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801494c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014950:	4907      	ldr	r1, [pc, #28]	; (8014970 <etharp_find_entry+0x2d4>)
 8014952:	4613      	mov	r3, r2
 8014954:	005b      	lsls	r3, r3, #1
 8014956:	4413      	add	r3, r2
 8014958:	00db      	lsls	r3, r3, #3
 801495a:	440b      	add	r3, r1
 801495c:	3308      	adds	r3, #8
 801495e:	687a      	ldr	r2, [r7, #4]
 8014960:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014962:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014966:	4618      	mov	r0, r3
 8014968:	3728      	adds	r7, #40	; 0x28
 801496a:	46bd      	mov	sp, r7
 801496c:	bd80      	pop	{r7, pc}
 801496e:	bf00      	nop
 8014970:	20008208 	.word	0x20008208
 8014974:	0801ae80 	.word	0x0801ae80
 8014978:	0801aeb8 	.word	0x0801aeb8
 801497c:	0801aef8 	.word	0x0801aef8
 8014980:	0801af20 	.word	0x0801af20
 8014984:	0801af38 	.word	0x0801af38
 8014988:	0801af4c 	.word	0x0801af4c

0801498c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801498c:	b580      	push	{r7, lr}
 801498e:	b088      	sub	sp, #32
 8014990:	af02      	add	r7, sp, #8
 8014992:	60f8      	str	r0, [r7, #12]
 8014994:	60b9      	str	r1, [r7, #8]
 8014996:	607a      	str	r2, [r7, #4]
 8014998:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80149a0:	2b06      	cmp	r3, #6
 80149a2:	d006      	beq.n	80149b2 <etharp_update_arp_entry+0x26>
 80149a4:	4b48      	ldr	r3, [pc, #288]	; (8014ac8 <etharp_update_arp_entry+0x13c>)
 80149a6:	f240 12a9 	movw	r2, #425	; 0x1a9
 80149aa:	4948      	ldr	r1, [pc, #288]	; (8014acc <etharp_update_arp_entry+0x140>)
 80149ac:	4848      	ldr	r0, [pc, #288]	; (8014ad0 <etharp_update_arp_entry+0x144>)
 80149ae:	f002 facd 	bl	8016f4c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80149b2:	68bb      	ldr	r3, [r7, #8]
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d012      	beq.n	80149de <etharp_update_arp_entry+0x52>
 80149b8:	68bb      	ldr	r3, [r7, #8]
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d00e      	beq.n	80149de <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80149c0:	68bb      	ldr	r3, [r7, #8]
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	68f9      	ldr	r1, [r7, #12]
 80149c6:	4618      	mov	r0, r3
 80149c8:	f001 f91e 	bl	8015c08 <ip4_addr_isbroadcast_u32>
 80149cc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d105      	bne.n	80149de <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80149d2:	68bb      	ldr	r3, [r7, #8]
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80149da:	2be0      	cmp	r3, #224	; 0xe0
 80149dc:	d102      	bne.n	80149e4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80149de:	f06f 030f 	mvn.w	r3, #15
 80149e2:	e06c      	b.n	8014abe <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80149e4:	78fb      	ldrb	r3, [r7, #3]
 80149e6:	68fa      	ldr	r2, [r7, #12]
 80149e8:	4619      	mov	r1, r3
 80149ea:	68b8      	ldr	r0, [r7, #8]
 80149ec:	f7ff fe56 	bl	801469c <etharp_find_entry>
 80149f0:	4603      	mov	r3, r0
 80149f2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80149f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	da02      	bge.n	8014a02 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80149fc:	8afb      	ldrh	r3, [r7, #22]
 80149fe:	b25b      	sxtb	r3, r3
 8014a00:	e05d      	b.n	8014abe <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014a02:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014a06:	4933      	ldr	r1, [pc, #204]	; (8014ad4 <etharp_update_arp_entry+0x148>)
 8014a08:	4613      	mov	r3, r2
 8014a0a:	005b      	lsls	r3, r3, #1
 8014a0c:	4413      	add	r3, r2
 8014a0e:	00db      	lsls	r3, r3, #3
 8014a10:	440b      	add	r3, r1
 8014a12:	3314      	adds	r3, #20
 8014a14:	2202      	movs	r2, #2
 8014a16:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014a18:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014a1c:	492d      	ldr	r1, [pc, #180]	; (8014ad4 <etharp_update_arp_entry+0x148>)
 8014a1e:	4613      	mov	r3, r2
 8014a20:	005b      	lsls	r3, r3, #1
 8014a22:	4413      	add	r3, r2
 8014a24:	00db      	lsls	r3, r3, #3
 8014a26:	440b      	add	r3, r1
 8014a28:	3308      	adds	r3, #8
 8014a2a:	68fa      	ldr	r2, [r7, #12]
 8014a2c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014a2e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014a32:	4613      	mov	r3, r2
 8014a34:	005b      	lsls	r3, r3, #1
 8014a36:	4413      	add	r3, r2
 8014a38:	00db      	lsls	r3, r3, #3
 8014a3a:	3308      	adds	r3, #8
 8014a3c:	4a25      	ldr	r2, [pc, #148]	; (8014ad4 <etharp_update_arp_entry+0x148>)
 8014a3e:	4413      	add	r3, r2
 8014a40:	3304      	adds	r3, #4
 8014a42:	2206      	movs	r2, #6
 8014a44:	6879      	ldr	r1, [r7, #4]
 8014a46:	4618      	mov	r0, r3
 8014a48:	f002 fa6d 	bl	8016f26 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014a4c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014a50:	4920      	ldr	r1, [pc, #128]	; (8014ad4 <etharp_update_arp_entry+0x148>)
 8014a52:	4613      	mov	r3, r2
 8014a54:	005b      	lsls	r3, r3, #1
 8014a56:	4413      	add	r3, r2
 8014a58:	00db      	lsls	r3, r3, #3
 8014a5a:	440b      	add	r3, r1
 8014a5c:	3312      	adds	r3, #18
 8014a5e:	2200      	movs	r2, #0
 8014a60:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014a62:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014a66:	491b      	ldr	r1, [pc, #108]	; (8014ad4 <etharp_update_arp_entry+0x148>)
 8014a68:	4613      	mov	r3, r2
 8014a6a:	005b      	lsls	r3, r3, #1
 8014a6c:	4413      	add	r3, r2
 8014a6e:	00db      	lsls	r3, r3, #3
 8014a70:	440b      	add	r3, r1
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d021      	beq.n	8014abc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014a78:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014a7c:	4915      	ldr	r1, [pc, #84]	; (8014ad4 <etharp_update_arp_entry+0x148>)
 8014a7e:	4613      	mov	r3, r2
 8014a80:	005b      	lsls	r3, r3, #1
 8014a82:	4413      	add	r3, r2
 8014a84:	00db      	lsls	r3, r3, #3
 8014a86:	440b      	add	r3, r1
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014a8c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014a90:	4910      	ldr	r1, [pc, #64]	; (8014ad4 <etharp_update_arp_entry+0x148>)
 8014a92:	4613      	mov	r3, r2
 8014a94:	005b      	lsls	r3, r3, #1
 8014a96:	4413      	add	r3, r2
 8014a98:	00db      	lsls	r3, r3, #3
 8014a9a:	440b      	add	r3, r1
 8014a9c:	2200      	movs	r2, #0
 8014a9e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014aa6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014aaa:	9300      	str	r3, [sp, #0]
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	6939      	ldr	r1, [r7, #16]
 8014ab0:	68f8      	ldr	r0, [r7, #12]
 8014ab2:	f001 ffad 	bl	8016a10 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014ab6:	6938      	ldr	r0, [r7, #16]
 8014ab8:	f7f6 fd56 	bl	800b568 <pbuf_free>
  }
  return ERR_OK;
 8014abc:	2300      	movs	r3, #0
}
 8014abe:	4618      	mov	r0, r3
 8014ac0:	3718      	adds	r7, #24
 8014ac2:	46bd      	mov	sp, r7
 8014ac4:	bd80      	pop	{r7, pc}
 8014ac6:	bf00      	nop
 8014ac8:	0801ae80 	.word	0x0801ae80
 8014acc:	0801af78 	.word	0x0801af78
 8014ad0:	0801aef8 	.word	0x0801aef8
 8014ad4:	20008208 	.word	0x20008208

08014ad8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014ad8:	b580      	push	{r7, lr}
 8014ada:	b084      	sub	sp, #16
 8014adc:	af00      	add	r7, sp, #0
 8014ade:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014ae0:	2300      	movs	r3, #0
 8014ae2:	60fb      	str	r3, [r7, #12]
 8014ae4:	e01e      	b.n	8014b24 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014ae6:	4913      	ldr	r1, [pc, #76]	; (8014b34 <etharp_cleanup_netif+0x5c>)
 8014ae8:	68fa      	ldr	r2, [r7, #12]
 8014aea:	4613      	mov	r3, r2
 8014aec:	005b      	lsls	r3, r3, #1
 8014aee:	4413      	add	r3, r2
 8014af0:	00db      	lsls	r3, r3, #3
 8014af2:	440b      	add	r3, r1
 8014af4:	3314      	adds	r3, #20
 8014af6:	781b      	ldrb	r3, [r3, #0]
 8014af8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014afa:	7afb      	ldrb	r3, [r7, #11]
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d00e      	beq.n	8014b1e <etharp_cleanup_netif+0x46>
 8014b00:	490c      	ldr	r1, [pc, #48]	; (8014b34 <etharp_cleanup_netif+0x5c>)
 8014b02:	68fa      	ldr	r2, [r7, #12]
 8014b04:	4613      	mov	r3, r2
 8014b06:	005b      	lsls	r3, r3, #1
 8014b08:	4413      	add	r3, r2
 8014b0a:	00db      	lsls	r3, r3, #3
 8014b0c:	440b      	add	r3, r1
 8014b0e:	3308      	adds	r3, #8
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	687a      	ldr	r2, [r7, #4]
 8014b14:	429a      	cmp	r2, r3
 8014b16:	d102      	bne.n	8014b1e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014b18:	68f8      	ldr	r0, [r7, #12]
 8014b1a:	f7ff fce5 	bl	80144e8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	3301      	adds	r3, #1
 8014b22:	60fb      	str	r3, [r7, #12]
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	2b09      	cmp	r3, #9
 8014b28:	dddd      	ble.n	8014ae6 <etharp_cleanup_netif+0xe>
    }
  }
}
 8014b2a:	bf00      	nop
 8014b2c:	3710      	adds	r7, #16
 8014b2e:	46bd      	mov	sp, r7
 8014b30:	bd80      	pop	{r7, pc}
 8014b32:	bf00      	nop
 8014b34:	20008208 	.word	0x20008208

08014b38 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014b38:	b5b0      	push	{r4, r5, r7, lr}
 8014b3a:	b08a      	sub	sp, #40	; 0x28
 8014b3c:	af04      	add	r7, sp, #16
 8014b3e:	6078      	str	r0, [r7, #4]
 8014b40:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014b42:	683b      	ldr	r3, [r7, #0]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d107      	bne.n	8014b58 <etharp_input+0x20>
 8014b48:	4b3f      	ldr	r3, [pc, #252]	; (8014c48 <etharp_input+0x110>)
 8014b4a:	f240 228a 	movw	r2, #650	; 0x28a
 8014b4e:	493f      	ldr	r1, [pc, #252]	; (8014c4c <etharp_input+0x114>)
 8014b50:	483f      	ldr	r0, [pc, #252]	; (8014c50 <etharp_input+0x118>)
 8014b52:	f002 f9fb 	bl	8016f4c <iprintf>
 8014b56:	e074      	b.n	8014c42 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	685b      	ldr	r3, [r3, #4]
 8014b5c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014b5e:	693b      	ldr	r3, [r7, #16]
 8014b60:	881b      	ldrh	r3, [r3, #0]
 8014b62:	b29b      	uxth	r3, r3
 8014b64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014b68:	d10c      	bne.n	8014b84 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014b6a:	693b      	ldr	r3, [r7, #16]
 8014b6c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014b6e:	2b06      	cmp	r3, #6
 8014b70:	d108      	bne.n	8014b84 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014b72:	693b      	ldr	r3, [r7, #16]
 8014b74:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014b76:	2b04      	cmp	r3, #4
 8014b78:	d104      	bne.n	8014b84 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014b7a:	693b      	ldr	r3, [r7, #16]
 8014b7c:	885b      	ldrh	r3, [r3, #2]
 8014b7e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014b80:	2b08      	cmp	r3, #8
 8014b82:	d003      	beq.n	8014b8c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014b84:	6878      	ldr	r0, [r7, #4]
 8014b86:	f7f6 fcef 	bl	800b568 <pbuf_free>
    return;
 8014b8a:	e05a      	b.n	8014c42 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014b8c:	693b      	ldr	r3, [r7, #16]
 8014b8e:	330e      	adds	r3, #14
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014b94:	693b      	ldr	r3, [r7, #16]
 8014b96:	3318      	adds	r3, #24
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014b9c:	683b      	ldr	r3, [r7, #0]
 8014b9e:	3304      	adds	r3, #4
 8014ba0:	681b      	ldr	r3, [r3, #0]
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d102      	bne.n	8014bac <etharp_input+0x74>
    for_us = 0;
 8014ba6:	2300      	movs	r3, #0
 8014ba8:	75fb      	strb	r3, [r7, #23]
 8014baa:	e009      	b.n	8014bc0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014bac:	68ba      	ldr	r2, [r7, #8]
 8014bae:	683b      	ldr	r3, [r7, #0]
 8014bb0:	3304      	adds	r3, #4
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	429a      	cmp	r2, r3
 8014bb6:	bf0c      	ite	eq
 8014bb8:	2301      	moveq	r3, #1
 8014bba:	2300      	movne	r3, #0
 8014bbc:	b2db      	uxtb	r3, r3
 8014bbe:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014bc0:	693b      	ldr	r3, [r7, #16]
 8014bc2:	f103 0208 	add.w	r2, r3, #8
 8014bc6:	7dfb      	ldrb	r3, [r7, #23]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d001      	beq.n	8014bd0 <etharp_input+0x98>
 8014bcc:	2301      	movs	r3, #1
 8014bce:	e000      	b.n	8014bd2 <etharp_input+0x9a>
 8014bd0:	2302      	movs	r3, #2
 8014bd2:	f107 010c 	add.w	r1, r7, #12
 8014bd6:	6838      	ldr	r0, [r7, #0]
 8014bd8:	f7ff fed8 	bl	801498c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014bdc:	693b      	ldr	r3, [r7, #16]
 8014bde:	88db      	ldrh	r3, [r3, #6]
 8014be0:	b29b      	uxth	r3, r3
 8014be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014be6:	d003      	beq.n	8014bf0 <etharp_input+0xb8>
 8014be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014bec:	d01e      	beq.n	8014c2c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014bee:	e025      	b.n	8014c3c <etharp_input+0x104>
      if (for_us) {
 8014bf0:	7dfb      	ldrb	r3, [r7, #23]
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d021      	beq.n	8014c3a <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014bf6:	683b      	ldr	r3, [r7, #0]
 8014bf8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014bfc:	693b      	ldr	r3, [r7, #16]
 8014bfe:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014c02:	683b      	ldr	r3, [r7, #0]
 8014c04:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8014c08:	683b      	ldr	r3, [r7, #0]
 8014c0a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014c0c:	693a      	ldr	r2, [r7, #16]
 8014c0e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014c10:	2102      	movs	r1, #2
 8014c12:	9103      	str	r1, [sp, #12]
 8014c14:	f107 010c 	add.w	r1, r7, #12
 8014c18:	9102      	str	r1, [sp, #8]
 8014c1a:	9201      	str	r2, [sp, #4]
 8014c1c:	9300      	str	r3, [sp, #0]
 8014c1e:	462b      	mov	r3, r5
 8014c20:	4622      	mov	r2, r4
 8014c22:	4601      	mov	r1, r0
 8014c24:	6838      	ldr	r0, [r7, #0]
 8014c26:	f000 faef 	bl	8015208 <etharp_raw>
      break;
 8014c2a:	e006      	b.n	8014c3a <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8014c2c:	f107 030c 	add.w	r3, r7, #12
 8014c30:	4619      	mov	r1, r3
 8014c32:	6838      	ldr	r0, [r7, #0]
 8014c34:	f7fe f9fe 	bl	8013034 <dhcp_arp_reply>
      break;
 8014c38:	e000      	b.n	8014c3c <etharp_input+0x104>
      break;
 8014c3a:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014c3c:	6878      	ldr	r0, [r7, #4]
 8014c3e:	f7f6 fc93 	bl	800b568 <pbuf_free>
}
 8014c42:	3718      	adds	r7, #24
 8014c44:	46bd      	mov	sp, r7
 8014c46:	bdb0      	pop	{r4, r5, r7, pc}
 8014c48:	0801ae80 	.word	0x0801ae80
 8014c4c:	0801afd0 	.word	0x0801afd0
 8014c50:	0801aef8 	.word	0x0801aef8

08014c54 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014c54:	b580      	push	{r7, lr}
 8014c56:	b086      	sub	sp, #24
 8014c58:	af02      	add	r7, sp, #8
 8014c5a:	60f8      	str	r0, [r7, #12]
 8014c5c:	60b9      	str	r1, [r7, #8]
 8014c5e:	4613      	mov	r3, r2
 8014c60:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014c62:	79fa      	ldrb	r2, [r7, #7]
 8014c64:	4944      	ldr	r1, [pc, #272]	; (8014d78 <etharp_output_to_arp_index+0x124>)
 8014c66:	4613      	mov	r3, r2
 8014c68:	005b      	lsls	r3, r3, #1
 8014c6a:	4413      	add	r3, r2
 8014c6c:	00db      	lsls	r3, r3, #3
 8014c6e:	440b      	add	r3, r1
 8014c70:	3314      	adds	r3, #20
 8014c72:	781b      	ldrb	r3, [r3, #0]
 8014c74:	2b01      	cmp	r3, #1
 8014c76:	d806      	bhi.n	8014c86 <etharp_output_to_arp_index+0x32>
 8014c78:	4b40      	ldr	r3, [pc, #256]	; (8014d7c <etharp_output_to_arp_index+0x128>)
 8014c7a:	f240 22ef 	movw	r2, #751	; 0x2ef
 8014c7e:	4940      	ldr	r1, [pc, #256]	; (8014d80 <etharp_output_to_arp_index+0x12c>)
 8014c80:	4840      	ldr	r0, [pc, #256]	; (8014d84 <etharp_output_to_arp_index+0x130>)
 8014c82:	f002 f963 	bl	8016f4c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014c86:	79fa      	ldrb	r2, [r7, #7]
 8014c88:	493b      	ldr	r1, [pc, #236]	; (8014d78 <etharp_output_to_arp_index+0x124>)
 8014c8a:	4613      	mov	r3, r2
 8014c8c:	005b      	lsls	r3, r3, #1
 8014c8e:	4413      	add	r3, r2
 8014c90:	00db      	lsls	r3, r3, #3
 8014c92:	440b      	add	r3, r1
 8014c94:	3314      	adds	r3, #20
 8014c96:	781b      	ldrb	r3, [r3, #0]
 8014c98:	2b02      	cmp	r3, #2
 8014c9a:	d153      	bne.n	8014d44 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014c9c:	79fa      	ldrb	r2, [r7, #7]
 8014c9e:	4936      	ldr	r1, [pc, #216]	; (8014d78 <etharp_output_to_arp_index+0x124>)
 8014ca0:	4613      	mov	r3, r2
 8014ca2:	005b      	lsls	r3, r3, #1
 8014ca4:	4413      	add	r3, r2
 8014ca6:	00db      	lsls	r3, r3, #3
 8014ca8:	440b      	add	r3, r1
 8014caa:	3312      	adds	r3, #18
 8014cac:	881b      	ldrh	r3, [r3, #0]
 8014cae:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014cb2:	d919      	bls.n	8014ce8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014cb4:	79fa      	ldrb	r2, [r7, #7]
 8014cb6:	4613      	mov	r3, r2
 8014cb8:	005b      	lsls	r3, r3, #1
 8014cba:	4413      	add	r3, r2
 8014cbc:	00db      	lsls	r3, r3, #3
 8014cbe:	4a2e      	ldr	r2, [pc, #184]	; (8014d78 <etharp_output_to_arp_index+0x124>)
 8014cc0:	4413      	add	r3, r2
 8014cc2:	3304      	adds	r3, #4
 8014cc4:	4619      	mov	r1, r3
 8014cc6:	68f8      	ldr	r0, [r7, #12]
 8014cc8:	f000 fb4c 	bl	8015364 <etharp_request>
 8014ccc:	4603      	mov	r3, r0
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d138      	bne.n	8014d44 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014cd2:	79fa      	ldrb	r2, [r7, #7]
 8014cd4:	4928      	ldr	r1, [pc, #160]	; (8014d78 <etharp_output_to_arp_index+0x124>)
 8014cd6:	4613      	mov	r3, r2
 8014cd8:	005b      	lsls	r3, r3, #1
 8014cda:	4413      	add	r3, r2
 8014cdc:	00db      	lsls	r3, r3, #3
 8014cde:	440b      	add	r3, r1
 8014ce0:	3314      	adds	r3, #20
 8014ce2:	2203      	movs	r2, #3
 8014ce4:	701a      	strb	r2, [r3, #0]
 8014ce6:	e02d      	b.n	8014d44 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014ce8:	79fa      	ldrb	r2, [r7, #7]
 8014cea:	4923      	ldr	r1, [pc, #140]	; (8014d78 <etharp_output_to_arp_index+0x124>)
 8014cec:	4613      	mov	r3, r2
 8014cee:	005b      	lsls	r3, r3, #1
 8014cf0:	4413      	add	r3, r2
 8014cf2:	00db      	lsls	r3, r3, #3
 8014cf4:	440b      	add	r3, r1
 8014cf6:	3312      	adds	r3, #18
 8014cf8:	881b      	ldrh	r3, [r3, #0]
 8014cfa:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014cfe:	d321      	bcc.n	8014d44 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014d00:	79fa      	ldrb	r2, [r7, #7]
 8014d02:	4613      	mov	r3, r2
 8014d04:	005b      	lsls	r3, r3, #1
 8014d06:	4413      	add	r3, r2
 8014d08:	00db      	lsls	r3, r3, #3
 8014d0a:	4a1b      	ldr	r2, [pc, #108]	; (8014d78 <etharp_output_to_arp_index+0x124>)
 8014d0c:	4413      	add	r3, r2
 8014d0e:	1d19      	adds	r1, r3, #4
 8014d10:	79fa      	ldrb	r2, [r7, #7]
 8014d12:	4613      	mov	r3, r2
 8014d14:	005b      	lsls	r3, r3, #1
 8014d16:	4413      	add	r3, r2
 8014d18:	00db      	lsls	r3, r3, #3
 8014d1a:	3308      	adds	r3, #8
 8014d1c:	4a16      	ldr	r2, [pc, #88]	; (8014d78 <etharp_output_to_arp_index+0x124>)
 8014d1e:	4413      	add	r3, r2
 8014d20:	3304      	adds	r3, #4
 8014d22:	461a      	mov	r2, r3
 8014d24:	68f8      	ldr	r0, [r7, #12]
 8014d26:	f000 fafb 	bl	8015320 <etharp_request_dst>
 8014d2a:	4603      	mov	r3, r0
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d109      	bne.n	8014d44 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014d30:	79fa      	ldrb	r2, [r7, #7]
 8014d32:	4911      	ldr	r1, [pc, #68]	; (8014d78 <etharp_output_to_arp_index+0x124>)
 8014d34:	4613      	mov	r3, r2
 8014d36:	005b      	lsls	r3, r3, #1
 8014d38:	4413      	add	r3, r2
 8014d3a:	00db      	lsls	r3, r3, #3
 8014d3c:	440b      	add	r3, r1
 8014d3e:	3314      	adds	r3, #20
 8014d40:	2203      	movs	r2, #3
 8014d42:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8014d4a:	79fa      	ldrb	r2, [r7, #7]
 8014d4c:	4613      	mov	r3, r2
 8014d4e:	005b      	lsls	r3, r3, #1
 8014d50:	4413      	add	r3, r2
 8014d52:	00db      	lsls	r3, r3, #3
 8014d54:	3308      	adds	r3, #8
 8014d56:	4a08      	ldr	r2, [pc, #32]	; (8014d78 <etharp_output_to_arp_index+0x124>)
 8014d58:	4413      	add	r3, r2
 8014d5a:	1d1a      	adds	r2, r3, #4
 8014d5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014d60:	9300      	str	r3, [sp, #0]
 8014d62:	4613      	mov	r3, r2
 8014d64:	460a      	mov	r2, r1
 8014d66:	68b9      	ldr	r1, [r7, #8]
 8014d68:	68f8      	ldr	r0, [r7, #12]
 8014d6a:	f001 fe51 	bl	8016a10 <ethernet_output>
 8014d6e:	4603      	mov	r3, r0
}
 8014d70:	4618      	mov	r0, r3
 8014d72:	3710      	adds	r7, #16
 8014d74:	46bd      	mov	sp, r7
 8014d76:	bd80      	pop	{r7, pc}
 8014d78:	20008208 	.word	0x20008208
 8014d7c:	0801ae80 	.word	0x0801ae80
 8014d80:	0801aff0 	.word	0x0801aff0
 8014d84:	0801aef8 	.word	0x0801aef8

08014d88 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014d88:	b580      	push	{r7, lr}
 8014d8a:	b08a      	sub	sp, #40	; 0x28
 8014d8c:	af02      	add	r7, sp, #8
 8014d8e:	60f8      	str	r0, [r7, #12]
 8014d90:	60b9      	str	r1, [r7, #8]
 8014d92:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014d98:	68fb      	ldr	r3, [r7, #12]
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d106      	bne.n	8014dac <etharp_output+0x24>
 8014d9e:	4b73      	ldr	r3, [pc, #460]	; (8014f6c <etharp_output+0x1e4>)
 8014da0:	f240 321e 	movw	r2, #798	; 0x31e
 8014da4:	4972      	ldr	r1, [pc, #456]	; (8014f70 <etharp_output+0x1e8>)
 8014da6:	4873      	ldr	r0, [pc, #460]	; (8014f74 <etharp_output+0x1ec>)
 8014da8:	f002 f8d0 	bl	8016f4c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014dac:	68bb      	ldr	r3, [r7, #8]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d106      	bne.n	8014dc0 <etharp_output+0x38>
 8014db2:	4b6e      	ldr	r3, [pc, #440]	; (8014f6c <etharp_output+0x1e4>)
 8014db4:	f240 321f 	movw	r2, #799	; 0x31f
 8014db8:	496f      	ldr	r1, [pc, #444]	; (8014f78 <etharp_output+0x1f0>)
 8014dba:	486e      	ldr	r0, [pc, #440]	; (8014f74 <etharp_output+0x1ec>)
 8014dbc:	f002 f8c6 	bl	8016f4c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d106      	bne.n	8014dd4 <etharp_output+0x4c>
 8014dc6:	4b69      	ldr	r3, [pc, #420]	; (8014f6c <etharp_output+0x1e4>)
 8014dc8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014dcc:	496b      	ldr	r1, [pc, #428]	; (8014f7c <etharp_output+0x1f4>)
 8014dce:	4869      	ldr	r0, [pc, #420]	; (8014f74 <etharp_output+0x1ec>)
 8014dd0:	f002 f8bc 	bl	8016f4c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	68f9      	ldr	r1, [r7, #12]
 8014dda:	4618      	mov	r0, r3
 8014ddc:	f000 ff14 	bl	8015c08 <ip4_addr_isbroadcast_u32>
 8014de0:	4603      	mov	r3, r0
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d002      	beq.n	8014dec <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014de6:	4b66      	ldr	r3, [pc, #408]	; (8014f80 <etharp_output+0x1f8>)
 8014de8:	61fb      	str	r3, [r7, #28]
 8014dea:	e0af      	b.n	8014f4c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	681b      	ldr	r3, [r3, #0]
 8014df0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014df4:	2be0      	cmp	r3, #224	; 0xe0
 8014df6:	d118      	bne.n	8014e2a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014df8:	2301      	movs	r3, #1
 8014dfa:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014dfc:	2300      	movs	r3, #0
 8014dfe:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014e00:	235e      	movs	r3, #94	; 0x5e
 8014e02:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	3301      	adds	r3, #1
 8014e08:	781b      	ldrb	r3, [r3, #0]
 8014e0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014e0e:	b2db      	uxtb	r3, r3
 8014e10:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	3302      	adds	r3, #2
 8014e16:	781b      	ldrb	r3, [r3, #0]
 8014e18:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	3303      	adds	r3, #3
 8014e1e:	781b      	ldrb	r3, [r3, #0]
 8014e20:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014e22:	f107 0310 	add.w	r3, r7, #16
 8014e26:	61fb      	str	r3, [r7, #28]
 8014e28:	e090      	b.n	8014f4c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	681a      	ldr	r2, [r3, #0]
 8014e2e:	68fb      	ldr	r3, [r7, #12]
 8014e30:	3304      	adds	r3, #4
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	405a      	eors	r2, r3
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	3308      	adds	r3, #8
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	4013      	ands	r3, r2
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d012      	beq.n	8014e68 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014e48:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8014e4c:	4293      	cmp	r3, r2
 8014e4e:	d00b      	beq.n	8014e68 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	330c      	adds	r3, #12
 8014e54:	681b      	ldr	r3, [r3, #0]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d003      	beq.n	8014e62 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014e5a:	68fb      	ldr	r3, [r7, #12]
 8014e5c:	330c      	adds	r3, #12
 8014e5e:	61bb      	str	r3, [r7, #24]
 8014e60:	e002      	b.n	8014e68 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014e62:	f06f 0303 	mvn.w	r3, #3
 8014e66:	e07d      	b.n	8014f64 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014e68:	4b46      	ldr	r3, [pc, #280]	; (8014f84 <etharp_output+0x1fc>)
 8014e6a:	781b      	ldrb	r3, [r3, #0]
 8014e6c:	4619      	mov	r1, r3
 8014e6e:	4a46      	ldr	r2, [pc, #280]	; (8014f88 <etharp_output+0x200>)
 8014e70:	460b      	mov	r3, r1
 8014e72:	005b      	lsls	r3, r3, #1
 8014e74:	440b      	add	r3, r1
 8014e76:	00db      	lsls	r3, r3, #3
 8014e78:	4413      	add	r3, r2
 8014e7a:	3314      	adds	r3, #20
 8014e7c:	781b      	ldrb	r3, [r3, #0]
 8014e7e:	2b01      	cmp	r3, #1
 8014e80:	d925      	bls.n	8014ece <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014e82:	4b40      	ldr	r3, [pc, #256]	; (8014f84 <etharp_output+0x1fc>)
 8014e84:	781b      	ldrb	r3, [r3, #0]
 8014e86:	4619      	mov	r1, r3
 8014e88:	4a3f      	ldr	r2, [pc, #252]	; (8014f88 <etharp_output+0x200>)
 8014e8a:	460b      	mov	r3, r1
 8014e8c:	005b      	lsls	r3, r3, #1
 8014e8e:	440b      	add	r3, r1
 8014e90:	00db      	lsls	r3, r3, #3
 8014e92:	4413      	add	r3, r2
 8014e94:	3308      	adds	r3, #8
 8014e96:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014e98:	68fa      	ldr	r2, [r7, #12]
 8014e9a:	429a      	cmp	r2, r3
 8014e9c:	d117      	bne.n	8014ece <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014e9e:	69bb      	ldr	r3, [r7, #24]
 8014ea0:	681a      	ldr	r2, [r3, #0]
 8014ea2:	4b38      	ldr	r3, [pc, #224]	; (8014f84 <etharp_output+0x1fc>)
 8014ea4:	781b      	ldrb	r3, [r3, #0]
 8014ea6:	4618      	mov	r0, r3
 8014ea8:	4937      	ldr	r1, [pc, #220]	; (8014f88 <etharp_output+0x200>)
 8014eaa:	4603      	mov	r3, r0
 8014eac:	005b      	lsls	r3, r3, #1
 8014eae:	4403      	add	r3, r0
 8014eb0:	00db      	lsls	r3, r3, #3
 8014eb2:	440b      	add	r3, r1
 8014eb4:	3304      	adds	r3, #4
 8014eb6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014eb8:	429a      	cmp	r2, r3
 8014eba:	d108      	bne.n	8014ece <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014ebc:	4b31      	ldr	r3, [pc, #196]	; (8014f84 <etharp_output+0x1fc>)
 8014ebe:	781b      	ldrb	r3, [r3, #0]
 8014ec0:	461a      	mov	r2, r3
 8014ec2:	68b9      	ldr	r1, [r7, #8]
 8014ec4:	68f8      	ldr	r0, [r7, #12]
 8014ec6:	f7ff fec5 	bl	8014c54 <etharp_output_to_arp_index>
 8014eca:	4603      	mov	r3, r0
 8014ecc:	e04a      	b.n	8014f64 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014ece:	2300      	movs	r3, #0
 8014ed0:	75fb      	strb	r3, [r7, #23]
 8014ed2:	e031      	b.n	8014f38 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014ed4:	7dfa      	ldrb	r2, [r7, #23]
 8014ed6:	492c      	ldr	r1, [pc, #176]	; (8014f88 <etharp_output+0x200>)
 8014ed8:	4613      	mov	r3, r2
 8014eda:	005b      	lsls	r3, r3, #1
 8014edc:	4413      	add	r3, r2
 8014ede:	00db      	lsls	r3, r3, #3
 8014ee0:	440b      	add	r3, r1
 8014ee2:	3314      	adds	r3, #20
 8014ee4:	781b      	ldrb	r3, [r3, #0]
 8014ee6:	2b01      	cmp	r3, #1
 8014ee8:	d923      	bls.n	8014f32 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014eea:	7dfa      	ldrb	r2, [r7, #23]
 8014eec:	4926      	ldr	r1, [pc, #152]	; (8014f88 <etharp_output+0x200>)
 8014eee:	4613      	mov	r3, r2
 8014ef0:	005b      	lsls	r3, r3, #1
 8014ef2:	4413      	add	r3, r2
 8014ef4:	00db      	lsls	r3, r3, #3
 8014ef6:	440b      	add	r3, r1
 8014ef8:	3308      	adds	r3, #8
 8014efa:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014efc:	68fa      	ldr	r2, [r7, #12]
 8014efe:	429a      	cmp	r2, r3
 8014f00:	d117      	bne.n	8014f32 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014f02:	69bb      	ldr	r3, [r7, #24]
 8014f04:	6819      	ldr	r1, [r3, #0]
 8014f06:	7dfa      	ldrb	r2, [r7, #23]
 8014f08:	481f      	ldr	r0, [pc, #124]	; (8014f88 <etharp_output+0x200>)
 8014f0a:	4613      	mov	r3, r2
 8014f0c:	005b      	lsls	r3, r3, #1
 8014f0e:	4413      	add	r3, r2
 8014f10:	00db      	lsls	r3, r3, #3
 8014f12:	4403      	add	r3, r0
 8014f14:	3304      	adds	r3, #4
 8014f16:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014f18:	4299      	cmp	r1, r3
 8014f1a:	d10a      	bne.n	8014f32 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014f1c:	4a19      	ldr	r2, [pc, #100]	; (8014f84 <etharp_output+0x1fc>)
 8014f1e:	7dfb      	ldrb	r3, [r7, #23]
 8014f20:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014f22:	7dfb      	ldrb	r3, [r7, #23]
 8014f24:	461a      	mov	r2, r3
 8014f26:	68b9      	ldr	r1, [r7, #8]
 8014f28:	68f8      	ldr	r0, [r7, #12]
 8014f2a:	f7ff fe93 	bl	8014c54 <etharp_output_to_arp_index>
 8014f2e:	4603      	mov	r3, r0
 8014f30:	e018      	b.n	8014f64 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014f32:	7dfb      	ldrb	r3, [r7, #23]
 8014f34:	3301      	adds	r3, #1
 8014f36:	75fb      	strb	r3, [r7, #23]
 8014f38:	7dfb      	ldrb	r3, [r7, #23]
 8014f3a:	2b09      	cmp	r3, #9
 8014f3c:	d9ca      	bls.n	8014ed4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014f3e:	68ba      	ldr	r2, [r7, #8]
 8014f40:	69b9      	ldr	r1, [r7, #24]
 8014f42:	68f8      	ldr	r0, [r7, #12]
 8014f44:	f000 f822 	bl	8014f8c <etharp_query>
 8014f48:	4603      	mov	r3, r0
 8014f4a:	e00b      	b.n	8014f64 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014f52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014f56:	9300      	str	r3, [sp, #0]
 8014f58:	69fb      	ldr	r3, [r7, #28]
 8014f5a:	68b9      	ldr	r1, [r7, #8]
 8014f5c:	68f8      	ldr	r0, [r7, #12]
 8014f5e:	f001 fd57 	bl	8016a10 <ethernet_output>
 8014f62:	4603      	mov	r3, r0
}
 8014f64:	4618      	mov	r0, r3
 8014f66:	3720      	adds	r7, #32
 8014f68:	46bd      	mov	sp, r7
 8014f6a:	bd80      	pop	{r7, pc}
 8014f6c:	0801ae80 	.word	0x0801ae80
 8014f70:	0801afd0 	.word	0x0801afd0
 8014f74:	0801aef8 	.word	0x0801aef8
 8014f78:	0801b020 	.word	0x0801b020
 8014f7c:	0801afc0 	.word	0x0801afc0
 8014f80:	0801fab0 	.word	0x0801fab0
 8014f84:	200082f8 	.word	0x200082f8
 8014f88:	20008208 	.word	0x20008208

08014f8c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014f8c:	b580      	push	{r7, lr}
 8014f8e:	b08c      	sub	sp, #48	; 0x30
 8014f90:	af02      	add	r7, sp, #8
 8014f92:	60f8      	str	r0, [r7, #12]
 8014f94:	60b9      	str	r1, [r7, #8]
 8014f96:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	3326      	adds	r3, #38	; 0x26
 8014f9c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014f9e:	23ff      	movs	r3, #255	; 0xff
 8014fa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014fa4:	2300      	movs	r3, #0
 8014fa6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014fa8:	68bb      	ldr	r3, [r7, #8]
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	68f9      	ldr	r1, [r7, #12]
 8014fae:	4618      	mov	r0, r3
 8014fb0:	f000 fe2a 	bl	8015c08 <ip4_addr_isbroadcast_u32>
 8014fb4:	4603      	mov	r3, r0
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d10c      	bne.n	8014fd4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014fba:	68bb      	ldr	r3, [r7, #8]
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014fc2:	2be0      	cmp	r3, #224	; 0xe0
 8014fc4:	d006      	beq.n	8014fd4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014fc6:	68bb      	ldr	r3, [r7, #8]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d003      	beq.n	8014fd4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014fcc:	68bb      	ldr	r3, [r7, #8]
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d102      	bne.n	8014fda <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014fd4:	f06f 030f 	mvn.w	r3, #15
 8014fd8:	e102      	b.n	80151e0 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014fda:	68fa      	ldr	r2, [r7, #12]
 8014fdc:	2101      	movs	r1, #1
 8014fde:	68b8      	ldr	r0, [r7, #8]
 8014fe0:	f7ff fb5c 	bl	801469c <etharp_find_entry>
 8014fe4:	4603      	mov	r3, r0
 8014fe6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014fe8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	da02      	bge.n	8014ff6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014ff0:	8a7b      	ldrh	r3, [r7, #18]
 8014ff2:	b25b      	sxtb	r3, r3
 8014ff4:	e0f4      	b.n	80151e0 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014ff6:	8a7b      	ldrh	r3, [r7, #18]
 8014ff8:	2b7e      	cmp	r3, #126	; 0x7e
 8014ffa:	d906      	bls.n	801500a <etharp_query+0x7e>
 8014ffc:	4b7a      	ldr	r3, [pc, #488]	; (80151e8 <etharp_query+0x25c>)
 8014ffe:	f240 32c1 	movw	r2, #961	; 0x3c1
 8015002:	497a      	ldr	r1, [pc, #488]	; (80151ec <etharp_query+0x260>)
 8015004:	487a      	ldr	r0, [pc, #488]	; (80151f0 <etharp_query+0x264>)
 8015006:	f001 ffa1 	bl	8016f4c <iprintf>
  i = (netif_addr_idx_t)i_err;
 801500a:	8a7b      	ldrh	r3, [r7, #18]
 801500c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801500e:	7c7a      	ldrb	r2, [r7, #17]
 8015010:	4978      	ldr	r1, [pc, #480]	; (80151f4 <etharp_query+0x268>)
 8015012:	4613      	mov	r3, r2
 8015014:	005b      	lsls	r3, r3, #1
 8015016:	4413      	add	r3, r2
 8015018:	00db      	lsls	r3, r3, #3
 801501a:	440b      	add	r3, r1
 801501c:	3314      	adds	r3, #20
 801501e:	781b      	ldrb	r3, [r3, #0]
 8015020:	2b00      	cmp	r3, #0
 8015022:	d115      	bne.n	8015050 <etharp_query+0xc4>
    is_new_entry = 1;
 8015024:	2301      	movs	r3, #1
 8015026:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015028:	7c7a      	ldrb	r2, [r7, #17]
 801502a:	4972      	ldr	r1, [pc, #456]	; (80151f4 <etharp_query+0x268>)
 801502c:	4613      	mov	r3, r2
 801502e:	005b      	lsls	r3, r3, #1
 8015030:	4413      	add	r3, r2
 8015032:	00db      	lsls	r3, r3, #3
 8015034:	440b      	add	r3, r1
 8015036:	3314      	adds	r3, #20
 8015038:	2201      	movs	r2, #1
 801503a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801503c:	7c7a      	ldrb	r2, [r7, #17]
 801503e:	496d      	ldr	r1, [pc, #436]	; (80151f4 <etharp_query+0x268>)
 8015040:	4613      	mov	r3, r2
 8015042:	005b      	lsls	r3, r3, #1
 8015044:	4413      	add	r3, r2
 8015046:	00db      	lsls	r3, r3, #3
 8015048:	440b      	add	r3, r1
 801504a:	3308      	adds	r3, #8
 801504c:	68fa      	ldr	r2, [r7, #12]
 801504e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015050:	7c7a      	ldrb	r2, [r7, #17]
 8015052:	4968      	ldr	r1, [pc, #416]	; (80151f4 <etharp_query+0x268>)
 8015054:	4613      	mov	r3, r2
 8015056:	005b      	lsls	r3, r3, #1
 8015058:	4413      	add	r3, r2
 801505a:	00db      	lsls	r3, r3, #3
 801505c:	440b      	add	r3, r1
 801505e:	3314      	adds	r3, #20
 8015060:	781b      	ldrb	r3, [r3, #0]
 8015062:	2b01      	cmp	r3, #1
 8015064:	d011      	beq.n	801508a <etharp_query+0xfe>
 8015066:	7c7a      	ldrb	r2, [r7, #17]
 8015068:	4962      	ldr	r1, [pc, #392]	; (80151f4 <etharp_query+0x268>)
 801506a:	4613      	mov	r3, r2
 801506c:	005b      	lsls	r3, r3, #1
 801506e:	4413      	add	r3, r2
 8015070:	00db      	lsls	r3, r3, #3
 8015072:	440b      	add	r3, r1
 8015074:	3314      	adds	r3, #20
 8015076:	781b      	ldrb	r3, [r3, #0]
 8015078:	2b01      	cmp	r3, #1
 801507a:	d806      	bhi.n	801508a <etharp_query+0xfe>
 801507c:	4b5a      	ldr	r3, [pc, #360]	; (80151e8 <etharp_query+0x25c>)
 801507e:	f240 32cf 	movw	r2, #975	; 0x3cf
 8015082:	495d      	ldr	r1, [pc, #372]	; (80151f8 <etharp_query+0x26c>)
 8015084:	485a      	ldr	r0, [pc, #360]	; (80151f0 <etharp_query+0x264>)
 8015086:	f001 ff61 	bl	8016f4c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801508a:	6a3b      	ldr	r3, [r7, #32]
 801508c:	2b00      	cmp	r3, #0
 801508e:	d102      	bne.n	8015096 <etharp_query+0x10a>
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	2b00      	cmp	r3, #0
 8015094:	d10c      	bne.n	80150b0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015096:	68b9      	ldr	r1, [r7, #8]
 8015098:	68f8      	ldr	r0, [r7, #12]
 801509a:	f000 f963 	bl	8015364 <etharp_request>
 801509e:	4603      	mov	r3, r0
 80150a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d102      	bne.n	80150b0 <etharp_query+0x124>
      return result;
 80150aa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80150ae:	e097      	b.n	80151e0 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d106      	bne.n	80150c4 <etharp_query+0x138>
 80150b6:	4b4c      	ldr	r3, [pc, #304]	; (80151e8 <etharp_query+0x25c>)
 80150b8:	f240 32e1 	movw	r2, #993	; 0x3e1
 80150bc:	494f      	ldr	r1, [pc, #316]	; (80151fc <etharp_query+0x270>)
 80150be:	484c      	ldr	r0, [pc, #304]	; (80151f0 <etharp_query+0x264>)
 80150c0:	f001 ff44 	bl	8016f4c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80150c4:	7c7a      	ldrb	r2, [r7, #17]
 80150c6:	494b      	ldr	r1, [pc, #300]	; (80151f4 <etharp_query+0x268>)
 80150c8:	4613      	mov	r3, r2
 80150ca:	005b      	lsls	r3, r3, #1
 80150cc:	4413      	add	r3, r2
 80150ce:	00db      	lsls	r3, r3, #3
 80150d0:	440b      	add	r3, r1
 80150d2:	3314      	adds	r3, #20
 80150d4:	781b      	ldrb	r3, [r3, #0]
 80150d6:	2b01      	cmp	r3, #1
 80150d8:	d918      	bls.n	801510c <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80150da:	4a49      	ldr	r2, [pc, #292]	; (8015200 <etharp_query+0x274>)
 80150dc:	7c7b      	ldrb	r3, [r7, #17]
 80150de:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80150e0:	7c7a      	ldrb	r2, [r7, #17]
 80150e2:	4613      	mov	r3, r2
 80150e4:	005b      	lsls	r3, r3, #1
 80150e6:	4413      	add	r3, r2
 80150e8:	00db      	lsls	r3, r3, #3
 80150ea:	3308      	adds	r3, #8
 80150ec:	4a41      	ldr	r2, [pc, #260]	; (80151f4 <etharp_query+0x268>)
 80150ee:	4413      	add	r3, r2
 80150f0:	1d1a      	adds	r2, r3, #4
 80150f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80150f6:	9300      	str	r3, [sp, #0]
 80150f8:	4613      	mov	r3, r2
 80150fa:	697a      	ldr	r2, [r7, #20]
 80150fc:	6879      	ldr	r1, [r7, #4]
 80150fe:	68f8      	ldr	r0, [r7, #12]
 8015100:	f001 fc86 	bl	8016a10 <ethernet_output>
 8015104:	4603      	mov	r3, r0
 8015106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801510a:	e067      	b.n	80151dc <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801510c:	7c7a      	ldrb	r2, [r7, #17]
 801510e:	4939      	ldr	r1, [pc, #228]	; (80151f4 <etharp_query+0x268>)
 8015110:	4613      	mov	r3, r2
 8015112:	005b      	lsls	r3, r3, #1
 8015114:	4413      	add	r3, r2
 8015116:	00db      	lsls	r3, r3, #3
 8015118:	440b      	add	r3, r1
 801511a:	3314      	adds	r3, #20
 801511c:	781b      	ldrb	r3, [r3, #0]
 801511e:	2b01      	cmp	r3, #1
 8015120:	d15c      	bne.n	80151dc <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015122:	2300      	movs	r3, #0
 8015124:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	61fb      	str	r3, [r7, #28]
    while (p) {
 801512a:	e01c      	b.n	8015166 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801512c:	69fb      	ldr	r3, [r7, #28]
 801512e:	895a      	ldrh	r2, [r3, #10]
 8015130:	69fb      	ldr	r3, [r7, #28]
 8015132:	891b      	ldrh	r3, [r3, #8]
 8015134:	429a      	cmp	r2, r3
 8015136:	d10a      	bne.n	801514e <etharp_query+0x1c2>
 8015138:	69fb      	ldr	r3, [r7, #28]
 801513a:	681b      	ldr	r3, [r3, #0]
 801513c:	2b00      	cmp	r3, #0
 801513e:	d006      	beq.n	801514e <etharp_query+0x1c2>
 8015140:	4b29      	ldr	r3, [pc, #164]	; (80151e8 <etharp_query+0x25c>)
 8015142:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8015146:	492f      	ldr	r1, [pc, #188]	; (8015204 <etharp_query+0x278>)
 8015148:	4829      	ldr	r0, [pc, #164]	; (80151f0 <etharp_query+0x264>)
 801514a:	f001 feff 	bl	8016f4c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801514e:	69fb      	ldr	r3, [r7, #28]
 8015150:	7b1b      	ldrb	r3, [r3, #12]
 8015152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015156:	2b00      	cmp	r3, #0
 8015158:	d002      	beq.n	8015160 <etharp_query+0x1d4>
        copy_needed = 1;
 801515a:	2301      	movs	r3, #1
 801515c:	61bb      	str	r3, [r7, #24]
        break;
 801515e:	e005      	b.n	801516c <etharp_query+0x1e0>
      }
      p = p->next;
 8015160:	69fb      	ldr	r3, [r7, #28]
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015166:	69fb      	ldr	r3, [r7, #28]
 8015168:	2b00      	cmp	r3, #0
 801516a:	d1df      	bne.n	801512c <etharp_query+0x1a0>
    }
    if (copy_needed) {
 801516c:	69bb      	ldr	r3, [r7, #24]
 801516e:	2b00      	cmp	r3, #0
 8015170:	d007      	beq.n	8015182 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015172:	687a      	ldr	r2, [r7, #4]
 8015174:	f44f 7120 	mov.w	r1, #640	; 0x280
 8015178:	200e      	movs	r0, #14
 801517a:	f7f6 fc6d 	bl	800ba58 <pbuf_clone>
 801517e:	61f8      	str	r0, [r7, #28]
 8015180:	e004      	b.n	801518c <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015186:	69f8      	ldr	r0, [r7, #28]
 8015188:	f7f6 fa94 	bl	800b6b4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801518c:	69fb      	ldr	r3, [r7, #28]
 801518e:	2b00      	cmp	r3, #0
 8015190:	d021      	beq.n	80151d6 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015192:	7c7a      	ldrb	r2, [r7, #17]
 8015194:	4917      	ldr	r1, [pc, #92]	; (80151f4 <etharp_query+0x268>)
 8015196:	4613      	mov	r3, r2
 8015198:	005b      	lsls	r3, r3, #1
 801519a:	4413      	add	r3, r2
 801519c:	00db      	lsls	r3, r3, #3
 801519e:	440b      	add	r3, r1
 80151a0:	681b      	ldr	r3, [r3, #0]
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d00a      	beq.n	80151bc <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80151a6:	7c7a      	ldrb	r2, [r7, #17]
 80151a8:	4912      	ldr	r1, [pc, #72]	; (80151f4 <etharp_query+0x268>)
 80151aa:	4613      	mov	r3, r2
 80151ac:	005b      	lsls	r3, r3, #1
 80151ae:	4413      	add	r3, r2
 80151b0:	00db      	lsls	r3, r3, #3
 80151b2:	440b      	add	r3, r1
 80151b4:	681b      	ldr	r3, [r3, #0]
 80151b6:	4618      	mov	r0, r3
 80151b8:	f7f6 f9d6 	bl	800b568 <pbuf_free>
      }
      arp_table[i].q = p;
 80151bc:	7c7a      	ldrb	r2, [r7, #17]
 80151be:	490d      	ldr	r1, [pc, #52]	; (80151f4 <etharp_query+0x268>)
 80151c0:	4613      	mov	r3, r2
 80151c2:	005b      	lsls	r3, r3, #1
 80151c4:	4413      	add	r3, r2
 80151c6:	00db      	lsls	r3, r3, #3
 80151c8:	440b      	add	r3, r1
 80151ca:	69fa      	ldr	r2, [r7, #28]
 80151cc:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80151ce:	2300      	movs	r3, #0
 80151d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80151d4:	e002      	b.n	80151dc <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80151d6:	23ff      	movs	r3, #255	; 0xff
 80151d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80151dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80151e0:	4618      	mov	r0, r3
 80151e2:	3728      	adds	r7, #40	; 0x28
 80151e4:	46bd      	mov	sp, r7
 80151e6:	bd80      	pop	{r7, pc}
 80151e8:	0801ae80 	.word	0x0801ae80
 80151ec:	0801b02c 	.word	0x0801b02c
 80151f0:	0801aef8 	.word	0x0801aef8
 80151f4:	20008208 	.word	0x20008208
 80151f8:	0801b03c 	.word	0x0801b03c
 80151fc:	0801b020 	.word	0x0801b020
 8015200:	200082f8 	.word	0x200082f8
 8015204:	0801b064 	.word	0x0801b064

08015208 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015208:	b580      	push	{r7, lr}
 801520a:	b08a      	sub	sp, #40	; 0x28
 801520c:	af02      	add	r7, sp, #8
 801520e:	60f8      	str	r0, [r7, #12]
 8015210:	60b9      	str	r1, [r7, #8]
 8015212:	607a      	str	r2, [r7, #4]
 8015214:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015216:	2300      	movs	r3, #0
 8015218:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	2b00      	cmp	r3, #0
 801521e:	d106      	bne.n	801522e <etharp_raw+0x26>
 8015220:	4b3a      	ldr	r3, [pc, #232]	; (801530c <etharp_raw+0x104>)
 8015222:	f240 4257 	movw	r2, #1111	; 0x457
 8015226:	493a      	ldr	r1, [pc, #232]	; (8015310 <etharp_raw+0x108>)
 8015228:	483a      	ldr	r0, [pc, #232]	; (8015314 <etharp_raw+0x10c>)
 801522a:	f001 fe8f 	bl	8016f4c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801522e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015232:	211c      	movs	r1, #28
 8015234:	200e      	movs	r0, #14
 8015236:	f7f5 feb7 	bl	800afa8 <pbuf_alloc>
 801523a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801523c:	69bb      	ldr	r3, [r7, #24]
 801523e:	2b00      	cmp	r3, #0
 8015240:	d102      	bne.n	8015248 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015242:	f04f 33ff 	mov.w	r3, #4294967295
 8015246:	e05d      	b.n	8015304 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015248:	69bb      	ldr	r3, [r7, #24]
 801524a:	895b      	ldrh	r3, [r3, #10]
 801524c:	2b1b      	cmp	r3, #27
 801524e:	d806      	bhi.n	801525e <etharp_raw+0x56>
 8015250:	4b2e      	ldr	r3, [pc, #184]	; (801530c <etharp_raw+0x104>)
 8015252:	f240 4263 	movw	r2, #1123	; 0x463
 8015256:	4930      	ldr	r1, [pc, #192]	; (8015318 <etharp_raw+0x110>)
 8015258:	482e      	ldr	r0, [pc, #184]	; (8015314 <etharp_raw+0x10c>)
 801525a:	f001 fe77 	bl	8016f4c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801525e:	69bb      	ldr	r3, [r7, #24]
 8015260:	685b      	ldr	r3, [r3, #4]
 8015262:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015264:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015266:	4618      	mov	r0, r3
 8015268:	f7f4 fe48 	bl	8009efc <lwip_htons>
 801526c:	4603      	mov	r3, r0
 801526e:	461a      	mov	r2, r3
 8015270:	697b      	ldr	r3, [r7, #20]
 8015272:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015274:	68fb      	ldr	r3, [r7, #12]
 8015276:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801527a:	2b06      	cmp	r3, #6
 801527c:	d006      	beq.n	801528c <etharp_raw+0x84>
 801527e:	4b23      	ldr	r3, [pc, #140]	; (801530c <etharp_raw+0x104>)
 8015280:	f240 426a 	movw	r2, #1130	; 0x46a
 8015284:	4925      	ldr	r1, [pc, #148]	; (801531c <etharp_raw+0x114>)
 8015286:	4823      	ldr	r0, [pc, #140]	; (8015314 <etharp_raw+0x10c>)
 8015288:	f001 fe60 	bl	8016f4c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801528c:	697b      	ldr	r3, [r7, #20]
 801528e:	3308      	adds	r3, #8
 8015290:	2206      	movs	r2, #6
 8015292:	6839      	ldr	r1, [r7, #0]
 8015294:	4618      	mov	r0, r3
 8015296:	f001 fe46 	bl	8016f26 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801529a:	697b      	ldr	r3, [r7, #20]
 801529c:	3312      	adds	r3, #18
 801529e:	2206      	movs	r2, #6
 80152a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80152a2:	4618      	mov	r0, r3
 80152a4:	f001 fe3f 	bl	8016f26 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80152a8:	697b      	ldr	r3, [r7, #20]
 80152aa:	330e      	adds	r3, #14
 80152ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80152ae:	6812      	ldr	r2, [r2, #0]
 80152b0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80152b2:	697b      	ldr	r3, [r7, #20]
 80152b4:	3318      	adds	r3, #24
 80152b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80152b8:	6812      	ldr	r2, [r2, #0]
 80152ba:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80152bc:	697b      	ldr	r3, [r7, #20]
 80152be:	2200      	movs	r2, #0
 80152c0:	701a      	strb	r2, [r3, #0]
 80152c2:	2200      	movs	r2, #0
 80152c4:	f042 0201 	orr.w	r2, r2, #1
 80152c8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80152ca:	697b      	ldr	r3, [r7, #20]
 80152cc:	2200      	movs	r2, #0
 80152ce:	f042 0208 	orr.w	r2, r2, #8
 80152d2:	709a      	strb	r2, [r3, #2]
 80152d4:	2200      	movs	r2, #0
 80152d6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80152d8:	697b      	ldr	r3, [r7, #20]
 80152da:	2206      	movs	r2, #6
 80152dc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80152de:	697b      	ldr	r3, [r7, #20]
 80152e0:	2204      	movs	r2, #4
 80152e2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80152e4:	f640 0306 	movw	r3, #2054	; 0x806
 80152e8:	9300      	str	r3, [sp, #0]
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	68ba      	ldr	r2, [r7, #8]
 80152ee:	69b9      	ldr	r1, [r7, #24]
 80152f0:	68f8      	ldr	r0, [r7, #12]
 80152f2:	f001 fb8d 	bl	8016a10 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80152f6:	69b8      	ldr	r0, [r7, #24]
 80152f8:	f7f6 f936 	bl	800b568 <pbuf_free>
  p = NULL;
 80152fc:	2300      	movs	r3, #0
 80152fe:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015300:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015304:	4618      	mov	r0, r3
 8015306:	3720      	adds	r7, #32
 8015308:	46bd      	mov	sp, r7
 801530a:	bd80      	pop	{r7, pc}
 801530c:	0801ae80 	.word	0x0801ae80
 8015310:	0801afd0 	.word	0x0801afd0
 8015314:	0801aef8 	.word	0x0801aef8
 8015318:	0801b080 	.word	0x0801b080
 801531c:	0801b0b4 	.word	0x0801b0b4

08015320 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015320:	b580      	push	{r7, lr}
 8015322:	b088      	sub	sp, #32
 8015324:	af04      	add	r7, sp, #16
 8015326:	60f8      	str	r0, [r7, #12]
 8015328:	60b9      	str	r1, [r7, #8]
 801532a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801533c:	2201      	movs	r2, #1
 801533e:	9203      	str	r2, [sp, #12]
 8015340:	68ba      	ldr	r2, [r7, #8]
 8015342:	9202      	str	r2, [sp, #8]
 8015344:	4a06      	ldr	r2, [pc, #24]	; (8015360 <etharp_request_dst+0x40>)
 8015346:	9201      	str	r2, [sp, #4]
 8015348:	9300      	str	r3, [sp, #0]
 801534a:	4603      	mov	r3, r0
 801534c:	687a      	ldr	r2, [r7, #4]
 801534e:	68f8      	ldr	r0, [r7, #12]
 8015350:	f7ff ff5a 	bl	8015208 <etharp_raw>
 8015354:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015356:	4618      	mov	r0, r3
 8015358:	3710      	adds	r7, #16
 801535a:	46bd      	mov	sp, r7
 801535c:	bd80      	pop	{r7, pc}
 801535e:	bf00      	nop
 8015360:	0801fab8 	.word	0x0801fab8

08015364 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015364:	b580      	push	{r7, lr}
 8015366:	b082      	sub	sp, #8
 8015368:	af00      	add	r7, sp, #0
 801536a:	6078      	str	r0, [r7, #4]
 801536c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801536e:	4a05      	ldr	r2, [pc, #20]	; (8015384 <etharp_request+0x20>)
 8015370:	6839      	ldr	r1, [r7, #0]
 8015372:	6878      	ldr	r0, [r7, #4]
 8015374:	f7ff ffd4 	bl	8015320 <etharp_request_dst>
 8015378:	4603      	mov	r3, r0
}
 801537a:	4618      	mov	r0, r3
 801537c:	3708      	adds	r7, #8
 801537e:	46bd      	mov	sp, r7
 8015380:	bd80      	pop	{r7, pc}
 8015382:	bf00      	nop
 8015384:	0801fab0 	.word	0x0801fab0

08015388 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015388:	b580      	push	{r7, lr}
 801538a:	b08e      	sub	sp, #56	; 0x38
 801538c:	af04      	add	r7, sp, #16
 801538e:	6078      	str	r0, [r7, #4]
 8015390:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8015392:	4b79      	ldr	r3, [pc, #484]	; (8015578 <icmp_input+0x1f0>)
 8015394:	689b      	ldr	r3, [r3, #8]
 8015396:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801539a:	781b      	ldrb	r3, [r3, #0]
 801539c:	f003 030f 	and.w	r3, r3, #15
 80153a0:	b2db      	uxtb	r3, r3
 80153a2:	009b      	lsls	r3, r3, #2
 80153a4:	b2db      	uxtb	r3, r3
 80153a6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80153a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80153aa:	2b13      	cmp	r3, #19
 80153ac:	f240 80cd 	bls.w	801554a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	895b      	ldrh	r3, [r3, #10]
 80153b4:	2b03      	cmp	r3, #3
 80153b6:	f240 80ca 	bls.w	801554e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	685b      	ldr	r3, [r3, #4]
 80153be:	781b      	ldrb	r3, [r3, #0]
 80153c0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80153c4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	f000 80b7 	beq.w	801553c <icmp_input+0x1b4>
 80153ce:	2b08      	cmp	r3, #8
 80153d0:	f040 80b7 	bne.w	8015542 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80153d4:	4b69      	ldr	r3, [pc, #420]	; (801557c <icmp_input+0x1f4>)
 80153d6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80153d8:	4b67      	ldr	r3, [pc, #412]	; (8015578 <icmp_input+0x1f0>)
 80153da:	695b      	ldr	r3, [r3, #20]
 80153dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80153e0:	2be0      	cmp	r3, #224	; 0xe0
 80153e2:	f000 80bb 	beq.w	801555c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80153e6:	4b64      	ldr	r3, [pc, #400]	; (8015578 <icmp_input+0x1f0>)
 80153e8:	695a      	ldr	r2, [r3, #20]
 80153ea:	4b63      	ldr	r3, [pc, #396]	; (8015578 <icmp_input+0x1f0>)
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	4619      	mov	r1, r3
 80153f0:	4610      	mov	r0, r2
 80153f2:	f000 fc09 	bl	8015c08 <ip4_addr_isbroadcast_u32>
 80153f6:	4603      	mov	r3, r0
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	f040 80b1 	bne.w	8015560 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	891b      	ldrh	r3, [r3, #8]
 8015402:	2b07      	cmp	r3, #7
 8015404:	f240 80a5 	bls.w	8015552 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015408:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801540a:	330e      	adds	r3, #14
 801540c:	4619      	mov	r1, r3
 801540e:	6878      	ldr	r0, [r7, #4]
 8015410:	f7f6 f814 	bl	800b43c <pbuf_add_header>
 8015414:	4603      	mov	r3, r0
 8015416:	2b00      	cmp	r3, #0
 8015418:	d04b      	beq.n	80154b2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	891a      	ldrh	r2, [r3, #8]
 801541e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015420:	4413      	add	r3, r2
 8015422:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	891b      	ldrh	r3, [r3, #8]
 8015428:	8b7a      	ldrh	r2, [r7, #26]
 801542a:	429a      	cmp	r2, r3
 801542c:	f0c0 809a 	bcc.w	8015564 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8015430:	8b7b      	ldrh	r3, [r7, #26]
 8015432:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015436:	4619      	mov	r1, r3
 8015438:	200e      	movs	r0, #14
 801543a:	f7f5 fdb5 	bl	800afa8 <pbuf_alloc>
 801543e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015440:	697b      	ldr	r3, [r7, #20]
 8015442:	2b00      	cmp	r3, #0
 8015444:	f000 8090 	beq.w	8015568 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015448:	697b      	ldr	r3, [r7, #20]
 801544a:	895b      	ldrh	r3, [r3, #10]
 801544c:	461a      	mov	r2, r3
 801544e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015450:	3308      	adds	r3, #8
 8015452:	429a      	cmp	r2, r3
 8015454:	d203      	bcs.n	801545e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015456:	6978      	ldr	r0, [r7, #20]
 8015458:	f7f6 f886 	bl	800b568 <pbuf_free>
          goto icmperr;
 801545c:	e085      	b.n	801556a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801545e:	697b      	ldr	r3, [r7, #20]
 8015460:	685b      	ldr	r3, [r3, #4]
 8015462:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015464:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015466:	4618      	mov	r0, r3
 8015468:	f001 fd5d 	bl	8016f26 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801546c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801546e:	4619      	mov	r1, r3
 8015470:	6978      	ldr	r0, [r7, #20]
 8015472:	f7f5 fff3 	bl	800b45c <pbuf_remove_header>
 8015476:	4603      	mov	r3, r0
 8015478:	2b00      	cmp	r3, #0
 801547a:	d009      	beq.n	8015490 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801547c:	4b40      	ldr	r3, [pc, #256]	; (8015580 <icmp_input+0x1f8>)
 801547e:	22b6      	movs	r2, #182	; 0xb6
 8015480:	4940      	ldr	r1, [pc, #256]	; (8015584 <icmp_input+0x1fc>)
 8015482:	4841      	ldr	r0, [pc, #260]	; (8015588 <icmp_input+0x200>)
 8015484:	f001 fd62 	bl	8016f4c <iprintf>
          pbuf_free(r);
 8015488:	6978      	ldr	r0, [r7, #20]
 801548a:	f7f6 f86d 	bl	800b568 <pbuf_free>
          goto icmperr;
 801548e:	e06c      	b.n	801556a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015490:	6879      	ldr	r1, [r7, #4]
 8015492:	6978      	ldr	r0, [r7, #20]
 8015494:	f7f6 f99c 	bl	800b7d0 <pbuf_copy>
 8015498:	4603      	mov	r3, r0
 801549a:	2b00      	cmp	r3, #0
 801549c:	d003      	beq.n	80154a6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801549e:	6978      	ldr	r0, [r7, #20]
 80154a0:	f7f6 f862 	bl	800b568 <pbuf_free>
          goto icmperr;
 80154a4:	e061      	b.n	801556a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80154a6:	6878      	ldr	r0, [r7, #4]
 80154a8:	f7f6 f85e 	bl	800b568 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80154ac:	697b      	ldr	r3, [r7, #20]
 80154ae:	607b      	str	r3, [r7, #4]
 80154b0:	e00f      	b.n	80154d2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80154b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80154b4:	330e      	adds	r3, #14
 80154b6:	4619      	mov	r1, r3
 80154b8:	6878      	ldr	r0, [r7, #4]
 80154ba:	f7f5 ffcf 	bl	800b45c <pbuf_remove_header>
 80154be:	4603      	mov	r3, r0
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d006      	beq.n	80154d2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80154c4:	4b2e      	ldr	r3, [pc, #184]	; (8015580 <icmp_input+0x1f8>)
 80154c6:	22c7      	movs	r2, #199	; 0xc7
 80154c8:	4930      	ldr	r1, [pc, #192]	; (801558c <icmp_input+0x204>)
 80154ca:	482f      	ldr	r0, [pc, #188]	; (8015588 <icmp_input+0x200>)
 80154cc:	f001 fd3e 	bl	8016f4c <iprintf>
          goto icmperr;
 80154d0:	e04b      	b.n	801556a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	685b      	ldr	r3, [r3, #4]
 80154d6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80154d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80154da:	4619      	mov	r1, r3
 80154dc:	6878      	ldr	r0, [r7, #4]
 80154de:	f7f5 ffad 	bl	800b43c <pbuf_add_header>
 80154e2:	4603      	mov	r3, r0
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d12b      	bne.n	8015540 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	685b      	ldr	r3, [r3, #4]
 80154ec:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80154ee:	69fb      	ldr	r3, [r7, #28]
 80154f0:	681a      	ldr	r2, [r3, #0]
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80154f6:	4b20      	ldr	r3, [pc, #128]	; (8015578 <icmp_input+0x1f0>)
 80154f8:	691a      	ldr	r2, [r3, #16]
 80154fa:	68fb      	ldr	r3, [r7, #12]
 80154fc:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80154fe:	693b      	ldr	r3, [r7, #16]
 8015500:	2200      	movs	r2, #0
 8015502:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8015504:	693b      	ldr	r3, [r7, #16]
 8015506:	2200      	movs	r2, #0
 8015508:	709a      	strb	r2, [r3, #2]
 801550a:	2200      	movs	r2, #0
 801550c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	22ff      	movs	r2, #255	; 0xff
 8015512:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015514:	68fb      	ldr	r3, [r7, #12]
 8015516:	2200      	movs	r2, #0
 8015518:	729a      	strb	r2, [r3, #10]
 801551a:	2200      	movs	r2, #0
 801551c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801551e:	683b      	ldr	r3, [r7, #0]
 8015520:	9302      	str	r3, [sp, #8]
 8015522:	2301      	movs	r3, #1
 8015524:	9301      	str	r3, [sp, #4]
 8015526:	2300      	movs	r3, #0
 8015528:	9300      	str	r3, [sp, #0]
 801552a:	23ff      	movs	r3, #255	; 0xff
 801552c:	2200      	movs	r2, #0
 801552e:	69f9      	ldr	r1, [r7, #28]
 8015530:	6878      	ldr	r0, [r7, #4]
 8015532:	f000 fa91 	bl	8015a58 <ip4_output_if>
 8015536:	4603      	mov	r3, r0
 8015538:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801553a:	e001      	b.n	8015540 <icmp_input+0x1b8>
      break;
 801553c:	bf00      	nop
 801553e:	e000      	b.n	8015542 <icmp_input+0x1ba>
      break;
 8015540:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015542:	6878      	ldr	r0, [r7, #4]
 8015544:	f7f6 f810 	bl	800b568 <pbuf_free>
  return;
 8015548:	e013      	b.n	8015572 <icmp_input+0x1ea>
    goto lenerr;
 801554a:	bf00      	nop
 801554c:	e002      	b.n	8015554 <icmp_input+0x1cc>
    goto lenerr;
 801554e:	bf00      	nop
 8015550:	e000      	b.n	8015554 <icmp_input+0x1cc>
        goto lenerr;
 8015552:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015554:	6878      	ldr	r0, [r7, #4]
 8015556:	f7f6 f807 	bl	800b568 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801555a:	e00a      	b.n	8015572 <icmp_input+0x1ea>
        goto icmperr;
 801555c:	bf00      	nop
 801555e:	e004      	b.n	801556a <icmp_input+0x1e2>
        goto icmperr;
 8015560:	bf00      	nop
 8015562:	e002      	b.n	801556a <icmp_input+0x1e2>
          goto icmperr;
 8015564:	bf00      	nop
 8015566:	e000      	b.n	801556a <icmp_input+0x1e2>
          goto icmperr;
 8015568:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801556a:	6878      	ldr	r0, [r7, #4]
 801556c:	f7f5 fffc 	bl	800b568 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015570:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8015572:	3728      	adds	r7, #40	; 0x28
 8015574:	46bd      	mov	sp, r7
 8015576:	bd80      	pop	{r7, pc}
 8015578:	2000b8c4 	.word	0x2000b8c4
 801557c:	2000b8d8 	.word	0x2000b8d8
 8015580:	0801b0f8 	.word	0x0801b0f8
 8015584:	0801b130 	.word	0x0801b130
 8015588:	0801b168 	.word	0x0801b168
 801558c:	0801b190 	.word	0x0801b190

08015590 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015590:	b580      	push	{r7, lr}
 8015592:	b082      	sub	sp, #8
 8015594:	af00      	add	r7, sp, #0
 8015596:	6078      	str	r0, [r7, #4]
 8015598:	460b      	mov	r3, r1
 801559a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801559c:	78fb      	ldrb	r3, [r7, #3]
 801559e:	461a      	mov	r2, r3
 80155a0:	2103      	movs	r1, #3
 80155a2:	6878      	ldr	r0, [r7, #4]
 80155a4:	f000 f814 	bl	80155d0 <icmp_send_response>
}
 80155a8:	bf00      	nop
 80155aa:	3708      	adds	r7, #8
 80155ac:	46bd      	mov	sp, r7
 80155ae:	bd80      	pop	{r7, pc}

080155b0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b082      	sub	sp, #8
 80155b4:	af00      	add	r7, sp, #0
 80155b6:	6078      	str	r0, [r7, #4]
 80155b8:	460b      	mov	r3, r1
 80155ba:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80155bc:	78fb      	ldrb	r3, [r7, #3]
 80155be:	461a      	mov	r2, r3
 80155c0:	210b      	movs	r1, #11
 80155c2:	6878      	ldr	r0, [r7, #4]
 80155c4:	f000 f804 	bl	80155d0 <icmp_send_response>
}
 80155c8:	bf00      	nop
 80155ca:	3708      	adds	r7, #8
 80155cc:	46bd      	mov	sp, r7
 80155ce:	bd80      	pop	{r7, pc}

080155d0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80155d0:	b580      	push	{r7, lr}
 80155d2:	b08c      	sub	sp, #48	; 0x30
 80155d4:	af04      	add	r7, sp, #16
 80155d6:	6078      	str	r0, [r7, #4]
 80155d8:	460b      	mov	r3, r1
 80155da:	70fb      	strb	r3, [r7, #3]
 80155dc:	4613      	mov	r3, r2
 80155de:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80155e0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80155e4:	2124      	movs	r1, #36	; 0x24
 80155e6:	2022      	movs	r0, #34	; 0x22
 80155e8:	f7f5 fcde 	bl	800afa8 <pbuf_alloc>
 80155ec:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80155ee:	69fb      	ldr	r3, [r7, #28]
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d04c      	beq.n	801568e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80155f4:	69fb      	ldr	r3, [r7, #28]
 80155f6:	895b      	ldrh	r3, [r3, #10]
 80155f8:	2b23      	cmp	r3, #35	; 0x23
 80155fa:	d806      	bhi.n	801560a <icmp_send_response+0x3a>
 80155fc:	4b26      	ldr	r3, [pc, #152]	; (8015698 <icmp_send_response+0xc8>)
 80155fe:	f240 1269 	movw	r2, #361	; 0x169
 8015602:	4926      	ldr	r1, [pc, #152]	; (801569c <icmp_send_response+0xcc>)
 8015604:	4826      	ldr	r0, [pc, #152]	; (80156a0 <icmp_send_response+0xd0>)
 8015606:	f001 fca1 	bl	8016f4c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	685b      	ldr	r3, [r3, #4]
 801560e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015610:	69fb      	ldr	r3, [r7, #28]
 8015612:	685b      	ldr	r3, [r3, #4]
 8015614:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015616:	697b      	ldr	r3, [r7, #20]
 8015618:	78fa      	ldrb	r2, [r7, #3]
 801561a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801561c:	697b      	ldr	r3, [r7, #20]
 801561e:	78ba      	ldrb	r2, [r7, #2]
 8015620:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8015622:	697b      	ldr	r3, [r7, #20]
 8015624:	2200      	movs	r2, #0
 8015626:	711a      	strb	r2, [r3, #4]
 8015628:	2200      	movs	r2, #0
 801562a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801562c:	697b      	ldr	r3, [r7, #20]
 801562e:	2200      	movs	r2, #0
 8015630:	719a      	strb	r2, [r3, #6]
 8015632:	2200      	movs	r2, #0
 8015634:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015636:	69fb      	ldr	r3, [r7, #28]
 8015638:	685b      	ldr	r3, [r3, #4]
 801563a:	f103 0008 	add.w	r0, r3, #8
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	685b      	ldr	r3, [r3, #4]
 8015642:	221c      	movs	r2, #28
 8015644:	4619      	mov	r1, r3
 8015646:	f001 fc6e 	bl	8016f26 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801564a:	69bb      	ldr	r3, [r7, #24]
 801564c:	68db      	ldr	r3, [r3, #12]
 801564e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015650:	f107 030c 	add.w	r3, r7, #12
 8015654:	4618      	mov	r0, r3
 8015656:	f000 f825 	bl	80156a4 <ip4_route>
 801565a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801565c:	693b      	ldr	r3, [r7, #16]
 801565e:	2b00      	cmp	r3, #0
 8015660:	d011      	beq.n	8015686 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015662:	697b      	ldr	r3, [r7, #20]
 8015664:	2200      	movs	r2, #0
 8015666:	709a      	strb	r2, [r3, #2]
 8015668:	2200      	movs	r2, #0
 801566a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801566c:	f107 020c 	add.w	r2, r7, #12
 8015670:	693b      	ldr	r3, [r7, #16]
 8015672:	9302      	str	r3, [sp, #8]
 8015674:	2301      	movs	r3, #1
 8015676:	9301      	str	r3, [sp, #4]
 8015678:	2300      	movs	r3, #0
 801567a:	9300      	str	r3, [sp, #0]
 801567c:	23ff      	movs	r3, #255	; 0xff
 801567e:	2100      	movs	r1, #0
 8015680:	69f8      	ldr	r0, [r7, #28]
 8015682:	f000 f9e9 	bl	8015a58 <ip4_output_if>
  }
  pbuf_free(q);
 8015686:	69f8      	ldr	r0, [r7, #28]
 8015688:	f7f5 ff6e 	bl	800b568 <pbuf_free>
 801568c:	e000      	b.n	8015690 <icmp_send_response+0xc0>
    return;
 801568e:	bf00      	nop
}
 8015690:	3720      	adds	r7, #32
 8015692:	46bd      	mov	sp, r7
 8015694:	bd80      	pop	{r7, pc}
 8015696:	bf00      	nop
 8015698:	0801b0f8 	.word	0x0801b0f8
 801569c:	0801b1c4 	.word	0x0801b1c4
 80156a0:	0801b168 	.word	0x0801b168

080156a4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80156a4:	b480      	push	{r7}
 80156a6:	b085      	sub	sp, #20
 80156a8:	af00      	add	r7, sp, #0
 80156aa:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80156ac:	4b33      	ldr	r3, [pc, #204]	; (801577c <ip4_route+0xd8>)
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	60fb      	str	r3, [r7, #12]
 80156b2:	e036      	b.n	8015722 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80156ba:	f003 0301 	and.w	r3, r3, #1
 80156be:	b2db      	uxtb	r3, r3
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d02b      	beq.n	801571c <ip4_route+0x78>
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80156ca:	089b      	lsrs	r3, r3, #2
 80156cc:	f003 0301 	and.w	r3, r3, #1
 80156d0:	b2db      	uxtb	r3, r3
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d022      	beq.n	801571c <ip4_route+0x78>
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	3304      	adds	r3, #4
 80156da:	681b      	ldr	r3, [r3, #0]
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d01d      	beq.n	801571c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	681a      	ldr	r2, [r3, #0]
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	3304      	adds	r3, #4
 80156e8:	681b      	ldr	r3, [r3, #0]
 80156ea:	405a      	eors	r2, r3
 80156ec:	68fb      	ldr	r3, [r7, #12]
 80156ee:	3308      	adds	r3, #8
 80156f0:	681b      	ldr	r3, [r3, #0]
 80156f2:	4013      	ands	r3, r2
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d101      	bne.n	80156fc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	e038      	b.n	801576e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015702:	f003 0302 	and.w	r3, r3, #2
 8015706:	2b00      	cmp	r3, #0
 8015708:	d108      	bne.n	801571c <ip4_route+0x78>
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	681a      	ldr	r2, [r3, #0]
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	330c      	adds	r3, #12
 8015712:	681b      	ldr	r3, [r3, #0]
 8015714:	429a      	cmp	r2, r3
 8015716:	d101      	bne.n	801571c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	e028      	b.n	801576e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	60fb      	str	r3, [r7, #12]
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	2b00      	cmp	r3, #0
 8015726:	d1c5      	bne.n	80156b4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015728:	4b15      	ldr	r3, [pc, #84]	; (8015780 <ip4_route+0xdc>)
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	2b00      	cmp	r3, #0
 801572e:	d01a      	beq.n	8015766 <ip4_route+0xc2>
 8015730:	4b13      	ldr	r3, [pc, #76]	; (8015780 <ip4_route+0xdc>)
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015738:	f003 0301 	and.w	r3, r3, #1
 801573c:	2b00      	cmp	r3, #0
 801573e:	d012      	beq.n	8015766 <ip4_route+0xc2>
 8015740:	4b0f      	ldr	r3, [pc, #60]	; (8015780 <ip4_route+0xdc>)
 8015742:	681b      	ldr	r3, [r3, #0]
 8015744:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015748:	f003 0304 	and.w	r3, r3, #4
 801574c:	2b00      	cmp	r3, #0
 801574e:	d00a      	beq.n	8015766 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015750:	4b0b      	ldr	r3, [pc, #44]	; (8015780 <ip4_route+0xdc>)
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	3304      	adds	r3, #4
 8015756:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015758:	2b00      	cmp	r3, #0
 801575a:	d004      	beq.n	8015766 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	681b      	ldr	r3, [r3, #0]
 8015760:	b2db      	uxtb	r3, r3
 8015762:	2b7f      	cmp	r3, #127	; 0x7f
 8015764:	d101      	bne.n	801576a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015766:	2300      	movs	r3, #0
 8015768:	e001      	b.n	801576e <ip4_route+0xca>
  }

  return netif_default;
 801576a:	4b05      	ldr	r3, [pc, #20]	; (8015780 <ip4_route+0xdc>)
 801576c:	681b      	ldr	r3, [r3, #0]
}
 801576e:	4618      	mov	r0, r3
 8015770:	3714      	adds	r7, #20
 8015772:	46bd      	mov	sp, r7
 8015774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015778:	4770      	bx	lr
 801577a:	bf00      	nop
 801577c:	20010e68 	.word	0x20010e68
 8015780:	20010e6c 	.word	0x20010e6c

08015784 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015784:	b580      	push	{r7, lr}
 8015786:	b082      	sub	sp, #8
 8015788:	af00      	add	r7, sp, #0
 801578a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015792:	f003 0301 	and.w	r3, r3, #1
 8015796:	b2db      	uxtb	r3, r3
 8015798:	2b00      	cmp	r3, #0
 801579a:	d016      	beq.n	80157ca <ip4_input_accept+0x46>
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	3304      	adds	r3, #4
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d011      	beq.n	80157ca <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80157a6:	4b0b      	ldr	r3, [pc, #44]	; (80157d4 <ip4_input_accept+0x50>)
 80157a8:	695a      	ldr	r2, [r3, #20]
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	3304      	adds	r3, #4
 80157ae:	681b      	ldr	r3, [r3, #0]
 80157b0:	429a      	cmp	r2, r3
 80157b2:	d008      	beq.n	80157c6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80157b4:	4b07      	ldr	r3, [pc, #28]	; (80157d4 <ip4_input_accept+0x50>)
 80157b6:	695b      	ldr	r3, [r3, #20]
 80157b8:	6879      	ldr	r1, [r7, #4]
 80157ba:	4618      	mov	r0, r3
 80157bc:	f000 fa24 	bl	8015c08 <ip4_addr_isbroadcast_u32>
 80157c0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d001      	beq.n	80157ca <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80157c6:	2301      	movs	r3, #1
 80157c8:	e000      	b.n	80157cc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80157ca:	2300      	movs	r3, #0
}
 80157cc:	4618      	mov	r0, r3
 80157ce:	3708      	adds	r7, #8
 80157d0:	46bd      	mov	sp, r7
 80157d2:	bd80      	pop	{r7, pc}
 80157d4:	2000b8c4 	.word	0x2000b8c4

080157d8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80157d8:	b580      	push	{r7, lr}
 80157da:	b088      	sub	sp, #32
 80157dc:	af00      	add	r7, sp, #0
 80157de:	6078      	str	r0, [r7, #4]
 80157e0:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80157e2:	2301      	movs	r3, #1
 80157e4:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	685b      	ldr	r3, [r3, #4]
 80157ea:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80157ec:	69fb      	ldr	r3, [r7, #28]
 80157ee:	781b      	ldrb	r3, [r3, #0]
 80157f0:	091b      	lsrs	r3, r3, #4
 80157f2:	b2db      	uxtb	r3, r3
 80157f4:	2b04      	cmp	r3, #4
 80157f6:	d004      	beq.n	8015802 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80157f8:	6878      	ldr	r0, [r7, #4]
 80157fa:	f7f5 feb5 	bl	800b568 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80157fe:	2300      	movs	r3, #0
 8015800:	e121      	b.n	8015a46 <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015802:	69fb      	ldr	r3, [r7, #28]
 8015804:	781b      	ldrb	r3, [r3, #0]
 8015806:	f003 030f 	and.w	r3, r3, #15
 801580a:	b2db      	uxtb	r3, r3
 801580c:	009b      	lsls	r3, r3, #2
 801580e:	b2db      	uxtb	r3, r3
 8015810:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015812:	69fb      	ldr	r3, [r7, #28]
 8015814:	885b      	ldrh	r3, [r3, #2]
 8015816:	b29b      	uxth	r3, r3
 8015818:	4618      	mov	r0, r3
 801581a:	f7f4 fb6f 	bl	8009efc <lwip_htons>
 801581e:	4603      	mov	r3, r0
 8015820:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	891b      	ldrh	r3, [r3, #8]
 8015826:	8a3a      	ldrh	r2, [r7, #16]
 8015828:	429a      	cmp	r2, r3
 801582a:	d204      	bcs.n	8015836 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801582c:	8a3b      	ldrh	r3, [r7, #16]
 801582e:	4619      	mov	r1, r3
 8015830:	6878      	ldr	r0, [r7, #4]
 8015832:	f7f5 fd13 	bl	800b25c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	895b      	ldrh	r3, [r3, #10]
 801583a:	8a7a      	ldrh	r2, [r7, #18]
 801583c:	429a      	cmp	r2, r3
 801583e:	d807      	bhi.n	8015850 <ip4_input+0x78>
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	891b      	ldrh	r3, [r3, #8]
 8015844:	8a3a      	ldrh	r2, [r7, #16]
 8015846:	429a      	cmp	r2, r3
 8015848:	d802      	bhi.n	8015850 <ip4_input+0x78>
 801584a:	8a7b      	ldrh	r3, [r7, #18]
 801584c:	2b13      	cmp	r3, #19
 801584e:	d804      	bhi.n	801585a <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015850:	6878      	ldr	r0, [r7, #4]
 8015852:	f7f5 fe89 	bl	800b568 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015856:	2300      	movs	r3, #0
 8015858:	e0f5      	b.n	8015a46 <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801585a:	69fb      	ldr	r3, [r7, #28]
 801585c:	691b      	ldr	r3, [r3, #16]
 801585e:	4a7c      	ldr	r2, [pc, #496]	; (8015a50 <ip4_input+0x278>)
 8015860:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015862:	69fb      	ldr	r3, [r7, #28]
 8015864:	68db      	ldr	r3, [r3, #12]
 8015866:	4a7a      	ldr	r2, [pc, #488]	; (8015a50 <ip4_input+0x278>)
 8015868:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801586a:	4b79      	ldr	r3, [pc, #484]	; (8015a50 <ip4_input+0x278>)
 801586c:	695b      	ldr	r3, [r3, #20]
 801586e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015872:	2be0      	cmp	r3, #224	; 0xe0
 8015874:	d112      	bne.n	801589c <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015876:	683b      	ldr	r3, [r7, #0]
 8015878:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801587c:	f003 0301 	and.w	r3, r3, #1
 8015880:	b2db      	uxtb	r3, r3
 8015882:	2b00      	cmp	r3, #0
 8015884:	d007      	beq.n	8015896 <ip4_input+0xbe>
 8015886:	683b      	ldr	r3, [r7, #0]
 8015888:	3304      	adds	r3, #4
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	2b00      	cmp	r3, #0
 801588e:	d002      	beq.n	8015896 <ip4_input+0xbe>
      netif = inp;
 8015890:	683b      	ldr	r3, [r7, #0]
 8015892:	61bb      	str	r3, [r7, #24]
 8015894:	e02a      	b.n	80158ec <ip4_input+0x114>
    } else {
      netif = NULL;
 8015896:	2300      	movs	r3, #0
 8015898:	61bb      	str	r3, [r7, #24]
 801589a:	e027      	b.n	80158ec <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801589c:	6838      	ldr	r0, [r7, #0]
 801589e:	f7ff ff71 	bl	8015784 <ip4_input_accept>
 80158a2:	4603      	mov	r3, r0
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d002      	beq.n	80158ae <ip4_input+0xd6>
      netif = inp;
 80158a8:	683b      	ldr	r3, [r7, #0]
 80158aa:	61bb      	str	r3, [r7, #24]
 80158ac:	e01e      	b.n	80158ec <ip4_input+0x114>
    } else {
      netif = NULL;
 80158ae:	2300      	movs	r3, #0
 80158b0:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80158b2:	4b67      	ldr	r3, [pc, #412]	; (8015a50 <ip4_input+0x278>)
 80158b4:	695b      	ldr	r3, [r3, #20]
 80158b6:	b2db      	uxtb	r3, r3
 80158b8:	2b7f      	cmp	r3, #127	; 0x7f
 80158ba:	d017      	beq.n	80158ec <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80158bc:	4b65      	ldr	r3, [pc, #404]	; (8015a54 <ip4_input+0x27c>)
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	61bb      	str	r3, [r7, #24]
 80158c2:	e00e      	b.n	80158e2 <ip4_input+0x10a>
          if (netif == inp) {
 80158c4:	69ba      	ldr	r2, [r7, #24]
 80158c6:	683b      	ldr	r3, [r7, #0]
 80158c8:	429a      	cmp	r2, r3
 80158ca:	d006      	beq.n	80158da <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80158cc:	69b8      	ldr	r0, [r7, #24]
 80158ce:	f7ff ff59 	bl	8015784 <ip4_input_accept>
 80158d2:	4603      	mov	r3, r0
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d108      	bne.n	80158ea <ip4_input+0x112>
 80158d8:	e000      	b.n	80158dc <ip4_input+0x104>
            continue;
 80158da:	bf00      	nop
        NETIF_FOREACH(netif) {
 80158dc:	69bb      	ldr	r3, [r7, #24]
 80158de:	681b      	ldr	r3, [r3, #0]
 80158e0:	61bb      	str	r3, [r7, #24]
 80158e2:	69bb      	ldr	r3, [r7, #24]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d1ed      	bne.n	80158c4 <ip4_input+0xec>
 80158e8:	e000      	b.n	80158ec <ip4_input+0x114>
            break;
 80158ea:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80158ec:	69bb      	ldr	r3, [r7, #24]
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d111      	bne.n	8015916 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80158f2:	69fb      	ldr	r3, [r7, #28]
 80158f4:	7a5b      	ldrb	r3, [r3, #9]
 80158f6:	2b11      	cmp	r3, #17
 80158f8:	d10d      	bne.n	8015916 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80158fa:	8a7b      	ldrh	r3, [r7, #18]
 80158fc:	69fa      	ldr	r2, [r7, #28]
 80158fe:	4413      	add	r3, r2
 8015900:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	885b      	ldrh	r3, [r3, #2]
 8015906:	b29b      	uxth	r3, r3
 8015908:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801590c:	d103      	bne.n	8015916 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801590e:	683b      	ldr	r3, [r7, #0]
 8015910:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8015912:	2300      	movs	r3, #0
 8015914:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8015916:	697b      	ldr	r3, [r7, #20]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d017      	beq.n	801594c <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801591c:	4b4c      	ldr	r3, [pc, #304]	; (8015a50 <ip4_input+0x278>)
 801591e:	691b      	ldr	r3, [r3, #16]
 8015920:	2b00      	cmp	r3, #0
 8015922:	d013      	beq.n	801594c <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015924:	4b4a      	ldr	r3, [pc, #296]	; (8015a50 <ip4_input+0x278>)
 8015926:	691b      	ldr	r3, [r3, #16]
 8015928:	6839      	ldr	r1, [r7, #0]
 801592a:	4618      	mov	r0, r3
 801592c:	f000 f96c 	bl	8015c08 <ip4_addr_isbroadcast_u32>
 8015930:	4603      	mov	r3, r0
 8015932:	2b00      	cmp	r3, #0
 8015934:	d105      	bne.n	8015942 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015936:	4b46      	ldr	r3, [pc, #280]	; (8015a50 <ip4_input+0x278>)
 8015938:	691b      	ldr	r3, [r3, #16]
 801593a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801593e:	2be0      	cmp	r3, #224	; 0xe0
 8015940:	d104      	bne.n	801594c <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015942:	6878      	ldr	r0, [r7, #4]
 8015944:	f7f5 fe10 	bl	800b568 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015948:	2300      	movs	r3, #0
 801594a:	e07c      	b.n	8015a46 <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801594c:	69bb      	ldr	r3, [r7, #24]
 801594e:	2b00      	cmp	r3, #0
 8015950:	d104      	bne.n	801595c <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015952:	6878      	ldr	r0, [r7, #4]
 8015954:	f7f5 fe08 	bl	800b568 <pbuf_free>
    return ERR_OK;
 8015958:	2300      	movs	r3, #0
 801595a:	e074      	b.n	8015a46 <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801595c:	69fb      	ldr	r3, [r7, #28]
 801595e:	88db      	ldrh	r3, [r3, #6]
 8015960:	b29b      	uxth	r3, r3
 8015962:	461a      	mov	r2, r3
 8015964:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015968:	4013      	ands	r3, r2
 801596a:	2b00      	cmp	r3, #0
 801596c:	d00b      	beq.n	8015986 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801596e:	6878      	ldr	r0, [r7, #4]
 8015970:	f000 fc90 	bl	8016294 <ip4_reass>
 8015974:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	2b00      	cmp	r3, #0
 801597a:	d101      	bne.n	8015980 <ip4_input+0x1a8>
      return ERR_OK;
 801597c:	2300      	movs	r3, #0
 801597e:	e062      	b.n	8015a46 <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	685b      	ldr	r3, [r3, #4]
 8015984:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015986:	4a32      	ldr	r2, [pc, #200]	; (8015a50 <ip4_input+0x278>)
 8015988:	69bb      	ldr	r3, [r7, #24]
 801598a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801598c:	4a30      	ldr	r2, [pc, #192]	; (8015a50 <ip4_input+0x278>)
 801598e:	683b      	ldr	r3, [r7, #0]
 8015990:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015992:	4a2f      	ldr	r2, [pc, #188]	; (8015a50 <ip4_input+0x278>)
 8015994:	69fb      	ldr	r3, [r7, #28]
 8015996:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015998:	69fb      	ldr	r3, [r7, #28]
 801599a:	781b      	ldrb	r3, [r3, #0]
 801599c:	f003 030f 	and.w	r3, r3, #15
 80159a0:	b2db      	uxtb	r3, r3
 80159a2:	009b      	lsls	r3, r3, #2
 80159a4:	b2db      	uxtb	r3, r3
 80159a6:	b29a      	uxth	r2, r3
 80159a8:	4b29      	ldr	r3, [pc, #164]	; (8015a50 <ip4_input+0x278>)
 80159aa:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80159ac:	8a7b      	ldrh	r3, [r7, #18]
 80159ae:	4619      	mov	r1, r3
 80159b0:	6878      	ldr	r0, [r7, #4]
 80159b2:	f7f5 fd53 	bl	800b45c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80159b6:	69fb      	ldr	r3, [r7, #28]
 80159b8:	7a5b      	ldrb	r3, [r3, #9]
 80159ba:	2b06      	cmp	r3, #6
 80159bc:	d009      	beq.n	80159d2 <ip4_input+0x1fa>
 80159be:	2b11      	cmp	r3, #17
 80159c0:	d002      	beq.n	80159c8 <ip4_input+0x1f0>
 80159c2:	2b01      	cmp	r3, #1
 80159c4:	d00a      	beq.n	80159dc <ip4_input+0x204>
 80159c6:	e00e      	b.n	80159e6 <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80159c8:	6839      	ldr	r1, [r7, #0]
 80159ca:	6878      	ldr	r0, [r7, #4]
 80159cc:	f7fc fb1e 	bl	801200c <udp_input>
        break;
 80159d0:	e026      	b.n	8015a20 <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80159d2:	6839      	ldr	r1, [r7, #0]
 80159d4:	6878      	ldr	r0, [r7, #4]
 80159d6:	f7f7 fecf 	bl	800d778 <tcp_input>
        break;
 80159da:	e021      	b.n	8015a20 <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80159dc:	6839      	ldr	r1, [r7, #0]
 80159de:	6878      	ldr	r0, [r7, #4]
 80159e0:	f7ff fcd2 	bl	8015388 <icmp_input>
        break;
 80159e4:	e01c      	b.n	8015a20 <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80159e6:	4b1a      	ldr	r3, [pc, #104]	; (8015a50 <ip4_input+0x278>)
 80159e8:	695b      	ldr	r3, [r3, #20]
 80159ea:	69b9      	ldr	r1, [r7, #24]
 80159ec:	4618      	mov	r0, r3
 80159ee:	f000 f90b 	bl	8015c08 <ip4_addr_isbroadcast_u32>
 80159f2:	4603      	mov	r3, r0
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d10f      	bne.n	8015a18 <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80159f8:	4b15      	ldr	r3, [pc, #84]	; (8015a50 <ip4_input+0x278>)
 80159fa:	695b      	ldr	r3, [r3, #20]
 80159fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015a00:	2be0      	cmp	r3, #224	; 0xe0
 8015a02:	d009      	beq.n	8015a18 <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015a04:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015a08:	4619      	mov	r1, r3
 8015a0a:	6878      	ldr	r0, [r7, #4]
 8015a0c:	f7f5 fd99 	bl	800b542 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015a10:	2102      	movs	r1, #2
 8015a12:	6878      	ldr	r0, [r7, #4]
 8015a14:	f7ff fdbc 	bl	8015590 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015a18:	6878      	ldr	r0, [r7, #4]
 8015a1a:	f7f5 fda5 	bl	800b568 <pbuf_free>
        break;
 8015a1e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015a20:	4b0b      	ldr	r3, [pc, #44]	; (8015a50 <ip4_input+0x278>)
 8015a22:	2200      	movs	r2, #0
 8015a24:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015a26:	4b0a      	ldr	r3, [pc, #40]	; (8015a50 <ip4_input+0x278>)
 8015a28:	2200      	movs	r2, #0
 8015a2a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015a2c:	4b08      	ldr	r3, [pc, #32]	; (8015a50 <ip4_input+0x278>)
 8015a2e:	2200      	movs	r2, #0
 8015a30:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015a32:	4b07      	ldr	r3, [pc, #28]	; (8015a50 <ip4_input+0x278>)
 8015a34:	2200      	movs	r2, #0
 8015a36:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015a38:	4b05      	ldr	r3, [pc, #20]	; (8015a50 <ip4_input+0x278>)
 8015a3a:	2200      	movs	r2, #0
 8015a3c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015a3e:	4b04      	ldr	r3, [pc, #16]	; (8015a50 <ip4_input+0x278>)
 8015a40:	2200      	movs	r2, #0
 8015a42:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015a44:	2300      	movs	r3, #0
}
 8015a46:	4618      	mov	r0, r3
 8015a48:	3720      	adds	r7, #32
 8015a4a:	46bd      	mov	sp, r7
 8015a4c:	bd80      	pop	{r7, pc}
 8015a4e:	bf00      	nop
 8015a50:	2000b8c4 	.word	0x2000b8c4
 8015a54:	20010e68 	.word	0x20010e68

08015a58 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015a58:	b580      	push	{r7, lr}
 8015a5a:	b08a      	sub	sp, #40	; 0x28
 8015a5c:	af04      	add	r7, sp, #16
 8015a5e:	60f8      	str	r0, [r7, #12]
 8015a60:	60b9      	str	r1, [r7, #8]
 8015a62:	607a      	str	r2, [r7, #4]
 8015a64:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015a66:	68bb      	ldr	r3, [r7, #8]
 8015a68:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d009      	beq.n	8015a84 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015a70:	68bb      	ldr	r3, [r7, #8]
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d003      	beq.n	8015a7e <ip4_output_if+0x26>
 8015a76:	68bb      	ldr	r3, [r7, #8]
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d102      	bne.n	8015a84 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a80:	3304      	adds	r3, #4
 8015a82:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015a84:	78fa      	ldrb	r2, [r7, #3]
 8015a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a88:	9302      	str	r3, [sp, #8]
 8015a8a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015a8e:	9301      	str	r3, [sp, #4]
 8015a90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015a94:	9300      	str	r3, [sp, #0]
 8015a96:	4613      	mov	r3, r2
 8015a98:	687a      	ldr	r2, [r7, #4]
 8015a9a:	6979      	ldr	r1, [r7, #20]
 8015a9c:	68f8      	ldr	r0, [r7, #12]
 8015a9e:	f000 f805 	bl	8015aac <ip4_output_if_src>
 8015aa2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015aa4:	4618      	mov	r0, r3
 8015aa6:	3718      	adds	r7, #24
 8015aa8:	46bd      	mov	sp, r7
 8015aaa:	bd80      	pop	{r7, pc}

08015aac <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015aac:	b580      	push	{r7, lr}
 8015aae:	b088      	sub	sp, #32
 8015ab0:	af00      	add	r7, sp, #0
 8015ab2:	60f8      	str	r0, [r7, #12]
 8015ab4:	60b9      	str	r1, [r7, #8]
 8015ab6:	607a      	str	r2, [r7, #4]
 8015ab8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015aba:	68fb      	ldr	r3, [r7, #12]
 8015abc:	7b9b      	ldrb	r3, [r3, #14]
 8015abe:	2b01      	cmp	r3, #1
 8015ac0:	d006      	beq.n	8015ad0 <ip4_output_if_src+0x24>
 8015ac2:	4b4b      	ldr	r3, [pc, #300]	; (8015bf0 <ip4_output_if_src+0x144>)
 8015ac4:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015ac8:	494a      	ldr	r1, [pc, #296]	; (8015bf4 <ip4_output_if_src+0x148>)
 8015aca:	484b      	ldr	r0, [pc, #300]	; (8015bf8 <ip4_output_if_src+0x14c>)
 8015acc:	f001 fa3e 	bl	8016f4c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d060      	beq.n	8015b98 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015ad6:	2314      	movs	r3, #20
 8015ad8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015ada:	2114      	movs	r1, #20
 8015adc:	68f8      	ldr	r0, [r7, #12]
 8015ade:	f7f5 fcad 	bl	800b43c <pbuf_add_header>
 8015ae2:	4603      	mov	r3, r0
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d002      	beq.n	8015aee <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015ae8:	f06f 0301 	mvn.w	r3, #1
 8015aec:	e07c      	b.n	8015be8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015aee:	68fb      	ldr	r3, [r7, #12]
 8015af0:	685b      	ldr	r3, [r3, #4]
 8015af2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015af4:	68fb      	ldr	r3, [r7, #12]
 8015af6:	895b      	ldrh	r3, [r3, #10]
 8015af8:	2b13      	cmp	r3, #19
 8015afa:	d806      	bhi.n	8015b0a <ip4_output_if_src+0x5e>
 8015afc:	4b3c      	ldr	r3, [pc, #240]	; (8015bf0 <ip4_output_if_src+0x144>)
 8015afe:	f240 3289 	movw	r2, #905	; 0x389
 8015b02:	493e      	ldr	r1, [pc, #248]	; (8015bfc <ip4_output_if_src+0x150>)
 8015b04:	483c      	ldr	r0, [pc, #240]	; (8015bf8 <ip4_output_if_src+0x14c>)
 8015b06:	f001 fa21 	bl	8016f4c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015b0a:	69fb      	ldr	r3, [r7, #28]
 8015b0c:	78fa      	ldrb	r2, [r7, #3]
 8015b0e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015b10:	69fb      	ldr	r3, [r7, #28]
 8015b12:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015b16:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	681a      	ldr	r2, [r3, #0]
 8015b1c:	69fb      	ldr	r3, [r7, #28]
 8015b1e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015b20:	8b7b      	ldrh	r3, [r7, #26]
 8015b22:	089b      	lsrs	r3, r3, #2
 8015b24:	b29b      	uxth	r3, r3
 8015b26:	b2db      	uxtb	r3, r3
 8015b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015b2c:	b2da      	uxtb	r2, r3
 8015b2e:	69fb      	ldr	r3, [r7, #28]
 8015b30:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015b32:	69fb      	ldr	r3, [r7, #28]
 8015b34:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015b38:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015b3a:	68fb      	ldr	r3, [r7, #12]
 8015b3c:	891b      	ldrh	r3, [r3, #8]
 8015b3e:	4618      	mov	r0, r3
 8015b40:	f7f4 f9dc 	bl	8009efc <lwip_htons>
 8015b44:	4603      	mov	r3, r0
 8015b46:	461a      	mov	r2, r3
 8015b48:	69fb      	ldr	r3, [r7, #28]
 8015b4a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015b4c:	69fb      	ldr	r3, [r7, #28]
 8015b4e:	2200      	movs	r2, #0
 8015b50:	719a      	strb	r2, [r3, #6]
 8015b52:	2200      	movs	r2, #0
 8015b54:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015b56:	4b2a      	ldr	r3, [pc, #168]	; (8015c00 <ip4_output_if_src+0x154>)
 8015b58:	881b      	ldrh	r3, [r3, #0]
 8015b5a:	4618      	mov	r0, r3
 8015b5c:	f7f4 f9ce 	bl	8009efc <lwip_htons>
 8015b60:	4603      	mov	r3, r0
 8015b62:	461a      	mov	r2, r3
 8015b64:	69fb      	ldr	r3, [r7, #28]
 8015b66:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015b68:	4b25      	ldr	r3, [pc, #148]	; (8015c00 <ip4_output_if_src+0x154>)
 8015b6a:	881b      	ldrh	r3, [r3, #0]
 8015b6c:	3301      	adds	r3, #1
 8015b6e:	b29a      	uxth	r2, r3
 8015b70:	4b23      	ldr	r3, [pc, #140]	; (8015c00 <ip4_output_if_src+0x154>)
 8015b72:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015b74:	68bb      	ldr	r3, [r7, #8]
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d104      	bne.n	8015b84 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015b7a:	4b22      	ldr	r3, [pc, #136]	; (8015c04 <ip4_output_if_src+0x158>)
 8015b7c:	681a      	ldr	r2, [r3, #0]
 8015b7e:	69fb      	ldr	r3, [r7, #28]
 8015b80:	60da      	str	r2, [r3, #12]
 8015b82:	e003      	b.n	8015b8c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015b84:	68bb      	ldr	r3, [r7, #8]
 8015b86:	681a      	ldr	r2, [r3, #0]
 8015b88:	69fb      	ldr	r3, [r7, #28]
 8015b8a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015b8c:	69fb      	ldr	r3, [r7, #28]
 8015b8e:	2200      	movs	r2, #0
 8015b90:	729a      	strb	r2, [r3, #10]
 8015b92:	2200      	movs	r2, #0
 8015b94:	72da      	strb	r2, [r3, #11]
 8015b96:	e00f      	b.n	8015bb8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015b98:	68fb      	ldr	r3, [r7, #12]
 8015b9a:	895b      	ldrh	r3, [r3, #10]
 8015b9c:	2b13      	cmp	r3, #19
 8015b9e:	d802      	bhi.n	8015ba6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015ba0:	f06f 0301 	mvn.w	r3, #1
 8015ba4:	e020      	b.n	8015be8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015ba6:	68fb      	ldr	r3, [r7, #12]
 8015ba8:	685b      	ldr	r3, [r3, #4]
 8015baa:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015bac:	69fb      	ldr	r3, [r7, #28]
 8015bae:	691b      	ldr	r3, [r3, #16]
 8015bb0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015bb2:	f107 0314 	add.w	r3, r7, #20
 8015bb6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d00c      	beq.n	8015bda <ip4_output_if_src+0x12e>
 8015bc0:	68fb      	ldr	r3, [r7, #12]
 8015bc2:	891a      	ldrh	r2, [r3, #8]
 8015bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bc6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015bc8:	429a      	cmp	r2, r3
 8015bca:	d906      	bls.n	8015bda <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015bcc:	687a      	ldr	r2, [r7, #4]
 8015bce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015bd0:	68f8      	ldr	r0, [r7, #12]
 8015bd2:	f000 fd4b 	bl	801666c <ip4_frag>
 8015bd6:	4603      	mov	r3, r0
 8015bd8:	e006      	b.n	8015be8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bdc:	695b      	ldr	r3, [r3, #20]
 8015bde:	687a      	ldr	r2, [r7, #4]
 8015be0:	68f9      	ldr	r1, [r7, #12]
 8015be2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015be4:	4798      	blx	r3
 8015be6:	4603      	mov	r3, r0
}
 8015be8:	4618      	mov	r0, r3
 8015bea:	3720      	adds	r7, #32
 8015bec:	46bd      	mov	sp, r7
 8015bee:	bd80      	pop	{r7, pc}
 8015bf0:	0801b1f0 	.word	0x0801b1f0
 8015bf4:	0801b224 	.word	0x0801b224
 8015bf8:	0801b230 	.word	0x0801b230
 8015bfc:	0801b258 	.word	0x0801b258
 8015c00:	200082fa 	.word	0x200082fa
 8015c04:	0801faa8 	.word	0x0801faa8

08015c08 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015c08:	b480      	push	{r7}
 8015c0a:	b085      	sub	sp, #20
 8015c0c:	af00      	add	r7, sp, #0
 8015c0e:	6078      	str	r0, [r7, #4]
 8015c10:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c1c:	d002      	beq.n	8015c24 <ip4_addr_isbroadcast_u32+0x1c>
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d101      	bne.n	8015c28 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015c24:	2301      	movs	r3, #1
 8015c26:	e02a      	b.n	8015c7e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015c28:	683b      	ldr	r3, [r7, #0]
 8015c2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015c2e:	f003 0302 	and.w	r3, r3, #2
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d101      	bne.n	8015c3a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015c36:	2300      	movs	r3, #0
 8015c38:	e021      	b.n	8015c7e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015c3a:	683b      	ldr	r3, [r7, #0]
 8015c3c:	3304      	adds	r3, #4
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	687a      	ldr	r2, [r7, #4]
 8015c42:	429a      	cmp	r2, r3
 8015c44:	d101      	bne.n	8015c4a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015c46:	2300      	movs	r3, #0
 8015c48:	e019      	b.n	8015c7e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015c4a:	68fa      	ldr	r2, [r7, #12]
 8015c4c:	683b      	ldr	r3, [r7, #0]
 8015c4e:	3304      	adds	r3, #4
 8015c50:	681b      	ldr	r3, [r3, #0]
 8015c52:	405a      	eors	r2, r3
 8015c54:	683b      	ldr	r3, [r7, #0]
 8015c56:	3308      	adds	r3, #8
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	4013      	ands	r3, r2
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d10d      	bne.n	8015c7c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015c60:	683b      	ldr	r3, [r7, #0]
 8015c62:	3308      	adds	r3, #8
 8015c64:	681b      	ldr	r3, [r3, #0]
 8015c66:	43da      	mvns	r2, r3
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015c6c:	683b      	ldr	r3, [r7, #0]
 8015c6e:	3308      	adds	r3, #8
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015c74:	429a      	cmp	r2, r3
 8015c76:	d101      	bne.n	8015c7c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015c78:	2301      	movs	r3, #1
 8015c7a:	e000      	b.n	8015c7e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015c7c:	2300      	movs	r3, #0
  }
}
 8015c7e:	4618      	mov	r0, r3
 8015c80:	3714      	adds	r7, #20
 8015c82:	46bd      	mov	sp, r7
 8015c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c88:	4770      	bx	lr
	...

08015c8c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015c8c:	b580      	push	{r7, lr}
 8015c8e:	b084      	sub	sp, #16
 8015c90:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015c92:	2300      	movs	r3, #0
 8015c94:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015c96:	4b12      	ldr	r3, [pc, #72]	; (8015ce0 <ip_reass_tmr+0x54>)
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015c9c:	e018      	b.n	8015cd0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015c9e:	68fb      	ldr	r3, [r7, #12]
 8015ca0:	7fdb      	ldrb	r3, [r3, #31]
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d00b      	beq.n	8015cbe <ip_reass_tmr+0x32>
      r->timer--;
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	7fdb      	ldrb	r3, [r3, #31]
 8015caa:	3b01      	subs	r3, #1
 8015cac:	b2da      	uxtb	r2, r3
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	60fb      	str	r3, [r7, #12]
 8015cbc:	e008      	b.n	8015cd0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015cbe:	68fb      	ldr	r3, [r7, #12]
 8015cc0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015cc2:	68fb      	ldr	r3, [r7, #12]
 8015cc4:	681b      	ldr	r3, [r3, #0]
 8015cc6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015cc8:	68b9      	ldr	r1, [r7, #8]
 8015cca:	6878      	ldr	r0, [r7, #4]
 8015ccc:	f000 f80a 	bl	8015ce4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d1e3      	bne.n	8015c9e <ip_reass_tmr+0x12>
    }
  }
}
 8015cd6:	bf00      	nop
 8015cd8:	3710      	adds	r7, #16
 8015cda:	46bd      	mov	sp, r7
 8015cdc:	bd80      	pop	{r7, pc}
 8015cde:	bf00      	nop
 8015ce0:	200082fc 	.word	0x200082fc

08015ce4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015ce4:	b580      	push	{r7, lr}
 8015ce6:	b088      	sub	sp, #32
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	6078      	str	r0, [r7, #4]
 8015cec:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015cee:	2300      	movs	r3, #0
 8015cf0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015cf2:	683a      	ldr	r2, [r7, #0]
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	429a      	cmp	r2, r3
 8015cf8:	d105      	bne.n	8015d06 <ip_reass_free_complete_datagram+0x22>
 8015cfa:	4b45      	ldr	r3, [pc, #276]	; (8015e10 <ip_reass_free_complete_datagram+0x12c>)
 8015cfc:	22ab      	movs	r2, #171	; 0xab
 8015cfe:	4945      	ldr	r1, [pc, #276]	; (8015e14 <ip_reass_free_complete_datagram+0x130>)
 8015d00:	4845      	ldr	r0, [pc, #276]	; (8015e18 <ip_reass_free_complete_datagram+0x134>)
 8015d02:	f001 f923 	bl	8016f4c <iprintf>
  if (prev != NULL) {
 8015d06:	683b      	ldr	r3, [r7, #0]
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d00a      	beq.n	8015d22 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015d0c:	683b      	ldr	r3, [r7, #0]
 8015d0e:	681b      	ldr	r3, [r3, #0]
 8015d10:	687a      	ldr	r2, [r7, #4]
 8015d12:	429a      	cmp	r2, r3
 8015d14:	d005      	beq.n	8015d22 <ip_reass_free_complete_datagram+0x3e>
 8015d16:	4b3e      	ldr	r3, [pc, #248]	; (8015e10 <ip_reass_free_complete_datagram+0x12c>)
 8015d18:	22ad      	movs	r2, #173	; 0xad
 8015d1a:	4940      	ldr	r1, [pc, #256]	; (8015e1c <ip_reass_free_complete_datagram+0x138>)
 8015d1c:	483e      	ldr	r0, [pc, #248]	; (8015e18 <ip_reass_free_complete_datagram+0x134>)
 8015d1e:	f001 f915 	bl	8016f4c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	685b      	ldr	r3, [r3, #4]
 8015d26:	685b      	ldr	r3, [r3, #4]
 8015d28:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015d2a:	697b      	ldr	r3, [r7, #20]
 8015d2c:	889b      	ldrh	r3, [r3, #4]
 8015d2e:	b29b      	uxth	r3, r3
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d12a      	bne.n	8015d8a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	685b      	ldr	r3, [r3, #4]
 8015d38:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015d3a:	697b      	ldr	r3, [r7, #20]
 8015d3c:	681a      	ldr	r2, [r3, #0]
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015d42:	69bb      	ldr	r3, [r7, #24]
 8015d44:	6858      	ldr	r0, [r3, #4]
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	3308      	adds	r3, #8
 8015d4a:	2214      	movs	r2, #20
 8015d4c:	4619      	mov	r1, r3
 8015d4e:	f001 f8ea 	bl	8016f26 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015d52:	2101      	movs	r1, #1
 8015d54:	69b8      	ldr	r0, [r7, #24]
 8015d56:	f7ff fc2b 	bl	80155b0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015d5a:	69b8      	ldr	r0, [r7, #24]
 8015d5c:	f7f5 fc92 	bl	800b684 <pbuf_clen>
 8015d60:	4603      	mov	r3, r0
 8015d62:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015d64:	8bfa      	ldrh	r2, [r7, #30]
 8015d66:	8a7b      	ldrh	r3, [r7, #18]
 8015d68:	4413      	add	r3, r2
 8015d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015d6e:	db05      	blt.n	8015d7c <ip_reass_free_complete_datagram+0x98>
 8015d70:	4b27      	ldr	r3, [pc, #156]	; (8015e10 <ip_reass_free_complete_datagram+0x12c>)
 8015d72:	22bc      	movs	r2, #188	; 0xbc
 8015d74:	492a      	ldr	r1, [pc, #168]	; (8015e20 <ip_reass_free_complete_datagram+0x13c>)
 8015d76:	4828      	ldr	r0, [pc, #160]	; (8015e18 <ip_reass_free_complete_datagram+0x134>)
 8015d78:	f001 f8e8 	bl	8016f4c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015d7c:	8bfa      	ldrh	r2, [r7, #30]
 8015d7e:	8a7b      	ldrh	r3, [r7, #18]
 8015d80:	4413      	add	r3, r2
 8015d82:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015d84:	69b8      	ldr	r0, [r7, #24]
 8015d86:	f7f5 fbef 	bl	800b568 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	685b      	ldr	r3, [r3, #4]
 8015d8e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015d90:	e01f      	b.n	8015dd2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015d92:	69bb      	ldr	r3, [r7, #24]
 8015d94:	685b      	ldr	r3, [r3, #4]
 8015d96:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015d98:	69bb      	ldr	r3, [r7, #24]
 8015d9a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015d9c:	697b      	ldr	r3, [r7, #20]
 8015d9e:	681b      	ldr	r3, [r3, #0]
 8015da0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015da2:	68f8      	ldr	r0, [r7, #12]
 8015da4:	f7f5 fc6e 	bl	800b684 <pbuf_clen>
 8015da8:	4603      	mov	r3, r0
 8015daa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015dac:	8bfa      	ldrh	r2, [r7, #30]
 8015dae:	8a7b      	ldrh	r3, [r7, #18]
 8015db0:	4413      	add	r3, r2
 8015db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015db6:	db05      	blt.n	8015dc4 <ip_reass_free_complete_datagram+0xe0>
 8015db8:	4b15      	ldr	r3, [pc, #84]	; (8015e10 <ip_reass_free_complete_datagram+0x12c>)
 8015dba:	22cc      	movs	r2, #204	; 0xcc
 8015dbc:	4918      	ldr	r1, [pc, #96]	; (8015e20 <ip_reass_free_complete_datagram+0x13c>)
 8015dbe:	4816      	ldr	r0, [pc, #88]	; (8015e18 <ip_reass_free_complete_datagram+0x134>)
 8015dc0:	f001 f8c4 	bl	8016f4c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015dc4:	8bfa      	ldrh	r2, [r7, #30]
 8015dc6:	8a7b      	ldrh	r3, [r7, #18]
 8015dc8:	4413      	add	r3, r2
 8015dca:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015dcc:	68f8      	ldr	r0, [r7, #12]
 8015dce:	f7f5 fbcb 	bl	800b568 <pbuf_free>
  while (p != NULL) {
 8015dd2:	69bb      	ldr	r3, [r7, #24]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d1dc      	bne.n	8015d92 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015dd8:	6839      	ldr	r1, [r7, #0]
 8015dda:	6878      	ldr	r0, [r7, #4]
 8015ddc:	f000 f8c2 	bl	8015f64 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015de0:	4b10      	ldr	r3, [pc, #64]	; (8015e24 <ip_reass_free_complete_datagram+0x140>)
 8015de2:	881b      	ldrh	r3, [r3, #0]
 8015de4:	8bfa      	ldrh	r2, [r7, #30]
 8015de6:	429a      	cmp	r2, r3
 8015de8:	d905      	bls.n	8015df6 <ip_reass_free_complete_datagram+0x112>
 8015dea:	4b09      	ldr	r3, [pc, #36]	; (8015e10 <ip_reass_free_complete_datagram+0x12c>)
 8015dec:	22d2      	movs	r2, #210	; 0xd2
 8015dee:	490e      	ldr	r1, [pc, #56]	; (8015e28 <ip_reass_free_complete_datagram+0x144>)
 8015df0:	4809      	ldr	r0, [pc, #36]	; (8015e18 <ip_reass_free_complete_datagram+0x134>)
 8015df2:	f001 f8ab 	bl	8016f4c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015df6:	4b0b      	ldr	r3, [pc, #44]	; (8015e24 <ip_reass_free_complete_datagram+0x140>)
 8015df8:	881a      	ldrh	r2, [r3, #0]
 8015dfa:	8bfb      	ldrh	r3, [r7, #30]
 8015dfc:	1ad3      	subs	r3, r2, r3
 8015dfe:	b29a      	uxth	r2, r3
 8015e00:	4b08      	ldr	r3, [pc, #32]	; (8015e24 <ip_reass_free_complete_datagram+0x140>)
 8015e02:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015e04:	8bfb      	ldrh	r3, [r7, #30]
}
 8015e06:	4618      	mov	r0, r3
 8015e08:	3720      	adds	r7, #32
 8015e0a:	46bd      	mov	sp, r7
 8015e0c:	bd80      	pop	{r7, pc}
 8015e0e:	bf00      	nop
 8015e10:	0801b288 	.word	0x0801b288
 8015e14:	0801b2c4 	.word	0x0801b2c4
 8015e18:	0801b2d0 	.word	0x0801b2d0
 8015e1c:	0801b2f8 	.word	0x0801b2f8
 8015e20:	0801b30c 	.word	0x0801b30c
 8015e24:	20008300 	.word	0x20008300
 8015e28:	0801b32c 	.word	0x0801b32c

08015e2c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015e2c:	b580      	push	{r7, lr}
 8015e2e:	b08a      	sub	sp, #40	; 0x28
 8015e30:	af00      	add	r7, sp, #0
 8015e32:	6078      	str	r0, [r7, #4]
 8015e34:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015e36:	2300      	movs	r3, #0
 8015e38:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015e3a:	2300      	movs	r3, #0
 8015e3c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015e3e:	2300      	movs	r3, #0
 8015e40:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015e42:	2300      	movs	r3, #0
 8015e44:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015e46:	2300      	movs	r3, #0
 8015e48:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015e4a:	4b28      	ldr	r3, [pc, #160]	; (8015eec <ip_reass_remove_oldest_datagram+0xc0>)
 8015e4c:	681b      	ldr	r3, [r3, #0]
 8015e4e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015e50:	e030      	b.n	8015eb4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e54:	695a      	ldr	r2, [r3, #20]
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	68db      	ldr	r3, [r3, #12]
 8015e5a:	429a      	cmp	r2, r3
 8015e5c:	d10c      	bne.n	8015e78 <ip_reass_remove_oldest_datagram+0x4c>
 8015e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e60:	699a      	ldr	r2, [r3, #24]
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	691b      	ldr	r3, [r3, #16]
 8015e66:	429a      	cmp	r2, r3
 8015e68:	d106      	bne.n	8015e78 <ip_reass_remove_oldest_datagram+0x4c>
 8015e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e6c:	899a      	ldrh	r2, [r3, #12]
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	889b      	ldrh	r3, [r3, #4]
 8015e72:	b29b      	uxth	r3, r3
 8015e74:	429a      	cmp	r2, r3
 8015e76:	d014      	beq.n	8015ea2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015e78:	693b      	ldr	r3, [r7, #16]
 8015e7a:	3301      	adds	r3, #1
 8015e7c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015e7e:	6a3b      	ldr	r3, [r7, #32]
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d104      	bne.n	8015e8e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e86:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015e88:	69fb      	ldr	r3, [r7, #28]
 8015e8a:	61bb      	str	r3, [r7, #24]
 8015e8c:	e009      	b.n	8015ea2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e90:	7fda      	ldrb	r2, [r3, #31]
 8015e92:	6a3b      	ldr	r3, [r7, #32]
 8015e94:	7fdb      	ldrb	r3, [r3, #31]
 8015e96:	429a      	cmp	r2, r3
 8015e98:	d803      	bhi.n	8015ea2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e9c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015e9e:	69fb      	ldr	r3, [r7, #28]
 8015ea0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d001      	beq.n	8015eae <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eac:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d1cb      	bne.n	8015e52 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015eba:	6a3b      	ldr	r3, [r7, #32]
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d008      	beq.n	8015ed2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015ec0:	69b9      	ldr	r1, [r7, #24]
 8015ec2:	6a38      	ldr	r0, [r7, #32]
 8015ec4:	f7ff ff0e 	bl	8015ce4 <ip_reass_free_complete_datagram>
 8015ec8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015eca:	697a      	ldr	r2, [r7, #20]
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	4413      	add	r3, r2
 8015ed0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015ed2:	697a      	ldr	r2, [r7, #20]
 8015ed4:	683b      	ldr	r3, [r7, #0]
 8015ed6:	429a      	cmp	r2, r3
 8015ed8:	da02      	bge.n	8015ee0 <ip_reass_remove_oldest_datagram+0xb4>
 8015eda:	693b      	ldr	r3, [r7, #16]
 8015edc:	2b01      	cmp	r3, #1
 8015ede:	dcac      	bgt.n	8015e3a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015ee0:	697b      	ldr	r3, [r7, #20]
}
 8015ee2:	4618      	mov	r0, r3
 8015ee4:	3728      	adds	r7, #40	; 0x28
 8015ee6:	46bd      	mov	sp, r7
 8015ee8:	bd80      	pop	{r7, pc}
 8015eea:	bf00      	nop
 8015eec:	200082fc 	.word	0x200082fc

08015ef0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015ef0:	b580      	push	{r7, lr}
 8015ef2:	b084      	sub	sp, #16
 8015ef4:	af00      	add	r7, sp, #0
 8015ef6:	6078      	str	r0, [r7, #4]
 8015ef8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015efa:	2004      	movs	r0, #4
 8015efc:	f7f4 fcb4 	bl	800a868 <memp_malloc>
 8015f00:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015f02:	68fb      	ldr	r3, [r7, #12]
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d110      	bne.n	8015f2a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015f08:	6839      	ldr	r1, [r7, #0]
 8015f0a:	6878      	ldr	r0, [r7, #4]
 8015f0c:	f7ff ff8e 	bl	8015e2c <ip_reass_remove_oldest_datagram>
 8015f10:	4602      	mov	r2, r0
 8015f12:	683b      	ldr	r3, [r7, #0]
 8015f14:	4293      	cmp	r3, r2
 8015f16:	dc03      	bgt.n	8015f20 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015f18:	2004      	movs	r0, #4
 8015f1a:	f7f4 fca5 	bl	800a868 <memp_malloc>
 8015f1e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015f20:	68fb      	ldr	r3, [r7, #12]
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d101      	bne.n	8015f2a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015f26:	2300      	movs	r3, #0
 8015f28:	e016      	b.n	8015f58 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015f2a:	2220      	movs	r2, #32
 8015f2c:	2100      	movs	r1, #0
 8015f2e:	68f8      	ldr	r0, [r7, #12]
 8015f30:	f001 f804 	bl	8016f3c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015f34:	68fb      	ldr	r3, [r7, #12]
 8015f36:	220f      	movs	r2, #15
 8015f38:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015f3a:	4b09      	ldr	r3, [pc, #36]	; (8015f60 <ip_reass_enqueue_new_datagram+0x70>)
 8015f3c:	681a      	ldr	r2, [r3, #0]
 8015f3e:	68fb      	ldr	r3, [r7, #12]
 8015f40:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015f42:	4a07      	ldr	r2, [pc, #28]	; (8015f60 <ip_reass_enqueue_new_datagram+0x70>)
 8015f44:	68fb      	ldr	r3, [r7, #12]
 8015f46:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015f48:	68fb      	ldr	r3, [r7, #12]
 8015f4a:	3308      	adds	r3, #8
 8015f4c:	2214      	movs	r2, #20
 8015f4e:	6879      	ldr	r1, [r7, #4]
 8015f50:	4618      	mov	r0, r3
 8015f52:	f000 ffe8 	bl	8016f26 <memcpy>
  return ipr;
 8015f56:	68fb      	ldr	r3, [r7, #12]
}
 8015f58:	4618      	mov	r0, r3
 8015f5a:	3710      	adds	r7, #16
 8015f5c:	46bd      	mov	sp, r7
 8015f5e:	bd80      	pop	{r7, pc}
 8015f60:	200082fc 	.word	0x200082fc

08015f64 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015f64:	b580      	push	{r7, lr}
 8015f66:	b082      	sub	sp, #8
 8015f68:	af00      	add	r7, sp, #0
 8015f6a:	6078      	str	r0, [r7, #4]
 8015f6c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015f6e:	4b10      	ldr	r3, [pc, #64]	; (8015fb0 <ip_reass_dequeue_datagram+0x4c>)
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	687a      	ldr	r2, [r7, #4]
 8015f74:	429a      	cmp	r2, r3
 8015f76:	d104      	bne.n	8015f82 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	4a0c      	ldr	r2, [pc, #48]	; (8015fb0 <ip_reass_dequeue_datagram+0x4c>)
 8015f7e:	6013      	str	r3, [r2, #0]
 8015f80:	e00d      	b.n	8015f9e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015f82:	683b      	ldr	r3, [r7, #0]
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d106      	bne.n	8015f96 <ip_reass_dequeue_datagram+0x32>
 8015f88:	4b0a      	ldr	r3, [pc, #40]	; (8015fb4 <ip_reass_dequeue_datagram+0x50>)
 8015f8a:	f240 1245 	movw	r2, #325	; 0x145
 8015f8e:	490a      	ldr	r1, [pc, #40]	; (8015fb8 <ip_reass_dequeue_datagram+0x54>)
 8015f90:	480a      	ldr	r0, [pc, #40]	; (8015fbc <ip_reass_dequeue_datagram+0x58>)
 8015f92:	f000 ffdb 	bl	8016f4c <iprintf>
    prev->next = ipr->next;
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	681a      	ldr	r2, [r3, #0]
 8015f9a:	683b      	ldr	r3, [r7, #0]
 8015f9c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015f9e:	6879      	ldr	r1, [r7, #4]
 8015fa0:	2004      	movs	r0, #4
 8015fa2:	f7f4 fcb3 	bl	800a90c <memp_free>
}
 8015fa6:	bf00      	nop
 8015fa8:	3708      	adds	r7, #8
 8015faa:	46bd      	mov	sp, r7
 8015fac:	bd80      	pop	{r7, pc}
 8015fae:	bf00      	nop
 8015fb0:	200082fc 	.word	0x200082fc
 8015fb4:	0801b288 	.word	0x0801b288
 8015fb8:	0801b350 	.word	0x0801b350
 8015fbc:	0801b2d0 	.word	0x0801b2d0

08015fc0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015fc0:	b580      	push	{r7, lr}
 8015fc2:	b08c      	sub	sp, #48	; 0x30
 8015fc4:	af00      	add	r7, sp, #0
 8015fc6:	60f8      	str	r0, [r7, #12]
 8015fc8:	60b9      	str	r1, [r7, #8]
 8015fca:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015fcc:	2300      	movs	r3, #0
 8015fce:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015fd0:	2301      	movs	r3, #1
 8015fd2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015fd4:	68bb      	ldr	r3, [r7, #8]
 8015fd6:	685b      	ldr	r3, [r3, #4]
 8015fd8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015fda:	69fb      	ldr	r3, [r7, #28]
 8015fdc:	885b      	ldrh	r3, [r3, #2]
 8015fde:	b29b      	uxth	r3, r3
 8015fe0:	4618      	mov	r0, r3
 8015fe2:	f7f3 ff8b 	bl	8009efc <lwip_htons>
 8015fe6:	4603      	mov	r3, r0
 8015fe8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015fea:	69fb      	ldr	r3, [r7, #28]
 8015fec:	781b      	ldrb	r3, [r3, #0]
 8015fee:	f003 030f 	and.w	r3, r3, #15
 8015ff2:	b2db      	uxtb	r3, r3
 8015ff4:	009b      	lsls	r3, r3, #2
 8015ff6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015ff8:	7e7b      	ldrb	r3, [r7, #25]
 8015ffa:	b29b      	uxth	r3, r3
 8015ffc:	8b7a      	ldrh	r2, [r7, #26]
 8015ffe:	429a      	cmp	r2, r3
 8016000:	d202      	bcs.n	8016008 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016002:	f04f 33ff 	mov.w	r3, #4294967295
 8016006:	e135      	b.n	8016274 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8016008:	7e7b      	ldrb	r3, [r7, #25]
 801600a:	b29b      	uxth	r3, r3
 801600c:	8b7a      	ldrh	r2, [r7, #26]
 801600e:	1ad3      	subs	r3, r2, r3
 8016010:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016012:	69fb      	ldr	r3, [r7, #28]
 8016014:	88db      	ldrh	r3, [r3, #6]
 8016016:	b29b      	uxth	r3, r3
 8016018:	4618      	mov	r0, r3
 801601a:	f7f3 ff6f 	bl	8009efc <lwip_htons>
 801601e:	4603      	mov	r3, r0
 8016020:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016024:	b29b      	uxth	r3, r3
 8016026:	00db      	lsls	r3, r3, #3
 8016028:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801602a:	68bb      	ldr	r3, [r7, #8]
 801602c:	685b      	ldr	r3, [r3, #4]
 801602e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016032:	2200      	movs	r2, #0
 8016034:	701a      	strb	r2, [r3, #0]
 8016036:	2200      	movs	r2, #0
 8016038:	705a      	strb	r2, [r3, #1]
 801603a:	2200      	movs	r2, #0
 801603c:	709a      	strb	r2, [r3, #2]
 801603e:	2200      	movs	r2, #0
 8016040:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016044:	8afa      	ldrh	r2, [r7, #22]
 8016046:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8016048:	8afa      	ldrh	r2, [r7, #22]
 801604a:	8b7b      	ldrh	r3, [r7, #26]
 801604c:	4413      	add	r3, r2
 801604e:	b29a      	uxth	r2, r3
 8016050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016052:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016056:	88db      	ldrh	r3, [r3, #6]
 8016058:	b29b      	uxth	r3, r3
 801605a:	8afa      	ldrh	r2, [r7, #22]
 801605c:	429a      	cmp	r2, r3
 801605e:	d902      	bls.n	8016066 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016060:	f04f 33ff 	mov.w	r3, #4294967295
 8016064:	e106      	b.n	8016274 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016066:	68fb      	ldr	r3, [r7, #12]
 8016068:	685b      	ldr	r3, [r3, #4]
 801606a:	627b      	str	r3, [r7, #36]	; 0x24
 801606c:	e068      	b.n	8016140 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016070:	685b      	ldr	r3, [r3, #4]
 8016072:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016076:	889b      	ldrh	r3, [r3, #4]
 8016078:	b29a      	uxth	r2, r3
 801607a:	693b      	ldr	r3, [r7, #16]
 801607c:	889b      	ldrh	r3, [r3, #4]
 801607e:	b29b      	uxth	r3, r3
 8016080:	429a      	cmp	r2, r3
 8016082:	d235      	bcs.n	80160f0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016088:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801608a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801608c:	2b00      	cmp	r3, #0
 801608e:	d020      	beq.n	80160d2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016092:	889b      	ldrh	r3, [r3, #4]
 8016094:	b29a      	uxth	r2, r3
 8016096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016098:	88db      	ldrh	r3, [r3, #6]
 801609a:	b29b      	uxth	r3, r3
 801609c:	429a      	cmp	r2, r3
 801609e:	d307      	bcc.n	80160b0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80160a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160a2:	88db      	ldrh	r3, [r3, #6]
 80160a4:	b29a      	uxth	r2, r3
 80160a6:	693b      	ldr	r3, [r7, #16]
 80160a8:	889b      	ldrh	r3, [r3, #4]
 80160aa:	b29b      	uxth	r3, r3
 80160ac:	429a      	cmp	r2, r3
 80160ae:	d902      	bls.n	80160b6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80160b0:	f04f 33ff 	mov.w	r3, #4294967295
 80160b4:	e0de      	b.n	8016274 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80160b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160b8:	68ba      	ldr	r2, [r7, #8]
 80160ba:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80160bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160be:	88db      	ldrh	r3, [r3, #6]
 80160c0:	b29a      	uxth	r2, r3
 80160c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160c4:	889b      	ldrh	r3, [r3, #4]
 80160c6:	b29b      	uxth	r3, r3
 80160c8:	429a      	cmp	r2, r3
 80160ca:	d03d      	beq.n	8016148 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80160cc:	2300      	movs	r3, #0
 80160ce:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80160d0:	e03a      	b.n	8016148 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80160d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160d4:	88db      	ldrh	r3, [r3, #6]
 80160d6:	b29a      	uxth	r2, r3
 80160d8:	693b      	ldr	r3, [r7, #16]
 80160da:	889b      	ldrh	r3, [r3, #4]
 80160dc:	b29b      	uxth	r3, r3
 80160de:	429a      	cmp	r2, r3
 80160e0:	d902      	bls.n	80160e8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80160e2:	f04f 33ff 	mov.w	r3, #4294967295
 80160e6:	e0c5      	b.n	8016274 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	68ba      	ldr	r2, [r7, #8]
 80160ec:	605a      	str	r2, [r3, #4]
      break;
 80160ee:	e02b      	b.n	8016148 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80160f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160f2:	889b      	ldrh	r3, [r3, #4]
 80160f4:	b29a      	uxth	r2, r3
 80160f6:	693b      	ldr	r3, [r7, #16]
 80160f8:	889b      	ldrh	r3, [r3, #4]
 80160fa:	b29b      	uxth	r3, r3
 80160fc:	429a      	cmp	r2, r3
 80160fe:	d102      	bne.n	8016106 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016100:	f04f 33ff 	mov.w	r3, #4294967295
 8016104:	e0b6      	b.n	8016274 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016108:	889b      	ldrh	r3, [r3, #4]
 801610a:	b29a      	uxth	r2, r3
 801610c:	693b      	ldr	r3, [r7, #16]
 801610e:	88db      	ldrh	r3, [r3, #6]
 8016110:	b29b      	uxth	r3, r3
 8016112:	429a      	cmp	r2, r3
 8016114:	d202      	bcs.n	801611c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016116:	f04f 33ff 	mov.w	r3, #4294967295
 801611a:	e0ab      	b.n	8016274 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801611c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801611e:	2b00      	cmp	r3, #0
 8016120:	d009      	beq.n	8016136 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016124:	88db      	ldrh	r3, [r3, #6]
 8016126:	b29a      	uxth	r2, r3
 8016128:	693b      	ldr	r3, [r7, #16]
 801612a:	889b      	ldrh	r3, [r3, #4]
 801612c:	b29b      	uxth	r3, r3
 801612e:	429a      	cmp	r2, r3
 8016130:	d001      	beq.n	8016136 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016132:	2300      	movs	r3, #0
 8016134:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016136:	693b      	ldr	r3, [r7, #16]
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801613c:	693b      	ldr	r3, [r7, #16]
 801613e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016142:	2b00      	cmp	r3, #0
 8016144:	d193      	bne.n	801606e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8016146:	e000      	b.n	801614a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016148:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801614a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801614c:	2b00      	cmp	r3, #0
 801614e:	d12d      	bne.n	80161ac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016152:	2b00      	cmp	r3, #0
 8016154:	d01c      	beq.n	8016190 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016158:	88db      	ldrh	r3, [r3, #6]
 801615a:	b29a      	uxth	r2, r3
 801615c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801615e:	889b      	ldrh	r3, [r3, #4]
 8016160:	b29b      	uxth	r3, r3
 8016162:	429a      	cmp	r2, r3
 8016164:	d906      	bls.n	8016174 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016166:	4b45      	ldr	r3, [pc, #276]	; (801627c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016168:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801616c:	4944      	ldr	r1, [pc, #272]	; (8016280 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801616e:	4845      	ldr	r0, [pc, #276]	; (8016284 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016170:	f000 feec 	bl	8016f4c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016176:	68ba      	ldr	r2, [r7, #8]
 8016178:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801617a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801617c:	88db      	ldrh	r3, [r3, #6]
 801617e:	b29a      	uxth	r2, r3
 8016180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016182:	889b      	ldrh	r3, [r3, #4]
 8016184:	b29b      	uxth	r3, r3
 8016186:	429a      	cmp	r2, r3
 8016188:	d010      	beq.n	80161ac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801618a:	2300      	movs	r3, #0
 801618c:	623b      	str	r3, [r7, #32]
 801618e:	e00d      	b.n	80161ac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	685b      	ldr	r3, [r3, #4]
 8016194:	2b00      	cmp	r3, #0
 8016196:	d006      	beq.n	80161a6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016198:	4b38      	ldr	r3, [pc, #224]	; (801627c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801619a:	f240 12bf 	movw	r2, #447	; 0x1bf
 801619e:	493a      	ldr	r1, [pc, #232]	; (8016288 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80161a0:	4838      	ldr	r0, [pc, #224]	; (8016284 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80161a2:	f000 fed3 	bl	8016f4c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80161a6:	68fb      	ldr	r3, [r7, #12]
 80161a8:	68ba      	ldr	r2, [r7, #8]
 80161aa:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d105      	bne.n	80161be <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80161b2:	68fb      	ldr	r3, [r7, #12]
 80161b4:	7f9b      	ldrb	r3, [r3, #30]
 80161b6:	f003 0301 	and.w	r3, r3, #1
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d059      	beq.n	8016272 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80161be:	6a3b      	ldr	r3, [r7, #32]
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d04f      	beq.n	8016264 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	685b      	ldr	r3, [r3, #4]
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d006      	beq.n	80161da <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	685b      	ldr	r3, [r3, #4]
 80161d0:	685b      	ldr	r3, [r3, #4]
 80161d2:	889b      	ldrh	r3, [r3, #4]
 80161d4:	b29b      	uxth	r3, r3
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	d002      	beq.n	80161e0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80161da:	2300      	movs	r3, #0
 80161dc:	623b      	str	r3, [r7, #32]
 80161de:	e041      	b.n	8016264 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80161e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161e2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80161e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161e6:	681b      	ldr	r3, [r3, #0]
 80161e8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80161ea:	e012      	b.n	8016212 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80161ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161ee:	685b      	ldr	r3, [r3, #4]
 80161f0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80161f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161f4:	88db      	ldrh	r3, [r3, #6]
 80161f6:	b29a      	uxth	r2, r3
 80161f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161fa:	889b      	ldrh	r3, [r3, #4]
 80161fc:	b29b      	uxth	r3, r3
 80161fe:	429a      	cmp	r2, r3
 8016200:	d002      	beq.n	8016208 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016202:	2300      	movs	r3, #0
 8016204:	623b      	str	r3, [r7, #32]
            break;
 8016206:	e007      	b.n	8016218 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801620a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801620c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801620e:	681b      	ldr	r3, [r3, #0]
 8016210:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016214:	2b00      	cmp	r3, #0
 8016216:	d1e9      	bne.n	80161ec <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016218:	6a3b      	ldr	r3, [r7, #32]
 801621a:	2b00      	cmp	r3, #0
 801621c:	d022      	beq.n	8016264 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801621e:	68fb      	ldr	r3, [r7, #12]
 8016220:	685b      	ldr	r3, [r3, #4]
 8016222:	2b00      	cmp	r3, #0
 8016224:	d106      	bne.n	8016234 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8016226:	4b15      	ldr	r3, [pc, #84]	; (801627c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016228:	f240 12df 	movw	r2, #479	; 0x1df
 801622c:	4917      	ldr	r1, [pc, #92]	; (801628c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801622e:	4815      	ldr	r0, [pc, #84]	; (8016284 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016230:	f000 fe8c 	bl	8016f4c <iprintf>
          LWIP_ASSERT("sanity check",
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	685b      	ldr	r3, [r3, #4]
 8016238:	685b      	ldr	r3, [r3, #4]
 801623a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801623c:	429a      	cmp	r2, r3
 801623e:	d106      	bne.n	801624e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016240:	4b0e      	ldr	r3, [pc, #56]	; (801627c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016242:	f240 12e1 	movw	r2, #481	; 0x1e1
 8016246:	4911      	ldr	r1, [pc, #68]	; (801628c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016248:	480e      	ldr	r0, [pc, #56]	; (8016284 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801624a:	f000 fe7f 	bl	8016f4c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801624e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	2b00      	cmp	r3, #0
 8016254:	d006      	beq.n	8016264 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8016256:	4b09      	ldr	r3, [pc, #36]	; (801627c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016258:	f240 12e3 	movw	r2, #483	; 0x1e3
 801625c:	490c      	ldr	r1, [pc, #48]	; (8016290 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801625e:	4809      	ldr	r0, [pc, #36]	; (8016284 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016260:	f000 fe74 	bl	8016f4c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016264:	6a3b      	ldr	r3, [r7, #32]
 8016266:	2b00      	cmp	r3, #0
 8016268:	bf14      	ite	ne
 801626a:	2301      	movne	r3, #1
 801626c:	2300      	moveq	r3, #0
 801626e:	b2db      	uxtb	r3, r3
 8016270:	e000      	b.n	8016274 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016272:	2300      	movs	r3, #0
}
 8016274:	4618      	mov	r0, r3
 8016276:	3730      	adds	r7, #48	; 0x30
 8016278:	46bd      	mov	sp, r7
 801627a:	bd80      	pop	{r7, pc}
 801627c:	0801b288 	.word	0x0801b288
 8016280:	0801b36c 	.word	0x0801b36c
 8016284:	0801b2d0 	.word	0x0801b2d0
 8016288:	0801b38c 	.word	0x0801b38c
 801628c:	0801b3c4 	.word	0x0801b3c4
 8016290:	0801b3d4 	.word	0x0801b3d4

08016294 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016294:	b580      	push	{r7, lr}
 8016296:	b08e      	sub	sp, #56	; 0x38
 8016298:	af00      	add	r7, sp, #0
 801629a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	685b      	ldr	r3, [r3, #4]
 80162a0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80162a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162a4:	781b      	ldrb	r3, [r3, #0]
 80162a6:	f003 030f 	and.w	r3, r3, #15
 80162aa:	b2db      	uxtb	r3, r3
 80162ac:	009b      	lsls	r3, r3, #2
 80162ae:	b2db      	uxtb	r3, r3
 80162b0:	2b14      	cmp	r3, #20
 80162b2:	f040 8167 	bne.w	8016584 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80162b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162b8:	88db      	ldrh	r3, [r3, #6]
 80162ba:	b29b      	uxth	r3, r3
 80162bc:	4618      	mov	r0, r3
 80162be:	f7f3 fe1d 	bl	8009efc <lwip_htons>
 80162c2:	4603      	mov	r3, r0
 80162c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80162c8:	b29b      	uxth	r3, r3
 80162ca:	00db      	lsls	r3, r3, #3
 80162cc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80162ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162d0:	885b      	ldrh	r3, [r3, #2]
 80162d2:	b29b      	uxth	r3, r3
 80162d4:	4618      	mov	r0, r3
 80162d6:	f7f3 fe11 	bl	8009efc <lwip_htons>
 80162da:	4603      	mov	r3, r0
 80162dc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80162de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162e0:	781b      	ldrb	r3, [r3, #0]
 80162e2:	f003 030f 	and.w	r3, r3, #15
 80162e6:	b2db      	uxtb	r3, r3
 80162e8:	009b      	lsls	r3, r3, #2
 80162ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80162ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80162f2:	b29b      	uxth	r3, r3
 80162f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80162f6:	429a      	cmp	r2, r3
 80162f8:	f0c0 8146 	bcc.w	8016588 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80162fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016300:	b29b      	uxth	r3, r3
 8016302:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016304:	1ad3      	subs	r3, r2, r3
 8016306:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016308:	6878      	ldr	r0, [r7, #4]
 801630a:	f7f5 f9bb 	bl	800b684 <pbuf_clen>
 801630e:	4603      	mov	r3, r0
 8016310:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016312:	4ba3      	ldr	r3, [pc, #652]	; (80165a0 <ip4_reass+0x30c>)
 8016314:	881b      	ldrh	r3, [r3, #0]
 8016316:	461a      	mov	r2, r3
 8016318:	8c3b      	ldrh	r3, [r7, #32]
 801631a:	4413      	add	r3, r2
 801631c:	2b0a      	cmp	r3, #10
 801631e:	dd10      	ble.n	8016342 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016320:	8c3b      	ldrh	r3, [r7, #32]
 8016322:	4619      	mov	r1, r3
 8016324:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016326:	f7ff fd81 	bl	8015e2c <ip_reass_remove_oldest_datagram>
 801632a:	4603      	mov	r3, r0
 801632c:	2b00      	cmp	r3, #0
 801632e:	f000 812d 	beq.w	801658c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016332:	4b9b      	ldr	r3, [pc, #620]	; (80165a0 <ip4_reass+0x30c>)
 8016334:	881b      	ldrh	r3, [r3, #0]
 8016336:	461a      	mov	r2, r3
 8016338:	8c3b      	ldrh	r3, [r7, #32]
 801633a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801633c:	2b0a      	cmp	r3, #10
 801633e:	f300 8125 	bgt.w	801658c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016342:	4b98      	ldr	r3, [pc, #608]	; (80165a4 <ip4_reass+0x310>)
 8016344:	681b      	ldr	r3, [r3, #0]
 8016346:	633b      	str	r3, [r7, #48]	; 0x30
 8016348:	e015      	b.n	8016376 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801634a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801634c:	695a      	ldr	r2, [r3, #20]
 801634e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016350:	68db      	ldr	r3, [r3, #12]
 8016352:	429a      	cmp	r2, r3
 8016354:	d10c      	bne.n	8016370 <ip4_reass+0xdc>
 8016356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016358:	699a      	ldr	r2, [r3, #24]
 801635a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801635c:	691b      	ldr	r3, [r3, #16]
 801635e:	429a      	cmp	r2, r3
 8016360:	d106      	bne.n	8016370 <ip4_reass+0xdc>
 8016362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016364:	899a      	ldrh	r2, [r3, #12]
 8016366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016368:	889b      	ldrh	r3, [r3, #4]
 801636a:	b29b      	uxth	r3, r3
 801636c:	429a      	cmp	r2, r3
 801636e:	d006      	beq.n	801637e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016372:	681b      	ldr	r3, [r3, #0]
 8016374:	633b      	str	r3, [r7, #48]	; 0x30
 8016376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016378:	2b00      	cmp	r3, #0
 801637a:	d1e6      	bne.n	801634a <ip4_reass+0xb6>
 801637c:	e000      	b.n	8016380 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801637e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016382:	2b00      	cmp	r3, #0
 8016384:	d109      	bne.n	801639a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016386:	8c3b      	ldrh	r3, [r7, #32]
 8016388:	4619      	mov	r1, r3
 801638a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801638c:	f7ff fdb0 	bl	8015ef0 <ip_reass_enqueue_new_datagram>
 8016390:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016394:	2b00      	cmp	r3, #0
 8016396:	d11c      	bne.n	80163d2 <ip4_reass+0x13e>
      goto nullreturn;
 8016398:	e0f9      	b.n	801658e <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801639a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801639c:	88db      	ldrh	r3, [r3, #6]
 801639e:	b29b      	uxth	r3, r3
 80163a0:	4618      	mov	r0, r3
 80163a2:	f7f3 fdab 	bl	8009efc <lwip_htons>
 80163a6:	4603      	mov	r3, r0
 80163a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d110      	bne.n	80163d2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80163b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163b2:	89db      	ldrh	r3, [r3, #14]
 80163b4:	4618      	mov	r0, r3
 80163b6:	f7f3 fda1 	bl	8009efc <lwip_htons>
 80163ba:	4603      	mov	r3, r0
 80163bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d006      	beq.n	80163d2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80163c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163c6:	3308      	adds	r3, #8
 80163c8:	2214      	movs	r2, #20
 80163ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80163cc:	4618      	mov	r0, r3
 80163ce:	f000 fdaa 	bl	8016f26 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80163d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163d4:	88db      	ldrh	r3, [r3, #6]
 80163d6:	b29b      	uxth	r3, r3
 80163d8:	f003 0320 	and.w	r3, r3, #32
 80163dc:	2b00      	cmp	r3, #0
 80163de:	bf0c      	ite	eq
 80163e0:	2301      	moveq	r3, #1
 80163e2:	2300      	movne	r3, #0
 80163e4:	b2db      	uxtb	r3, r3
 80163e6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80163e8:	69fb      	ldr	r3, [r7, #28]
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d00e      	beq.n	801640c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80163ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80163f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80163f2:	4413      	add	r3, r2
 80163f4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80163f6:	8b7a      	ldrh	r2, [r7, #26]
 80163f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80163fa:	429a      	cmp	r2, r3
 80163fc:	f0c0 80a0 	bcc.w	8016540 <ip4_reass+0x2ac>
 8016400:	8b7b      	ldrh	r3, [r7, #26]
 8016402:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8016406:	4293      	cmp	r3, r2
 8016408:	f200 809a 	bhi.w	8016540 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801640c:	69fa      	ldr	r2, [r7, #28]
 801640e:	6879      	ldr	r1, [r7, #4]
 8016410:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016412:	f7ff fdd5 	bl	8015fc0 <ip_reass_chain_frag_into_datagram_and_validate>
 8016416:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016418:	697b      	ldr	r3, [r7, #20]
 801641a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801641e:	f000 8091 	beq.w	8016544 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016422:	4b5f      	ldr	r3, [pc, #380]	; (80165a0 <ip4_reass+0x30c>)
 8016424:	881a      	ldrh	r2, [r3, #0]
 8016426:	8c3b      	ldrh	r3, [r7, #32]
 8016428:	4413      	add	r3, r2
 801642a:	b29a      	uxth	r2, r3
 801642c:	4b5c      	ldr	r3, [pc, #368]	; (80165a0 <ip4_reass+0x30c>)
 801642e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016430:	69fb      	ldr	r3, [r7, #28]
 8016432:	2b00      	cmp	r3, #0
 8016434:	d00d      	beq.n	8016452 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8016436:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016438:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801643a:	4413      	add	r3, r2
 801643c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801643e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016440:	8a7a      	ldrh	r2, [r7, #18]
 8016442:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016446:	7f9b      	ldrb	r3, [r3, #30]
 8016448:	f043 0301 	orr.w	r3, r3, #1
 801644c:	b2da      	uxtb	r2, r3
 801644e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016450:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016452:	697b      	ldr	r3, [r7, #20]
 8016454:	2b01      	cmp	r3, #1
 8016456:	d171      	bne.n	801653c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801645a:	8b9b      	ldrh	r3, [r3, #28]
 801645c:	3314      	adds	r3, #20
 801645e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016462:	685b      	ldr	r3, [r3, #4]
 8016464:	685b      	ldr	r3, [r3, #4]
 8016466:	681b      	ldr	r3, [r3, #0]
 8016468:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801646a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801646c:	685b      	ldr	r3, [r3, #4]
 801646e:	685b      	ldr	r3, [r3, #4]
 8016470:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016474:	3308      	adds	r3, #8
 8016476:	2214      	movs	r2, #20
 8016478:	4619      	mov	r1, r3
 801647a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801647c:	f000 fd53 	bl	8016f26 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016480:	8a3b      	ldrh	r3, [r7, #16]
 8016482:	4618      	mov	r0, r3
 8016484:	f7f3 fd3a 	bl	8009efc <lwip_htons>
 8016488:	4603      	mov	r3, r0
 801648a:	461a      	mov	r2, r3
 801648c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801648e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016492:	2200      	movs	r2, #0
 8016494:	719a      	strb	r2, [r3, #6]
 8016496:	2200      	movs	r2, #0
 8016498:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801649a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801649c:	2200      	movs	r2, #0
 801649e:	729a      	strb	r2, [r3, #10]
 80164a0:	2200      	movs	r2, #0
 80164a2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80164a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164a6:	685b      	ldr	r3, [r3, #4]
 80164a8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80164aa:	e00d      	b.n	80164c8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80164ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164ae:	685b      	ldr	r3, [r3, #4]
 80164b0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80164b2:	2114      	movs	r1, #20
 80164b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80164b6:	f7f4 ffd1 	bl	800b45c <pbuf_remove_header>
      pbuf_cat(p, r);
 80164ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80164bc:	6878      	ldr	r0, [r7, #4]
 80164be:	f7f5 f921 	bl	800b704 <pbuf_cat>
      r = iprh->next_pbuf;
 80164c2:	68fb      	ldr	r3, [r7, #12]
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80164c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d1ee      	bne.n	80164ac <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80164ce:	4b35      	ldr	r3, [pc, #212]	; (80165a4 <ip4_reass+0x310>)
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80164d4:	429a      	cmp	r2, r3
 80164d6:	d102      	bne.n	80164de <ip4_reass+0x24a>
      ipr_prev = NULL;
 80164d8:	2300      	movs	r3, #0
 80164da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80164dc:	e010      	b.n	8016500 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80164de:	4b31      	ldr	r3, [pc, #196]	; (80165a4 <ip4_reass+0x310>)
 80164e0:	681b      	ldr	r3, [r3, #0]
 80164e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80164e4:	e007      	b.n	80164f6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80164e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164e8:	681b      	ldr	r3, [r3, #0]
 80164ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80164ec:	429a      	cmp	r2, r3
 80164ee:	d006      	beq.n	80164fe <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80164f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164f2:	681b      	ldr	r3, [r3, #0]
 80164f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80164f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d1f4      	bne.n	80164e6 <ip4_reass+0x252>
 80164fc:	e000      	b.n	8016500 <ip4_reass+0x26c>
          break;
 80164fe:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016500:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016502:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016504:	f7ff fd2e 	bl	8015f64 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016508:	6878      	ldr	r0, [r7, #4]
 801650a:	f7f5 f8bb 	bl	800b684 <pbuf_clen>
 801650e:	4603      	mov	r3, r0
 8016510:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016512:	4b23      	ldr	r3, [pc, #140]	; (80165a0 <ip4_reass+0x30c>)
 8016514:	881b      	ldrh	r3, [r3, #0]
 8016516:	8c3a      	ldrh	r2, [r7, #32]
 8016518:	429a      	cmp	r2, r3
 801651a:	d906      	bls.n	801652a <ip4_reass+0x296>
 801651c:	4b22      	ldr	r3, [pc, #136]	; (80165a8 <ip4_reass+0x314>)
 801651e:	f240 229b 	movw	r2, #667	; 0x29b
 8016522:	4922      	ldr	r1, [pc, #136]	; (80165ac <ip4_reass+0x318>)
 8016524:	4822      	ldr	r0, [pc, #136]	; (80165b0 <ip4_reass+0x31c>)
 8016526:	f000 fd11 	bl	8016f4c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801652a:	4b1d      	ldr	r3, [pc, #116]	; (80165a0 <ip4_reass+0x30c>)
 801652c:	881a      	ldrh	r2, [r3, #0]
 801652e:	8c3b      	ldrh	r3, [r7, #32]
 8016530:	1ad3      	subs	r3, r2, r3
 8016532:	b29a      	uxth	r2, r3
 8016534:	4b1a      	ldr	r3, [pc, #104]	; (80165a0 <ip4_reass+0x30c>)
 8016536:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	e02c      	b.n	8016596 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801653c:	2300      	movs	r3, #0
 801653e:	e02a      	b.n	8016596 <ip4_reass+0x302>

nullreturn_ipr:
 8016540:	bf00      	nop
 8016542:	e000      	b.n	8016546 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8016544:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8016546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016548:	2b00      	cmp	r3, #0
 801654a:	d106      	bne.n	801655a <ip4_reass+0x2c6>
 801654c:	4b16      	ldr	r3, [pc, #88]	; (80165a8 <ip4_reass+0x314>)
 801654e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8016552:	4918      	ldr	r1, [pc, #96]	; (80165b4 <ip4_reass+0x320>)
 8016554:	4816      	ldr	r0, [pc, #88]	; (80165b0 <ip4_reass+0x31c>)
 8016556:	f000 fcf9 	bl	8016f4c <iprintf>
  if (ipr->p == NULL) {
 801655a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801655c:	685b      	ldr	r3, [r3, #4]
 801655e:	2b00      	cmp	r3, #0
 8016560:	d114      	bne.n	801658c <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016562:	4b10      	ldr	r3, [pc, #64]	; (80165a4 <ip4_reass+0x310>)
 8016564:	681b      	ldr	r3, [r3, #0]
 8016566:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016568:	429a      	cmp	r2, r3
 801656a:	d006      	beq.n	801657a <ip4_reass+0x2e6>
 801656c:	4b0e      	ldr	r3, [pc, #56]	; (80165a8 <ip4_reass+0x314>)
 801656e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016572:	4911      	ldr	r1, [pc, #68]	; (80165b8 <ip4_reass+0x324>)
 8016574:	480e      	ldr	r0, [pc, #56]	; (80165b0 <ip4_reass+0x31c>)
 8016576:	f000 fce9 	bl	8016f4c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801657a:	2100      	movs	r1, #0
 801657c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801657e:	f7ff fcf1 	bl	8015f64 <ip_reass_dequeue_datagram>
 8016582:	e004      	b.n	801658e <ip4_reass+0x2fa>
    goto nullreturn;
 8016584:	bf00      	nop
 8016586:	e002      	b.n	801658e <ip4_reass+0x2fa>
    goto nullreturn;
 8016588:	bf00      	nop
 801658a:	e000      	b.n	801658e <ip4_reass+0x2fa>
  }

nullreturn:
 801658c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801658e:	6878      	ldr	r0, [r7, #4]
 8016590:	f7f4 ffea 	bl	800b568 <pbuf_free>
  return NULL;
 8016594:	2300      	movs	r3, #0
}
 8016596:	4618      	mov	r0, r3
 8016598:	3738      	adds	r7, #56	; 0x38
 801659a:	46bd      	mov	sp, r7
 801659c:	bd80      	pop	{r7, pc}
 801659e:	bf00      	nop
 80165a0:	20008300 	.word	0x20008300
 80165a4:	200082fc 	.word	0x200082fc
 80165a8:	0801b288 	.word	0x0801b288
 80165ac:	0801b3f8 	.word	0x0801b3f8
 80165b0:	0801b2d0 	.word	0x0801b2d0
 80165b4:	0801b414 	.word	0x0801b414
 80165b8:	0801b420 	.word	0x0801b420

080165bc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80165bc:	b580      	push	{r7, lr}
 80165be:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80165c0:	2005      	movs	r0, #5
 80165c2:	f7f4 f951 	bl	800a868 <memp_malloc>
 80165c6:	4603      	mov	r3, r0
}
 80165c8:	4618      	mov	r0, r3
 80165ca:	bd80      	pop	{r7, pc}

080165cc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80165cc:	b580      	push	{r7, lr}
 80165ce:	b082      	sub	sp, #8
 80165d0:	af00      	add	r7, sp, #0
 80165d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d106      	bne.n	80165e8 <ip_frag_free_pbuf_custom_ref+0x1c>
 80165da:	4b07      	ldr	r3, [pc, #28]	; (80165f8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80165dc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80165e0:	4906      	ldr	r1, [pc, #24]	; (80165fc <ip_frag_free_pbuf_custom_ref+0x30>)
 80165e2:	4807      	ldr	r0, [pc, #28]	; (8016600 <ip_frag_free_pbuf_custom_ref+0x34>)
 80165e4:	f000 fcb2 	bl	8016f4c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80165e8:	6879      	ldr	r1, [r7, #4]
 80165ea:	2005      	movs	r0, #5
 80165ec:	f7f4 f98e 	bl	800a90c <memp_free>
}
 80165f0:	bf00      	nop
 80165f2:	3708      	adds	r7, #8
 80165f4:	46bd      	mov	sp, r7
 80165f6:	bd80      	pop	{r7, pc}
 80165f8:	0801b288 	.word	0x0801b288
 80165fc:	0801b440 	.word	0x0801b440
 8016600:	0801b2d0 	.word	0x0801b2d0

08016604 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016604:	b580      	push	{r7, lr}
 8016606:	b084      	sub	sp, #16
 8016608:	af00      	add	r7, sp, #0
 801660a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016610:	68fb      	ldr	r3, [r7, #12]
 8016612:	2b00      	cmp	r3, #0
 8016614:	d106      	bne.n	8016624 <ipfrag_free_pbuf_custom+0x20>
 8016616:	4b11      	ldr	r3, [pc, #68]	; (801665c <ipfrag_free_pbuf_custom+0x58>)
 8016618:	f240 22ce 	movw	r2, #718	; 0x2ce
 801661c:	4910      	ldr	r1, [pc, #64]	; (8016660 <ipfrag_free_pbuf_custom+0x5c>)
 801661e:	4811      	ldr	r0, [pc, #68]	; (8016664 <ipfrag_free_pbuf_custom+0x60>)
 8016620:	f000 fc94 	bl	8016f4c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016624:	68fa      	ldr	r2, [r7, #12]
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	429a      	cmp	r2, r3
 801662a:	d006      	beq.n	801663a <ipfrag_free_pbuf_custom+0x36>
 801662c:	4b0b      	ldr	r3, [pc, #44]	; (801665c <ipfrag_free_pbuf_custom+0x58>)
 801662e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8016632:	490d      	ldr	r1, [pc, #52]	; (8016668 <ipfrag_free_pbuf_custom+0x64>)
 8016634:	480b      	ldr	r0, [pc, #44]	; (8016664 <ipfrag_free_pbuf_custom+0x60>)
 8016636:	f000 fc89 	bl	8016f4c <iprintf>
  if (pcr->original != NULL) {
 801663a:	68fb      	ldr	r3, [r7, #12]
 801663c:	695b      	ldr	r3, [r3, #20]
 801663e:	2b00      	cmp	r3, #0
 8016640:	d004      	beq.n	801664c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016642:	68fb      	ldr	r3, [r7, #12]
 8016644:	695b      	ldr	r3, [r3, #20]
 8016646:	4618      	mov	r0, r3
 8016648:	f7f4 ff8e 	bl	800b568 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801664c:	68f8      	ldr	r0, [r7, #12]
 801664e:	f7ff ffbd 	bl	80165cc <ip_frag_free_pbuf_custom_ref>
}
 8016652:	bf00      	nop
 8016654:	3710      	adds	r7, #16
 8016656:	46bd      	mov	sp, r7
 8016658:	bd80      	pop	{r7, pc}
 801665a:	bf00      	nop
 801665c:	0801b288 	.word	0x0801b288
 8016660:	0801b44c 	.word	0x0801b44c
 8016664:	0801b2d0 	.word	0x0801b2d0
 8016668:	0801b458 	.word	0x0801b458

0801666c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801666c:	b580      	push	{r7, lr}
 801666e:	b094      	sub	sp, #80	; 0x50
 8016670:	af02      	add	r7, sp, #8
 8016672:	60f8      	str	r0, [r7, #12]
 8016674:	60b9      	str	r1, [r7, #8]
 8016676:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016678:	2300      	movs	r3, #0
 801667a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801667e:	68bb      	ldr	r3, [r7, #8]
 8016680:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016682:	3b14      	subs	r3, #20
 8016684:	2b00      	cmp	r3, #0
 8016686:	da00      	bge.n	801668a <ip4_frag+0x1e>
 8016688:	3307      	adds	r3, #7
 801668a:	10db      	asrs	r3, r3, #3
 801668c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801668e:	2314      	movs	r3, #20
 8016690:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016692:	68fb      	ldr	r3, [r7, #12]
 8016694:	685b      	ldr	r3, [r3, #4]
 8016696:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8016698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801669a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801669c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801669e:	781b      	ldrb	r3, [r3, #0]
 80166a0:	f003 030f 	and.w	r3, r3, #15
 80166a4:	b2db      	uxtb	r3, r3
 80166a6:	009b      	lsls	r3, r3, #2
 80166a8:	b2db      	uxtb	r3, r3
 80166aa:	2b14      	cmp	r3, #20
 80166ac:	d002      	beq.n	80166b4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80166ae:	f06f 0305 	mvn.w	r3, #5
 80166b2:	e10f      	b.n	80168d4 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80166b4:	68fb      	ldr	r3, [r7, #12]
 80166b6:	895b      	ldrh	r3, [r3, #10]
 80166b8:	2b13      	cmp	r3, #19
 80166ba:	d809      	bhi.n	80166d0 <ip4_frag+0x64>
 80166bc:	4b87      	ldr	r3, [pc, #540]	; (80168dc <ip4_frag+0x270>)
 80166be:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80166c2:	4987      	ldr	r1, [pc, #540]	; (80168e0 <ip4_frag+0x274>)
 80166c4:	4887      	ldr	r0, [pc, #540]	; (80168e4 <ip4_frag+0x278>)
 80166c6:	f000 fc41 	bl	8016f4c <iprintf>
 80166ca:	f06f 0305 	mvn.w	r3, #5
 80166ce:	e101      	b.n	80168d4 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80166d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166d2:	88db      	ldrh	r3, [r3, #6]
 80166d4:	b29b      	uxth	r3, r3
 80166d6:	4618      	mov	r0, r3
 80166d8:	f7f3 fc10 	bl	8009efc <lwip_htons>
 80166dc:	4603      	mov	r3, r0
 80166de:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80166e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80166e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80166e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80166ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80166ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80166f0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80166f2:	68fb      	ldr	r3, [r7, #12]
 80166f4:	891b      	ldrh	r3, [r3, #8]
 80166f6:	3b14      	subs	r3, #20
 80166f8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80166fc:	e0e0      	b.n	80168c0 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80166fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016700:	00db      	lsls	r3, r3, #3
 8016702:	b29b      	uxth	r3, r3
 8016704:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016708:	4293      	cmp	r3, r2
 801670a:	bf28      	it	cs
 801670c:	4613      	movcs	r3, r2
 801670e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016710:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016714:	2114      	movs	r1, #20
 8016716:	200e      	movs	r0, #14
 8016718:	f7f4 fc46 	bl	800afa8 <pbuf_alloc>
 801671c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801671e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016720:	2b00      	cmp	r3, #0
 8016722:	f000 80d4 	beq.w	80168ce <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016728:	895b      	ldrh	r3, [r3, #10]
 801672a:	2b13      	cmp	r3, #19
 801672c:	d806      	bhi.n	801673c <ip4_frag+0xd0>
 801672e:	4b6b      	ldr	r3, [pc, #428]	; (80168dc <ip4_frag+0x270>)
 8016730:	f240 3225 	movw	r2, #805	; 0x325
 8016734:	496c      	ldr	r1, [pc, #432]	; (80168e8 <ip4_frag+0x27c>)
 8016736:	486b      	ldr	r0, [pc, #428]	; (80168e4 <ip4_frag+0x278>)
 8016738:	f000 fc08 	bl	8016f4c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801673c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801673e:	685b      	ldr	r3, [r3, #4]
 8016740:	2214      	movs	r2, #20
 8016742:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016744:	4618      	mov	r0, r3
 8016746:	f000 fbee 	bl	8016f26 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801674a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801674c:	685b      	ldr	r3, [r3, #4]
 801674e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8016750:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016752:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8016756:	e064      	b.n	8016822 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016758:	68fb      	ldr	r3, [r7, #12]
 801675a:	895a      	ldrh	r2, [r3, #10]
 801675c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801675e:	1ad3      	subs	r3, r2, r3
 8016760:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016762:	68fb      	ldr	r3, [r7, #12]
 8016764:	895b      	ldrh	r3, [r3, #10]
 8016766:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016768:	429a      	cmp	r2, r3
 801676a:	d906      	bls.n	801677a <ip4_frag+0x10e>
 801676c:	4b5b      	ldr	r3, [pc, #364]	; (80168dc <ip4_frag+0x270>)
 801676e:	f240 322d 	movw	r2, #813	; 0x32d
 8016772:	495e      	ldr	r1, [pc, #376]	; (80168ec <ip4_frag+0x280>)
 8016774:	485b      	ldr	r0, [pc, #364]	; (80168e4 <ip4_frag+0x278>)
 8016776:	f000 fbe9 	bl	8016f4c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801677a:	8bfa      	ldrh	r2, [r7, #30]
 801677c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016780:	4293      	cmp	r3, r2
 8016782:	bf28      	it	cs
 8016784:	4613      	movcs	r3, r2
 8016786:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801678a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801678e:	2b00      	cmp	r3, #0
 8016790:	d105      	bne.n	801679e <ip4_frag+0x132>
        poff = 0;
 8016792:	2300      	movs	r3, #0
 8016794:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	681b      	ldr	r3, [r3, #0]
 801679a:	60fb      	str	r3, [r7, #12]
        continue;
 801679c:	e041      	b.n	8016822 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801679e:	f7ff ff0d 	bl	80165bc <ip_frag_alloc_pbuf_custom_ref>
 80167a2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80167a4:	69bb      	ldr	r3, [r7, #24]
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d103      	bne.n	80167b2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80167aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80167ac:	f7f4 fedc 	bl	800b568 <pbuf_free>
        goto memerr;
 80167b0:	e08e      	b.n	80168d0 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80167b2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80167b4:	68fb      	ldr	r3, [r7, #12]
 80167b6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80167b8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80167ba:	4413      	add	r3, r2
 80167bc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80167c0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80167c4:	9201      	str	r2, [sp, #4]
 80167c6:	9300      	str	r3, [sp, #0]
 80167c8:	4603      	mov	r3, r0
 80167ca:	2241      	movs	r2, #65	; 0x41
 80167cc:	2000      	movs	r0, #0
 80167ce:	f7f4 fd11 	bl	800b1f4 <pbuf_alloced_custom>
 80167d2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80167d4:	697b      	ldr	r3, [r7, #20]
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d106      	bne.n	80167e8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80167da:	69b8      	ldr	r0, [r7, #24]
 80167dc:	f7ff fef6 	bl	80165cc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80167e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80167e2:	f7f4 fec1 	bl	800b568 <pbuf_free>
        goto memerr;
 80167e6:	e073      	b.n	80168d0 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 80167e8:	68f8      	ldr	r0, [r7, #12]
 80167ea:	f7f4 ff63 	bl	800b6b4 <pbuf_ref>
      pcr->original = p;
 80167ee:	69bb      	ldr	r3, [r7, #24]
 80167f0:	68fa      	ldr	r2, [r7, #12]
 80167f2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80167f4:	69bb      	ldr	r3, [r7, #24]
 80167f6:	4a3e      	ldr	r2, [pc, #248]	; (80168f0 <ip4_frag+0x284>)
 80167f8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80167fa:	6979      	ldr	r1, [r7, #20]
 80167fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80167fe:	f7f4 ff81 	bl	800b704 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016802:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8016806:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801680a:	1ad3      	subs	r3, r2, r3
 801680c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016810:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016814:	2b00      	cmp	r3, #0
 8016816:	d004      	beq.n	8016822 <ip4_frag+0x1b6>
        poff = 0;
 8016818:	2300      	movs	r3, #0
 801681a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	681b      	ldr	r3, [r3, #0]
 8016820:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016822:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016826:	2b00      	cmp	r3, #0
 8016828:	d196      	bne.n	8016758 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801682a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801682c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016830:	4413      	add	r3, r2
 8016832:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016834:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016838:	68bb      	ldr	r3, [r7, #8]
 801683a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801683c:	3b14      	subs	r3, #20
 801683e:	429a      	cmp	r2, r3
 8016840:	bfd4      	ite	le
 8016842:	2301      	movle	r3, #1
 8016844:	2300      	movgt	r3, #0
 8016846:	b2db      	uxtb	r3, r3
 8016848:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801684a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801684e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016852:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8016854:	6a3b      	ldr	r3, [r7, #32]
 8016856:	2b00      	cmp	r3, #0
 8016858:	d002      	beq.n	8016860 <ip4_frag+0x1f4>
 801685a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801685c:	2b00      	cmp	r3, #0
 801685e:	d003      	beq.n	8016868 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016860:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016862:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016866:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016868:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801686a:	4618      	mov	r0, r3
 801686c:	f7f3 fb46 	bl	8009efc <lwip_htons>
 8016870:	4603      	mov	r3, r0
 8016872:	461a      	mov	r2, r3
 8016874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016876:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016878:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801687a:	3314      	adds	r3, #20
 801687c:	b29b      	uxth	r3, r3
 801687e:	4618      	mov	r0, r3
 8016880:	f7f3 fb3c 	bl	8009efc <lwip_htons>
 8016884:	4603      	mov	r3, r0
 8016886:	461a      	mov	r2, r3
 8016888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801688a:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801688c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801688e:	2200      	movs	r2, #0
 8016890:	729a      	strb	r2, [r3, #10]
 8016892:	2200      	movs	r2, #0
 8016894:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016896:	68bb      	ldr	r3, [r7, #8]
 8016898:	695b      	ldr	r3, [r3, #20]
 801689a:	687a      	ldr	r2, [r7, #4]
 801689c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801689e:	68b8      	ldr	r0, [r7, #8]
 80168a0:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80168a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80168a4:	f7f4 fe60 	bl	800b568 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80168a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80168ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80168ae:	1ad3      	subs	r3, r2, r3
 80168b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80168b4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80168b8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80168ba:	4413      	add	r3, r2
 80168bc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80168c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	f47f af1a 	bne.w	80166fe <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80168ca:	2300      	movs	r3, #0
 80168cc:	e002      	b.n	80168d4 <ip4_frag+0x268>
      goto memerr;
 80168ce:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80168d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80168d4:	4618      	mov	r0, r3
 80168d6:	3748      	adds	r7, #72	; 0x48
 80168d8:	46bd      	mov	sp, r7
 80168da:	bd80      	pop	{r7, pc}
 80168dc:	0801b288 	.word	0x0801b288
 80168e0:	0801b464 	.word	0x0801b464
 80168e4:	0801b2d0 	.word	0x0801b2d0
 80168e8:	0801b480 	.word	0x0801b480
 80168ec:	0801b4a0 	.word	0x0801b4a0
 80168f0:	08016605 	.word	0x08016605

080168f4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80168f4:	b580      	push	{r7, lr}
 80168f6:	b086      	sub	sp, #24
 80168f8:	af00      	add	r7, sp, #0
 80168fa:	6078      	str	r0, [r7, #4]
 80168fc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80168fe:	230e      	movs	r3, #14
 8016900:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	895b      	ldrh	r3, [r3, #10]
 8016906:	2b0e      	cmp	r3, #14
 8016908:	d96e      	bls.n	80169e8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	7bdb      	ldrb	r3, [r3, #15]
 801690e:	2b00      	cmp	r3, #0
 8016910:	d106      	bne.n	8016920 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016912:	683b      	ldr	r3, [r7, #0]
 8016914:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016918:	3301      	adds	r3, #1
 801691a:	b2da      	uxtb	r2, r3
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	685b      	ldr	r3, [r3, #4]
 8016924:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016926:	693b      	ldr	r3, [r7, #16]
 8016928:	7b1a      	ldrb	r2, [r3, #12]
 801692a:	7b5b      	ldrb	r3, [r3, #13]
 801692c:	021b      	lsls	r3, r3, #8
 801692e:	4313      	orrs	r3, r2
 8016930:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016932:	693b      	ldr	r3, [r7, #16]
 8016934:	781b      	ldrb	r3, [r3, #0]
 8016936:	f003 0301 	and.w	r3, r3, #1
 801693a:	2b00      	cmp	r3, #0
 801693c:	d023      	beq.n	8016986 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801693e:	693b      	ldr	r3, [r7, #16]
 8016940:	781b      	ldrb	r3, [r3, #0]
 8016942:	2b01      	cmp	r3, #1
 8016944:	d10f      	bne.n	8016966 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016946:	693b      	ldr	r3, [r7, #16]
 8016948:	785b      	ldrb	r3, [r3, #1]
 801694a:	2b00      	cmp	r3, #0
 801694c:	d11b      	bne.n	8016986 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801694e:	693b      	ldr	r3, [r7, #16]
 8016950:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016952:	2b5e      	cmp	r3, #94	; 0x5e
 8016954:	d117      	bne.n	8016986 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	7b5b      	ldrb	r3, [r3, #13]
 801695a:	f043 0310 	orr.w	r3, r3, #16
 801695e:	b2da      	uxtb	r2, r3
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	735a      	strb	r2, [r3, #13]
 8016964:	e00f      	b.n	8016986 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016966:	693b      	ldr	r3, [r7, #16]
 8016968:	2206      	movs	r2, #6
 801696a:	4928      	ldr	r1, [pc, #160]	; (8016a0c <ethernet_input+0x118>)
 801696c:	4618      	mov	r0, r3
 801696e:	f000 facb 	bl	8016f08 <memcmp>
 8016972:	4603      	mov	r3, r0
 8016974:	2b00      	cmp	r3, #0
 8016976:	d106      	bne.n	8016986 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	7b5b      	ldrb	r3, [r3, #13]
 801697c:	f043 0308 	orr.w	r3, r3, #8
 8016980:	b2da      	uxtb	r2, r3
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016986:	89fb      	ldrh	r3, [r7, #14]
 8016988:	2b08      	cmp	r3, #8
 801698a:	d003      	beq.n	8016994 <ethernet_input+0xa0>
 801698c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016990:	d014      	beq.n	80169bc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016992:	e032      	b.n	80169fa <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016994:	683b      	ldr	r3, [r7, #0]
 8016996:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801699a:	f003 0308 	and.w	r3, r3, #8
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d024      	beq.n	80169ec <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80169a2:	8afb      	ldrh	r3, [r7, #22]
 80169a4:	4619      	mov	r1, r3
 80169a6:	6878      	ldr	r0, [r7, #4]
 80169a8:	f7f4 fd58 	bl	800b45c <pbuf_remove_header>
 80169ac:	4603      	mov	r3, r0
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d11e      	bne.n	80169f0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80169b2:	6839      	ldr	r1, [r7, #0]
 80169b4:	6878      	ldr	r0, [r7, #4]
 80169b6:	f7fe ff0f 	bl	80157d8 <ip4_input>
      break;
 80169ba:	e013      	b.n	80169e4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80169bc:	683b      	ldr	r3, [r7, #0]
 80169be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80169c2:	f003 0308 	and.w	r3, r3, #8
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d014      	beq.n	80169f4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80169ca:	8afb      	ldrh	r3, [r7, #22]
 80169cc:	4619      	mov	r1, r3
 80169ce:	6878      	ldr	r0, [r7, #4]
 80169d0:	f7f4 fd44 	bl	800b45c <pbuf_remove_header>
 80169d4:	4603      	mov	r3, r0
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d10e      	bne.n	80169f8 <ethernet_input+0x104>
        etharp_input(p, netif);
 80169da:	6839      	ldr	r1, [r7, #0]
 80169dc:	6878      	ldr	r0, [r7, #4]
 80169de:	f7fe f8ab 	bl	8014b38 <etharp_input>
      break;
 80169e2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80169e4:	2300      	movs	r3, #0
 80169e6:	e00c      	b.n	8016a02 <ethernet_input+0x10e>
    goto free_and_return;
 80169e8:	bf00      	nop
 80169ea:	e006      	b.n	80169fa <ethernet_input+0x106>
        goto free_and_return;
 80169ec:	bf00      	nop
 80169ee:	e004      	b.n	80169fa <ethernet_input+0x106>
        goto free_and_return;
 80169f0:	bf00      	nop
 80169f2:	e002      	b.n	80169fa <ethernet_input+0x106>
        goto free_and_return;
 80169f4:	bf00      	nop
 80169f6:	e000      	b.n	80169fa <ethernet_input+0x106>
        goto free_and_return;
 80169f8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80169fa:	6878      	ldr	r0, [r7, #4]
 80169fc:	f7f4 fdb4 	bl	800b568 <pbuf_free>
  return ERR_OK;
 8016a00:	2300      	movs	r3, #0
}
 8016a02:	4618      	mov	r0, r3
 8016a04:	3718      	adds	r7, #24
 8016a06:	46bd      	mov	sp, r7
 8016a08:	bd80      	pop	{r7, pc}
 8016a0a:	bf00      	nop
 8016a0c:	0801fab0 	.word	0x0801fab0

08016a10 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016a10:	b580      	push	{r7, lr}
 8016a12:	b086      	sub	sp, #24
 8016a14:	af00      	add	r7, sp, #0
 8016a16:	60f8      	str	r0, [r7, #12]
 8016a18:	60b9      	str	r1, [r7, #8]
 8016a1a:	607a      	str	r2, [r7, #4]
 8016a1c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016a1e:	8c3b      	ldrh	r3, [r7, #32]
 8016a20:	4618      	mov	r0, r3
 8016a22:	f7f3 fa6b 	bl	8009efc <lwip_htons>
 8016a26:	4603      	mov	r3, r0
 8016a28:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016a2a:	210e      	movs	r1, #14
 8016a2c:	68b8      	ldr	r0, [r7, #8]
 8016a2e:	f7f4 fd05 	bl	800b43c <pbuf_add_header>
 8016a32:	4603      	mov	r3, r0
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d125      	bne.n	8016a84 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016a38:	68bb      	ldr	r3, [r7, #8]
 8016a3a:	685b      	ldr	r3, [r3, #4]
 8016a3c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016a3e:	693b      	ldr	r3, [r7, #16]
 8016a40:	8afa      	ldrh	r2, [r7, #22]
 8016a42:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016a44:	693b      	ldr	r3, [r7, #16]
 8016a46:	2206      	movs	r2, #6
 8016a48:	6839      	ldr	r1, [r7, #0]
 8016a4a:	4618      	mov	r0, r3
 8016a4c:	f000 fa6b 	bl	8016f26 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016a50:	693b      	ldr	r3, [r7, #16]
 8016a52:	3306      	adds	r3, #6
 8016a54:	2206      	movs	r2, #6
 8016a56:	6879      	ldr	r1, [r7, #4]
 8016a58:	4618      	mov	r0, r3
 8016a5a:	f000 fa64 	bl	8016f26 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016a5e:	68fb      	ldr	r3, [r7, #12]
 8016a60:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016a64:	2b06      	cmp	r3, #6
 8016a66:	d006      	beq.n	8016a76 <ethernet_output+0x66>
 8016a68:	4b0a      	ldr	r3, [pc, #40]	; (8016a94 <ethernet_output+0x84>)
 8016a6a:	f240 1233 	movw	r2, #307	; 0x133
 8016a6e:	490a      	ldr	r1, [pc, #40]	; (8016a98 <ethernet_output+0x88>)
 8016a70:	480a      	ldr	r0, [pc, #40]	; (8016a9c <ethernet_output+0x8c>)
 8016a72:	f000 fa6b 	bl	8016f4c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016a76:	68fb      	ldr	r3, [r7, #12]
 8016a78:	699b      	ldr	r3, [r3, #24]
 8016a7a:	68b9      	ldr	r1, [r7, #8]
 8016a7c:	68f8      	ldr	r0, [r7, #12]
 8016a7e:	4798      	blx	r3
 8016a80:	4603      	mov	r3, r0
 8016a82:	e002      	b.n	8016a8a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016a84:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016a86:	f06f 0301 	mvn.w	r3, #1
}
 8016a8a:	4618      	mov	r0, r3
 8016a8c:	3718      	adds	r7, #24
 8016a8e:	46bd      	mov	sp, r7
 8016a90:	bd80      	pop	{r7, pc}
 8016a92:	bf00      	nop
 8016a94:	0801b4b0 	.word	0x0801b4b0
 8016a98:	0801b4e8 	.word	0x0801b4e8
 8016a9c:	0801b51c 	.word	0x0801b51c

08016aa0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8016aa0:	b580      	push	{r7, lr}
 8016aa2:	b086      	sub	sp, #24
 8016aa4:	af00      	add	r7, sp, #0
 8016aa6:	6078      	str	r0, [r7, #4]
 8016aa8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8016aaa:	683b      	ldr	r3, [r7, #0]
 8016aac:	60bb      	str	r3, [r7, #8]
 8016aae:	2304      	movs	r3, #4
 8016ab0:	60fb      	str	r3, [r7, #12]
 8016ab2:	2300      	movs	r3, #0
 8016ab4:	613b      	str	r3, [r7, #16]
 8016ab6:	2300      	movs	r3, #0
 8016ab8:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8016aba:	f107 0308 	add.w	r3, r7, #8
 8016abe:	2100      	movs	r1, #0
 8016ac0:	4618      	mov	r0, r3
 8016ac2:	f7ee f9f4 	bl	8004eae <osMessageCreate>
 8016ac6:	4602      	mov	r2, r0
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	681b      	ldr	r3, [r3, #0]
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d102      	bne.n	8016ada <sys_mbox_new+0x3a>
    return ERR_MEM;
 8016ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8016ad8:	e000      	b.n	8016adc <sys_mbox_new+0x3c>

  return ERR_OK;
 8016ada:	2300      	movs	r3, #0
}
 8016adc:	4618      	mov	r0, r3
 8016ade:	3718      	adds	r7, #24
 8016ae0:	46bd      	mov	sp, r7
 8016ae2:	bd80      	pop	{r7, pc}

08016ae4 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8016ae4:	b580      	push	{r7, lr}
 8016ae6:	b082      	sub	sp, #8
 8016ae8:	af00      	add	r7, sp, #0
 8016aea:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	681b      	ldr	r3, [r3, #0]
 8016af0:	4618      	mov	r0, r3
 8016af2:	f7ee fab9 	bl	8005068 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	4618      	mov	r0, r3
 8016afc:	f7ee faca 	bl	8005094 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8016b00:	bf00      	nop
 8016b02:	3708      	adds	r7, #8
 8016b04:	46bd      	mov	sp, r7
 8016b06:	bd80      	pop	{r7, pc}

08016b08 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016b08:	b580      	push	{r7, lr}
 8016b0a:	b084      	sub	sp, #16
 8016b0c:	af00      	add	r7, sp, #0
 8016b0e:	6078      	str	r0, [r7, #4]
 8016b10:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	681b      	ldr	r3, [r3, #0]
 8016b16:	6839      	ldr	r1, [r7, #0]
 8016b18:	2200      	movs	r2, #0
 8016b1a:	4618      	mov	r0, r3
 8016b1c:	f7ee f9f0 	bl	8004f00 <osMessagePut>
 8016b20:	4603      	mov	r3, r0
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d102      	bne.n	8016b2c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8016b26:	2300      	movs	r3, #0
 8016b28:	73fb      	strb	r3, [r7, #15]
 8016b2a:	e001      	b.n	8016b30 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8016b2c:	23ff      	movs	r3, #255	; 0xff
 8016b2e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8016b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016b34:	4618      	mov	r0, r3
 8016b36:	3710      	adds	r7, #16
 8016b38:	46bd      	mov	sp, r7
 8016b3a:	bd80      	pop	{r7, pc}

08016b3c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8016b3c:	b580      	push	{r7, lr}
 8016b3e:	b08c      	sub	sp, #48	; 0x30
 8016b40:	af00      	add	r7, sp, #0
 8016b42:	61f8      	str	r0, [r7, #28]
 8016b44:	61b9      	str	r1, [r7, #24]
 8016b46:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8016b48:	f7ed ffda 	bl	8004b00 <osKernelSysTick>
 8016b4c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8016b4e:	697b      	ldr	r3, [r7, #20]
 8016b50:	2b00      	cmp	r3, #0
 8016b52:	d017      	beq.n	8016b84 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8016b54:	69fb      	ldr	r3, [r7, #28]
 8016b56:	6819      	ldr	r1, [r3, #0]
 8016b58:	f107 0320 	add.w	r3, r7, #32
 8016b5c:	697a      	ldr	r2, [r7, #20]
 8016b5e:	4618      	mov	r0, r3
 8016b60:	f7ee fa0e 	bl	8004f80 <osMessageGet>

    if(event.status == osEventMessage)
 8016b64:	6a3b      	ldr	r3, [r7, #32]
 8016b66:	2b10      	cmp	r3, #16
 8016b68:	d109      	bne.n	8016b7e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8016b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b6c:	461a      	mov	r2, r3
 8016b6e:	69bb      	ldr	r3, [r7, #24]
 8016b70:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8016b72:	f7ed ffc5 	bl	8004b00 <osKernelSysTick>
 8016b76:	4602      	mov	r2, r0
 8016b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b7a:	1ad3      	subs	r3, r2, r3
 8016b7c:	e019      	b.n	8016bb2 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8016b82:	e016      	b.n	8016bb2 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8016b84:	69fb      	ldr	r3, [r7, #28]
 8016b86:	6819      	ldr	r1, [r3, #0]
 8016b88:	463b      	mov	r3, r7
 8016b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8016b8e:	4618      	mov	r0, r3
 8016b90:	f7ee f9f6 	bl	8004f80 <osMessageGet>
 8016b94:	f107 0320 	add.w	r3, r7, #32
 8016b98:	463a      	mov	r2, r7
 8016b9a:	ca07      	ldmia	r2, {r0, r1, r2}
 8016b9c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8016ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ba2:	461a      	mov	r2, r3
 8016ba4:	69bb      	ldr	r3, [r7, #24]
 8016ba6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8016ba8:	f7ed ffaa 	bl	8004b00 <osKernelSysTick>
 8016bac:	4602      	mov	r2, r0
 8016bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016bb0:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8016bb2:	4618      	mov	r0, r3
 8016bb4:	3730      	adds	r7, #48	; 0x30
 8016bb6:	46bd      	mov	sp, r7
 8016bb8:	bd80      	pop	{r7, pc}

08016bba <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8016bba:	b580      	push	{r7, lr}
 8016bbc:	b086      	sub	sp, #24
 8016bbe:	af00      	add	r7, sp, #0
 8016bc0:	6078      	str	r0, [r7, #4]
 8016bc2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	6819      	ldr	r1, [r3, #0]
 8016bc8:	f107 030c 	add.w	r3, r7, #12
 8016bcc:	2200      	movs	r2, #0
 8016bce:	4618      	mov	r0, r3
 8016bd0:	f7ee f9d6 	bl	8004f80 <osMessageGet>

  if(event.status == osEventMessage)
 8016bd4:	68fb      	ldr	r3, [r7, #12]
 8016bd6:	2b10      	cmp	r3, #16
 8016bd8:	d105      	bne.n	8016be6 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8016bda:	693b      	ldr	r3, [r7, #16]
 8016bdc:	461a      	mov	r2, r3
 8016bde:	683b      	ldr	r3, [r7, #0]
 8016be0:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8016be2:	2300      	movs	r3, #0
 8016be4:	e001      	b.n	8016bea <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8016be6:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8016bea:	4618      	mov	r0, r3
 8016bec:	3718      	adds	r7, #24
 8016bee:	46bd      	mov	sp, r7
 8016bf0:	bd80      	pop	{r7, pc}

08016bf2 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8016bf2:	b480      	push	{r7}
 8016bf4:	b083      	sub	sp, #12
 8016bf6:	af00      	add	r7, sp, #0
 8016bf8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	681b      	ldr	r3, [r3, #0]
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d101      	bne.n	8016c06 <sys_mbox_valid+0x14>
    return 0;
 8016c02:	2300      	movs	r3, #0
 8016c04:	e000      	b.n	8016c08 <sys_mbox_valid+0x16>
  else
    return 1;
 8016c06:	2301      	movs	r3, #1
}
 8016c08:	4618      	mov	r0, r3
 8016c0a:	370c      	adds	r7, #12
 8016c0c:	46bd      	mov	sp, r7
 8016c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c12:	4770      	bx	lr

08016c14 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8016c14:	b480      	push	{r7}
 8016c16:	b083      	sub	sp, #12
 8016c18:	af00      	add	r7, sp, #0
 8016c1a:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	2200      	movs	r2, #0
 8016c20:	601a      	str	r2, [r3, #0]
}
 8016c22:	bf00      	nop
 8016c24:	370c      	adds	r7, #12
 8016c26:	46bd      	mov	sp, r7
 8016c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c2c:	4770      	bx	lr

08016c2e <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8016c2e:	b580      	push	{r7, lr}
 8016c30:	b084      	sub	sp, #16
 8016c32:	af00      	add	r7, sp, #0
 8016c34:	6078      	str	r0, [r7, #4]
 8016c36:	460b      	mov	r3, r1
 8016c38:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8016c3a:	2300      	movs	r3, #0
 8016c3c:	60bb      	str	r3, [r7, #8]
 8016c3e:	2300      	movs	r3, #0
 8016c40:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8016c42:	f107 0308 	add.w	r3, r7, #8
 8016c46:	2101      	movs	r1, #1
 8016c48:	4618      	mov	r0, r3
 8016c4a:	f7ee f865 	bl	8004d18 <osSemaphoreCreate>
 8016c4e:	4602      	mov	r2, r0
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d102      	bne.n	8016c62 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8016c60:	e009      	b.n	8016c76 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8016c62:	78fb      	ldrb	r3, [r7, #3]
 8016c64:	2b00      	cmp	r3, #0
 8016c66:	d105      	bne.n	8016c74 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	681b      	ldr	r3, [r3, #0]
 8016c6c:	2100      	movs	r1, #0
 8016c6e:	4618      	mov	r0, r3
 8016c70:	f7ee f886 	bl	8004d80 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8016c74:	2300      	movs	r3, #0
}
 8016c76:	4618      	mov	r0, r3
 8016c78:	3710      	adds	r7, #16
 8016c7a:	46bd      	mov	sp, r7
 8016c7c:	bd80      	pop	{r7, pc}

08016c7e <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8016c7e:	b580      	push	{r7, lr}
 8016c80:	b084      	sub	sp, #16
 8016c82:	af00      	add	r7, sp, #0
 8016c84:	6078      	str	r0, [r7, #4]
 8016c86:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8016c88:	f7ed ff3a 	bl	8004b00 <osKernelSysTick>
 8016c8c:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8016c8e:	683b      	ldr	r3, [r7, #0]
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d011      	beq.n	8016cb8 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	681b      	ldr	r3, [r3, #0]
 8016c98:	6839      	ldr	r1, [r7, #0]
 8016c9a:	4618      	mov	r0, r3
 8016c9c:	f7ee f870 	bl	8004d80 <osSemaphoreWait>
 8016ca0:	4603      	mov	r3, r0
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d105      	bne.n	8016cb2 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8016ca6:	f7ed ff2b 	bl	8004b00 <osKernelSysTick>
 8016caa:	4602      	mov	r2, r0
 8016cac:	68fb      	ldr	r3, [r7, #12]
 8016cae:	1ad3      	subs	r3, r2, r3
 8016cb0:	e012      	b.n	8016cd8 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8016cb6:	e00f      	b.n	8016cd8 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8016cb8:	bf00      	nop
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	681b      	ldr	r3, [r3, #0]
 8016cbe:	f04f 31ff 	mov.w	r1, #4294967295
 8016cc2:	4618      	mov	r0, r3
 8016cc4:	f7ee f85c 	bl	8004d80 <osSemaphoreWait>
 8016cc8:	4603      	mov	r3, r0
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d1f5      	bne.n	8016cba <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8016cce:	f7ed ff17 	bl	8004b00 <osKernelSysTick>
 8016cd2:	4602      	mov	r2, r0
 8016cd4:	68fb      	ldr	r3, [r7, #12]
 8016cd6:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8016cd8:	4618      	mov	r0, r3
 8016cda:	3710      	adds	r7, #16
 8016cdc:	46bd      	mov	sp, r7
 8016cde:	bd80      	pop	{r7, pc}

08016ce0 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8016ce0:	b580      	push	{r7, lr}
 8016ce2:	b082      	sub	sp, #8
 8016ce4:	af00      	add	r7, sp, #0
 8016ce6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	681b      	ldr	r3, [r3, #0]
 8016cec:	4618      	mov	r0, r3
 8016cee:	f7ee f895 	bl	8004e1c <osSemaphoreRelease>
}
 8016cf2:	bf00      	nop
 8016cf4:	3708      	adds	r7, #8
 8016cf6:	46bd      	mov	sp, r7
 8016cf8:	bd80      	pop	{r7, pc}

08016cfa <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8016cfa:	b580      	push	{r7, lr}
 8016cfc:	b082      	sub	sp, #8
 8016cfe:	af00      	add	r7, sp, #0
 8016d00:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	681b      	ldr	r3, [r3, #0]
 8016d06:	4618      	mov	r0, r3
 8016d08:	f7ee f8be 	bl	8004e88 <osSemaphoreDelete>
}
 8016d0c:	bf00      	nop
 8016d0e:	3708      	adds	r7, #8
 8016d10:	46bd      	mov	sp, r7
 8016d12:	bd80      	pop	{r7, pc}

08016d14 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8016d14:	b480      	push	{r7}
 8016d16:	b083      	sub	sp, #12
 8016d18:	af00      	add	r7, sp, #0
 8016d1a:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d101      	bne.n	8016d28 <sys_sem_valid+0x14>
    return 0;
 8016d24:	2300      	movs	r3, #0
 8016d26:	e000      	b.n	8016d2a <sys_sem_valid+0x16>
  else
    return 1;
 8016d28:	2301      	movs	r3, #1
}
 8016d2a:	4618      	mov	r0, r3
 8016d2c:	370c      	adds	r7, #12
 8016d2e:	46bd      	mov	sp, r7
 8016d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d34:	4770      	bx	lr

08016d36 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8016d36:	b480      	push	{r7}
 8016d38:	b083      	sub	sp, #12
 8016d3a:	af00      	add	r7, sp, #0
 8016d3c:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	2200      	movs	r2, #0
 8016d42:	601a      	str	r2, [r3, #0]
}
 8016d44:	bf00      	nop
 8016d46:	370c      	adds	r7, #12
 8016d48:	46bd      	mov	sp, r7
 8016d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d4e:	4770      	bx	lr

08016d50 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8016d50:	b580      	push	{r7, lr}
 8016d52:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8016d54:	4803      	ldr	r0, [pc, #12]	; (8016d64 <sys_init+0x14>)
 8016d56:	f7ed ff43 	bl	8004be0 <osMutexCreate>
 8016d5a:	4602      	mov	r2, r0
 8016d5c:	4b02      	ldr	r3, [pc, #8]	; (8016d68 <sys_init+0x18>)
 8016d5e:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8016d60:	bf00      	nop
 8016d62:	bd80      	pop	{r7, pc}
 8016d64:	0801fac0 	.word	0x0801fac0
 8016d68:	20010ec0 	.word	0x20010ec0

08016d6c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016d6c:	b580      	push	{r7, lr}
 8016d6e:	b084      	sub	sp, #16
 8016d70:	af00      	add	r7, sp, #0
 8016d72:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8016d74:	2300      	movs	r3, #0
 8016d76:	60bb      	str	r3, [r7, #8]
 8016d78:	2300      	movs	r3, #0
 8016d7a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8016d7c:	f107 0308 	add.w	r3, r7, #8
 8016d80:	4618      	mov	r0, r3
 8016d82:	f7ed ff2d 	bl	8004be0 <osMutexCreate>
 8016d86:	4602      	mov	r2, r0
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d102      	bne.n	8016d9a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016d94:	f04f 33ff 	mov.w	r3, #4294967295
 8016d98:	e000      	b.n	8016d9c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8016d9a:	2300      	movs	r3, #0
}
 8016d9c:	4618      	mov	r0, r3
 8016d9e:	3710      	adds	r7, #16
 8016da0:	46bd      	mov	sp, r7
 8016da2:	bd80      	pop	{r7, pc}

08016da4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016da4:	b580      	push	{r7, lr}
 8016da6:	b082      	sub	sp, #8
 8016da8:	af00      	add	r7, sp, #0
 8016daa:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	681b      	ldr	r3, [r3, #0]
 8016db0:	f04f 31ff 	mov.w	r1, #4294967295
 8016db4:	4618      	mov	r0, r3
 8016db6:	f7ed ff2b 	bl	8004c10 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8016dba:	bf00      	nop
 8016dbc:	3708      	adds	r7, #8
 8016dbe:	46bd      	mov	sp, r7
 8016dc0:	bd80      	pop	{r7, pc}

08016dc2 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8016dc2:	b580      	push	{r7, lr}
 8016dc4:	b082      	sub	sp, #8
 8016dc6:	af00      	add	r7, sp, #0
 8016dc8:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	681b      	ldr	r3, [r3, #0]
 8016dce:	4618      	mov	r0, r3
 8016dd0:	f7ed ff6c 	bl	8004cac <osMutexRelease>
}
 8016dd4:	bf00      	nop
 8016dd6:	3708      	adds	r7, #8
 8016dd8:	46bd      	mov	sp, r7
 8016dda:	bd80      	pop	{r7, pc}

08016ddc <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016ddc:	b580      	push	{r7, lr}
 8016dde:	b08c      	sub	sp, #48	; 0x30
 8016de0:	af00      	add	r7, sp, #0
 8016de2:	60f8      	str	r0, [r7, #12]
 8016de4:	60b9      	str	r1, [r7, #8]
 8016de6:	607a      	str	r2, [r7, #4]
 8016de8:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8016dea:	f107 0314 	add.w	r3, r7, #20
 8016dee:	2200      	movs	r2, #0
 8016df0:	601a      	str	r2, [r3, #0]
 8016df2:	605a      	str	r2, [r3, #4]
 8016df4:	609a      	str	r2, [r3, #8]
 8016df6:	60da      	str	r2, [r3, #12]
 8016df8:	611a      	str	r2, [r3, #16]
 8016dfa:	615a      	str	r2, [r3, #20]
 8016dfc:	619a      	str	r2, [r3, #24]
 8016dfe:	68fb      	ldr	r3, [r7, #12]
 8016e00:	617b      	str	r3, [r7, #20]
 8016e02:	68bb      	ldr	r3, [r7, #8]
 8016e04:	61bb      	str	r3, [r7, #24]
 8016e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e08:	b21b      	sxth	r3, r3
 8016e0a:	83bb      	strh	r3, [r7, #28]
 8016e0c:	683b      	ldr	r3, [r7, #0]
 8016e0e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8016e10:	f107 0314 	add.w	r3, r7, #20
 8016e14:	6879      	ldr	r1, [r7, #4]
 8016e16:	4618      	mov	r0, r3
 8016e18:	f7ed fe82 	bl	8004b20 <osThreadCreate>
 8016e1c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8016e1e:	4618      	mov	r0, r3
 8016e20:	3730      	adds	r7, #48	; 0x30
 8016e22:	46bd      	mov	sp, r7
 8016e24:	bd80      	pop	{r7, pc}
	...

08016e28 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016e28:	b580      	push	{r7, lr}
 8016e2a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8016e2c:	4b04      	ldr	r3, [pc, #16]	; (8016e40 <sys_arch_protect+0x18>)
 8016e2e:	681b      	ldr	r3, [r3, #0]
 8016e30:	f04f 31ff 	mov.w	r1, #4294967295
 8016e34:	4618      	mov	r0, r3
 8016e36:	f7ed feeb 	bl	8004c10 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8016e3a:	2301      	movs	r3, #1
}
 8016e3c:	4618      	mov	r0, r3
 8016e3e:	bd80      	pop	{r7, pc}
 8016e40:	20010ec0 	.word	0x20010ec0

08016e44 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016e44:	b580      	push	{r7, lr}
 8016e46:	b082      	sub	sp, #8
 8016e48:	af00      	add	r7, sp, #0
 8016e4a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016e4c:	4b04      	ldr	r3, [pc, #16]	; (8016e60 <sys_arch_unprotect+0x1c>)
 8016e4e:	681b      	ldr	r3, [r3, #0]
 8016e50:	4618      	mov	r0, r3
 8016e52:	f7ed ff2b 	bl	8004cac <osMutexRelease>
}
 8016e56:	bf00      	nop
 8016e58:	3708      	adds	r7, #8
 8016e5a:	46bd      	mov	sp, r7
 8016e5c:	bd80      	pop	{r7, pc}
 8016e5e:	bf00      	nop
 8016e60:	20010ec0 	.word	0x20010ec0

08016e64 <Encrypt>:
 * Initialize crypto service engine
 * @param AES_key: input AES Key [in]
 * @param AES_IV: input AES IV [in[
 */
int32_t Encrypt(uint8_t* plaintext, uint32_t plaintext_len, uint8_t* AES_key, uint8_t* AES_IV, uint8_t* ciphertext)
{
 8016e64:	b580      	push	{r7, lr}
 8016e66:	b086      	sub	sp, #24
 8016e68:	af02      	add	r7, sp, #8
 8016e6a:	60f8      	str	r0, [r7, #12]
 8016e6c:	60b9      	str	r1, [r7, #8]
 8016e6e:	607a      	str	r2, [r7, #4]
 8016e70:	603b      	str	r3, [r7, #0]
	AesCbcEncryptWithKey(AES_key, AES_KEY_SIZE_128, AES_IV, plaintext, ciphertext, plaintext_len);
 8016e72:	68bb      	ldr	r3, [r7, #8]
 8016e74:	9301      	str	r3, [sp, #4]
 8016e76:	69bb      	ldr	r3, [r7, #24]
 8016e78:	9300      	str	r3, [sp, #0]
 8016e7a:	68fb      	ldr	r3, [r7, #12]
 8016e7c:	683a      	ldr	r2, [r7, #0]
 8016e7e:	2110      	movs	r1, #16
 8016e80:	6878      	ldr	r0, [r7, #4]
 8016e82:	f7ea fc8f 	bl	80017a4 <AesCbcEncryptWithKey>
}
 8016e86:	bf00      	nop
 8016e88:	4618      	mov	r0, r3
 8016e8a:	3710      	adds	r7, #16
 8016e8c:	46bd      	mov	sp, r7
 8016e8e:	bd80      	pop	{r7, pc}

08016e90 <Decrypt>:

int32_t Decrypt(uint8_t* ciphertext, uint16_t ciphertext_len, uint8_t* AES_key, uint8_t* AES_IV, uint8_t* decrypted_text)
{
 8016e90:	b580      	push	{r7, lr}
 8016e92:	b088      	sub	sp, #32
 8016e94:	af02      	add	r7, sp, #8
 8016e96:	60f8      	str	r0, [r7, #12]
 8016e98:	607a      	str	r2, [r7, #4]
 8016e9a:	603b      	str	r3, [r7, #0]
 8016e9c:	460b      	mov	r3, r1
 8016e9e:	817b      	strh	r3, [r7, #10]
	int32_t result;
	result = AesCbcDecryptWithKey(AES_key, AES_KEY_SIZE_128, AES_IV, ciphertext, decrypted_text, ciphertext_len);
 8016ea0:	897b      	ldrh	r3, [r7, #10]
 8016ea2:	9301      	str	r3, [sp, #4]
 8016ea4:	6a3b      	ldr	r3, [r7, #32]
 8016ea6:	9300      	str	r3, [sp, #0]
 8016ea8:	68fb      	ldr	r3, [r7, #12]
 8016eaa:	683a      	ldr	r2, [r7, #0]
 8016eac:	2110      	movs	r1, #16
 8016eae:	6878      	ldr	r0, [r7, #4]
 8016eb0:	f7ea fcab 	bl	800180a <AesCbcDecryptWithKey>
 8016eb4:	6178      	str	r0, [r7, #20]
	return result;
 8016eb6:	697b      	ldr	r3, [r7, #20]
}
 8016eb8:	4618      	mov	r0, r3
 8016eba:	3718      	adds	r7, #24
 8016ebc:	46bd      	mov	sp, r7
 8016ebe:	bd80      	pop	{r7, pc}

08016ec0 <__libc_init_array>:
 8016ec0:	b570      	push	{r4, r5, r6, lr}
 8016ec2:	4e0d      	ldr	r6, [pc, #52]	; (8016ef8 <__libc_init_array+0x38>)
 8016ec4:	4c0d      	ldr	r4, [pc, #52]	; (8016efc <__libc_init_array+0x3c>)
 8016ec6:	1ba4      	subs	r4, r4, r6
 8016ec8:	10a4      	asrs	r4, r4, #2
 8016eca:	2500      	movs	r5, #0
 8016ecc:	42a5      	cmp	r5, r4
 8016ece:	d109      	bne.n	8016ee4 <__libc_init_array+0x24>
 8016ed0:	4e0b      	ldr	r6, [pc, #44]	; (8016f00 <__libc_init_array+0x40>)
 8016ed2:	4c0c      	ldr	r4, [pc, #48]	; (8016f04 <__libc_init_array+0x44>)
 8016ed4:	f000 ff5a 	bl	8017d8c <_init>
 8016ed8:	1ba4      	subs	r4, r4, r6
 8016eda:	10a4      	asrs	r4, r4, #2
 8016edc:	2500      	movs	r5, #0
 8016ede:	42a5      	cmp	r5, r4
 8016ee0:	d105      	bne.n	8016eee <__libc_init_array+0x2e>
 8016ee2:	bd70      	pop	{r4, r5, r6, pc}
 8016ee4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016ee8:	4798      	blx	r3
 8016eea:	3501      	adds	r5, #1
 8016eec:	e7ee      	b.n	8016ecc <__libc_init_array+0xc>
 8016eee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016ef2:	4798      	blx	r3
 8016ef4:	3501      	adds	r5, #1
 8016ef6:	e7f2      	b.n	8016ede <__libc_init_array+0x1e>
 8016ef8:	0801fb68 	.word	0x0801fb68
 8016efc:	0801fb68 	.word	0x0801fb68
 8016f00:	0801fb68 	.word	0x0801fb68
 8016f04:	0801fb6c 	.word	0x0801fb6c

08016f08 <memcmp>:
 8016f08:	b530      	push	{r4, r5, lr}
 8016f0a:	2400      	movs	r4, #0
 8016f0c:	42a2      	cmp	r2, r4
 8016f0e:	d101      	bne.n	8016f14 <memcmp+0xc>
 8016f10:	2000      	movs	r0, #0
 8016f12:	e007      	b.n	8016f24 <memcmp+0x1c>
 8016f14:	5d03      	ldrb	r3, [r0, r4]
 8016f16:	3401      	adds	r4, #1
 8016f18:	190d      	adds	r5, r1, r4
 8016f1a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8016f1e:	42ab      	cmp	r3, r5
 8016f20:	d0f4      	beq.n	8016f0c <memcmp+0x4>
 8016f22:	1b58      	subs	r0, r3, r5
 8016f24:	bd30      	pop	{r4, r5, pc}

08016f26 <memcpy>:
 8016f26:	b510      	push	{r4, lr}
 8016f28:	1e43      	subs	r3, r0, #1
 8016f2a:	440a      	add	r2, r1
 8016f2c:	4291      	cmp	r1, r2
 8016f2e:	d100      	bne.n	8016f32 <memcpy+0xc>
 8016f30:	bd10      	pop	{r4, pc}
 8016f32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016f36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016f3a:	e7f7      	b.n	8016f2c <memcpy+0x6>

08016f3c <memset>:
 8016f3c:	4402      	add	r2, r0
 8016f3e:	4603      	mov	r3, r0
 8016f40:	4293      	cmp	r3, r2
 8016f42:	d100      	bne.n	8016f46 <memset+0xa>
 8016f44:	4770      	bx	lr
 8016f46:	f803 1b01 	strb.w	r1, [r3], #1
 8016f4a:	e7f9      	b.n	8016f40 <memset+0x4>

08016f4c <iprintf>:
 8016f4c:	b40f      	push	{r0, r1, r2, r3}
 8016f4e:	4b0a      	ldr	r3, [pc, #40]	; (8016f78 <iprintf+0x2c>)
 8016f50:	b513      	push	{r0, r1, r4, lr}
 8016f52:	681c      	ldr	r4, [r3, #0]
 8016f54:	b124      	cbz	r4, 8016f60 <iprintf+0x14>
 8016f56:	69a3      	ldr	r3, [r4, #24]
 8016f58:	b913      	cbnz	r3, 8016f60 <iprintf+0x14>
 8016f5a:	4620      	mov	r0, r4
 8016f5c:	f000 f882 	bl	8017064 <__sinit>
 8016f60:	ab05      	add	r3, sp, #20
 8016f62:	9a04      	ldr	r2, [sp, #16]
 8016f64:	68a1      	ldr	r1, [r4, #8]
 8016f66:	9301      	str	r3, [sp, #4]
 8016f68:	4620      	mov	r0, r4
 8016f6a:	f000 f9df 	bl	801732c <_vfiprintf_r>
 8016f6e:	b002      	add	sp, #8
 8016f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016f74:	b004      	add	sp, #16
 8016f76:	4770      	bx	lr
 8016f78:	20000040 	.word	0x20000040

08016f7c <rand>:
 8016f7c:	b538      	push	{r3, r4, r5, lr}
 8016f7e:	4b13      	ldr	r3, [pc, #76]	; (8016fcc <rand+0x50>)
 8016f80:	681c      	ldr	r4, [r3, #0]
 8016f82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016f84:	b97b      	cbnz	r3, 8016fa6 <rand+0x2a>
 8016f86:	2018      	movs	r0, #24
 8016f88:	f000 f8f6 	bl	8017178 <malloc>
 8016f8c:	4a10      	ldr	r2, [pc, #64]	; (8016fd0 <rand+0x54>)
 8016f8e:	4b11      	ldr	r3, [pc, #68]	; (8016fd4 <rand+0x58>)
 8016f90:	63a0      	str	r0, [r4, #56]	; 0x38
 8016f92:	e9c0 2300 	strd	r2, r3, [r0]
 8016f96:	4b10      	ldr	r3, [pc, #64]	; (8016fd8 <rand+0x5c>)
 8016f98:	6083      	str	r3, [r0, #8]
 8016f9a:	230b      	movs	r3, #11
 8016f9c:	8183      	strh	r3, [r0, #12]
 8016f9e:	2201      	movs	r2, #1
 8016fa0:	2300      	movs	r3, #0
 8016fa2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8016fa6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016fa8:	480c      	ldr	r0, [pc, #48]	; (8016fdc <rand+0x60>)
 8016faa:	690a      	ldr	r2, [r1, #16]
 8016fac:	694b      	ldr	r3, [r1, #20]
 8016fae:	4c0c      	ldr	r4, [pc, #48]	; (8016fe0 <rand+0x64>)
 8016fb0:	4350      	muls	r0, r2
 8016fb2:	fb04 0003 	mla	r0, r4, r3, r0
 8016fb6:	fba2 2304 	umull	r2, r3, r2, r4
 8016fba:	4403      	add	r3, r0
 8016fbc:	1c54      	adds	r4, r2, #1
 8016fbe:	f143 0500 	adc.w	r5, r3, #0
 8016fc2:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8016fc6:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8016fca:	bd38      	pop	{r3, r4, r5, pc}
 8016fcc:	20000040 	.word	0x20000040
 8016fd0:	abcd330e 	.word	0xabcd330e
 8016fd4:	e66d1234 	.word	0xe66d1234
 8016fd8:	0005deec 	.word	0x0005deec
 8016fdc:	5851f42d 	.word	0x5851f42d
 8016fe0:	4c957f2d 	.word	0x4c957f2d

08016fe4 <std>:
 8016fe4:	2300      	movs	r3, #0
 8016fe6:	b510      	push	{r4, lr}
 8016fe8:	4604      	mov	r4, r0
 8016fea:	e9c0 3300 	strd	r3, r3, [r0]
 8016fee:	6083      	str	r3, [r0, #8]
 8016ff0:	8181      	strh	r1, [r0, #12]
 8016ff2:	6643      	str	r3, [r0, #100]	; 0x64
 8016ff4:	81c2      	strh	r2, [r0, #14]
 8016ff6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016ffa:	6183      	str	r3, [r0, #24]
 8016ffc:	4619      	mov	r1, r3
 8016ffe:	2208      	movs	r2, #8
 8017000:	305c      	adds	r0, #92	; 0x5c
 8017002:	f7ff ff9b 	bl	8016f3c <memset>
 8017006:	4b05      	ldr	r3, [pc, #20]	; (801701c <std+0x38>)
 8017008:	6263      	str	r3, [r4, #36]	; 0x24
 801700a:	4b05      	ldr	r3, [pc, #20]	; (8017020 <std+0x3c>)
 801700c:	62a3      	str	r3, [r4, #40]	; 0x28
 801700e:	4b05      	ldr	r3, [pc, #20]	; (8017024 <std+0x40>)
 8017010:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017012:	4b05      	ldr	r3, [pc, #20]	; (8017028 <std+0x44>)
 8017014:	6224      	str	r4, [r4, #32]
 8017016:	6323      	str	r3, [r4, #48]	; 0x30
 8017018:	bd10      	pop	{r4, pc}
 801701a:	bf00      	nop
 801701c:	08017889 	.word	0x08017889
 8017020:	080178ab 	.word	0x080178ab
 8017024:	080178e3 	.word	0x080178e3
 8017028:	08017907 	.word	0x08017907

0801702c <_cleanup_r>:
 801702c:	4901      	ldr	r1, [pc, #4]	; (8017034 <_cleanup_r+0x8>)
 801702e:	f000 b885 	b.w	801713c <_fwalk_reent>
 8017032:	bf00      	nop
 8017034:	08017be1 	.word	0x08017be1

08017038 <__sfmoreglue>:
 8017038:	b570      	push	{r4, r5, r6, lr}
 801703a:	1e4a      	subs	r2, r1, #1
 801703c:	2568      	movs	r5, #104	; 0x68
 801703e:	4355      	muls	r5, r2
 8017040:	460e      	mov	r6, r1
 8017042:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017046:	f000 f8ed 	bl	8017224 <_malloc_r>
 801704a:	4604      	mov	r4, r0
 801704c:	b140      	cbz	r0, 8017060 <__sfmoreglue+0x28>
 801704e:	2100      	movs	r1, #0
 8017050:	e9c0 1600 	strd	r1, r6, [r0]
 8017054:	300c      	adds	r0, #12
 8017056:	60a0      	str	r0, [r4, #8]
 8017058:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801705c:	f7ff ff6e 	bl	8016f3c <memset>
 8017060:	4620      	mov	r0, r4
 8017062:	bd70      	pop	{r4, r5, r6, pc}

08017064 <__sinit>:
 8017064:	6983      	ldr	r3, [r0, #24]
 8017066:	b510      	push	{r4, lr}
 8017068:	4604      	mov	r4, r0
 801706a:	bb33      	cbnz	r3, 80170ba <__sinit+0x56>
 801706c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8017070:	6503      	str	r3, [r0, #80]	; 0x50
 8017072:	4b12      	ldr	r3, [pc, #72]	; (80170bc <__sinit+0x58>)
 8017074:	4a12      	ldr	r2, [pc, #72]	; (80170c0 <__sinit+0x5c>)
 8017076:	681b      	ldr	r3, [r3, #0]
 8017078:	6282      	str	r2, [r0, #40]	; 0x28
 801707a:	4298      	cmp	r0, r3
 801707c:	bf04      	itt	eq
 801707e:	2301      	moveq	r3, #1
 8017080:	6183      	streq	r3, [r0, #24]
 8017082:	f000 f81f 	bl	80170c4 <__sfp>
 8017086:	6060      	str	r0, [r4, #4]
 8017088:	4620      	mov	r0, r4
 801708a:	f000 f81b 	bl	80170c4 <__sfp>
 801708e:	60a0      	str	r0, [r4, #8]
 8017090:	4620      	mov	r0, r4
 8017092:	f000 f817 	bl	80170c4 <__sfp>
 8017096:	2200      	movs	r2, #0
 8017098:	60e0      	str	r0, [r4, #12]
 801709a:	2104      	movs	r1, #4
 801709c:	6860      	ldr	r0, [r4, #4]
 801709e:	f7ff ffa1 	bl	8016fe4 <std>
 80170a2:	2201      	movs	r2, #1
 80170a4:	2109      	movs	r1, #9
 80170a6:	68a0      	ldr	r0, [r4, #8]
 80170a8:	f7ff ff9c 	bl	8016fe4 <std>
 80170ac:	2202      	movs	r2, #2
 80170ae:	2112      	movs	r1, #18
 80170b0:	68e0      	ldr	r0, [r4, #12]
 80170b2:	f7ff ff97 	bl	8016fe4 <std>
 80170b6:	2301      	movs	r3, #1
 80170b8:	61a3      	str	r3, [r4, #24]
 80170ba:	bd10      	pop	{r4, pc}
 80170bc:	0801fac8 	.word	0x0801fac8
 80170c0:	0801702d 	.word	0x0801702d

080170c4 <__sfp>:
 80170c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170c6:	4b1b      	ldr	r3, [pc, #108]	; (8017134 <__sfp+0x70>)
 80170c8:	681e      	ldr	r6, [r3, #0]
 80170ca:	69b3      	ldr	r3, [r6, #24]
 80170cc:	4607      	mov	r7, r0
 80170ce:	b913      	cbnz	r3, 80170d6 <__sfp+0x12>
 80170d0:	4630      	mov	r0, r6
 80170d2:	f7ff ffc7 	bl	8017064 <__sinit>
 80170d6:	3648      	adds	r6, #72	; 0x48
 80170d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80170dc:	3b01      	subs	r3, #1
 80170de:	d503      	bpl.n	80170e8 <__sfp+0x24>
 80170e0:	6833      	ldr	r3, [r6, #0]
 80170e2:	b133      	cbz	r3, 80170f2 <__sfp+0x2e>
 80170e4:	6836      	ldr	r6, [r6, #0]
 80170e6:	e7f7      	b.n	80170d8 <__sfp+0x14>
 80170e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80170ec:	b16d      	cbz	r5, 801710a <__sfp+0x46>
 80170ee:	3468      	adds	r4, #104	; 0x68
 80170f0:	e7f4      	b.n	80170dc <__sfp+0x18>
 80170f2:	2104      	movs	r1, #4
 80170f4:	4638      	mov	r0, r7
 80170f6:	f7ff ff9f 	bl	8017038 <__sfmoreglue>
 80170fa:	6030      	str	r0, [r6, #0]
 80170fc:	2800      	cmp	r0, #0
 80170fe:	d1f1      	bne.n	80170e4 <__sfp+0x20>
 8017100:	230c      	movs	r3, #12
 8017102:	603b      	str	r3, [r7, #0]
 8017104:	4604      	mov	r4, r0
 8017106:	4620      	mov	r0, r4
 8017108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801710a:	4b0b      	ldr	r3, [pc, #44]	; (8017138 <__sfp+0x74>)
 801710c:	6665      	str	r5, [r4, #100]	; 0x64
 801710e:	e9c4 5500 	strd	r5, r5, [r4]
 8017112:	60a5      	str	r5, [r4, #8]
 8017114:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8017118:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801711c:	2208      	movs	r2, #8
 801711e:	4629      	mov	r1, r5
 8017120:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017124:	f7ff ff0a 	bl	8016f3c <memset>
 8017128:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801712c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017130:	e7e9      	b.n	8017106 <__sfp+0x42>
 8017132:	bf00      	nop
 8017134:	0801fac8 	.word	0x0801fac8
 8017138:	ffff0001 	.word	0xffff0001

0801713c <_fwalk_reent>:
 801713c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017140:	4680      	mov	r8, r0
 8017142:	4689      	mov	r9, r1
 8017144:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017148:	2600      	movs	r6, #0
 801714a:	b914      	cbnz	r4, 8017152 <_fwalk_reent+0x16>
 801714c:	4630      	mov	r0, r6
 801714e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017152:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8017156:	3f01      	subs	r7, #1
 8017158:	d501      	bpl.n	801715e <_fwalk_reent+0x22>
 801715a:	6824      	ldr	r4, [r4, #0]
 801715c:	e7f5      	b.n	801714a <_fwalk_reent+0xe>
 801715e:	89ab      	ldrh	r3, [r5, #12]
 8017160:	2b01      	cmp	r3, #1
 8017162:	d907      	bls.n	8017174 <_fwalk_reent+0x38>
 8017164:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017168:	3301      	adds	r3, #1
 801716a:	d003      	beq.n	8017174 <_fwalk_reent+0x38>
 801716c:	4629      	mov	r1, r5
 801716e:	4640      	mov	r0, r8
 8017170:	47c8      	blx	r9
 8017172:	4306      	orrs	r6, r0
 8017174:	3568      	adds	r5, #104	; 0x68
 8017176:	e7ee      	b.n	8017156 <_fwalk_reent+0x1a>

08017178 <malloc>:
 8017178:	4b02      	ldr	r3, [pc, #8]	; (8017184 <malloc+0xc>)
 801717a:	4601      	mov	r1, r0
 801717c:	6818      	ldr	r0, [r3, #0]
 801717e:	f000 b851 	b.w	8017224 <_malloc_r>
 8017182:	bf00      	nop
 8017184:	20000040 	.word	0x20000040

08017188 <_free_r>:
 8017188:	b538      	push	{r3, r4, r5, lr}
 801718a:	4605      	mov	r5, r0
 801718c:	2900      	cmp	r1, #0
 801718e:	d045      	beq.n	801721c <_free_r+0x94>
 8017190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017194:	1f0c      	subs	r4, r1, #4
 8017196:	2b00      	cmp	r3, #0
 8017198:	bfb8      	it	lt
 801719a:	18e4      	addlt	r4, r4, r3
 801719c:	f000 fdc0 	bl	8017d20 <__malloc_lock>
 80171a0:	4a1f      	ldr	r2, [pc, #124]	; (8017220 <_free_r+0x98>)
 80171a2:	6813      	ldr	r3, [r2, #0]
 80171a4:	4610      	mov	r0, r2
 80171a6:	b933      	cbnz	r3, 80171b6 <_free_r+0x2e>
 80171a8:	6063      	str	r3, [r4, #4]
 80171aa:	6014      	str	r4, [r2, #0]
 80171ac:	4628      	mov	r0, r5
 80171ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80171b2:	f000 bdb6 	b.w	8017d22 <__malloc_unlock>
 80171b6:	42a3      	cmp	r3, r4
 80171b8:	d90c      	bls.n	80171d4 <_free_r+0x4c>
 80171ba:	6821      	ldr	r1, [r4, #0]
 80171bc:	1862      	adds	r2, r4, r1
 80171be:	4293      	cmp	r3, r2
 80171c0:	bf04      	itt	eq
 80171c2:	681a      	ldreq	r2, [r3, #0]
 80171c4:	685b      	ldreq	r3, [r3, #4]
 80171c6:	6063      	str	r3, [r4, #4]
 80171c8:	bf04      	itt	eq
 80171ca:	1852      	addeq	r2, r2, r1
 80171cc:	6022      	streq	r2, [r4, #0]
 80171ce:	6004      	str	r4, [r0, #0]
 80171d0:	e7ec      	b.n	80171ac <_free_r+0x24>
 80171d2:	4613      	mov	r3, r2
 80171d4:	685a      	ldr	r2, [r3, #4]
 80171d6:	b10a      	cbz	r2, 80171dc <_free_r+0x54>
 80171d8:	42a2      	cmp	r2, r4
 80171da:	d9fa      	bls.n	80171d2 <_free_r+0x4a>
 80171dc:	6819      	ldr	r1, [r3, #0]
 80171de:	1858      	adds	r0, r3, r1
 80171e0:	42a0      	cmp	r0, r4
 80171e2:	d10b      	bne.n	80171fc <_free_r+0x74>
 80171e4:	6820      	ldr	r0, [r4, #0]
 80171e6:	4401      	add	r1, r0
 80171e8:	1858      	adds	r0, r3, r1
 80171ea:	4282      	cmp	r2, r0
 80171ec:	6019      	str	r1, [r3, #0]
 80171ee:	d1dd      	bne.n	80171ac <_free_r+0x24>
 80171f0:	6810      	ldr	r0, [r2, #0]
 80171f2:	6852      	ldr	r2, [r2, #4]
 80171f4:	605a      	str	r2, [r3, #4]
 80171f6:	4401      	add	r1, r0
 80171f8:	6019      	str	r1, [r3, #0]
 80171fa:	e7d7      	b.n	80171ac <_free_r+0x24>
 80171fc:	d902      	bls.n	8017204 <_free_r+0x7c>
 80171fe:	230c      	movs	r3, #12
 8017200:	602b      	str	r3, [r5, #0]
 8017202:	e7d3      	b.n	80171ac <_free_r+0x24>
 8017204:	6820      	ldr	r0, [r4, #0]
 8017206:	1821      	adds	r1, r4, r0
 8017208:	428a      	cmp	r2, r1
 801720a:	bf04      	itt	eq
 801720c:	6811      	ldreq	r1, [r2, #0]
 801720e:	6852      	ldreq	r2, [r2, #4]
 8017210:	6062      	str	r2, [r4, #4]
 8017212:	bf04      	itt	eq
 8017214:	1809      	addeq	r1, r1, r0
 8017216:	6021      	streq	r1, [r4, #0]
 8017218:	605c      	str	r4, [r3, #4]
 801721a:	e7c7      	b.n	80171ac <_free_r+0x24>
 801721c:	bd38      	pop	{r3, r4, r5, pc}
 801721e:	bf00      	nop
 8017220:	20008304 	.word	0x20008304

08017224 <_malloc_r>:
 8017224:	b570      	push	{r4, r5, r6, lr}
 8017226:	1ccd      	adds	r5, r1, #3
 8017228:	f025 0503 	bic.w	r5, r5, #3
 801722c:	3508      	adds	r5, #8
 801722e:	2d0c      	cmp	r5, #12
 8017230:	bf38      	it	cc
 8017232:	250c      	movcc	r5, #12
 8017234:	2d00      	cmp	r5, #0
 8017236:	4606      	mov	r6, r0
 8017238:	db01      	blt.n	801723e <_malloc_r+0x1a>
 801723a:	42a9      	cmp	r1, r5
 801723c:	d903      	bls.n	8017246 <_malloc_r+0x22>
 801723e:	230c      	movs	r3, #12
 8017240:	6033      	str	r3, [r6, #0]
 8017242:	2000      	movs	r0, #0
 8017244:	bd70      	pop	{r4, r5, r6, pc}
 8017246:	f000 fd6b 	bl	8017d20 <__malloc_lock>
 801724a:	4a21      	ldr	r2, [pc, #132]	; (80172d0 <_malloc_r+0xac>)
 801724c:	6814      	ldr	r4, [r2, #0]
 801724e:	4621      	mov	r1, r4
 8017250:	b991      	cbnz	r1, 8017278 <_malloc_r+0x54>
 8017252:	4c20      	ldr	r4, [pc, #128]	; (80172d4 <_malloc_r+0xb0>)
 8017254:	6823      	ldr	r3, [r4, #0]
 8017256:	b91b      	cbnz	r3, 8017260 <_malloc_r+0x3c>
 8017258:	4630      	mov	r0, r6
 801725a:	f000 fb05 	bl	8017868 <_sbrk_r>
 801725e:	6020      	str	r0, [r4, #0]
 8017260:	4629      	mov	r1, r5
 8017262:	4630      	mov	r0, r6
 8017264:	f000 fb00 	bl	8017868 <_sbrk_r>
 8017268:	1c43      	adds	r3, r0, #1
 801726a:	d124      	bne.n	80172b6 <_malloc_r+0x92>
 801726c:	230c      	movs	r3, #12
 801726e:	6033      	str	r3, [r6, #0]
 8017270:	4630      	mov	r0, r6
 8017272:	f000 fd56 	bl	8017d22 <__malloc_unlock>
 8017276:	e7e4      	b.n	8017242 <_malloc_r+0x1e>
 8017278:	680b      	ldr	r3, [r1, #0]
 801727a:	1b5b      	subs	r3, r3, r5
 801727c:	d418      	bmi.n	80172b0 <_malloc_r+0x8c>
 801727e:	2b0b      	cmp	r3, #11
 8017280:	d90f      	bls.n	80172a2 <_malloc_r+0x7e>
 8017282:	600b      	str	r3, [r1, #0]
 8017284:	50cd      	str	r5, [r1, r3]
 8017286:	18cc      	adds	r4, r1, r3
 8017288:	4630      	mov	r0, r6
 801728a:	f000 fd4a 	bl	8017d22 <__malloc_unlock>
 801728e:	f104 000b 	add.w	r0, r4, #11
 8017292:	1d23      	adds	r3, r4, #4
 8017294:	f020 0007 	bic.w	r0, r0, #7
 8017298:	1ac3      	subs	r3, r0, r3
 801729a:	d0d3      	beq.n	8017244 <_malloc_r+0x20>
 801729c:	425a      	negs	r2, r3
 801729e:	50e2      	str	r2, [r4, r3]
 80172a0:	e7d0      	b.n	8017244 <_malloc_r+0x20>
 80172a2:	428c      	cmp	r4, r1
 80172a4:	684b      	ldr	r3, [r1, #4]
 80172a6:	bf16      	itet	ne
 80172a8:	6063      	strne	r3, [r4, #4]
 80172aa:	6013      	streq	r3, [r2, #0]
 80172ac:	460c      	movne	r4, r1
 80172ae:	e7eb      	b.n	8017288 <_malloc_r+0x64>
 80172b0:	460c      	mov	r4, r1
 80172b2:	6849      	ldr	r1, [r1, #4]
 80172b4:	e7cc      	b.n	8017250 <_malloc_r+0x2c>
 80172b6:	1cc4      	adds	r4, r0, #3
 80172b8:	f024 0403 	bic.w	r4, r4, #3
 80172bc:	42a0      	cmp	r0, r4
 80172be:	d005      	beq.n	80172cc <_malloc_r+0xa8>
 80172c0:	1a21      	subs	r1, r4, r0
 80172c2:	4630      	mov	r0, r6
 80172c4:	f000 fad0 	bl	8017868 <_sbrk_r>
 80172c8:	3001      	adds	r0, #1
 80172ca:	d0cf      	beq.n	801726c <_malloc_r+0x48>
 80172cc:	6025      	str	r5, [r4, #0]
 80172ce:	e7db      	b.n	8017288 <_malloc_r+0x64>
 80172d0:	20008304 	.word	0x20008304
 80172d4:	20008308 	.word	0x20008308

080172d8 <__sfputc_r>:
 80172d8:	6893      	ldr	r3, [r2, #8]
 80172da:	3b01      	subs	r3, #1
 80172dc:	2b00      	cmp	r3, #0
 80172de:	b410      	push	{r4}
 80172e0:	6093      	str	r3, [r2, #8]
 80172e2:	da08      	bge.n	80172f6 <__sfputc_r+0x1e>
 80172e4:	6994      	ldr	r4, [r2, #24]
 80172e6:	42a3      	cmp	r3, r4
 80172e8:	db01      	blt.n	80172ee <__sfputc_r+0x16>
 80172ea:	290a      	cmp	r1, #10
 80172ec:	d103      	bne.n	80172f6 <__sfputc_r+0x1e>
 80172ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80172f2:	f000 bb0d 	b.w	8017910 <__swbuf_r>
 80172f6:	6813      	ldr	r3, [r2, #0]
 80172f8:	1c58      	adds	r0, r3, #1
 80172fa:	6010      	str	r0, [r2, #0]
 80172fc:	7019      	strb	r1, [r3, #0]
 80172fe:	4608      	mov	r0, r1
 8017300:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017304:	4770      	bx	lr

08017306 <__sfputs_r>:
 8017306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017308:	4606      	mov	r6, r0
 801730a:	460f      	mov	r7, r1
 801730c:	4614      	mov	r4, r2
 801730e:	18d5      	adds	r5, r2, r3
 8017310:	42ac      	cmp	r4, r5
 8017312:	d101      	bne.n	8017318 <__sfputs_r+0x12>
 8017314:	2000      	movs	r0, #0
 8017316:	e007      	b.n	8017328 <__sfputs_r+0x22>
 8017318:	463a      	mov	r2, r7
 801731a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801731e:	4630      	mov	r0, r6
 8017320:	f7ff ffda 	bl	80172d8 <__sfputc_r>
 8017324:	1c43      	adds	r3, r0, #1
 8017326:	d1f3      	bne.n	8017310 <__sfputs_r+0xa>
 8017328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801732c <_vfiprintf_r>:
 801732c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017330:	460c      	mov	r4, r1
 8017332:	b09d      	sub	sp, #116	; 0x74
 8017334:	4617      	mov	r7, r2
 8017336:	461d      	mov	r5, r3
 8017338:	4606      	mov	r6, r0
 801733a:	b118      	cbz	r0, 8017344 <_vfiprintf_r+0x18>
 801733c:	6983      	ldr	r3, [r0, #24]
 801733e:	b90b      	cbnz	r3, 8017344 <_vfiprintf_r+0x18>
 8017340:	f7ff fe90 	bl	8017064 <__sinit>
 8017344:	4b7c      	ldr	r3, [pc, #496]	; (8017538 <_vfiprintf_r+0x20c>)
 8017346:	429c      	cmp	r4, r3
 8017348:	d158      	bne.n	80173fc <_vfiprintf_r+0xd0>
 801734a:	6874      	ldr	r4, [r6, #4]
 801734c:	89a3      	ldrh	r3, [r4, #12]
 801734e:	0718      	lsls	r0, r3, #28
 8017350:	d55e      	bpl.n	8017410 <_vfiprintf_r+0xe4>
 8017352:	6923      	ldr	r3, [r4, #16]
 8017354:	2b00      	cmp	r3, #0
 8017356:	d05b      	beq.n	8017410 <_vfiprintf_r+0xe4>
 8017358:	2300      	movs	r3, #0
 801735a:	9309      	str	r3, [sp, #36]	; 0x24
 801735c:	2320      	movs	r3, #32
 801735e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017362:	2330      	movs	r3, #48	; 0x30
 8017364:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017368:	9503      	str	r5, [sp, #12]
 801736a:	f04f 0b01 	mov.w	fp, #1
 801736e:	46b8      	mov	r8, r7
 8017370:	4645      	mov	r5, r8
 8017372:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017376:	b10b      	cbz	r3, 801737c <_vfiprintf_r+0x50>
 8017378:	2b25      	cmp	r3, #37	; 0x25
 801737a:	d154      	bne.n	8017426 <_vfiprintf_r+0xfa>
 801737c:	ebb8 0a07 	subs.w	sl, r8, r7
 8017380:	d00b      	beq.n	801739a <_vfiprintf_r+0x6e>
 8017382:	4653      	mov	r3, sl
 8017384:	463a      	mov	r2, r7
 8017386:	4621      	mov	r1, r4
 8017388:	4630      	mov	r0, r6
 801738a:	f7ff ffbc 	bl	8017306 <__sfputs_r>
 801738e:	3001      	adds	r0, #1
 8017390:	f000 80c2 	beq.w	8017518 <_vfiprintf_r+0x1ec>
 8017394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017396:	4453      	add	r3, sl
 8017398:	9309      	str	r3, [sp, #36]	; 0x24
 801739a:	f898 3000 	ldrb.w	r3, [r8]
 801739e:	2b00      	cmp	r3, #0
 80173a0:	f000 80ba 	beq.w	8017518 <_vfiprintf_r+0x1ec>
 80173a4:	2300      	movs	r3, #0
 80173a6:	f04f 32ff 	mov.w	r2, #4294967295
 80173aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80173ae:	9304      	str	r3, [sp, #16]
 80173b0:	9307      	str	r3, [sp, #28]
 80173b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80173b6:	931a      	str	r3, [sp, #104]	; 0x68
 80173b8:	46a8      	mov	r8, r5
 80173ba:	2205      	movs	r2, #5
 80173bc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80173c0:	485e      	ldr	r0, [pc, #376]	; (801753c <_vfiprintf_r+0x210>)
 80173c2:	f7e8 ff0d 	bl	80001e0 <memchr>
 80173c6:	9b04      	ldr	r3, [sp, #16]
 80173c8:	bb78      	cbnz	r0, 801742a <_vfiprintf_r+0xfe>
 80173ca:	06d9      	lsls	r1, r3, #27
 80173cc:	bf44      	itt	mi
 80173ce:	2220      	movmi	r2, #32
 80173d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80173d4:	071a      	lsls	r2, r3, #28
 80173d6:	bf44      	itt	mi
 80173d8:	222b      	movmi	r2, #43	; 0x2b
 80173da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80173de:	782a      	ldrb	r2, [r5, #0]
 80173e0:	2a2a      	cmp	r2, #42	; 0x2a
 80173e2:	d02a      	beq.n	801743a <_vfiprintf_r+0x10e>
 80173e4:	9a07      	ldr	r2, [sp, #28]
 80173e6:	46a8      	mov	r8, r5
 80173e8:	2000      	movs	r0, #0
 80173ea:	250a      	movs	r5, #10
 80173ec:	4641      	mov	r1, r8
 80173ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80173f2:	3b30      	subs	r3, #48	; 0x30
 80173f4:	2b09      	cmp	r3, #9
 80173f6:	d969      	bls.n	80174cc <_vfiprintf_r+0x1a0>
 80173f8:	b360      	cbz	r0, 8017454 <_vfiprintf_r+0x128>
 80173fa:	e024      	b.n	8017446 <_vfiprintf_r+0x11a>
 80173fc:	4b50      	ldr	r3, [pc, #320]	; (8017540 <_vfiprintf_r+0x214>)
 80173fe:	429c      	cmp	r4, r3
 8017400:	d101      	bne.n	8017406 <_vfiprintf_r+0xda>
 8017402:	68b4      	ldr	r4, [r6, #8]
 8017404:	e7a2      	b.n	801734c <_vfiprintf_r+0x20>
 8017406:	4b4f      	ldr	r3, [pc, #316]	; (8017544 <_vfiprintf_r+0x218>)
 8017408:	429c      	cmp	r4, r3
 801740a:	bf08      	it	eq
 801740c:	68f4      	ldreq	r4, [r6, #12]
 801740e:	e79d      	b.n	801734c <_vfiprintf_r+0x20>
 8017410:	4621      	mov	r1, r4
 8017412:	4630      	mov	r0, r6
 8017414:	f000 fae0 	bl	80179d8 <__swsetup_r>
 8017418:	2800      	cmp	r0, #0
 801741a:	d09d      	beq.n	8017358 <_vfiprintf_r+0x2c>
 801741c:	f04f 30ff 	mov.w	r0, #4294967295
 8017420:	b01d      	add	sp, #116	; 0x74
 8017422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017426:	46a8      	mov	r8, r5
 8017428:	e7a2      	b.n	8017370 <_vfiprintf_r+0x44>
 801742a:	4a44      	ldr	r2, [pc, #272]	; (801753c <_vfiprintf_r+0x210>)
 801742c:	1a80      	subs	r0, r0, r2
 801742e:	fa0b f000 	lsl.w	r0, fp, r0
 8017432:	4318      	orrs	r0, r3
 8017434:	9004      	str	r0, [sp, #16]
 8017436:	4645      	mov	r5, r8
 8017438:	e7be      	b.n	80173b8 <_vfiprintf_r+0x8c>
 801743a:	9a03      	ldr	r2, [sp, #12]
 801743c:	1d11      	adds	r1, r2, #4
 801743e:	6812      	ldr	r2, [r2, #0]
 8017440:	9103      	str	r1, [sp, #12]
 8017442:	2a00      	cmp	r2, #0
 8017444:	db01      	blt.n	801744a <_vfiprintf_r+0x11e>
 8017446:	9207      	str	r2, [sp, #28]
 8017448:	e004      	b.n	8017454 <_vfiprintf_r+0x128>
 801744a:	4252      	negs	r2, r2
 801744c:	f043 0302 	orr.w	r3, r3, #2
 8017450:	9207      	str	r2, [sp, #28]
 8017452:	9304      	str	r3, [sp, #16]
 8017454:	f898 3000 	ldrb.w	r3, [r8]
 8017458:	2b2e      	cmp	r3, #46	; 0x2e
 801745a:	d10e      	bne.n	801747a <_vfiprintf_r+0x14e>
 801745c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017460:	2b2a      	cmp	r3, #42	; 0x2a
 8017462:	d138      	bne.n	80174d6 <_vfiprintf_r+0x1aa>
 8017464:	9b03      	ldr	r3, [sp, #12]
 8017466:	1d1a      	adds	r2, r3, #4
 8017468:	681b      	ldr	r3, [r3, #0]
 801746a:	9203      	str	r2, [sp, #12]
 801746c:	2b00      	cmp	r3, #0
 801746e:	bfb8      	it	lt
 8017470:	f04f 33ff 	movlt.w	r3, #4294967295
 8017474:	f108 0802 	add.w	r8, r8, #2
 8017478:	9305      	str	r3, [sp, #20]
 801747a:	4d33      	ldr	r5, [pc, #204]	; (8017548 <_vfiprintf_r+0x21c>)
 801747c:	f898 1000 	ldrb.w	r1, [r8]
 8017480:	2203      	movs	r2, #3
 8017482:	4628      	mov	r0, r5
 8017484:	f7e8 feac 	bl	80001e0 <memchr>
 8017488:	b140      	cbz	r0, 801749c <_vfiprintf_r+0x170>
 801748a:	2340      	movs	r3, #64	; 0x40
 801748c:	1b40      	subs	r0, r0, r5
 801748e:	fa03 f000 	lsl.w	r0, r3, r0
 8017492:	9b04      	ldr	r3, [sp, #16]
 8017494:	4303      	orrs	r3, r0
 8017496:	f108 0801 	add.w	r8, r8, #1
 801749a:	9304      	str	r3, [sp, #16]
 801749c:	f898 1000 	ldrb.w	r1, [r8]
 80174a0:	482a      	ldr	r0, [pc, #168]	; (801754c <_vfiprintf_r+0x220>)
 80174a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80174a6:	2206      	movs	r2, #6
 80174a8:	f108 0701 	add.w	r7, r8, #1
 80174ac:	f7e8 fe98 	bl	80001e0 <memchr>
 80174b0:	2800      	cmp	r0, #0
 80174b2:	d037      	beq.n	8017524 <_vfiprintf_r+0x1f8>
 80174b4:	4b26      	ldr	r3, [pc, #152]	; (8017550 <_vfiprintf_r+0x224>)
 80174b6:	bb1b      	cbnz	r3, 8017500 <_vfiprintf_r+0x1d4>
 80174b8:	9b03      	ldr	r3, [sp, #12]
 80174ba:	3307      	adds	r3, #7
 80174bc:	f023 0307 	bic.w	r3, r3, #7
 80174c0:	3308      	adds	r3, #8
 80174c2:	9303      	str	r3, [sp, #12]
 80174c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174c6:	444b      	add	r3, r9
 80174c8:	9309      	str	r3, [sp, #36]	; 0x24
 80174ca:	e750      	b.n	801736e <_vfiprintf_r+0x42>
 80174cc:	fb05 3202 	mla	r2, r5, r2, r3
 80174d0:	2001      	movs	r0, #1
 80174d2:	4688      	mov	r8, r1
 80174d4:	e78a      	b.n	80173ec <_vfiprintf_r+0xc0>
 80174d6:	2300      	movs	r3, #0
 80174d8:	f108 0801 	add.w	r8, r8, #1
 80174dc:	9305      	str	r3, [sp, #20]
 80174de:	4619      	mov	r1, r3
 80174e0:	250a      	movs	r5, #10
 80174e2:	4640      	mov	r0, r8
 80174e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80174e8:	3a30      	subs	r2, #48	; 0x30
 80174ea:	2a09      	cmp	r2, #9
 80174ec:	d903      	bls.n	80174f6 <_vfiprintf_r+0x1ca>
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d0c3      	beq.n	801747a <_vfiprintf_r+0x14e>
 80174f2:	9105      	str	r1, [sp, #20]
 80174f4:	e7c1      	b.n	801747a <_vfiprintf_r+0x14e>
 80174f6:	fb05 2101 	mla	r1, r5, r1, r2
 80174fa:	2301      	movs	r3, #1
 80174fc:	4680      	mov	r8, r0
 80174fe:	e7f0      	b.n	80174e2 <_vfiprintf_r+0x1b6>
 8017500:	ab03      	add	r3, sp, #12
 8017502:	9300      	str	r3, [sp, #0]
 8017504:	4622      	mov	r2, r4
 8017506:	4b13      	ldr	r3, [pc, #76]	; (8017554 <_vfiprintf_r+0x228>)
 8017508:	a904      	add	r1, sp, #16
 801750a:	4630      	mov	r0, r6
 801750c:	f3af 8000 	nop.w
 8017510:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017514:	4681      	mov	r9, r0
 8017516:	d1d5      	bne.n	80174c4 <_vfiprintf_r+0x198>
 8017518:	89a3      	ldrh	r3, [r4, #12]
 801751a:	065b      	lsls	r3, r3, #25
 801751c:	f53f af7e 	bmi.w	801741c <_vfiprintf_r+0xf0>
 8017520:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017522:	e77d      	b.n	8017420 <_vfiprintf_r+0xf4>
 8017524:	ab03      	add	r3, sp, #12
 8017526:	9300      	str	r3, [sp, #0]
 8017528:	4622      	mov	r2, r4
 801752a:	4b0a      	ldr	r3, [pc, #40]	; (8017554 <_vfiprintf_r+0x228>)
 801752c:	a904      	add	r1, sp, #16
 801752e:	4630      	mov	r0, r6
 8017530:	f000 f888 	bl	8017644 <_printf_i>
 8017534:	e7ec      	b.n	8017510 <_vfiprintf_r+0x1e4>
 8017536:	bf00      	nop
 8017538:	0801faec 	.word	0x0801faec
 801753c:	0801fb2c 	.word	0x0801fb2c
 8017540:	0801fb0c 	.word	0x0801fb0c
 8017544:	0801facc 	.word	0x0801facc
 8017548:	0801fb32 	.word	0x0801fb32
 801754c:	0801fb36 	.word	0x0801fb36
 8017550:	00000000 	.word	0x00000000
 8017554:	08017307 	.word	0x08017307

08017558 <_printf_common>:
 8017558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801755c:	4691      	mov	r9, r2
 801755e:	461f      	mov	r7, r3
 8017560:	688a      	ldr	r2, [r1, #8]
 8017562:	690b      	ldr	r3, [r1, #16]
 8017564:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017568:	4293      	cmp	r3, r2
 801756a:	bfb8      	it	lt
 801756c:	4613      	movlt	r3, r2
 801756e:	f8c9 3000 	str.w	r3, [r9]
 8017572:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017576:	4606      	mov	r6, r0
 8017578:	460c      	mov	r4, r1
 801757a:	b112      	cbz	r2, 8017582 <_printf_common+0x2a>
 801757c:	3301      	adds	r3, #1
 801757e:	f8c9 3000 	str.w	r3, [r9]
 8017582:	6823      	ldr	r3, [r4, #0]
 8017584:	0699      	lsls	r1, r3, #26
 8017586:	bf42      	ittt	mi
 8017588:	f8d9 3000 	ldrmi.w	r3, [r9]
 801758c:	3302      	addmi	r3, #2
 801758e:	f8c9 3000 	strmi.w	r3, [r9]
 8017592:	6825      	ldr	r5, [r4, #0]
 8017594:	f015 0506 	ands.w	r5, r5, #6
 8017598:	d107      	bne.n	80175aa <_printf_common+0x52>
 801759a:	f104 0a19 	add.w	sl, r4, #25
 801759e:	68e3      	ldr	r3, [r4, #12]
 80175a0:	f8d9 2000 	ldr.w	r2, [r9]
 80175a4:	1a9b      	subs	r3, r3, r2
 80175a6:	42ab      	cmp	r3, r5
 80175a8:	dc28      	bgt.n	80175fc <_printf_common+0xa4>
 80175aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80175ae:	6822      	ldr	r2, [r4, #0]
 80175b0:	3300      	adds	r3, #0
 80175b2:	bf18      	it	ne
 80175b4:	2301      	movne	r3, #1
 80175b6:	0692      	lsls	r2, r2, #26
 80175b8:	d42d      	bmi.n	8017616 <_printf_common+0xbe>
 80175ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80175be:	4639      	mov	r1, r7
 80175c0:	4630      	mov	r0, r6
 80175c2:	47c0      	blx	r8
 80175c4:	3001      	adds	r0, #1
 80175c6:	d020      	beq.n	801760a <_printf_common+0xb2>
 80175c8:	6823      	ldr	r3, [r4, #0]
 80175ca:	68e5      	ldr	r5, [r4, #12]
 80175cc:	f8d9 2000 	ldr.w	r2, [r9]
 80175d0:	f003 0306 	and.w	r3, r3, #6
 80175d4:	2b04      	cmp	r3, #4
 80175d6:	bf08      	it	eq
 80175d8:	1aad      	subeq	r5, r5, r2
 80175da:	68a3      	ldr	r3, [r4, #8]
 80175dc:	6922      	ldr	r2, [r4, #16]
 80175de:	bf0c      	ite	eq
 80175e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80175e4:	2500      	movne	r5, #0
 80175e6:	4293      	cmp	r3, r2
 80175e8:	bfc4      	itt	gt
 80175ea:	1a9b      	subgt	r3, r3, r2
 80175ec:	18ed      	addgt	r5, r5, r3
 80175ee:	f04f 0900 	mov.w	r9, #0
 80175f2:	341a      	adds	r4, #26
 80175f4:	454d      	cmp	r5, r9
 80175f6:	d11a      	bne.n	801762e <_printf_common+0xd6>
 80175f8:	2000      	movs	r0, #0
 80175fa:	e008      	b.n	801760e <_printf_common+0xb6>
 80175fc:	2301      	movs	r3, #1
 80175fe:	4652      	mov	r2, sl
 8017600:	4639      	mov	r1, r7
 8017602:	4630      	mov	r0, r6
 8017604:	47c0      	blx	r8
 8017606:	3001      	adds	r0, #1
 8017608:	d103      	bne.n	8017612 <_printf_common+0xba>
 801760a:	f04f 30ff 	mov.w	r0, #4294967295
 801760e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017612:	3501      	adds	r5, #1
 8017614:	e7c3      	b.n	801759e <_printf_common+0x46>
 8017616:	18e1      	adds	r1, r4, r3
 8017618:	1c5a      	adds	r2, r3, #1
 801761a:	2030      	movs	r0, #48	; 0x30
 801761c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017620:	4422      	add	r2, r4
 8017622:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017626:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801762a:	3302      	adds	r3, #2
 801762c:	e7c5      	b.n	80175ba <_printf_common+0x62>
 801762e:	2301      	movs	r3, #1
 8017630:	4622      	mov	r2, r4
 8017632:	4639      	mov	r1, r7
 8017634:	4630      	mov	r0, r6
 8017636:	47c0      	blx	r8
 8017638:	3001      	adds	r0, #1
 801763a:	d0e6      	beq.n	801760a <_printf_common+0xb2>
 801763c:	f109 0901 	add.w	r9, r9, #1
 8017640:	e7d8      	b.n	80175f4 <_printf_common+0x9c>
	...

08017644 <_printf_i>:
 8017644:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017648:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801764c:	460c      	mov	r4, r1
 801764e:	7e09      	ldrb	r1, [r1, #24]
 8017650:	b085      	sub	sp, #20
 8017652:	296e      	cmp	r1, #110	; 0x6e
 8017654:	4617      	mov	r7, r2
 8017656:	4606      	mov	r6, r0
 8017658:	4698      	mov	r8, r3
 801765a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801765c:	f000 80b3 	beq.w	80177c6 <_printf_i+0x182>
 8017660:	d822      	bhi.n	80176a8 <_printf_i+0x64>
 8017662:	2963      	cmp	r1, #99	; 0x63
 8017664:	d036      	beq.n	80176d4 <_printf_i+0x90>
 8017666:	d80a      	bhi.n	801767e <_printf_i+0x3a>
 8017668:	2900      	cmp	r1, #0
 801766a:	f000 80b9 	beq.w	80177e0 <_printf_i+0x19c>
 801766e:	2958      	cmp	r1, #88	; 0x58
 8017670:	f000 8083 	beq.w	801777a <_printf_i+0x136>
 8017674:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017678:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801767c:	e032      	b.n	80176e4 <_printf_i+0xa0>
 801767e:	2964      	cmp	r1, #100	; 0x64
 8017680:	d001      	beq.n	8017686 <_printf_i+0x42>
 8017682:	2969      	cmp	r1, #105	; 0x69
 8017684:	d1f6      	bne.n	8017674 <_printf_i+0x30>
 8017686:	6820      	ldr	r0, [r4, #0]
 8017688:	6813      	ldr	r3, [r2, #0]
 801768a:	0605      	lsls	r5, r0, #24
 801768c:	f103 0104 	add.w	r1, r3, #4
 8017690:	d52a      	bpl.n	80176e8 <_printf_i+0xa4>
 8017692:	681b      	ldr	r3, [r3, #0]
 8017694:	6011      	str	r1, [r2, #0]
 8017696:	2b00      	cmp	r3, #0
 8017698:	da03      	bge.n	80176a2 <_printf_i+0x5e>
 801769a:	222d      	movs	r2, #45	; 0x2d
 801769c:	425b      	negs	r3, r3
 801769e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80176a2:	486f      	ldr	r0, [pc, #444]	; (8017860 <_printf_i+0x21c>)
 80176a4:	220a      	movs	r2, #10
 80176a6:	e039      	b.n	801771c <_printf_i+0xd8>
 80176a8:	2973      	cmp	r1, #115	; 0x73
 80176aa:	f000 809d 	beq.w	80177e8 <_printf_i+0x1a4>
 80176ae:	d808      	bhi.n	80176c2 <_printf_i+0x7e>
 80176b0:	296f      	cmp	r1, #111	; 0x6f
 80176b2:	d020      	beq.n	80176f6 <_printf_i+0xb2>
 80176b4:	2970      	cmp	r1, #112	; 0x70
 80176b6:	d1dd      	bne.n	8017674 <_printf_i+0x30>
 80176b8:	6823      	ldr	r3, [r4, #0]
 80176ba:	f043 0320 	orr.w	r3, r3, #32
 80176be:	6023      	str	r3, [r4, #0]
 80176c0:	e003      	b.n	80176ca <_printf_i+0x86>
 80176c2:	2975      	cmp	r1, #117	; 0x75
 80176c4:	d017      	beq.n	80176f6 <_printf_i+0xb2>
 80176c6:	2978      	cmp	r1, #120	; 0x78
 80176c8:	d1d4      	bne.n	8017674 <_printf_i+0x30>
 80176ca:	2378      	movs	r3, #120	; 0x78
 80176cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80176d0:	4864      	ldr	r0, [pc, #400]	; (8017864 <_printf_i+0x220>)
 80176d2:	e055      	b.n	8017780 <_printf_i+0x13c>
 80176d4:	6813      	ldr	r3, [r2, #0]
 80176d6:	1d19      	adds	r1, r3, #4
 80176d8:	681b      	ldr	r3, [r3, #0]
 80176da:	6011      	str	r1, [r2, #0]
 80176dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80176e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80176e4:	2301      	movs	r3, #1
 80176e6:	e08c      	b.n	8017802 <_printf_i+0x1be>
 80176e8:	681b      	ldr	r3, [r3, #0]
 80176ea:	6011      	str	r1, [r2, #0]
 80176ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 80176f0:	bf18      	it	ne
 80176f2:	b21b      	sxthne	r3, r3
 80176f4:	e7cf      	b.n	8017696 <_printf_i+0x52>
 80176f6:	6813      	ldr	r3, [r2, #0]
 80176f8:	6825      	ldr	r5, [r4, #0]
 80176fa:	1d18      	adds	r0, r3, #4
 80176fc:	6010      	str	r0, [r2, #0]
 80176fe:	0628      	lsls	r0, r5, #24
 8017700:	d501      	bpl.n	8017706 <_printf_i+0xc2>
 8017702:	681b      	ldr	r3, [r3, #0]
 8017704:	e002      	b.n	801770c <_printf_i+0xc8>
 8017706:	0668      	lsls	r0, r5, #25
 8017708:	d5fb      	bpl.n	8017702 <_printf_i+0xbe>
 801770a:	881b      	ldrh	r3, [r3, #0]
 801770c:	4854      	ldr	r0, [pc, #336]	; (8017860 <_printf_i+0x21c>)
 801770e:	296f      	cmp	r1, #111	; 0x6f
 8017710:	bf14      	ite	ne
 8017712:	220a      	movne	r2, #10
 8017714:	2208      	moveq	r2, #8
 8017716:	2100      	movs	r1, #0
 8017718:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801771c:	6865      	ldr	r5, [r4, #4]
 801771e:	60a5      	str	r5, [r4, #8]
 8017720:	2d00      	cmp	r5, #0
 8017722:	f2c0 8095 	blt.w	8017850 <_printf_i+0x20c>
 8017726:	6821      	ldr	r1, [r4, #0]
 8017728:	f021 0104 	bic.w	r1, r1, #4
 801772c:	6021      	str	r1, [r4, #0]
 801772e:	2b00      	cmp	r3, #0
 8017730:	d13d      	bne.n	80177ae <_printf_i+0x16a>
 8017732:	2d00      	cmp	r5, #0
 8017734:	f040 808e 	bne.w	8017854 <_printf_i+0x210>
 8017738:	4665      	mov	r5, ip
 801773a:	2a08      	cmp	r2, #8
 801773c:	d10b      	bne.n	8017756 <_printf_i+0x112>
 801773e:	6823      	ldr	r3, [r4, #0]
 8017740:	07db      	lsls	r3, r3, #31
 8017742:	d508      	bpl.n	8017756 <_printf_i+0x112>
 8017744:	6923      	ldr	r3, [r4, #16]
 8017746:	6862      	ldr	r2, [r4, #4]
 8017748:	429a      	cmp	r2, r3
 801774a:	bfde      	ittt	le
 801774c:	2330      	movle	r3, #48	; 0x30
 801774e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017752:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017756:	ebac 0305 	sub.w	r3, ip, r5
 801775a:	6123      	str	r3, [r4, #16]
 801775c:	f8cd 8000 	str.w	r8, [sp]
 8017760:	463b      	mov	r3, r7
 8017762:	aa03      	add	r2, sp, #12
 8017764:	4621      	mov	r1, r4
 8017766:	4630      	mov	r0, r6
 8017768:	f7ff fef6 	bl	8017558 <_printf_common>
 801776c:	3001      	adds	r0, #1
 801776e:	d14d      	bne.n	801780c <_printf_i+0x1c8>
 8017770:	f04f 30ff 	mov.w	r0, #4294967295
 8017774:	b005      	add	sp, #20
 8017776:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801777a:	4839      	ldr	r0, [pc, #228]	; (8017860 <_printf_i+0x21c>)
 801777c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8017780:	6813      	ldr	r3, [r2, #0]
 8017782:	6821      	ldr	r1, [r4, #0]
 8017784:	1d1d      	adds	r5, r3, #4
 8017786:	681b      	ldr	r3, [r3, #0]
 8017788:	6015      	str	r5, [r2, #0]
 801778a:	060a      	lsls	r2, r1, #24
 801778c:	d50b      	bpl.n	80177a6 <_printf_i+0x162>
 801778e:	07ca      	lsls	r2, r1, #31
 8017790:	bf44      	itt	mi
 8017792:	f041 0120 	orrmi.w	r1, r1, #32
 8017796:	6021      	strmi	r1, [r4, #0]
 8017798:	b91b      	cbnz	r3, 80177a2 <_printf_i+0x15e>
 801779a:	6822      	ldr	r2, [r4, #0]
 801779c:	f022 0220 	bic.w	r2, r2, #32
 80177a0:	6022      	str	r2, [r4, #0]
 80177a2:	2210      	movs	r2, #16
 80177a4:	e7b7      	b.n	8017716 <_printf_i+0xd2>
 80177a6:	064d      	lsls	r5, r1, #25
 80177a8:	bf48      	it	mi
 80177aa:	b29b      	uxthmi	r3, r3
 80177ac:	e7ef      	b.n	801778e <_printf_i+0x14a>
 80177ae:	4665      	mov	r5, ip
 80177b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80177b4:	fb02 3311 	mls	r3, r2, r1, r3
 80177b8:	5cc3      	ldrb	r3, [r0, r3]
 80177ba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80177be:	460b      	mov	r3, r1
 80177c0:	2900      	cmp	r1, #0
 80177c2:	d1f5      	bne.n	80177b0 <_printf_i+0x16c>
 80177c4:	e7b9      	b.n	801773a <_printf_i+0xf6>
 80177c6:	6813      	ldr	r3, [r2, #0]
 80177c8:	6825      	ldr	r5, [r4, #0]
 80177ca:	6961      	ldr	r1, [r4, #20]
 80177cc:	1d18      	adds	r0, r3, #4
 80177ce:	6010      	str	r0, [r2, #0]
 80177d0:	0628      	lsls	r0, r5, #24
 80177d2:	681b      	ldr	r3, [r3, #0]
 80177d4:	d501      	bpl.n	80177da <_printf_i+0x196>
 80177d6:	6019      	str	r1, [r3, #0]
 80177d8:	e002      	b.n	80177e0 <_printf_i+0x19c>
 80177da:	066a      	lsls	r2, r5, #25
 80177dc:	d5fb      	bpl.n	80177d6 <_printf_i+0x192>
 80177de:	8019      	strh	r1, [r3, #0]
 80177e0:	2300      	movs	r3, #0
 80177e2:	6123      	str	r3, [r4, #16]
 80177e4:	4665      	mov	r5, ip
 80177e6:	e7b9      	b.n	801775c <_printf_i+0x118>
 80177e8:	6813      	ldr	r3, [r2, #0]
 80177ea:	1d19      	adds	r1, r3, #4
 80177ec:	6011      	str	r1, [r2, #0]
 80177ee:	681d      	ldr	r5, [r3, #0]
 80177f0:	6862      	ldr	r2, [r4, #4]
 80177f2:	2100      	movs	r1, #0
 80177f4:	4628      	mov	r0, r5
 80177f6:	f7e8 fcf3 	bl	80001e0 <memchr>
 80177fa:	b108      	cbz	r0, 8017800 <_printf_i+0x1bc>
 80177fc:	1b40      	subs	r0, r0, r5
 80177fe:	6060      	str	r0, [r4, #4]
 8017800:	6863      	ldr	r3, [r4, #4]
 8017802:	6123      	str	r3, [r4, #16]
 8017804:	2300      	movs	r3, #0
 8017806:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801780a:	e7a7      	b.n	801775c <_printf_i+0x118>
 801780c:	6923      	ldr	r3, [r4, #16]
 801780e:	462a      	mov	r2, r5
 8017810:	4639      	mov	r1, r7
 8017812:	4630      	mov	r0, r6
 8017814:	47c0      	blx	r8
 8017816:	3001      	adds	r0, #1
 8017818:	d0aa      	beq.n	8017770 <_printf_i+0x12c>
 801781a:	6823      	ldr	r3, [r4, #0]
 801781c:	079b      	lsls	r3, r3, #30
 801781e:	d413      	bmi.n	8017848 <_printf_i+0x204>
 8017820:	68e0      	ldr	r0, [r4, #12]
 8017822:	9b03      	ldr	r3, [sp, #12]
 8017824:	4298      	cmp	r0, r3
 8017826:	bfb8      	it	lt
 8017828:	4618      	movlt	r0, r3
 801782a:	e7a3      	b.n	8017774 <_printf_i+0x130>
 801782c:	2301      	movs	r3, #1
 801782e:	464a      	mov	r2, r9
 8017830:	4639      	mov	r1, r7
 8017832:	4630      	mov	r0, r6
 8017834:	47c0      	blx	r8
 8017836:	3001      	adds	r0, #1
 8017838:	d09a      	beq.n	8017770 <_printf_i+0x12c>
 801783a:	3501      	adds	r5, #1
 801783c:	68e3      	ldr	r3, [r4, #12]
 801783e:	9a03      	ldr	r2, [sp, #12]
 8017840:	1a9b      	subs	r3, r3, r2
 8017842:	42ab      	cmp	r3, r5
 8017844:	dcf2      	bgt.n	801782c <_printf_i+0x1e8>
 8017846:	e7eb      	b.n	8017820 <_printf_i+0x1dc>
 8017848:	2500      	movs	r5, #0
 801784a:	f104 0919 	add.w	r9, r4, #25
 801784e:	e7f5      	b.n	801783c <_printf_i+0x1f8>
 8017850:	2b00      	cmp	r3, #0
 8017852:	d1ac      	bne.n	80177ae <_printf_i+0x16a>
 8017854:	7803      	ldrb	r3, [r0, #0]
 8017856:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801785a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801785e:	e76c      	b.n	801773a <_printf_i+0xf6>
 8017860:	0801fb3d 	.word	0x0801fb3d
 8017864:	0801fb4e 	.word	0x0801fb4e

08017868 <_sbrk_r>:
 8017868:	b538      	push	{r3, r4, r5, lr}
 801786a:	4c06      	ldr	r4, [pc, #24]	; (8017884 <_sbrk_r+0x1c>)
 801786c:	2300      	movs	r3, #0
 801786e:	4605      	mov	r5, r0
 8017870:	4608      	mov	r0, r1
 8017872:	6023      	str	r3, [r4, #0]
 8017874:	f7ea fb6e 	bl	8001f54 <_sbrk>
 8017878:	1c43      	adds	r3, r0, #1
 801787a:	d102      	bne.n	8017882 <_sbrk_r+0x1a>
 801787c:	6823      	ldr	r3, [r4, #0]
 801787e:	b103      	cbz	r3, 8017882 <_sbrk_r+0x1a>
 8017880:	602b      	str	r3, [r5, #0]
 8017882:	bd38      	pop	{r3, r4, r5, pc}
 8017884:	20010ebc 	.word	0x20010ebc

08017888 <__sread>:
 8017888:	b510      	push	{r4, lr}
 801788a:	460c      	mov	r4, r1
 801788c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017890:	f000 fa48 	bl	8017d24 <_read_r>
 8017894:	2800      	cmp	r0, #0
 8017896:	bfab      	itete	ge
 8017898:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801789a:	89a3      	ldrhlt	r3, [r4, #12]
 801789c:	181b      	addge	r3, r3, r0
 801789e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80178a2:	bfac      	ite	ge
 80178a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80178a6:	81a3      	strhlt	r3, [r4, #12]
 80178a8:	bd10      	pop	{r4, pc}

080178aa <__swrite>:
 80178aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178ae:	461f      	mov	r7, r3
 80178b0:	898b      	ldrh	r3, [r1, #12]
 80178b2:	05db      	lsls	r3, r3, #23
 80178b4:	4605      	mov	r5, r0
 80178b6:	460c      	mov	r4, r1
 80178b8:	4616      	mov	r6, r2
 80178ba:	d505      	bpl.n	80178c8 <__swrite+0x1e>
 80178bc:	2302      	movs	r3, #2
 80178be:	2200      	movs	r2, #0
 80178c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80178c4:	f000 f9b6 	bl	8017c34 <_lseek_r>
 80178c8:	89a3      	ldrh	r3, [r4, #12]
 80178ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80178ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80178d2:	81a3      	strh	r3, [r4, #12]
 80178d4:	4632      	mov	r2, r6
 80178d6:	463b      	mov	r3, r7
 80178d8:	4628      	mov	r0, r5
 80178da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80178de:	f000 b869 	b.w	80179b4 <_write_r>

080178e2 <__sseek>:
 80178e2:	b510      	push	{r4, lr}
 80178e4:	460c      	mov	r4, r1
 80178e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80178ea:	f000 f9a3 	bl	8017c34 <_lseek_r>
 80178ee:	1c43      	adds	r3, r0, #1
 80178f0:	89a3      	ldrh	r3, [r4, #12]
 80178f2:	bf15      	itete	ne
 80178f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80178f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80178fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80178fe:	81a3      	strheq	r3, [r4, #12]
 8017900:	bf18      	it	ne
 8017902:	81a3      	strhne	r3, [r4, #12]
 8017904:	bd10      	pop	{r4, pc}

08017906 <__sclose>:
 8017906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801790a:	f000 b8d3 	b.w	8017ab4 <_close_r>
	...

08017910 <__swbuf_r>:
 8017910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017912:	460e      	mov	r6, r1
 8017914:	4614      	mov	r4, r2
 8017916:	4605      	mov	r5, r0
 8017918:	b118      	cbz	r0, 8017922 <__swbuf_r+0x12>
 801791a:	6983      	ldr	r3, [r0, #24]
 801791c:	b90b      	cbnz	r3, 8017922 <__swbuf_r+0x12>
 801791e:	f7ff fba1 	bl	8017064 <__sinit>
 8017922:	4b21      	ldr	r3, [pc, #132]	; (80179a8 <__swbuf_r+0x98>)
 8017924:	429c      	cmp	r4, r3
 8017926:	d12a      	bne.n	801797e <__swbuf_r+0x6e>
 8017928:	686c      	ldr	r4, [r5, #4]
 801792a:	69a3      	ldr	r3, [r4, #24]
 801792c:	60a3      	str	r3, [r4, #8]
 801792e:	89a3      	ldrh	r3, [r4, #12]
 8017930:	071a      	lsls	r2, r3, #28
 8017932:	d52e      	bpl.n	8017992 <__swbuf_r+0x82>
 8017934:	6923      	ldr	r3, [r4, #16]
 8017936:	b363      	cbz	r3, 8017992 <__swbuf_r+0x82>
 8017938:	6923      	ldr	r3, [r4, #16]
 801793a:	6820      	ldr	r0, [r4, #0]
 801793c:	1ac0      	subs	r0, r0, r3
 801793e:	6963      	ldr	r3, [r4, #20]
 8017940:	b2f6      	uxtb	r6, r6
 8017942:	4283      	cmp	r3, r0
 8017944:	4637      	mov	r7, r6
 8017946:	dc04      	bgt.n	8017952 <__swbuf_r+0x42>
 8017948:	4621      	mov	r1, r4
 801794a:	4628      	mov	r0, r5
 801794c:	f000 f948 	bl	8017be0 <_fflush_r>
 8017950:	bb28      	cbnz	r0, 801799e <__swbuf_r+0x8e>
 8017952:	68a3      	ldr	r3, [r4, #8]
 8017954:	3b01      	subs	r3, #1
 8017956:	60a3      	str	r3, [r4, #8]
 8017958:	6823      	ldr	r3, [r4, #0]
 801795a:	1c5a      	adds	r2, r3, #1
 801795c:	6022      	str	r2, [r4, #0]
 801795e:	701e      	strb	r6, [r3, #0]
 8017960:	6963      	ldr	r3, [r4, #20]
 8017962:	3001      	adds	r0, #1
 8017964:	4283      	cmp	r3, r0
 8017966:	d004      	beq.n	8017972 <__swbuf_r+0x62>
 8017968:	89a3      	ldrh	r3, [r4, #12]
 801796a:	07db      	lsls	r3, r3, #31
 801796c:	d519      	bpl.n	80179a2 <__swbuf_r+0x92>
 801796e:	2e0a      	cmp	r6, #10
 8017970:	d117      	bne.n	80179a2 <__swbuf_r+0x92>
 8017972:	4621      	mov	r1, r4
 8017974:	4628      	mov	r0, r5
 8017976:	f000 f933 	bl	8017be0 <_fflush_r>
 801797a:	b190      	cbz	r0, 80179a2 <__swbuf_r+0x92>
 801797c:	e00f      	b.n	801799e <__swbuf_r+0x8e>
 801797e:	4b0b      	ldr	r3, [pc, #44]	; (80179ac <__swbuf_r+0x9c>)
 8017980:	429c      	cmp	r4, r3
 8017982:	d101      	bne.n	8017988 <__swbuf_r+0x78>
 8017984:	68ac      	ldr	r4, [r5, #8]
 8017986:	e7d0      	b.n	801792a <__swbuf_r+0x1a>
 8017988:	4b09      	ldr	r3, [pc, #36]	; (80179b0 <__swbuf_r+0xa0>)
 801798a:	429c      	cmp	r4, r3
 801798c:	bf08      	it	eq
 801798e:	68ec      	ldreq	r4, [r5, #12]
 8017990:	e7cb      	b.n	801792a <__swbuf_r+0x1a>
 8017992:	4621      	mov	r1, r4
 8017994:	4628      	mov	r0, r5
 8017996:	f000 f81f 	bl	80179d8 <__swsetup_r>
 801799a:	2800      	cmp	r0, #0
 801799c:	d0cc      	beq.n	8017938 <__swbuf_r+0x28>
 801799e:	f04f 37ff 	mov.w	r7, #4294967295
 80179a2:	4638      	mov	r0, r7
 80179a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80179a6:	bf00      	nop
 80179a8:	0801faec 	.word	0x0801faec
 80179ac:	0801fb0c 	.word	0x0801fb0c
 80179b0:	0801facc 	.word	0x0801facc

080179b4 <_write_r>:
 80179b4:	b538      	push	{r3, r4, r5, lr}
 80179b6:	4c07      	ldr	r4, [pc, #28]	; (80179d4 <_write_r+0x20>)
 80179b8:	4605      	mov	r5, r0
 80179ba:	4608      	mov	r0, r1
 80179bc:	4611      	mov	r1, r2
 80179be:	2200      	movs	r2, #0
 80179c0:	6022      	str	r2, [r4, #0]
 80179c2:	461a      	mov	r2, r3
 80179c4:	f7ea fa75 	bl	8001eb2 <_write>
 80179c8:	1c43      	adds	r3, r0, #1
 80179ca:	d102      	bne.n	80179d2 <_write_r+0x1e>
 80179cc:	6823      	ldr	r3, [r4, #0]
 80179ce:	b103      	cbz	r3, 80179d2 <_write_r+0x1e>
 80179d0:	602b      	str	r3, [r5, #0]
 80179d2:	bd38      	pop	{r3, r4, r5, pc}
 80179d4:	20010ebc 	.word	0x20010ebc

080179d8 <__swsetup_r>:
 80179d8:	4b32      	ldr	r3, [pc, #200]	; (8017aa4 <__swsetup_r+0xcc>)
 80179da:	b570      	push	{r4, r5, r6, lr}
 80179dc:	681d      	ldr	r5, [r3, #0]
 80179de:	4606      	mov	r6, r0
 80179e0:	460c      	mov	r4, r1
 80179e2:	b125      	cbz	r5, 80179ee <__swsetup_r+0x16>
 80179e4:	69ab      	ldr	r3, [r5, #24]
 80179e6:	b913      	cbnz	r3, 80179ee <__swsetup_r+0x16>
 80179e8:	4628      	mov	r0, r5
 80179ea:	f7ff fb3b 	bl	8017064 <__sinit>
 80179ee:	4b2e      	ldr	r3, [pc, #184]	; (8017aa8 <__swsetup_r+0xd0>)
 80179f0:	429c      	cmp	r4, r3
 80179f2:	d10f      	bne.n	8017a14 <__swsetup_r+0x3c>
 80179f4:	686c      	ldr	r4, [r5, #4]
 80179f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80179fa:	b29a      	uxth	r2, r3
 80179fc:	0715      	lsls	r5, r2, #28
 80179fe:	d42c      	bmi.n	8017a5a <__swsetup_r+0x82>
 8017a00:	06d0      	lsls	r0, r2, #27
 8017a02:	d411      	bmi.n	8017a28 <__swsetup_r+0x50>
 8017a04:	2209      	movs	r2, #9
 8017a06:	6032      	str	r2, [r6, #0]
 8017a08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017a0c:	81a3      	strh	r3, [r4, #12]
 8017a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8017a12:	e03e      	b.n	8017a92 <__swsetup_r+0xba>
 8017a14:	4b25      	ldr	r3, [pc, #148]	; (8017aac <__swsetup_r+0xd4>)
 8017a16:	429c      	cmp	r4, r3
 8017a18:	d101      	bne.n	8017a1e <__swsetup_r+0x46>
 8017a1a:	68ac      	ldr	r4, [r5, #8]
 8017a1c:	e7eb      	b.n	80179f6 <__swsetup_r+0x1e>
 8017a1e:	4b24      	ldr	r3, [pc, #144]	; (8017ab0 <__swsetup_r+0xd8>)
 8017a20:	429c      	cmp	r4, r3
 8017a22:	bf08      	it	eq
 8017a24:	68ec      	ldreq	r4, [r5, #12]
 8017a26:	e7e6      	b.n	80179f6 <__swsetup_r+0x1e>
 8017a28:	0751      	lsls	r1, r2, #29
 8017a2a:	d512      	bpl.n	8017a52 <__swsetup_r+0x7a>
 8017a2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017a2e:	b141      	cbz	r1, 8017a42 <__swsetup_r+0x6a>
 8017a30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017a34:	4299      	cmp	r1, r3
 8017a36:	d002      	beq.n	8017a3e <__swsetup_r+0x66>
 8017a38:	4630      	mov	r0, r6
 8017a3a:	f7ff fba5 	bl	8017188 <_free_r>
 8017a3e:	2300      	movs	r3, #0
 8017a40:	6363      	str	r3, [r4, #52]	; 0x34
 8017a42:	89a3      	ldrh	r3, [r4, #12]
 8017a44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017a48:	81a3      	strh	r3, [r4, #12]
 8017a4a:	2300      	movs	r3, #0
 8017a4c:	6063      	str	r3, [r4, #4]
 8017a4e:	6923      	ldr	r3, [r4, #16]
 8017a50:	6023      	str	r3, [r4, #0]
 8017a52:	89a3      	ldrh	r3, [r4, #12]
 8017a54:	f043 0308 	orr.w	r3, r3, #8
 8017a58:	81a3      	strh	r3, [r4, #12]
 8017a5a:	6923      	ldr	r3, [r4, #16]
 8017a5c:	b94b      	cbnz	r3, 8017a72 <__swsetup_r+0x9a>
 8017a5e:	89a3      	ldrh	r3, [r4, #12]
 8017a60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017a64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017a68:	d003      	beq.n	8017a72 <__swsetup_r+0x9a>
 8017a6a:	4621      	mov	r1, r4
 8017a6c:	4630      	mov	r0, r6
 8017a6e:	f000 f917 	bl	8017ca0 <__smakebuf_r>
 8017a72:	89a2      	ldrh	r2, [r4, #12]
 8017a74:	f012 0301 	ands.w	r3, r2, #1
 8017a78:	d00c      	beq.n	8017a94 <__swsetup_r+0xbc>
 8017a7a:	2300      	movs	r3, #0
 8017a7c:	60a3      	str	r3, [r4, #8]
 8017a7e:	6963      	ldr	r3, [r4, #20]
 8017a80:	425b      	negs	r3, r3
 8017a82:	61a3      	str	r3, [r4, #24]
 8017a84:	6923      	ldr	r3, [r4, #16]
 8017a86:	b953      	cbnz	r3, 8017a9e <__swsetup_r+0xc6>
 8017a88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017a8c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8017a90:	d1ba      	bne.n	8017a08 <__swsetup_r+0x30>
 8017a92:	bd70      	pop	{r4, r5, r6, pc}
 8017a94:	0792      	lsls	r2, r2, #30
 8017a96:	bf58      	it	pl
 8017a98:	6963      	ldrpl	r3, [r4, #20]
 8017a9a:	60a3      	str	r3, [r4, #8]
 8017a9c:	e7f2      	b.n	8017a84 <__swsetup_r+0xac>
 8017a9e:	2000      	movs	r0, #0
 8017aa0:	e7f7      	b.n	8017a92 <__swsetup_r+0xba>
 8017aa2:	bf00      	nop
 8017aa4:	20000040 	.word	0x20000040
 8017aa8:	0801faec 	.word	0x0801faec
 8017aac:	0801fb0c 	.word	0x0801fb0c
 8017ab0:	0801facc 	.word	0x0801facc

08017ab4 <_close_r>:
 8017ab4:	b538      	push	{r3, r4, r5, lr}
 8017ab6:	4c06      	ldr	r4, [pc, #24]	; (8017ad0 <_close_r+0x1c>)
 8017ab8:	2300      	movs	r3, #0
 8017aba:	4605      	mov	r5, r0
 8017abc:	4608      	mov	r0, r1
 8017abe:	6023      	str	r3, [r4, #0]
 8017ac0:	f7ea fa13 	bl	8001eea <_close>
 8017ac4:	1c43      	adds	r3, r0, #1
 8017ac6:	d102      	bne.n	8017ace <_close_r+0x1a>
 8017ac8:	6823      	ldr	r3, [r4, #0]
 8017aca:	b103      	cbz	r3, 8017ace <_close_r+0x1a>
 8017acc:	602b      	str	r3, [r5, #0]
 8017ace:	bd38      	pop	{r3, r4, r5, pc}
 8017ad0:	20010ebc 	.word	0x20010ebc

08017ad4 <__sflush_r>:
 8017ad4:	898a      	ldrh	r2, [r1, #12]
 8017ad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ada:	4605      	mov	r5, r0
 8017adc:	0710      	lsls	r0, r2, #28
 8017ade:	460c      	mov	r4, r1
 8017ae0:	d458      	bmi.n	8017b94 <__sflush_r+0xc0>
 8017ae2:	684b      	ldr	r3, [r1, #4]
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	dc05      	bgt.n	8017af4 <__sflush_r+0x20>
 8017ae8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	dc02      	bgt.n	8017af4 <__sflush_r+0x20>
 8017aee:	2000      	movs	r0, #0
 8017af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017af4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017af6:	2e00      	cmp	r6, #0
 8017af8:	d0f9      	beq.n	8017aee <__sflush_r+0x1a>
 8017afa:	2300      	movs	r3, #0
 8017afc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017b00:	682f      	ldr	r7, [r5, #0]
 8017b02:	6a21      	ldr	r1, [r4, #32]
 8017b04:	602b      	str	r3, [r5, #0]
 8017b06:	d032      	beq.n	8017b6e <__sflush_r+0x9a>
 8017b08:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017b0a:	89a3      	ldrh	r3, [r4, #12]
 8017b0c:	075a      	lsls	r2, r3, #29
 8017b0e:	d505      	bpl.n	8017b1c <__sflush_r+0x48>
 8017b10:	6863      	ldr	r3, [r4, #4]
 8017b12:	1ac0      	subs	r0, r0, r3
 8017b14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017b16:	b10b      	cbz	r3, 8017b1c <__sflush_r+0x48>
 8017b18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017b1a:	1ac0      	subs	r0, r0, r3
 8017b1c:	2300      	movs	r3, #0
 8017b1e:	4602      	mov	r2, r0
 8017b20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017b22:	6a21      	ldr	r1, [r4, #32]
 8017b24:	4628      	mov	r0, r5
 8017b26:	47b0      	blx	r6
 8017b28:	1c43      	adds	r3, r0, #1
 8017b2a:	89a3      	ldrh	r3, [r4, #12]
 8017b2c:	d106      	bne.n	8017b3c <__sflush_r+0x68>
 8017b2e:	6829      	ldr	r1, [r5, #0]
 8017b30:	291d      	cmp	r1, #29
 8017b32:	d848      	bhi.n	8017bc6 <__sflush_r+0xf2>
 8017b34:	4a29      	ldr	r2, [pc, #164]	; (8017bdc <__sflush_r+0x108>)
 8017b36:	40ca      	lsrs	r2, r1
 8017b38:	07d6      	lsls	r6, r2, #31
 8017b3a:	d544      	bpl.n	8017bc6 <__sflush_r+0xf2>
 8017b3c:	2200      	movs	r2, #0
 8017b3e:	6062      	str	r2, [r4, #4]
 8017b40:	04d9      	lsls	r1, r3, #19
 8017b42:	6922      	ldr	r2, [r4, #16]
 8017b44:	6022      	str	r2, [r4, #0]
 8017b46:	d504      	bpl.n	8017b52 <__sflush_r+0x7e>
 8017b48:	1c42      	adds	r2, r0, #1
 8017b4a:	d101      	bne.n	8017b50 <__sflush_r+0x7c>
 8017b4c:	682b      	ldr	r3, [r5, #0]
 8017b4e:	b903      	cbnz	r3, 8017b52 <__sflush_r+0x7e>
 8017b50:	6560      	str	r0, [r4, #84]	; 0x54
 8017b52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017b54:	602f      	str	r7, [r5, #0]
 8017b56:	2900      	cmp	r1, #0
 8017b58:	d0c9      	beq.n	8017aee <__sflush_r+0x1a>
 8017b5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017b5e:	4299      	cmp	r1, r3
 8017b60:	d002      	beq.n	8017b68 <__sflush_r+0x94>
 8017b62:	4628      	mov	r0, r5
 8017b64:	f7ff fb10 	bl	8017188 <_free_r>
 8017b68:	2000      	movs	r0, #0
 8017b6a:	6360      	str	r0, [r4, #52]	; 0x34
 8017b6c:	e7c0      	b.n	8017af0 <__sflush_r+0x1c>
 8017b6e:	2301      	movs	r3, #1
 8017b70:	4628      	mov	r0, r5
 8017b72:	47b0      	blx	r6
 8017b74:	1c41      	adds	r1, r0, #1
 8017b76:	d1c8      	bne.n	8017b0a <__sflush_r+0x36>
 8017b78:	682b      	ldr	r3, [r5, #0]
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	d0c5      	beq.n	8017b0a <__sflush_r+0x36>
 8017b7e:	2b1d      	cmp	r3, #29
 8017b80:	d001      	beq.n	8017b86 <__sflush_r+0xb2>
 8017b82:	2b16      	cmp	r3, #22
 8017b84:	d101      	bne.n	8017b8a <__sflush_r+0xb6>
 8017b86:	602f      	str	r7, [r5, #0]
 8017b88:	e7b1      	b.n	8017aee <__sflush_r+0x1a>
 8017b8a:	89a3      	ldrh	r3, [r4, #12]
 8017b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017b90:	81a3      	strh	r3, [r4, #12]
 8017b92:	e7ad      	b.n	8017af0 <__sflush_r+0x1c>
 8017b94:	690f      	ldr	r7, [r1, #16]
 8017b96:	2f00      	cmp	r7, #0
 8017b98:	d0a9      	beq.n	8017aee <__sflush_r+0x1a>
 8017b9a:	0793      	lsls	r3, r2, #30
 8017b9c:	680e      	ldr	r6, [r1, #0]
 8017b9e:	bf08      	it	eq
 8017ba0:	694b      	ldreq	r3, [r1, #20]
 8017ba2:	600f      	str	r7, [r1, #0]
 8017ba4:	bf18      	it	ne
 8017ba6:	2300      	movne	r3, #0
 8017ba8:	eba6 0807 	sub.w	r8, r6, r7
 8017bac:	608b      	str	r3, [r1, #8]
 8017bae:	f1b8 0f00 	cmp.w	r8, #0
 8017bb2:	dd9c      	ble.n	8017aee <__sflush_r+0x1a>
 8017bb4:	4643      	mov	r3, r8
 8017bb6:	463a      	mov	r2, r7
 8017bb8:	6a21      	ldr	r1, [r4, #32]
 8017bba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017bbc:	4628      	mov	r0, r5
 8017bbe:	47b0      	blx	r6
 8017bc0:	2800      	cmp	r0, #0
 8017bc2:	dc06      	bgt.n	8017bd2 <__sflush_r+0xfe>
 8017bc4:	89a3      	ldrh	r3, [r4, #12]
 8017bc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017bca:	81a3      	strh	r3, [r4, #12]
 8017bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8017bd0:	e78e      	b.n	8017af0 <__sflush_r+0x1c>
 8017bd2:	4407      	add	r7, r0
 8017bd4:	eba8 0800 	sub.w	r8, r8, r0
 8017bd8:	e7e9      	b.n	8017bae <__sflush_r+0xda>
 8017bda:	bf00      	nop
 8017bdc:	20400001 	.word	0x20400001

08017be0 <_fflush_r>:
 8017be0:	b538      	push	{r3, r4, r5, lr}
 8017be2:	690b      	ldr	r3, [r1, #16]
 8017be4:	4605      	mov	r5, r0
 8017be6:	460c      	mov	r4, r1
 8017be8:	b1db      	cbz	r3, 8017c22 <_fflush_r+0x42>
 8017bea:	b118      	cbz	r0, 8017bf4 <_fflush_r+0x14>
 8017bec:	6983      	ldr	r3, [r0, #24]
 8017bee:	b90b      	cbnz	r3, 8017bf4 <_fflush_r+0x14>
 8017bf0:	f7ff fa38 	bl	8017064 <__sinit>
 8017bf4:	4b0c      	ldr	r3, [pc, #48]	; (8017c28 <_fflush_r+0x48>)
 8017bf6:	429c      	cmp	r4, r3
 8017bf8:	d109      	bne.n	8017c0e <_fflush_r+0x2e>
 8017bfa:	686c      	ldr	r4, [r5, #4]
 8017bfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c00:	b17b      	cbz	r3, 8017c22 <_fflush_r+0x42>
 8017c02:	4621      	mov	r1, r4
 8017c04:	4628      	mov	r0, r5
 8017c06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017c0a:	f7ff bf63 	b.w	8017ad4 <__sflush_r>
 8017c0e:	4b07      	ldr	r3, [pc, #28]	; (8017c2c <_fflush_r+0x4c>)
 8017c10:	429c      	cmp	r4, r3
 8017c12:	d101      	bne.n	8017c18 <_fflush_r+0x38>
 8017c14:	68ac      	ldr	r4, [r5, #8]
 8017c16:	e7f1      	b.n	8017bfc <_fflush_r+0x1c>
 8017c18:	4b05      	ldr	r3, [pc, #20]	; (8017c30 <_fflush_r+0x50>)
 8017c1a:	429c      	cmp	r4, r3
 8017c1c:	bf08      	it	eq
 8017c1e:	68ec      	ldreq	r4, [r5, #12]
 8017c20:	e7ec      	b.n	8017bfc <_fflush_r+0x1c>
 8017c22:	2000      	movs	r0, #0
 8017c24:	bd38      	pop	{r3, r4, r5, pc}
 8017c26:	bf00      	nop
 8017c28:	0801faec 	.word	0x0801faec
 8017c2c:	0801fb0c 	.word	0x0801fb0c
 8017c30:	0801facc 	.word	0x0801facc

08017c34 <_lseek_r>:
 8017c34:	b538      	push	{r3, r4, r5, lr}
 8017c36:	4c07      	ldr	r4, [pc, #28]	; (8017c54 <_lseek_r+0x20>)
 8017c38:	4605      	mov	r5, r0
 8017c3a:	4608      	mov	r0, r1
 8017c3c:	4611      	mov	r1, r2
 8017c3e:	2200      	movs	r2, #0
 8017c40:	6022      	str	r2, [r4, #0]
 8017c42:	461a      	mov	r2, r3
 8017c44:	f7ea f978 	bl	8001f38 <_lseek>
 8017c48:	1c43      	adds	r3, r0, #1
 8017c4a:	d102      	bne.n	8017c52 <_lseek_r+0x1e>
 8017c4c:	6823      	ldr	r3, [r4, #0]
 8017c4e:	b103      	cbz	r3, 8017c52 <_lseek_r+0x1e>
 8017c50:	602b      	str	r3, [r5, #0]
 8017c52:	bd38      	pop	{r3, r4, r5, pc}
 8017c54:	20010ebc 	.word	0x20010ebc

08017c58 <__swhatbuf_r>:
 8017c58:	b570      	push	{r4, r5, r6, lr}
 8017c5a:	460e      	mov	r6, r1
 8017c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c60:	2900      	cmp	r1, #0
 8017c62:	b096      	sub	sp, #88	; 0x58
 8017c64:	4614      	mov	r4, r2
 8017c66:	461d      	mov	r5, r3
 8017c68:	da07      	bge.n	8017c7a <__swhatbuf_r+0x22>
 8017c6a:	2300      	movs	r3, #0
 8017c6c:	602b      	str	r3, [r5, #0]
 8017c6e:	89b3      	ldrh	r3, [r6, #12]
 8017c70:	061a      	lsls	r2, r3, #24
 8017c72:	d410      	bmi.n	8017c96 <__swhatbuf_r+0x3e>
 8017c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017c78:	e00e      	b.n	8017c98 <__swhatbuf_r+0x40>
 8017c7a:	466a      	mov	r2, sp
 8017c7c:	f000 f864 	bl	8017d48 <_fstat_r>
 8017c80:	2800      	cmp	r0, #0
 8017c82:	dbf2      	blt.n	8017c6a <__swhatbuf_r+0x12>
 8017c84:	9a01      	ldr	r2, [sp, #4]
 8017c86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017c8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017c8e:	425a      	negs	r2, r3
 8017c90:	415a      	adcs	r2, r3
 8017c92:	602a      	str	r2, [r5, #0]
 8017c94:	e7ee      	b.n	8017c74 <__swhatbuf_r+0x1c>
 8017c96:	2340      	movs	r3, #64	; 0x40
 8017c98:	2000      	movs	r0, #0
 8017c9a:	6023      	str	r3, [r4, #0]
 8017c9c:	b016      	add	sp, #88	; 0x58
 8017c9e:	bd70      	pop	{r4, r5, r6, pc}

08017ca0 <__smakebuf_r>:
 8017ca0:	898b      	ldrh	r3, [r1, #12]
 8017ca2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017ca4:	079d      	lsls	r5, r3, #30
 8017ca6:	4606      	mov	r6, r0
 8017ca8:	460c      	mov	r4, r1
 8017caa:	d507      	bpl.n	8017cbc <__smakebuf_r+0x1c>
 8017cac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017cb0:	6023      	str	r3, [r4, #0]
 8017cb2:	6123      	str	r3, [r4, #16]
 8017cb4:	2301      	movs	r3, #1
 8017cb6:	6163      	str	r3, [r4, #20]
 8017cb8:	b002      	add	sp, #8
 8017cba:	bd70      	pop	{r4, r5, r6, pc}
 8017cbc:	ab01      	add	r3, sp, #4
 8017cbe:	466a      	mov	r2, sp
 8017cc0:	f7ff ffca 	bl	8017c58 <__swhatbuf_r>
 8017cc4:	9900      	ldr	r1, [sp, #0]
 8017cc6:	4605      	mov	r5, r0
 8017cc8:	4630      	mov	r0, r6
 8017cca:	f7ff faab 	bl	8017224 <_malloc_r>
 8017cce:	b948      	cbnz	r0, 8017ce4 <__smakebuf_r+0x44>
 8017cd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017cd4:	059a      	lsls	r2, r3, #22
 8017cd6:	d4ef      	bmi.n	8017cb8 <__smakebuf_r+0x18>
 8017cd8:	f023 0303 	bic.w	r3, r3, #3
 8017cdc:	f043 0302 	orr.w	r3, r3, #2
 8017ce0:	81a3      	strh	r3, [r4, #12]
 8017ce2:	e7e3      	b.n	8017cac <__smakebuf_r+0xc>
 8017ce4:	4b0d      	ldr	r3, [pc, #52]	; (8017d1c <__smakebuf_r+0x7c>)
 8017ce6:	62b3      	str	r3, [r6, #40]	; 0x28
 8017ce8:	89a3      	ldrh	r3, [r4, #12]
 8017cea:	6020      	str	r0, [r4, #0]
 8017cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017cf0:	81a3      	strh	r3, [r4, #12]
 8017cf2:	9b00      	ldr	r3, [sp, #0]
 8017cf4:	6163      	str	r3, [r4, #20]
 8017cf6:	9b01      	ldr	r3, [sp, #4]
 8017cf8:	6120      	str	r0, [r4, #16]
 8017cfa:	b15b      	cbz	r3, 8017d14 <__smakebuf_r+0x74>
 8017cfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017d00:	4630      	mov	r0, r6
 8017d02:	f000 f833 	bl	8017d6c <_isatty_r>
 8017d06:	b128      	cbz	r0, 8017d14 <__smakebuf_r+0x74>
 8017d08:	89a3      	ldrh	r3, [r4, #12]
 8017d0a:	f023 0303 	bic.w	r3, r3, #3
 8017d0e:	f043 0301 	orr.w	r3, r3, #1
 8017d12:	81a3      	strh	r3, [r4, #12]
 8017d14:	89a3      	ldrh	r3, [r4, #12]
 8017d16:	431d      	orrs	r5, r3
 8017d18:	81a5      	strh	r5, [r4, #12]
 8017d1a:	e7cd      	b.n	8017cb8 <__smakebuf_r+0x18>
 8017d1c:	0801702d 	.word	0x0801702d

08017d20 <__malloc_lock>:
 8017d20:	4770      	bx	lr

08017d22 <__malloc_unlock>:
 8017d22:	4770      	bx	lr

08017d24 <_read_r>:
 8017d24:	b538      	push	{r3, r4, r5, lr}
 8017d26:	4c07      	ldr	r4, [pc, #28]	; (8017d44 <_read_r+0x20>)
 8017d28:	4605      	mov	r5, r0
 8017d2a:	4608      	mov	r0, r1
 8017d2c:	4611      	mov	r1, r2
 8017d2e:	2200      	movs	r2, #0
 8017d30:	6022      	str	r2, [r4, #0]
 8017d32:	461a      	mov	r2, r3
 8017d34:	f7ea f8a0 	bl	8001e78 <_read>
 8017d38:	1c43      	adds	r3, r0, #1
 8017d3a:	d102      	bne.n	8017d42 <_read_r+0x1e>
 8017d3c:	6823      	ldr	r3, [r4, #0]
 8017d3e:	b103      	cbz	r3, 8017d42 <_read_r+0x1e>
 8017d40:	602b      	str	r3, [r5, #0]
 8017d42:	bd38      	pop	{r3, r4, r5, pc}
 8017d44:	20010ebc 	.word	0x20010ebc

08017d48 <_fstat_r>:
 8017d48:	b538      	push	{r3, r4, r5, lr}
 8017d4a:	4c07      	ldr	r4, [pc, #28]	; (8017d68 <_fstat_r+0x20>)
 8017d4c:	2300      	movs	r3, #0
 8017d4e:	4605      	mov	r5, r0
 8017d50:	4608      	mov	r0, r1
 8017d52:	4611      	mov	r1, r2
 8017d54:	6023      	str	r3, [r4, #0]
 8017d56:	f7ea f8d4 	bl	8001f02 <_fstat>
 8017d5a:	1c43      	adds	r3, r0, #1
 8017d5c:	d102      	bne.n	8017d64 <_fstat_r+0x1c>
 8017d5e:	6823      	ldr	r3, [r4, #0]
 8017d60:	b103      	cbz	r3, 8017d64 <_fstat_r+0x1c>
 8017d62:	602b      	str	r3, [r5, #0]
 8017d64:	bd38      	pop	{r3, r4, r5, pc}
 8017d66:	bf00      	nop
 8017d68:	20010ebc 	.word	0x20010ebc

08017d6c <_isatty_r>:
 8017d6c:	b538      	push	{r3, r4, r5, lr}
 8017d6e:	4c06      	ldr	r4, [pc, #24]	; (8017d88 <_isatty_r+0x1c>)
 8017d70:	2300      	movs	r3, #0
 8017d72:	4605      	mov	r5, r0
 8017d74:	4608      	mov	r0, r1
 8017d76:	6023      	str	r3, [r4, #0]
 8017d78:	f7ea f8d3 	bl	8001f22 <_isatty>
 8017d7c:	1c43      	adds	r3, r0, #1
 8017d7e:	d102      	bne.n	8017d86 <_isatty_r+0x1a>
 8017d80:	6823      	ldr	r3, [r4, #0]
 8017d82:	b103      	cbz	r3, 8017d86 <_isatty_r+0x1a>
 8017d84:	602b      	str	r3, [r5, #0]
 8017d86:	bd38      	pop	{r3, r4, r5, pc}
 8017d88:	20010ebc 	.word	0x20010ebc

08017d8c <_init>:
 8017d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d8e:	bf00      	nop
 8017d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017d92:	bc08      	pop	{r3}
 8017d94:	469e      	mov	lr, r3
 8017d96:	4770      	bx	lr

08017d98 <_fini>:
 8017d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d9a:	bf00      	nop
 8017d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017d9e:	bc08      	pop	{r3}
 8017da0:	469e      	mov	lr, r3
 8017da2:	4770      	bx	lr
